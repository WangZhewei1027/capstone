{
    "id": "msg_01KUKzTChQnDYW2pEywKaJYg",
    "model": "claude-sonnet-4-20250514",
    "object": "chat.completion",
    "created": 1758653999,
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eBubble Sort Visualization\u003c/title\u003e\n    \u003cstyle\u003e\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        h1 {\n            text-align: center;\n            color: #333;\n        }\n        .controls {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            margin: 5px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        button:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n        }\n        .array-container {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 300px;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 40px;\n            margin: 2px;\n            background: #007bff;\n            border-radius: 5px 5px 0 0;\n            display: flex;\n            align-items: flex-end;\n            justify-content: center;\n            color: white;\n            font-weight: bold;\n            transition: all 0.3s ease;\n            position: relative;\n        }\n        .bar.comparing {\n            background: #ffc107;\n        }\n        .bar.swapping {\n            background: #dc3545;\n        }\n        .bar.sorted {\n            background: #28a745;\n        }\n        .stats {\n            text-align: center;\n            margin-top: 20px;\n        }\n        .stat-item {\n            display: inline-block;\n            margin: 0 15px;\n            padding: 10px;\n            background: #e9ecef;\n            border-radius: 5px;\n        }\n        .code-section {\n            margin-top: 30px;\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 5px;\n            border-left: 4px solid #007bff;\n        }\n        .code-section h3 {\n            margin-top: 0;\n        }\n        pre {\n            background: #2d3748;\n            color: #e2e8f0;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003ch1\u003eBubble Sort Visualization\u003c/h1\u003e\n        \n        \u003cdiv class=\"controls\"\u003e\n            \u003cbutton onclick=\"generateNewArray()\"\u003eGenerate New Array\u003c/button\u003e\n            \u003cbutton onclick=\"startSort()\" id=\"sortBtn\"\u003eStart Sorting\u003c/button\u003e\n            \u003cbutton onclick=\"resetArray()\" id=\"resetBtn\"\u003eReset\u003c/button\u003e\n            \u003clabel for=\"speed\"\u003eSpeed: \u003c/label\u003e\n            \u003cinput type=\"range\" id=\"speed\" min=\"1\" max=\"10\" value=\"5\" onchange=\"updateSpeed()\"\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"array-container\" id=\"arrayContainer\"\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"stats\"\u003e\n            \u003cdiv class=\"stat-item\"\u003e\n                \u003cstrong\u003eComparisons:\u003c/strong\u003e \u003cspan id=\"comparisons\"\u003e0\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"stat-item\"\u003e\n                \u003cstrong\u003eSwaps:\u003c/strong\u003e \u003cspan id=\"swaps\"\u003e0\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"stat-item\"\u003e\n                \u003cstrong\u003ePass:\u003c/strong\u003e \u003cspan id=\"pass\"\u003e0\u003c/span\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"code-section\"\u003e\n            \u003ch3\u003eBubble Sort Algorithm\u003c/h3\u003e\n            \u003cpre\u003e\u003ccode\u003efunction bubbleSort(arr) {\n    for (let i = 0; i \u003c arr.length - 1; i++) {\n        for (let j = 0; j \u003c arr.length - i - 1; j++) {\n            if (arr[j] \u003e arr[j + 1]) {\n                // Swap elements\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            }\n        }\n    }\n    return arr;\n}\u003c/code\u003e\u003c/pre\u003e\n            \u003cp\u003e\u003cstrong\u003eTime Complexity:\u003c/strong\u003e O(nÂ²) in worst and average case, O(n) in best case\u003c/p\u003e\n            \u003cp\u003e\u003cstrong\u003eSpace Complexity:\u003c/strong\u003e O(1)\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript\u003e\n        let array = [];\n        let isRunning = false;\n        let comparisons = 0;\n        let swaps = 0;\n        let pass = 0;\n        let speed = 500;\n\n        function generateRandomArray(size = 10) {\n            array = [];\n            for (let i = 0; i \u003c size; i++) {\n                array.push(Math.floor(Math.random() * 200) + 10);\n            }\n            return array;\n        }\n\n        function generateNewArray() {\n            if (isRunning) return;\n            generateRandomArray();\n            resetStats();\n            renderArray();\n        }\n\n        function renderArray() {\n            const container = document.getElementById('arrayContainer');\n            container.innerHTML = '';\n            \n            array.forEach((value, index) =\u003e {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value}px`;\n                bar.textContent = value;\n                bar.id = `bar-${index}`;\n                container.appendChild(bar);\n            });\n        }\n\n        function resetStats() {\n            comparisons = 0;\n            swaps = 0;\n            pass = 0;\n            updateStats();\n        }\n\n        function updateStats() {\n            document.getElementById('comparisons').textContent = comparisons;\n            document.getElementById('swaps').textContent = swaps;\n            document.getElementById('pass').textContent = pass;\n        }\n\n        function updateSpeed() {\n            const slider = document.getElementById('speed');\n            speed = 1100 - (slider.value * 100);\n        }\n\n        async function sleep(ms) {\n            return new Promise(resolve =\u003e setTimeout(resolve, ms));\n        }\n\n        async function highlightBars(indices, className) {\n            indices.forEach(i =\u003e {\n                const bar = document.getElementById(`bar-${i}`);\n                if (bar) bar.className = `bar ${className}`;\n            });\n            await sleep(speed);\n        }\n\n        async function resetBarColors() {\n            for (let i = 0; i \u003c array.length; i++) {\n                const bar = document.getElementById(`bar-${i}`);\n                if (bar) bar.className = 'bar';\n            }\n        }\n\n        async function swapBars(i, j) {\n            const bar1 = document.getElementById(`bar-${i}`);\n            const bar2 = document.getElementById(`bar-${j}`);\n            \n            if (!bar1 || !bar2) return;\n\n            // Highlight bars being swapped\n            bar1.className = 'bar swapping';\n            bar2.className = 'bar swapping';\n            \n            await sleep(speed);\n            \n            // Swap array values\n            [array[i], array[j]] = [array[j], array[i]];\n            \n            // Update bar heights and text\n            bar1.style.height = `${array[i]}px`;\n            bar1.textContent = array[i];\n            bar2.style.height = `${array[j]}px`;\n            bar2.textContent = array[j];\n            \n            swaps++;\n            updateStats();\n        }\n\n        async function bubbleSort() {\n            isRunning = true;\n            document.getElementById('sortBtn').disabled = true;\n            \n            const n = array.length;\n            \n            for (let i = 0; i \u003c n - 1; i++) {\n                pass = i + 1;\n                updateStats();\n                \n                for (let j = 0; j \u003c n - i - 1; j++) {\n                    if (!isRunning) return;\n                    \n                    // Highlight bars being compared\n                    await highlightBars([j, j + 1], 'comparing');\n                    \n                    comparisons++;\n                    updateStats();\n                    \n                    if (array[j] \u003e array[j + 1]) {\n                        await swapBars(j, j + 1);\n                    }\n                    \n                    // Reset colors\n                    await resetBarColors();\n                    \n                    // Mark sorted elements\n                    for (let k = n - 1; k \u003e= n - i; k--) {\n                        const bar = document.getElementById(`bar-${k}`);\n                        if (bar) bar.className = 'bar sorted';\n                    }\n                }\n                \n                // Mark the newly sorted element\n                const sortedBar = document.getElementById(`bar-${n - i - 1}`);\n                if (sortedBar) sortedBar.className = 'bar sorted';\n            }\n            \n            // Mark the first element as sorted\n            const firstBar = document.getElementById('bar-0');\n            if (firstBar) firstBar.className = 'bar sorted';\n            \n            isRunning = false;\n            document.getElementById('sortBtn').disabled = false;\n        }\n\n        function startSort() {\n            if (!isRunning \u0026\u0026 array.length \u003e 0) {\n                resetStats();\n                bubbleSort();\n            }\n        }\n\n        function resetArray() {\n            if (isRunning) {\n                isRunning = false;\n            }\n            resetStats();\n            renderArray();\n            document.getElementById('sortBtn').disabled = false;\n        }\n\n        // Initialize\n        generateNewArray();\n        updateSpeed();\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```"
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 45,
        "completion_tokens": 2620,
        "total_tokens": 2665,
        "prompt_tokens_details": {
            "cached_tokens": 0,
            "text_tokens": 0,
            "audio_tokens": 0,
            "image_tokens": 0
        },
        "completion_tokens_details": {
            "text_tokens": 0,
            "audio_tokens": 0,
            "reasoning_tokens": 0
        },
        "input_tokens": 0,
        "output_tokens": 0,
        "input_tokens_details": null
    }
}