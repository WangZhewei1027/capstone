[
  {
    "id": "571dc870-98a9-11f0-80eb-5318bf930f60",
    "model": "gpt-4o-mini",
    "timestamp": "2025-09-23T18:15:52.696Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 0;\n            padding: 20px;\n        }\n        #arrayContainer {\n            display: flex;\n            margin: 20px;\n        }\n        .bar {\n            width: 30px;\n            margin: 2px;\n            background-color: teal;\n            display: inline-block;\n            transition: height 0.3s ease;\n        }\n        button {\n            margin: 10px;\n            padding: 10px 15px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n<div id=\"arrayContainer\"></div>\n<button onclick=\"startBubbleSort()\">Start Bubble Sort</button>\n\n<script>\n    const arrayContainer = document.getElementById('arrayContainer');\n    const array = [64, 34, 25, 12, 22, 11, 90];\n\n    function createBars(arr) {\n        arrayContainer.innerHTML = '';\n        arr.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = value * 4 + 'px'; // Scale the height for visibility\n            arrayContainer.appendChild(bar);\n        });\n    }\n    \n    function startBubbleSort() {\n        bubbleSort(array.slice());\n    }\n\n    async function bubbleSort(arr) {\n        const bars = document.querySelectorAll('.bar');\n        let n = arr.length;\n\n        for (let i = 0; i < n - 1; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                // Change color of the bars being compared\n                bars[j].style.backgroundColor = 'red';\n                bars[j + 1].style.backgroundColor = 'red';\n\n                // Wait for a moment to visualize the comparison\n                await new Promise(resolve => setTimeout(resolve, 300));\n\n                // Compare and swap if needed\n                if (arr[j] > arr[j + 1]) {\n                    let temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n\n                    // Update the visual representation\n                    bars[j].style.height = arr[j] * 4 + 'px';\n                    bars[j + 1].style.height = arr[j + 1] * 4 + 'px';\n                }\n\n                // Reset color after comparison\n                bars[j].style.backgroundColor = 'teal';\n                bars[j + 1].style.backgroundColor = 'teal';\n            }\n        }\n    }\n\n    // Initial bar creation\n    createBars(array);\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": 2,
      "notes": "看着有点接近，但是交互性和视觉效果都很差"
    }
  },
  {
    "id": "7cd93f80-98aa-11f0-ab4c-f184c581df32",
    "model": "gpt-5-mini",
    "timestamp": "2025-09-23T18:24:05.496Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Bubble Sort Visualizer</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n  <style>\n    :root{\n      --bg:#0f1724;\n      --panel:#0b1320;\n      --accent:#06b6d4;\n      --muted:#94a3b8;\n      --good:#16a34a;\n      --bad:#ef4444;\n      --compare:#f59e0b;\n      --bar-bg:#0b1220;\n    }\n    html,body{height:100%;margin:0;font-family:Inter,ui-sans-serif,system-ui,-apple-system,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial;}\n    body{background:linear-gradient(180deg,var(--bg),#07101a);color:#e6eef8;display:flex;flex-direction:column;align-items:stretch;padding:18px;box-sizing:border-box;}\n    h1{margin:0 0 8px 0;font-size:20px;}\n    .app{max-width:1100px;margin:0 auto;display:grid;grid-template-columns:1fr 360px;gap:18px;align-items:start;}\n    .panel{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.0));border:1px solid rgba(255,255,255,0.04);padding:14px;border-radius:12px;box-shadow: 0 6px 18px rgba(2,6,23,0.6);}\n    .controls{display:flex;flex-direction:column;gap:10px;}\n    .row{display:flex;gap:8px;align-items:center;}\n    label{color:var(--muted);font-size:13px;}\n    button{background:transparent;border:1px solid rgba(255,255,255,0.06);color:inherit;padding:8px 10px;border-radius:8px;cursor:pointer;font-weight:600;}\n    button.primary{background:linear-gradient(90deg,var(--accent),#62d6d9);color:#042028;border:none;box-shadow:0 6px 18px rgba(6,182,212,0.12);}\n    button:disabled{opacity:0.45;cursor:default;}\n    .controls .row > *{flex:1;}\n    .vis{height:420px;display:flex;flex-direction:column;gap:12px;}\n    .bars{background:var(--bar-bg);flex:1;border-radius:8px;padding:12px;display:flex;align-items:flex-end;gap:6px;overflow:hidden;}\n    .bar{flex:1 1 auto;display:flex;align-items:flex-end;justify-content:center;border-radius:6px 6px 2px 2px;transition:height 150ms linear, background 150ms linear, transform 150ms;position:relative;}\n    .bar .val{font-size:11px;color:rgba(255,255,255,0.9);padding-bottom:6px;text-shadow:0 1px 0 rgba(0,0,0,0.6);}\n    .stats{display:flex;gap:10px;flex-wrap:wrap;color:var(--muted);font-size:13px;margin-top:6px;}\n    .badge{background:rgba(255,255,255,0.03);padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.02);min-width:88px;text-align:center;}\n    .pseudocode{font-family:monospace;background:rgba(255,255,255,0.02);padding:10px;border-radius:8px;color:var(--muted);font-size:13px;line-height:1.5;white-space:pre;}\n    .highlight{background:rgba(255,255,255,0.04);color:#fff;padding:2px 4px;border-radius:4px;}\n    .footer{font-size:13px;color:var(--muted);margin-top:8px;}\n    .small{font-size:12px;color:var(--muted);}\n    .top-controls{display:flex;gap:8px;align-items:center;flex-wrap:wrap;}\n    input[type=\"range\"]{width:100%;}\n    .center{display:flex;justify-content:center;align-items:center;gap:8px;}\n    .legend{display:flex;gap:8px;align-items:center;flex-wrap:wrap;}\n    .legend .item{display:flex;gap:6px;align-items:center;color:var(--muted);font-size:13px;}\n    .color-swatch{width:14px;height:14px;border-radius:4px;}\n    /* Colors for states */\n    .bar.normal{background:linear-gradient(180deg,#0f2540,#0b1730);}\n    .bar.compare{background:linear-gradient(180deg,var(--compare), #fab95d); transform:translateY(-4px);}\n    .bar.swap{background:linear-gradient(180deg,var(--bad), #ff7b7b); transform:translateY(-6px);}\n    .bar.sorted{background:linear-gradient(180deg,var(--good), #7ee7a8);}\n    @media (max-width:980px){\n      .app{grid-template-columns:1fr; padding-bottom:40px;}\n      .panel{padding:12px;}\n    }\n  </style>\n</head>\n<body>\n  <div class=\"app\" role=\"application\" aria-label=\"Bubble sort visualizer\">\n    <div class=\"panel\">\n      <h1>Bubble Sort Visualizer</h1>\n      <div class=\"vis\" aria-live=\"polite\">\n        <div class=\"bars\" id=\"bars\" role=\"list\" aria-label=\"Array bars\"></div>\n        <div class=\"stats\" id=\"stats\">\n          <div class=\"badge\">Comparisons: <span id=\"comp\">0</span></div>\n          <div class=\"badge\">Swaps: <span id=\"swaps\">0</span></div>\n          <div class=\"badge\">Pass: <span id=\"pass\">0</span></div>\n          <div class=\"badge\">i / n: <span id=\"indices\">-</span></div>\n          <div class=\"badge\">Status: <span id=\"status\">Idle</span></div>\n        </div>\n      </div>\n      <div class=\"footer small\" style=\"margin-top:12px;\">\n        Complexity: Average/Worst O(n²), Best O(n) with early-exit optimization. Bubble sort repeatedly steps through the list, compares adjacent items and swaps them if out of order, \"bubbling\" largest/smallest to the end.\n      </div>\n    </div>\n\n    <div class=\"panel\">\n      <div class=\"controls\">\n        <div class=\"top-controls\">\n          <button id=\"randomBtn\" class=\"\">Randomize</button>\n          <button id=\"startBtn\" class=\"primary\">Start</button>\n          <button id=\"stepBtn\">Step</button>\n          <button id=\"pauseBtn\" disabled>Pause</button>\n          <button id=\"resetBtn\">Reset</button>\n        </div>\n\n        <div class=\"row\">\n          <label for=\"size\">Array size: <span id=\"sizeVal\">20</span></label>\n          <input id=\"size\" type=\"range\" min=\"5\" max=\"80\" value=\"20\">\n        </div>\n\n        <div class=\"row\">\n          <label for=\"speed\">Speed (ms delay): <span id=\"speedVal\">150</span></label>\n          <input id=\"speed\" type=\"range\" min=\"10\" max=\"600\" value=\"150\">\n        </div>\n\n        <div class=\"row\">\n          <label for=\"order\">Order</label>\n          <select id=\"order\" aria-label=\"Sort order\">\n            <option value=\"asc\">Ascending (small → left)</option>\n            <option value=\"desc\">Descending (large → left)</option>\n          </select>\n        </div>\n\n        <div class=\"row legend\">\n          <div class=\"item\"><span class=\"color-swatch\" style=\"background:linear-gradient(180deg,#0f2540,#0b1730)\"></span> Normal</div>\n          <div class=\"item\"><span class=\"color-swatch\" style=\"background:linear-gradient(180deg,var(--compare), #fab95d)\"></span> Comparing</div>\n          <div class=\"item\"><span class=\"color-swatch\" style=\"background:linear-gradient(180deg,var(--bad), #ff7b7b)\"></span> Swapping</div>\n          <div class=\"item\"><span class=\"color-swatch\" style=\"background:linear-gradient(180deg,var(--good), #7ee7a8)\"></span> Sorted</div>\n        </div>\n\n        <div style=\"margin-top:8px;\">\n          <div class=\"pseudocode\" id=\"pseudocode\" aria-hidden=\"true\">\ni = 0\nwhile i < n-1:\n  swapped = false\n  for j from 0 to n-2-i:\n    compare A[j] and A[j+1]\n    if out of order:\n      swap A[j] and A[j+1]\n      swapped = true\n  if not swapped:\n    break\n  i = i + 1\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Bubble Sort Visualizer\n    (function(){\n      const barsEl = document.getElementById('bars');\n      const compEl = document.getElementById('comp');\n      const swapsEl = document.getElementById('swaps');\n      const passEl = document.getElementById('pass');\n      const indicesEl = document.getElementById('indices');\n      const statusEl = document.getElementById('status');\n\n      const randomBtn = document.getElementById('randomBtn');\n      const startBtn = document.getElementById('startBtn');\n      const stepBtn = document.getElementById('stepBtn');\n      const pauseBtn = document.getElementById('pauseBtn');\n      const resetBtn = document.getElementById('resetBtn');\n\n      const sizeRange = document.getElementById('size');\n      const sizeVal = document.getElementById('sizeVal');\n      const speedRange = document.getElementById('speed');\n      const speedVal = document.getElementById('speedVal');\n      const orderSelect = document.getElementById('order');\n\n      let array = [];\n      let initialArray = [];\n      let bars = [];\n      let comparisons = 0;\n      let swaps = 0;\n      let pass = 0;\n\n      let gen = null;\n      let playing = false;\n      let autoTimer = null;\n\n      function randInt(min, max){ return Math.floor(Math.random()*(max-min+1))+min; }\n\n      function createArray(n){\n        const arr = [];\n        // spread values so bar heights vary\n        for(let i=0;i<n;i++) arr.push(randInt(10, 100));\n        return arr;\n      }\n\n      function renderArray(arr){\n        barsEl.innerHTML = '';\n        bars = [];\n        const max = Math.max(...arr, 1);\n        for(let i=0;i<arr.length;i++){\n          const el = document.createElement('div');\n          el.className = 'bar normal';\n          el.style.height = (arr[i] / max * 100) + '%';\n          el.setAttribute('role','listitem');\n          el.setAttribute('aria-label','Value '+arr[i]);\n          const label = document.createElement('div');\n          label.className = 'val';\n          label.textContent = arr[i];\n          el.appendChild(label);\n          barsEl.appendChild(el);\n          bars.push(el);\n        }\n      }\n\n      function updateStats(){\n        compEl.textContent = comparisons;\n        swapsEl.textContent = swaps;\n        passEl.textContent = pass;\n      }\n\n      function resetHighlights(){\n        bars.forEach(b=>{ b.className='bar normal'; });\n      }\n\n      function markCompare(i,j){\n        resetHighlights();\n        if(bars[i]) bars[i].className='bar compare';\n        if(bars[j]) bars[j].className='bar compare';\n        indicesEl.textContent = i + ' / ' + j;\n      }\n      function markSwap(i,j){\n        if(bars[i]) bars[i].className='bar swap';\n        if(bars[j]) bars[j].className='bar swap';\n        indicesEl.textContent = i + ' / ' + j;\n      }\n      function markSorted(index){\n        if(bars[index]) bars[index].className='bar sorted';\n      }\n\n      // Bubble sort generator that yields actions for visualization\n      function* bubbleGen(arr, ascending=true){\n        const n = arr.length;\n        let i = 0;\n        while(i < n-1){\n          let swapped = false;\n          yield {type:'pass', pass:i+1};\n          for(let j=0;j<n-1-i;j++){\n            yield {type:'compare', i:j, j:j+1};\n            if( (ascending && arr[j] > arr[j+1]) || (!ascending && arr[j] < arr[j+1]) ){\n              // swap\n              [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n              yield {type:'swap', i:j, j:j+1};\n              swapped = true;\n            }\n          }\n          // after each pass, the last element in the unsorted portion is sorted\n          yield {type:'sortedIndex', index: n-1-i};\n          if(!swapped){\n            // early exit\n            yield {type:'done', early:true};\n            return;\n          }\n          i++;\n        }\n        // mark remaining as sorted\n        for(let k=0;k<n;k++){\n          yield {type:'sortedIndex', index:k};\n        }\n        yield {type:'done', early:false};\n      }\n\n      function applyAction(action){\n        switch(action.type){\n          case 'pass':\n            pass = action.pass;\n            statusEl.textContent = 'Running pass ' + pass;\n            break;\n          case 'compare':\n            comparisons++;\n            markCompare(action.i, action.j);\n            break;\n          case 'swap':\n            swaps++;\n            // swap heights and labels in DOM to reflect array change\n            const i = action.i, j = action.j;\n            // swap style height and textContent\n            const hi = bars[i].style.height;\n            const hj = bars[j].style.height;\n            const vi = bars[i].firstChild.textContent;\n            const vj = bars[j].firstChild.textContent;\n            bars[i].style.height = hj;\n            bars[j].style.height = hi;\n            bars[i].firstChild.textContent = vj;\n            bars[j].firstChild.textContent = vi;\n            markSwap(i,j);\n            break;\n          case 'sortedIndex':\n            markSorted(action.index);\n            break;\n          case 'done':\n            statusEl.textContent = action.early ? 'Done (early exit)' : 'Done';\n            resetControlsAfterFinish();\n            break;\n        }\n        updateStats();\n      }\n\n      function startAutoPlay(){\n        if(!gen) return;\n        playing = true;\n        startBtn.disabled = true;\n        pauseBtn.disabled = false;\n        stepBtn.disabled = true;\n        randomBtn.disabled = true;\n        sizeRange.disabled = true;\n        orderSelect.disabled = true;\n        statusEl.textContent = 'Playing';\n        const runStep = ()=>{\n          const res = gen.next();\n          if(res.done){\n            playing = false;\n            clearInterval(autoTimer);\n            resetControlsAfterFinish();\n            return;\n          }\n          applyAction(res.value);\n        };\n        // run first step immediately to be responsive\n        runStep();\n        autoTimer = setInterval(()=>{\n          // if paused externally, skip\n          if(!playing){ clearInterval(autoTimer); return; }\n          const res = gen.next();\n          if(res.done){\n            playing = false;\n            clearInterval(autoTimer);\n            resetControlsAfterFinish();\n            return;\n          }\n          applyAction(res.value);\n        }, Number(speedRange.value));\n      }\n\n      function resetControlsAfterFinish(){\n        startBtn.disabled = false;\n        pauseBtn.disabled = true;\n        stepBtn.disabled = false;\n        randomBtn.disabled = false;\n        sizeRange.disabled = false;\n        orderSelect.disabled = false;\n      }\n\n      // Event handlers\n      sizeRange.addEventListener('input', ()=>{\n        sizeVal.textContent = sizeRange.value;\n      });\n\n      speedRange.addEventListener('input', ()=>{\n        speedVal.textContent = speedRange.value;\n        // if playing, restart interval with new speed\n        if(playing){\n          if(autoTimer) clearInterval(autoTimer);\n          startAutoPlay();\n        }\n      });\n\n      randomBtn.addEventListener('click', ()=>{\n        const n = Number(sizeRange.value);\n        array = createArray(n);\n        initialArray = array.slice();\n        comparisons = swaps = pass = 0;\n        gen = null;\n        playing = false;\n        if(autoTimer) clearInterval(autoTimer);\n        resetHighlights();\n        renderArray(array);\n        updateStats();\n        statusEl.textContent = 'Ready';\n        resetBtn.disabled = false;\n      });\n\n      startBtn.addEventListener('click', ()=>{\n        if(!gen){\n          // create a new generator on a copy of the current DOM state\n          // ensure array matches what's currently displayed\n          array = bars.map(b => Number(b.firstChild.textContent));\n          gen = bubbleGen(array, orderSelect.value === 'asc');\n        }\n        if(playing) return;\n        startAutoPlay();\n      });\n\n      pauseBtn.addEventListener('click', ()=>{\n        playing = false;\n        if(autoTimer) clearInterval(autoTimer);\n        startBtn.disabled = false;\n        pauseBtn.disabled = true;\n        stepBtn.disabled = false;\n        statusEl.textContent = 'Paused';\n      });\n\n      stepBtn.addEventListener('click', ()=>{\n        if(!gen){\n          array = bars.map(b => Number(b.firstChild.textContent));\n          gen = bubbleGen(array, orderSelect.value === 'asc');\n        }\n        const res = gen.next();\n        if(res.done){\n          resetControlsAfterFinish();\n          return;\n        }\n        applyAction(res.value);\n      });\n\n      resetBtn.addEventListener('click', ()=>{\n        // reset to initial array before sorting\n        if(initialArray.length){\n          array = initialArray.slice();\n          renderArray(array);\n          comparisons = swaps = pass = 0;\n          updateStats();\n          gen = null;\n          playing = false;\n          if(autoTimer) clearInterval(autoTimer);\n          statusEl.textContent = 'Reset';\n        } else {\n          // otherwise randomize\n          randomBtn.click();\n        }\n      });\n\n      // Initialize\n      (function init(){\n        sizeVal.textContent = sizeRange.value;\n        speedVal.textContent = speedRange.value;\n        array = createArray(Number(sizeRange.value));\n        initialArray = array.slice();\n        renderArray(array);\n        updateStats();\n        statusEl.textContent = 'Ready';\n      })();\n\n      // Keyboard shortcuts (optional)\n      window.addEventListener('keydown', (e)=>{\n        if(e.key === ' ') { e.preventDefault(); if(!playing) startBtn.click(); else pauseBtn.click(); }\n        if(e.key === 's') stepBtn.click();\n        if(e.key === 'r') randomBtn.click();\n      });\n    })();\n  </script>\n</body>\n</html>",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": 5,
      "notes": "完美"
    }
  },
  {
    "id": "9a3a1fb0-98ad-11f0-9549-2f493c823853",
    "model": "gemini-2.5-pro",
    "timestamp": "2025-09-23T18:46:23.276Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort Visualization</title>\n    <style>\n        :root {\n            --bg-color: #1a1a2e;\n            --primary-color: #e94560;\n            --secondary-color: #16213e;\n            --accent-color: #0f3460;\n            --text-color: #dcdce6;\n            --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            \n            --bar-default-color: #53a8b6;\n            --bar-compare-color: #e94560;\n            --bar-swap-color: #ffc947;\n            --bar-sorted-color: #4caf50;\n            \n            --border-radius: 8px;\n            --shadow: 0 4px 12px rgba(0,0,0,0.3);\n        }\n\n        body {\n            font-family: var(--font-family);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            margin: 0;\n            padding: 1em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n        }\n\n        bubble-sort-visualizer {\n            width: 100%;\n            max-width: 1200px;\n            display: block;\n        }\n\n        .main-container {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5em;\n            background-color: var(--secondary-color);\n            padding: 2em;\n            border-radius: var(--border-radius);\n            box-shadow: var(--shadow);\n        }\n\n        h1 {\n            text-align: center;\n            color: var(--primary-color);\n            margin-top: 0;\n            font-size: 2.5em;\n            text-shadow: 0 0 10px var(--primary-color);\n        }\n\n        .visualization-area {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 400px;\n            padding: 1em;\n            background: var(--accent-color);\n            border-radius: var(--border-radius);\n            gap: 2px;\n            transition: all 0.3s ease;\n        }\n    </style>\n</head>\n<body>\n\n    <bubble-sort-visualizer></bubble-sort-visualizer>\n\n    <script>\n    // Utility function for delaying execution\n    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n    // Web Component: <array-bar>\n    class ArrayBar extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n            this.shadowRoot.innerHTML = `\n                <style>\n                    :host {\n                        display: inline-block;\n                        width: 100%;\n                        transition: height 0.2s ease, background-color 0.2s ease;\n                    }\n                    .bar {\n                        background-color: var(--bar-default-color);\n                        height: 100%;\n                        border-top-left-radius: 4px;\n                        border-top-right-radius: 4px;\n                    }\n                    :host([state=\"comparing\"]) .bar {\n                        background-color: var(--bar-compare-color);\n                    }\n                    :host([state=\"swapping\"]) .bar {\n                        background-color: var(--bar-swap-color);\n                    }\n                    :host([state=\"sorted\"]) .bar {\n                        background-color: var(--bar-sorted-color);\n                    }\n                </style>\n                <div class=\"bar\"></div>\n            `;\n        }\n\n        static get observedAttributes() {\n            return ['value', 'state'];\n        }\n\n        attributeChangedCallback(name, oldValue, newValue) {\n            if (name === 'value') {\n                this.style.height = `${newValue}%`;\n            } else if (name === 'state') {\n                this.shadowRoot.querySelector('.bar').className = 'bar'; // Reset\n            }\n        }\n    }\n    customElements.define('array-bar', ArrayBar);\n\n\n    // Web Component: <control-panel>\n    class ControlPanel extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n            this.shadowRoot.innerHTML = `\n                <style>\n                    .controls {\n                        display: flex;\n                        flex-wrap: wrap;\n                        gap: 1.5em;\n                        justify-content: center;\n                        align-items: center;\n                        padding: 1em;\n                        background: var(--accent-color);\n                        border-radius: var(--border-radius);\n                    }\n                    .control-group {\n                        display: flex;\n                        flex-direction: column;\n                        align-items: center;\n                        gap: 0.5em;\n                    }\n                    label {\n                        font-size: 0.9em;\n                        font-weight: bold;\n                    }\n                    button {\n                        background-color: var(--primary-color);\n                        color: var(--text-color);\n                        border: none;\n                        padding: 10px 20px;\n                        border-radius: var(--border-radius);\n                        cursor: pointer;\n                        font-weight: bold;\n                        transition: all 0.2s ease;\n                    }\n                    button:hover:not(:disabled) {\n                        transform: translateY(-2px);\n                        box-shadow: 0 2px 8px rgba(233, 69, 96, 0.5);\n                    }\n                    button:disabled {\n                        background-color: #555;\n                        cursor: not-allowed;\n                    }\n                    .button-group {\n                        display: flex;\n                        gap: 1em;\n                    }\n                    input[type=\"range\"] {\n                        -webkit-appearance: none;\n                        appearance: none;\n                        width: 150px;\n                        height: 8px;\n                        background: #3f51b5;\n                        outline: none;\n                        opacity: 0.7;\n                        transition: opacity .2s;\n                        border-radius: 4px;\n                    }\n                    input[type=\"range\"]:hover {\n                        opacity: 1;\n                    }\n                    input[type=\"range\"]::-webkit-slider-thumb {\n                        -webkit-appearance: none;\n                        appearance: none;\n                        width: 20px;\n                        height: 20px;\n                        background: var(--primary-color);\n                        cursor: pointer;\n                        border-radius: 50%;\n                    }\n                    input[type=\"range\"]::-moz-range-thumb {\n                        width: 20px;\n                        height: 20px;\n                        background: var(--primary-color);\n                        cursor: pointer;\n                        border-radius: 50%;\n                    }\n                </style>\n                <div class=\"controls\">\n                    <button id=\"new-array\">New Array</button>\n                    <div class=\"control-group\">\n                        <label for=\"size\">Array Size: <span id=\"size-value\">50</span></label>\n                        <input type=\"range\" id=\"size\" min=\"10\" max=\"100\" value=\"50\">\n                    </div>\n                    <div class=\"control-group\">\n                        <label for=\"speed\">Animation Speed: <span id=\"speed-value\">50</span></label>\n                        <input type=\"range\" id=\"speed\" min=\"1\" max=\"100\" value=\"50\">\n                    </div>\n                    <div class=\"button-group\">\n                        <button id=\"start\">Start Sort</button>\n                        <button id=\"pause\" disabled>Pause</button>\n                        <button id=\"reset\" disabled>Reset</button>\n                    </div>\n                </div>\n            `;\n\n            this._bindEvents();\n        }\n\n        _bindEvents() {\n            const dispatch = (eventName, detail) => {\n                this.dispatchEvent(new CustomEvent(eventName, { bubbles: true, composed: true, detail }));\n            };\n\n            this.shadowRoot.getElementById('new-array').addEventListener('click', () => dispatch('newarray'));\n            \n            const sizeSlider = this.shadowRoot.getElementById('size');\n            sizeSlider.addEventListener('input', (e) => {\n                this.shadowRoot.getElementById('size-value').textContent = e.target.value;\n            });\n            sizeSlider.addEventListener('change', (e) => dispatch('sizechange', { value: e.target.value }));\n            \n            const speedSlider = this.shadowRoot.getElementById('speed');\n            speedSlider.addEventListener('input', (e) => {\n                this.shadowRoot.getElementById('speed-value').textContent = e.target.value;\n                dispatch('speedchange', { value: e.target.value });\n            });\n\n            this.shadowRoot.getElementById('start').addEventListener('click', () => dispatch('start'));\n            this.shadowRoot.getElementById('pause').addEventListener('click', () => dispatch('pause'));\n            this.shadowRoot.getElementById('reset').addEventListener('click', () => dispatch('reset'));\n        }\n\n        setButtonState(state) {\n            const startBtn = this.shadowRoot.getElementById('start');\n            const pauseBtn = this.shadowRoot.getElementById('pause');\n            const resetBtn = this.shadowRoot.getElementById('reset');\n            const sizeSlider = this.shadowRoot.getElementById('size');\n            const newArrayBtn = this.shadowRoot.getElementById('new-array');\n\n            startBtn.disabled = true;\n            pauseBtn.disabled = true;\n            resetBtn.disabled = true;\n            sizeSlider.disabled = false;\n            newArrayBtn.disabled = false;\n            pauseBtn.textContent = 'Pause';\n\n\n            switch(state) {\n                case 'initial':\n                    startBtn.disabled = false;\n                    break;\n                case 'sorting':\n                    pauseBtn.disabled = false;\n                    resetBtn.disabled = false;\n                    sizeSlider.disabled = true;\n                    newArrayBtn.disabled = true;\n                    break;\n                case 'paused':\n                    pauseBtn.disabled = false;\n                    pauseBtn.textContent = 'Resume';\n                    resetBtn.disabled = false;\n                    break;\n                case 'finished':\n                    resetBtn.disabled = false;\n                    break;\n            }\n        }\n    }\n    customElements.define('control-panel', ControlPanel);\n\n\n    // Web Component: <info-panel>\n    class InfoPanel extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n            this.shadowRoot.innerHTML = `\n                <style>\n                    .info-container {\n                        display: grid;\n                        grid-template-columns: 1fr 1fr;\n                        gap: 1.5em;\n                        padding: 1em;\n                        background: var(--accent-color);\n                        border-radius: var(--border-radius);\n                    }\n                    .explanation, .code-display {\n                        padding: 1.5em;\n                        background-color: var(--secondary-color);\n                        border-radius: var(--border-radius);\n                    }\n                    h3 {\n                        margin-top: 0;\n                        color: var(--primary-color);\n                    }\n                    p {\n                        line-height: 1.6;\n                        margin: 0;\n                    }\n                    #status-message {\n                        font-weight: bold;\n                        min-height: 1.6em; /* Prevent layout shift */\n                    }\n                    pre {\n                        background-color: #111;\n                        padding: 1em;\n                        border-radius: var(--border-radius);\n                        overflow-x: auto;\n                    }\n                    code {\n                        font-family: 'Courier New', Courier, monospace;\n                        font-size: 0.95em;\n                    }\n                    .code-line {\n                        display: block;\n                        transition: background-color 0.3s;\n                        padding: 2px 8px;\n                        border-radius: 4px;\n                    }\n                    .highlight {\n                        background-color: rgba(233, 69, 96, 0.4);\n                    }\n                </style>\n                <div class=\"info-container\">\n                    <div class=\"explanation\">\n                        <h3>How Bubble Sort Works</h3>\n                        <p>Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.</p>\n                        <br>\n                        <p id=\"status-message\">Ready to sort. Press 'Start'.</p>\n                    </div>\n                    <div class=\"code-display\">\n                        <h3>Algorithm Pseudocode</h3>\n                        <pre><code>\n<span class=\"code-line\" data-line=\"1\"><b>function</b> bubbleSort(array) {</span>\n<span class=\"code-line\" data-line=\"2\">  <b>let</b> n = array.length;</span>\n<span class=\"code-line\" data-line=\"3\">  <b>for</b> (i = 0; i < n - 1; i++) {</span>\n<span class=\"code-line\" data-line=\"4\">    <b>for</b> (j = 0; j < n - i - 1; j++) {</span>\n<span class=\"code-line\" data-line=\"5\">      <b>if</b> (array[j] > array[j + 1]) {</span>\n<span class=\"code-line\" data-line=\"6\">        swap(array[j], array[j + 1]);</span>\n<span class=\"code-line\" data-line=\"7\">      }</span>\n<span class=\"code-line\" data-line=\"8\">    }</span>\n<span class=\"code-line\" data-line=\"9\">  }</span>\n<span class=\"code-line\" data-line=\"10\">}</span>\n                        </code></pre>\n                    </div>\n                </div>\n            `;\n        }\n\n        update({ message, line }) {\n            this.shadowRoot.getElementById('status-message').textContent = message;\n            \n            this.shadowRoot.querySelectorAll('.code-line').forEach(el => el.classList.remove('highlight'));\n            if (line) {\n                const lineEl = this.shadowRoot.querySelector(`.code-line[data-line=\"${line}\"]`);\n                if(lineEl) lineEl.classList.add('highlight');\n            }\n        }\n    }\n    customElements.define('info-panel', InfoPanel);\n\n    \n    // Main Orchestrator Component: <bubble-sort-visualizer>\n    class BubbleSortVisualizer extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n\n            this.state = {\n                array: [],\n                originalArray: [],\n                arraySize: 50,\n                speed: 50, // 1-100 scale\n                isSorting: false,\n                isPaused: false,\n                abortController: null,\n            };\n\n            this.shadowRoot.innerHTML = `\n                <div class=\"main-container\">\n                    <h1>Bubble Sort Visualization</h1>\n                    <control-panel></control-panel>\n                    <div class=\"visualization-area\"></div>\n                    <info-panel></info-panel>\n                </div>\n            `;\n\n            this.visualizationArea = this.shadowRoot.querySelector('.visualization-area');\n            this.controlPanel = this.shadowRoot.querySelector('control-panel');\n            this.infoPanel = this.shadowRoot.querySelector('info-panel');\n        }\n\n        connectedCallback() {\n            this.generateNewArray();\n            this.controlPanel.setButtonState('initial');\n\n            this.addEventListener('newarray', this.handleNewArray);\n            this.addEventListener('sizechange', this.handleSizeChange);\n            this.addEventListener('speedchange', this.handleSpeedChange);\n            this.addEventListener('start', this.handleStart);\n            this.addEventListener('pause', this.handlePause);\n            this.addEventListener('reset', this.handleReset);\n        }\n\n        // --- Event Handlers ---\n        handleNewArray = () => {\n            this.generateNewArray();\n        }\n\n        handleSizeChange = (e) => {\n            this.state.arraySize = parseInt(e.detail.value, 10);\n            this.generateNewArray();\n        }\n\n        handleSpeedChange = (e) => {\n            // Invert and scale speed for a more intuitive feel (higher slider value = faster)\n            this.state.speed = 101 - parseInt(e.detail.value, 10);\n        }\n\n\n        handleStart = () => {\n            if (this.state.isSorting) return;\n            this.state.isSorting = true;\n            this.state.isPaused = false;\n            this.state.abortController = new AbortController();\n            this.controlPanel.setButtonState('sorting');\n            this.runSort();\n        };\n\n        handlePause = () => {\n            this.state.isPaused = !this.state.isPaused;\n            this.controlPanel.setButtonState(this.state.isPaused ? 'paused' : 'sorting');\n        };\n\n        handleReset = () => {\n            if (this.state.abortController) {\n                this.state.abortController.abort();\n            }\n            this.state.isSorting = false;\n            this.state.isPaused = false;\n            this.state.array = [...this.state.originalArray];\n            this.renderArray();\n            this.controlPanel.setButtonState('initial');\n            this.infoPanel.update({ message: \"Sort reset. Ready to start again.\", line: null });\n        };\n\n        // --- Core Logic & Rendering ---\n\n        generateNewArray() {\n            this.state.array = [];\n            for (let i = 0; i < this.state.arraySize; i++) {\n                this.state.array.push(Math.floor(Math.random() * 95) + 5); // Values from 5 to 100\n            }\n            this.state.originalArray = [...this.state.array];\n            this.renderArray();\n            this.controlPanel.setButtonState('initial');\n            this.infoPanel.update({ message: \"New array generated. Press 'Start' to sort.\", line: null });\n        }\n\n        renderArray(states = {}) {\n            this.visualizationArea.innerHTML = '';\n            this.state.array.forEach((value, index) => {\n                const bar = document.createElement('array-bar');\n                bar.setAttribute('value', value);\n                if (states[index]) {\n                    bar.setAttribute('state', states[index]);\n                }\n                this.visualizationArea.appendChild(bar);\n            });\n        }\n        \n        async *bubbleSortGenerator() {\n            let arr = this.state.array;\n            let n = arr.length;\n            let swapped;\n            for (let i = 0; i < n - 1; i++) {\n                swapped = false;\n                yield { type: 'pass_start', pass: i + 1, line: 3 };\n                for (let j = 0; j < n - i - 1; j++) {\n                    yield { type: 'compare', indices: [j, j + 1], line: 5 };\n                    if (arr[j] > arr[j + 1]) {\n                        yield { type: 'swap_start', indices: [j, j + 1], line: 6 };\n                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                        swapped = true;\n                        yield { type: 'swap_end', indices: [j, j + 1], line: 6 };\n                    }\n                }\n                yield { type: 'sorted', index: n - 1 - i, line: 8 };\n                if (!swapped) {\n                    // Optimization: if no swaps in a pass, array is sorted\n                    break;\n                }\n            }\n            // Mark all remaining as sorted if we broke early\n            for(let k = 0; k < n; k++) {\n                yield { type: 'sorted', index: k, line: 9 };\n            }\n        }\n        \n        async runSort() {\n            const generator = this.bubbleSortGenerator();\n            const sortedIndices = new Set();\n            const { signal } = this.state.abortController;\n\n            try {\n                for await (const step of generator) {\n                    if (signal.aborted) return;\n                    \n                    while(this.state.isPaused) {\n                        if (signal.aborted) return;\n                        await sleep(100);\n                    }\n                    \n                    const states = {};\n                    sortedIndices.forEach(i => states[i] = 'sorted');\n\n                    switch(step.type) {\n                        case 'pass_start':\n                            this.infoPanel.update({ message: `Starting Pass ${step.pass}...`, line: step.line });\n                            break;\n                            \n                        case 'compare':\n                            const [i, j] = step.indices;\n                            this.infoPanel.update({ message: `Comparing elements at index ${i} (${this.state.array[i]}) and ${j} (${this.state.array[j]})`, line: step.line });\n                            states[i] = 'comparing';\n                            states[j] = 'comparing';\n                            this.renderArray(states);\n                            break;\n\n                        case 'swap_start':\n                             const [i_swap, j_swap] = step.indices;\n                             this.infoPanel.update({ message: `Swapping ${this.state.array[i_swap]} and ${this.state.array[j_swap]}`, line: step.line });\n                             states[i_swap] = 'swapping';\n                             states[j_swap] = 'swapping';\n                             this.renderArray(states);\n                             break;\n                        \n                        case 'swap_end':\n                             this.renderArray(states); // Rerender with default colors after swap logic\n                             break;\n\n                        case 'sorted':\n                            sortedIndices.add(step.index);\n                            states[step.index] = 'sorted';\n                            this.renderArray(states);\n                            this.infoPanel.update({ message: `Element ${this.state.array[step.index]} is now in its final sorted position.`, line: step.line });\n                            break;\n                    }\n                    await sleep(this.state.speed * 5);\n                }\n\n                this.infoPanel.update({ message: 'Array is sorted!', line: 10 });\n                this.controlPanel.setButtonState('finished');\n                this.state.isSorting = false;\n\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    console.error(\"Sorting error:\", error);\n                }\n            }\n        }\n    }\n    customElements.define('bubble-sort-visualizer', BubbleSortVisualizer);\n\n    </script>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user given concept. It should be highly interactive and utilize multiple web components to show the concept step by step. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": 1,
      "notes": "ui错位严重，不能运行"
    }
  },
  {
    "id": "6a961ec0-98ae-11f0-8ac7-23deb0280825",
    "model": "gpt-5-mini",
    "timestamp": "2025-09-23T18:52:12.845Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n<title>Interactive Bubble Sort Visualizer</title>\n<style>\n  :root{\n    --bg: #0f1724;\n    --panel: #0b1220;\n    --accent: #00d4ff;\n    --muted: #94a3b8;\n    --success: #22c55e;\n    --danger: #fb7185;\n    --glass: rgba(255,255,255,0.03);\n    font-family: Inter, ui-sans-serif, system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial;\n  }\n  html,body{\n    height:100%;\n    margin:0;\n    background:linear-gradient(180deg,#071024 0%, #061026 60%);\n    color: #e6eef8;\n  }\n  header{\n    display:flex;\n    gap:16px;\n    align-items:center;\n    padding:18px 28px;\n    background:transparent;\n  }\n  h1{\n    font-size:18px;\n    margin:0;\n    color:var(--accent);\n    letter-spacing:0.6px;\n  }\n  .app{\n    padding:18px 28px;\n    display:grid;\n    grid-template-columns: 520px 1fr;\n    gap:18px;\n    align-items:start;\n  }\n  .left, .right{\n    background:var(--panel);\n    border-radius:12px;\n    padding:14px;\n    box-shadow: 0 6px 30px rgba(2,6,23,0.6);\n    min-height:320px;\n  }\n  .left{\n    display:flex;\n    flex-direction:column;\n    gap:12px;\n  }\n\n  controls-panel {\n    display:block;\n    padding:8px;\n    background:var(--glass);\n    border-radius:10px;\n  }\n  array-visualizer {\n    display:block;\n    height:300px;\n  }\n\n  .toolbar{\n    display:flex;\n    gap:8px;\n    align-items:center;\n  }\n  button, .btn {\n    background:linear-gradient(180deg,#071827,#04202b);\n    color:#e7f4ff;\n    border-radius:8px;\n    padding:8px 10px;\n    border:1px solid rgba(255,255,255,0.04);\n    cursor:pointer;\n    font-size:13px;\n  }\n  button.secondary{\n    background:transparent;\n    border:1px solid rgba(255,255,255,0.06);\n    color:var(--muted);\n  }\n  .small{\n    padding:6px 8px;\n    font-size:12px;\n  }\n\n  .panel-row{\n    display:flex;\n    gap:10px;\n    align-items:center;\n  }\n  .range {\n    width:100%;\n  }\n  .code-panel{\n    background:#071732;\n    padding:12px;\n    border-radius:10px;\n    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, \"Roboto Mono\", \"Courier New\", monospace;\n    font-size:13px;\n    line-height:1.5;\n    color:#cfefff;\n    white-space:pre;\n    overflow:auto;\n    max-height:420px;\n  }\n\n  .line {\n    padding:2px 8px;\n    border-radius:6px;\n    display:block;\n  }\n  .line.highlight{\n    background:linear-gradient(90deg, rgba(0,212,255,0.08), rgba(0,212,255,0.02));\n    color:var(--accent);\n  }\n  .muted {\n    color:var(--muted);\n    font-size:13px;\n  }\n\n  .stats {\n    display:flex;\n    gap:10px;\n    flex-wrap:wrap;\n  }\n  .stat {\n    background:linear-gradient(90deg, rgba(255,255,255,0.02), transparent);\n    padding:8px;\n    border-radius:8px;\n    min-width:88px;\n    text-align:center;\n  }\n  .stat .v {\n    font-weight:700;\n    font-size:16px;\n    color:var(--accent);\n  }\n\n  footer{\n    margin-top:16px;\n    color:var(--muted);\n    font-size:13px;\n  }\n\n  /* Visualizer styles */\n  .vis {\n    position:relative;\n    height:300px;\n    display:flex;\n    align-items:end;\n    gap:8px;\n    padding:18px 12px;\n    background:linear-gradient(180deg, rgba(255,255,255,0.01), transparent);\n    border-radius:10px;\n    overflow:hidden;\n  }\n  .bar {\n    --w: 28px;\n    width:var(--w);\n    background:linear-gradient(180deg,#06b6d4,#0284c7);\n    border-radius:6px 6px 4px 4px;\n    display:flex;\n    align-items:flex-end;\n    justify-content:center;\n    color:rgba(255,255,255,0.92);\n    font-weight:700;\n    transform:translateY(0);\n    transition: transform 400ms ease, height 400ms ease;\n    position:relative;\n    box-shadow: 0 8px 20px rgba(0,0,0,0.45);\n  }\n  .bar .label {\n    padding:6px 4px;\n    font-size:12px;\n    color:rgba(255,255,255,0.95);\n    transform:translateY(4px);\n  }\n  .bar.compare {\n    outline:3px solid rgba(255,196,27,0.14);\n    box-shadow: 0 10px 28px rgba(255,196,27,0.06);\n  }\n  .bar.swap {\n    outline:4px solid rgba(99,102,241,0.16);\n    box-shadow: 0 10px 30px rgba(99,102,241,0.08);\n  }\n  .bar.sorted {\n    background:linear-gradient(180deg,#16a34a,#059669);\n  }\n  .legend {\n    display:flex;\n    gap:12px;\n    align-items:center;\n    font-size:13px;\n    color:var(--muted);\n  }\n  .legend .dot {\n    width:12px;height:12px;border-radius:3px;display:inline-block;margin-right:6px;\n  }\n  .dot.compare { background: rgba(255,196,27,0.85); }\n  .dot.swap { background: rgba(99,102,241,0.9); }\n  .dot.sorted { background: linear-gradient(180deg,#16a34a,#059669); }\n\n  .explain {\n    font-size:13px;\n    color:var(--muted);\n  }\n\n  /* responsive */\n  @media (max-width:980px){\n    .app { grid-template-columns: 1fr; padding:14px; }\n  }\n\n</style>\n</head>\n<body>\n<header>\n  <h1>Bubble Sort — Interactive Step-by-Step Visualizer</h1>\n</header>\n\n<div class=\"app\">\n  <div class=\"left\">\n    <controls-panel></controls-panel>\n    <array-visualizer></array-visualizer>\n    <div class=\"legend\" style=\"justify-content:space-between\">\n      <div style=\"display:flex;gap:12px;align-items:center\">\n        <div><span class=\"dot compare\"></span> Comparing</div>\n        <div><span class=\"dot swap\"></span> Swapping</div>\n        <div><span class=\"dot sorted\"></span> Final/Sorted</div>\n      </div>\n      <div class=\"explain\">Tip: Use Step to advance one operation. Play to animate full sort. Toggle \"Optimized\" for early exit.</div>\n    </div>\n  </div>\n\n  <div class=\"right\">\n    <div style=\"display:flex;gap:12px;align-items:flex-start\">\n      <div style=\"flex:1\">\n        <div style=\"display:flex;gap:10px;align-items:center;margin-bottom:8px\">\n          <div class=\"panel-row\" style=\"gap:8px;\">\n            <label class=\"muted\">Order:</label>\n            <select id=\"orderSelect\" style=\"padding:6px;border-radius:8px;background:transparent;color:var(--muted);border:1px solid rgba(255,255,255,0.04)\">\n              <option value=\"asc\">Ascending</option>\n              <option value=\"desc\">Descending</option>\n            </select>\n            <label class=\"muted\">Optimized:</label>\n            <input type=\"checkbox\" id=\"optCheckbox\" />\n          </div>\n        </div>\n\n        <div class=\"stats\" style=\"margin-bottom:10px\">\n          <div class=\"stat\">\n            <div class=\"muted\">Comparisons</div>\n            <div id=\"compCount\" class=\"v\">0</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"muted\">Swaps</div>\n            <div id=\"swapCount\" class=\"v\">0</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"muted\">Pass</div>\n            <div id=\"passCount\" class=\"v\">0</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"muted\">Elements</div>\n            <div id=\"lenCount\" class=\"v\">8</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"muted\">Status</div>\n            <div id=\"status\" class=\"v\">idle</div>\n          </div>\n        </div>\n\n        <div class=\"panel-row\" style=\"gap:8px;margin-bottom:8px\">\n          <button id=\"stepBtn\" class=\"small\">Step</button>\n          <button id=\"backBtn\" class=\"small secondary\">Back</button>\n          <button id=\"playBtn\" class=\"small\">Play</button>\n          <button id=\"pauseBtn\" class=\"small secondary\" disabled>Pause</button>\n          <button id=\"resetBtn\" class=\"small secondary\">Reset</button>\n          <div style=\"flex:1\"></div>\n        </div>\n\n        <div style=\"margin-bottom:10px; display:flex; gap:8px; align-items:center;\">\n          <label class=\"muted\">Speed</label>\n          <input id=\"speed\" class=\"range\" type=\"range\" min=\"0\" max=\"1000\" value=\"400\" />\n        </div>\n      </div>\n    </div>\n\n    <div style=\"display:flex;gap:12px; margin-top:6px;\">\n      <div style=\"flex:1\">\n        <div class=\"code-panel\" id=\"codePanel\" aria-hidden=\"false\"></div>\n      </div>\n    </div>\n\n    <footer style=\"margin-top:10px\">This interactive demo illustrates the inner workings of Bubble Sort. You can customize the array, watch comparisons and swaps, and step through the algorithm to understand why it's O(n^2) in the average and worst case.</footer>\n  </div>\n</div>\n\n<!-- Templates for web components -->\n<template id=\"controls-template\">\n  <style>\n    :host{display:block}\n    .wrap{display:flex;flex-direction:column;gap:10px}\n    .row{display:flex;gap:8px;align-items:center}\n    input[type=\"text\"]{padding:8px;border-radius:8px;background:transparent;border:1px solid rgba(255,255,255,0.04);color:var(--muted);flex:1}\n    .mini{font-size:13px;padding:6px 8px}\n  </style>\n  <div class=\"wrap\">\n    <div class=\"row\">\n      <label class=\"muted\" style=\"min-width:72px\">Array:</label>\n      <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g. 5,3,8,1,2 or leave blank for random\" />\n      <button id=\"apply\" class=\"mini\">Apply</button>\n    </div>\n    <div class=\"row\">\n      <label class=\"muted\" style=\"min-width:72px\">Size:</label>\n      <input id=\"size\" type=\"range\" min=\"3\" max=\"20\" value=\"8\" />\n      <div id=\"sizeVal\" class=\"muted\">8</div>\n      <button id=\"rand\" class=\"mini\">Randomize</button>\n    </div>\n    <div class=\"row\">\n      <label class=\"muted\" style=\"min-width:72px\">Values:</label>\n      <button id=\"seed1\" class=\"mini\">Easy</button>\n      <button id=\"seed2\" class=\"mini\">Reverse</button>\n      <button id=\"seed3\" class=\"mini\">Duplicate</button>\n    </div>\n  </div>\n</template>\n\n<template id=\"visualizer-template\">\n  <style>\n    :host{display:block}\n    .visWrap{display:flex;flex-direction:column;gap:8px}\n    .vis{height:300px;position:relative}\n  </style>\n  <div class=\"visWrap\">\n    <div class=\"vis\" id=\"visArea\" role=\"img\" aria-label=\"Array visualization\"></div>\n  </div>\n</template>\n\n<script>\n/*\n  Bubble Sort Visualizer\n  - Uses custom elements: controls-panel, array-visualizer\n  - Core logic in the main script: generator for step actions, history snapshots\n  - Supports play/pause, step/back, speed control, optimized early exit, ascending/descending\n*/\n\n// Utility\nconst clamp = (v,a,b) => Math.max(a, Math.min(b, v));\nconst sleep = ms => new Promise(r=>setTimeout(r,ms));\n\n// Controls Panel Component\nclass ControlsPanel extends HTMLElement {\n  constructor(){\n    super();\n    this.attachShadow({mode:'open'});\n    this.shadowRoot.appendChild(document.getElementById('controls-template').content.cloneNode(true));\n  }\n  connectedCallback(){\n    this.arrayInput = this.shadowRoot.querySelector('#arrayInput');\n    this.applyBtn = this.shadowRoot.querySelector('#apply');\n    this.size = this.shadowRoot.querySelector('#size');\n    this.sizeVal = this.shadowRoot.querySelector('#sizeVal');\n    this.randBtn = this.shadowRoot.querySelector('#rand');\n    this.seed1 = this.shadowRoot.querySelector('#seed1');\n    this.seed2 = this.shadowRoot.querySelector('#seed2');\n    this.seed3 = this.shadowRoot.querySelector('#seed3');\n\n    this.size.addEventListener('input', ()=> {\n      this.sizeVal.textContent = this.size.value;\n      this.emit('size-change', {size: Number(this.size.value)});\n    });\n    this.applyBtn.addEventListener('click', ()=> {\n      this.emit('apply-array', {text:this.arrayInput.value});\n    });\n    this.randBtn.addEventListener('click', ()=> {\n      this.emit('randomize', {size: Number(this.size.value)});\n    });\n    this.seed1.addEventListener('click', ()=> {\n      this.emit('preset', {type: 'easy', size: Number(this.size.value)});\n    });\n    this.seed2.addEventListener('click', ()=> {\n      this.emit('preset', {type: 'reverse', size: Number(this.size.value)});\n    });\n    this.seed3.addEventListener('click', ()=> {\n      this.emit('preset', {type: 'duplicates', size: Number(this.size.value)});\n    });\n  }\n  emit(name, detail){\n    this.dispatchEvent(new CustomEvent(name, {detail, bubbles:true, composed:true}));\n  }\n}\ncustomElements.define('controls-panel', ControlsPanel);\n\n// Array Visualizer Component\nclass ArrayVisualizer extends HTMLElement {\n  constructor(){\n    super();\n    this.attachShadow({mode:'open'});\n    this.shadowRoot.appendChild(document.getElementById('visualizer-template').content.cloneNode(true));\n    this.container = this.shadowRoot.getElementById('visArea');\n    this.bars = [];\n    this.positions = []; // maps index -> x position\n  }\n\n  setArray(arr){\n    this.array = arr.slice();\n    this.render();\n  }\n\n  // Create bars\n  render(){\n    const n = this.array.length;\n    this.container.innerHTML = '';\n    this.bars = [];\n    const gap = 8;\n    const totalGap = gap*(n-1);\n    const width = this.container.clientWidth || 480;\n    // width per bar: try to fit\n    let barWidth = Math.floor((width - totalGap - 40) / n);\n    barWidth = Math.max(18, Math.min(60, barWidth));\n    const maxVal = Math.max(...this.array.map(v=>Math.abs(v)), 1);\n    for(let i=0;i<n;i++){\n      const val = this.array[i];\n      const bar = document.createElement('div');\n      bar.className = 'bar';\n      bar.style.setProperty('--w', barWidth+'px');\n      const heightPct = Math.max(6, Math.round((Math.abs(val)/maxVal) * 88)); // percent of area\n      bar.style.height = heightPct + '%';\n      bar.dataset.index = i;\n      bar.dataset.value = val;\n      const label = document.createElement('div');\n      label.className = 'label';\n      label.textContent = val;\n      bar.appendChild(label);\n      this.container.appendChild(bar);\n      this.bars.push(bar);\n    }\n    // create simple horizontal layout using flex; we will animate by swapping heights/labels and classes\n  }\n\n  markCompare(i,j){\n    this.clearStates();\n    if(this.bars[i]) this.bars[i].classList.add('compare');\n    if(this.bars[j]) this.bars[j].classList.add('compare');\n  }\n  markSwap(i,j){\n    this.clearStates();\n    if(this.bars[i]) this.bars[i].classList.add('swap');\n    if(this.bars[j]) this.bars[j].classList.add('swap');\n  }\n  markSorted(idxStart){\n    // mark elements from idxStart..end as sorted (for ascending bubble final pass)\n    this.bars.forEach((b,idx)=> {\n      b.classList.remove('compare','swap');\n      if(idx >= idxStart) b.classList.add('sorted');\n    });\n  }\n  clearStates(){\n    this.bars.forEach(b=>{\n      b.classList.remove('compare','swap');\n      // keep 'sorted' until reset\n    });\n  }\n  // Apply swap visually by swapping heights and labels\n  async swap(i,j, duration=400){\n    if(i===j) return;\n    // swap values in DOM\n    const bi = this.bars[i];\n    const bj = this.bars[j];\n    if(!bi || !bj) return;\n\n    // animate: use transform swap (simple)\n    bi.style.transition = `transform ${duration}ms ease`;\n    bj.style.transition = `transform ${duration}ms ease`;\n\n    bi.style.transform = `translateX(${(j-i)*(bi.offsetWidth + 8)}px)`;\n    bj.style.transform = `translateX(${(i-j)*(bj.offsetWidth + 8)}px)`;\n\n    await sleep(duration);\n\n    // reset transforms\n    bi.style.transition = '';\n    bj.style.transition = '';\n    bi.style.transform = '';\n    bj.style.transform = '';\n\n    // swap heights and labels and dataset\n    const tempHeight = bi.style.height;\n    const tempLabel = bi.querySelector('.label').textContent;\n    const tempVal = bi.dataset.value;\n\n    bi.style.height = bj.style.height;\n    bi.querySelector('.label').textContent = bj.querySelector('.label').textContent;\n    bi.dataset.value = bj.dataset.value;\n\n    bj.style.height = tempHeight;\n    bj.querySelector('.label').textContent = tempLabel;\n    bj.dataset.value = tempVal;\n  }\n\n  updateArray(arr){\n    // update labels/heights to match arr (no animation)\n    this.array = arr.slice();\n    const maxVal = Math.max(...arr.map(v=>Math.abs(v)), 1);\n    for(let i=0;i<this.bars.length;i++){\n      const val = arr[i];\n      const heightPct = Math.max(6, Math.round((Math.abs(val)/maxVal) * 88));\n      const bar = this.bars[i];\n      bar.style.height = heightPct + '%';\n      bar.dataset.value = val;\n      bar.querySelector('.label').textContent = val;\n      bar.classList.remove('compare','swap','sorted');\n    }\n  }\n\n  markFinalSorted(){\n    this.bars.forEach(b=> {\n      b.classList.remove('compare','swap');\n      b.classList.add('sorted');\n    });\n  }\n}\ncustomElements.define('array-visualizer', ArrayVisualizer);\n\n\n// Main App Logic - tie components together\ndocument.addEventListener('DOMContentLoaded', ()=> {\n  const control = document.querySelector('controls-panel');\n  const vis = document.querySelector('array-visualizer');\n\n  // controls in right panel\n  const stepBtn = document.getElementById('stepBtn');\n  const backBtn = document.getElementById('backBtn');\n  const playBtn = document.getElementById('playBtn');\n  const pauseBtn = document.getElementById('pauseBtn');\n  const resetBtn = document.getElementById('resetBtn');\n  const speedInput = document.getElementById('speed');\n  const compCount = document.getElementById('compCount');\n  const swapCount = document.getElementById('swapCount');\n  const passCount = document.getElementById('passCount');\n  const lenCount = document.getElementById('lenCount');\n  const status = document.getElementById('status');\n  const orderSelect = document.getElementById('orderSelect');\n  const optCheckbox = document.getElementById('optCheckbox');\n  const codePanel = document.getElementById('codePanel');\n\n  // Pseudocode lines\n  const codeLines = [\n    'function bubbleSort(arr, ascending=true, optimized=false) {',\n    '  let n = arr.length;',\n    '  for (let i = 0; i < n - 1; i++) {',\n    '    let swapped = false;                       // start of pass',\n    '    for (let j = 0; j < n - 1 - i; j++) {',\n    '      if ((ascending && arr[j] > arr[j+1]) || (!ascending && arr[j] < arr[j+1])) {',\n    '        swap(arr, j, j+1);                     // swap elements',\n    '        swapped = true;',\n    '      }',\n    '    }',\n    '    if (optimized && !swapped) break;          // early exit',\n    '  }',\n    '}',\n  ];\n\n  function renderCode(highlightIdx=null){\n    codePanel.innerHTML = '';\n    for(let i=0;i<codeLines.length;i++){\n      const ln = document.createElement('div');\n      ln.className = 'line' + (i===highlightIdx ? ' highlight' : '');\n      ln.textContent = codeLines[i];\n      codePanel.appendChild(ln);\n    }\n  }\n\n  renderCode(null);\n\n  // state\n  let array = [5,3,8,1,2,7,4,6];\n  let history = []; // snapshots\n  let actions = []; // generated actions for current run\n  let actionIndex = 0;\n  let playing = false;\n  let runner = null;\n  let comparisonCount = 0, swapCounter = 0, passCounter = 0;\n  let ascending = true;\n  let optimized = false;\n\n  function setStatus(s){ status.textContent = s; }\n\n  // helpers to generate arrays\n  function randomArray(size){\n    const arr = [];\n    for(let i=0;i<size;i++){\n      arr.push(Math.floor(Math.random()*100)+1);\n    }\n    return arr;\n  }\n  function reverseArray(size){\n    const arr = [];\n    for(let i=0;i<size;i++) arr.push(size-i);\n    return arr;\n  }\n  function duplicatesArray(size){\n    const base = [5,3,8,1,2,7,4,6];\n    const arr = [];\n    for(let i=0;i<size;i++){\n      arr.push(base[i % base.length]);\n    }\n    return arr;\n  }\n\n  // Apply initial array to visualizer\n  function applyArray(arr){\n    array = arr.slice();\n    history = [];\n    actions = [];\n    actionIndex = 0;\n    comparisonCount = 0; swapCounter=0; passCounter=0;\n    lenCount.textContent = array.length;\n    compCount.textContent = '0';\n    swapCount.textContent = '0';\n    passCount.textContent = '0';\n    vis.setArray(array);\n    setStatus('idle');\n    renderCode(null);\n    backBtn.disabled = true;\n    pauseBtn.disabled = true;\n    playBtn.disabled = false;\n  }\n\n  // Event listeners from controls-panel\n  control.addEventListener('apply-array', (e)=> {\n    const text = e.detail.text.trim();\n    if(text.length===0){\n      applyArray(randomArray(Number(control.shadowRoot.querySelector('#size').value)));\n      return;\n    }\n    const parts = text.split(',').map(s=>s.trim()).filter(s=>s!=='');\n    const nums = parts.map(p=>Number(p));\n    if(nums.some(isNaN)){\n      alert('Invalid input. Use comma-separated numbers like: 5,3,8,1');\n      return;\n    }\n    applyArray(nums);\n  });\n  control.addEventListener('size-change', (e)=> {\n    const newSize = e.detail.size;\n    lenCount.textContent = newSize;\n  });\n  control.addEventListener('randomize', (e)=> {\n    const arr = randomArray(e.detail.size);\n    applyArray(arr);\n  });\n  control.addEventListener('preset', (e)=> {\n    let arr;\n    if(e.detail.type==='easy') arr = [3,1,4,6,2,8,7,5].slice(0,e.detail.size);\n    if(e.detail.type==='reverse') arr = reverseArray(e.detail.size);\n    if(e.detail.type==='duplicates') arr = duplicatesArray(e.detail.size);\n    applyArray(arr);\n  });\n\n  // Bubble sort action generator: returns a list of actions to animate\n  function generateActions(arr, ascending=true, optimized=false){\n    const a = arr.slice();\n    const actions = [];\n    const n = a.length;\n    // snapshot initial\n    actions.push({type:'snapshot', array:a.slice(), i:null, j:null, note:'start'});\n    for(let i=0;i<n-1;i++){\n      actions.push({type:'pass-start', i:i, note:`pass ${i+1}`});\n      let swapped = false;\n      for(let j=0;j<n-1-i;j++){\n        actions.push({type:'compare', i:i, j:j});\n        // comparison\n        const cond = ascending ? (a[j] > a[j+1]) : (a[j] < a[j+1]);\n        if(cond){\n          actions.push({type:'swap', i:j, j:j+1});\n          // swap in simulation\n          const tmp = a[j]; a[j]=a[j+1]; a[j+1]=tmp;\n          swapped = true;\n          actions.push({type:'snapshot', array:a.slice(), i:i, j:j+1, note:'after-swap'});\n        }\n      }\n      actions.push({type:'pass-end', i:i, swapped:swapped});\n      if(optimized && !swapped){\n        actions.push({type:'finished-early', i:i});\n        break;\n      }\n    }\n    actions.push({type:'done'});\n    return actions;\n  }\n\n  // We will keep a history of snapshots for back stepping. Each snapshot captures array and stats.\n  function pushSnapshot(arrSnapshot, meta={}){\n    history.push({\n      array: arrSnapshot.slice(),\n      comp: comparisonCount,\n      swaps: swapCounter,\n      pass: passCounter,\n      meta: meta\n    });\n  }\n\n  // Prepare actions before running\n  function prepareRun(){\n    ascending = (orderSelect.value === 'asc');\n    optimized = optCheckbox.checked;\n    actions = generateActions(array, ascending, optimized);\n    actionIndex = 0;\n    history = [];\n    // initial snapshot\n    pushSnapshot(array.slice(), {note:'initial'});\n    compCount.textContent = '0';\n    swapCount.textContent = '0';\n    passCount.textContent = '0';\n    comparisonCount = 0; swapCounter = 0; passCounter = 0;\n    renderCode(null);\n    setStatus('ready');\n    backBtn.disabled = true;\n  }\n\n  // Apply a single action (synchronous or with animation)\n  async function applyAction(idx){\n    if(idx < 0 || idx >= actions.length) return;\n    const act = actions[idx];\n    switch(act.type){\n      case 'snapshot':\n        // update whole array view (no highlight)\n        vis.updateArray(act.array);\n        renderCode(null);\n        break;\n      case 'pass-start':\n        passCounter++;\n        passCount.textContent = String(passCounter);\n        setStatus(`Pass ${act.i+1} start`);\n        renderCode(3); // highlight swapped flag line in pseudo-code area (approx)\n        // push history\n        pushSnapshot(currentArrayState(), {type:'pass-start', i:act.i});\n        break;\n      case 'compare':\n        comparisonCount++;\n        compCount.textContent = String(comparisonCount);\n        setStatus(`Comparing indices ${act.j} and ${act.j+1}`);\n        vis.markCompare(act.j, act.j+1);\n        renderCode(4); // highlight inner loop and conditional\n        pushSnapshot(currentArrayState(), {type:'compare', i:act.i, j:act.j});\n        break;\n      case 'swap':\n        swapCounter++;\n        swapCount.textContent = String(swapCounter);\n        setStatus(`Swapping indices ${act.i} and ${act.j}`);\n        vis.markSwap(act.i, act.j);\n        renderCode(5); // highlight swap line\n        // animate swap\n        await vis.swap(act.i, act.j, clamp(1000 - Number(speedInput.value), 80, 1000));\n        // After swap, we need to update internal array representation to reflect swapped values at positions\n        // We'll swap the logical 'array' as well\n        const tmp = array[act.i]; array[act.i]=array[act.j]; array[act.j]=tmp;\n        // push snapshot after swap\n        pushSnapshot(currentArrayState(), {type:'after-swap', i:act.i, j:act.j});\n        break;\n      case 'pass-end':\n        setStatus(`Completed pass ${act.i+1}`);\n        // mark suffix as sorted: elements from (array.length - (act.i+1))..end are in final position\n        const sortedStart = array.length - (act.i+1);\n        vis.markSorted(sortedStart);\n        renderCode(10);\n        pushSnapshot(currentArrayState(), {type:'pass-end', i:act.i});\n        break;\n      case 'finished-early':\n        setStatus(`Finished early on pass ${act.i+1}`);\n        vis.markFinalSorted();\n        renderCode(11);\n        pushSnapshot(currentArrayState(), {type:'finished-early', i:act.i});\n        break;\n      case 'done':\n        setStatus('Done');\n        vis.markFinalSorted();\n        renderCode(11);\n        pushSnapshot(currentArrayState(), {type:'done'});\n        break;\n      default:\n        console.warn('unknown action', act);\n    }\n  }\n\n  function currentArrayState(){\n    // derive current array from visualizer bars\n    // bars' dataset.value\n    const bars = vis.shadowRoot ? vis.shadowRoot.querySelectorAll('.bar') : vis.container.querySelectorAll('.bar');\n    if(bars && bars.length){\n      return Array.from(bars).map(b=>Number(b.dataset.value));\n    }\n    return array.slice();\n  }\n\n  // Step forward one action\n  async function stepForward(){\n    if(actions.length === 0) {\n      prepareRun();\n    }\n    if(actionIndex >= actions.length) {\n      setStatus('already finished');\n      return;\n    }\n    const curIdx = actionIndex;\n    actionIndex++;\n    backBtn.disabled = false;\n    await applyAction(curIdx);\n  }\n\n  // Step backward: peek last snapshot and restore\n  function stepBack(){\n    if(history.length <= 1){\n      // nothing to go back to\n      return;\n    }\n    // pop last snapshot and set visualizer to previous\n    const last = history.pop(); // current\n    const prev = history[history.length-1];\n    // restore counters and array\n    comparisonCount = prev.comp;\n    swapCounter = prev.swaps;\n    passCounter = prev.pass;\n    compCount.textContent = String(comparisonCount);\n    swapCount.textContent = String(swapCounter);\n    passCount.textContent = String(passCounter);\n    // update array and visualizer\n    array = prev.array.slice();\n    vis.updateArray(array);\n    setStatus('stepped back');\n    actionIndex = Math.max(0, actionIndex-1);\n    if(history.length <= 1) backBtn.disabled = true;\n  }\n\n  // Play sequence: animate remaining actions with timing\n  async function playAll(){\n    if(actions.length === 0) prepareRun();\n    playing = true;\n    playBtn.disabled = true;\n    pauseBtn.disabled = false;\n    setStatus('playing');\n    while(playing && actionIndex < actions.length){\n      await stepForward();\n      // pacing: speedInput reversed (higher value = faster)\n      const delay = clamp(1000 - Number(speedInput.value), 60, 1000);\n      // If current action was a swap, we've already waited for the swap animation in applyAction.\n      // Add a small pause between operations\n      await sleep( Math.round(delay * 0.28) );\n    }\n    playing = false;\n    playBtn.disabled = false;\n    pauseBtn.disabled = true;\n    if(actionIndex >= actions.length) setStatus('finished');\n  }\n\n  // Reset to initial state\n  function resetAll(){\n    // restore to initial array (first snapshot) if exists, otherwise current array\n    if(history.length>0){\n      const first = history[0];\n      array = first.array.slice();\n      vis.updateArray(array);\n      compCount.textContent = '0';\n      swapCount.textContent = '0';\n      passCount.textContent = '0';\n      comparisonCount = 0; swapCounter = 0; passCounter = 0;\n      actions = [];\n      actionIndex = 0;\n      history = [];\n      setStatus('reset');\n      renderCode(null);\n      backBtn.disabled = true;\n      pauseBtn.disabled = true;\n      playBtn.disabled = false;\n    } else {\n      // nothing recorded; just update widget\n      vis.updateArray(array);\n      compCount.textContent = '0';\n      swapCount.textContent = '0';\n      passCount.textContent = '0';\n      comparisonCount = 0; swapCounter = 0; passCounter = 0;\n      setStatus('idle');\n      renderCode(null);\n      backBtn.disabled = true;\n      pauseBtn.disabled = true;\n      playBtn.disabled = false;\n    }\n  }\n\n  // wire up controls\n  stepBtn.addEventListener('click', async ()=>{\n    await stepForward();\n  });\n  backBtn.addEventListener('click', ()=>{\n    stepBack();\n  });\n  playBtn.addEventListener('click', async ()=>{\n    await playAll();\n  });\n  pauseBtn.addEventListener('click', ()=>{\n    playing = false;\n    pauseBtn.disabled = true;\n    playBtn.disabled = false;\n    setStatus('paused');\n  });\n  resetBtn.addEventListener('click', ()=>{\n    playing = false;\n    resetAll();\n  });\n\n  // When user toggles order or optimized, we prepare new run\n  orderSelect.addEventListener('change', ()=>{\n    prepareRun();\n  });\n  optCheckbox.addEventListener('change', ()=>{\n    prepareRun();\n  });\n\n  speedInput.addEventListener('input', ()=>{\n    // adjust nothing immediate; used in delays\n  });\n\n  // Initialize\n  applyArray(array);\n  prepareRun();\n\n  // Small keyboard shortcuts\n  window.addEventListener('keydown', (e)=>{\n    if(e.key === ' '){\n      e.preventDefault();\n      if(playing) { playing = false; pauseBtn.disabled = true; playBtn.disabled = false; setStatus('paused'); }\n      else playAll();\n    } else if (e.key === 'ArrowRight'){\n      stepForward();\n    } else if (e.key === 'ArrowLeft'){\n      stepBack();\n    }\n  });\n\n  // Accessibility: respond to container resize to re-render bars\n  new ResizeObserver(()=>{ vis.render(); }).observe(vis);\n\n  // Show initial code highlight mapping by default\n  renderCode(null);\n});\n</script>\n</body>\n</html>",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user given concept. It should be highly interactive and utilize multiple web components to show the concept step by step. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": 1,
      "notes": "ui错位严重，不能运行"
    }
  },
  {
    "id": "c0959290-98f6-11f0-b679-735244a266fb",
    "model": "claude-opus-4-20250514",
    "timestamp": "2025-09-24T03:30:00.890Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n        .controls {\n            text-align: center;\n            margin: 20px 0;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 0 5px;\n            font-size: 16px;\n            cursor: pointer;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n        button:disabled {\n            background-color: #cccccc;\n            cursor: not-allowed;\n        }\n        input {\n            padding: 8px;\n            font-size: 16px;\n            width: 300px;\n            margin-right: 10px;\n        }\n        .visualization {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 300px;\n            margin: 30px 0;\n            background-color: white;\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n        .bar {\n            width: 40px;\n            margin: 0 2px;\n            background-color: #3498db;\n            color: white;\n            text-align: center;\n            line-height: 30px;\n            font-weight: bold;\n            transition: all 0.3s ease;\n            position: relative;\n        }\n        .bar.comparing {\n            background-color: #e74c3c;\n        }\n        .bar.sorted {\n            background-color: #2ecc71;\n        }\n        .info {\n            text-align: center;\n            margin: 20px 0;\n            font-size: 18px;\n        }\n        .code {\n            background-color: #2c3e50;\n            color: #ecf0f1;\n            padding: 20px;\n            border-radius: 10px;\n            font-family: 'Courier New', monospace;\n            overflow-x: auto;\n            white-space: pre;\n            line-height: 1.5;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    \n    <div class=\"controls\">\n        <input type=\"text\" id=\"arrayInput\" placeholder=\"Enter numbers separated by commas\" value=\"64, 34, 25, 12, 22, 11, 90\">\n        <button onclick=\"setArray()\">Set Array</button>\n        <button onclick=\"randomArray()\">Random Array</button>\n        <button id=\"sortBtn\" onclick=\"startSort()\">Start Sort</button>\n        <button id=\"resetBtn\" onclick=\"resetArray()\">Reset</button>\n    </div>\n    \n    <div class=\"info\">\n        <div id=\"status\">Ready to sort</div>\n        <div id=\"comparisons\">Comparisons: 0</div>\n        <div id=\"swaps\">Swaps: 0</div>\n    </div>\n    \n    <div class=\"visualization\" id=\"visualization\"></div>\n    \n    <div class=\"code\">\nfunction bubbleSort(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\nTime Complexity: O(n²)\nSpace Complexity: O(1)\n    </div>\n\n    <script>\n        let array = [];\n        let originalArray = [];\n        let sorting = false;\n        let comparisons = 0;\n        let swaps = 0;\n\n        function setArray() {\n            const input = document.getElementById('arrayInput').value;\n            const numbers = input.split(',').map(num => parseInt(num.trim())).filter(num => !isNaN(num));\n            if (numbers.length > 0 && numbers.length <= 15) {\n                array = [...numbers];\n                originalArray = [...numbers];\n                visualize();\n                resetStats();\n            } else {\n                alert('Please enter 1-15 valid numbers separated by commas');\n            }\n        }\n\n        function randomArray() {\n            const size = Math.floor(Math.random() * 8) + 8; // 8-15 elements\n            array = [];\n            for (let i = 0; i < size; i++) {\n                array.push(Math.floor(Math.random() * 90) + 10); // 10-99\n            }\n            originalArray = [...array];\n            document.getElementById('arrayInput').value = array.join(', ');\n            visualize();\n            resetStats();\n        }\n\n        function visualize() {\n            const container = document.getElementById('visualization');\n            container.innerHTML = '';\n            \n            const maxValue = Math.max(...array);\n            \n            array.forEach((value, index) => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${(value / maxValue) * 250}px`;\n                bar.textContent = value;\n                bar.id = `bar-${index}`;\n                container.appendChild(bar);\n            });\n        }\n\n        function updateBar(index, comparing = false, sorted = false) {\n            const bar = document.getElementById(`bar-${index}`);\n            if (bar) {\n                bar.className = 'bar';\n                if (comparing) bar.classList.add('comparing');\n                if (sorted) bar.classList.add('sorted');\n            }\n        }\n\n        function resetStats() {\n            comparisons = 0;\n            swaps = 0;\n            updateStats();\n            document.getElementById('status').textContent = 'Ready to sort';\n        }\n\n        function updateStats() {\n            document.getElementById('comparisons').textContent = `Comparisons: ${comparisons}`;\n            document.getElementById('swaps').textContent = `Swaps: ${swaps}`;\n        }\n\n        async function bubbleSort() {\n            const n = array.length;\n            \n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    if (!sorting) return;\n                    \n                    // Highlight bars being compared\n                    updateBar(j, true);\n                    updateBar(j + 1, true);\n                    comparisons++;\n                    updateStats();\n                    \n                    await sleep(500);\n                    \n                    if (array[j] > array[j + 1]) {\n                        // Swap elements\n                        let temp = array[j];\n                        array[j] = array[j + 1];\n                        array[j + 1] = temp;\n                        swaps++;\n                        updateStats();\n                        visualize();\n                        \n                        // Re-highlight after visualization\n                        updateBar(j, true);\n                        updateBar(j + 1, true);\n                        await sleep(500);\n                    }\n                    \n                    // Remove highlight\n                    updateBar(j);\n                    updateBar(j + 1);\n                }\n                \n                // Mark the last element of this pass as sorted\n                updateBar(n - i - 1, false, true);\n            }\n            \n            // Mark the first element as sorted\n            updateBar(0, false, true);\n        }\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        async function startSort() {\n            if (sorting) return;\n            \n            sorting = true;\n            document.getElementById('sortBtn').disabled = true;\n            document.getElementById('status').textContent = 'Sorting...';\n            \n            await bubbleSort();\n            \n            if (sorting) {\n                document.getElementById('status').textContent = 'Sorted!';\n                // Mark all as sorted\n                for (let i = 0; i < array.length; i++) {\n                    updateBar(i, false, true);\n                }\n            }\n            \n            sorting = false;\n            document.getElementById('sortBtn').disabled = false;\n        }\n\n        function resetArray() {\n            sorting = false;\n            array = [...originalArray];\n            visualize();\n            resetStats();\n            document.getElementById('sortBtn').disabled = false;\n        }\n\n        // Initialize with default array\n        setArray();\n    </script>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": 4,
      "notes": "整体正确，ui略有错位"
    }
  }
]