{
  "timestamp": "2025-10-29T02:03:11.483Z",
  "html_file": "46878530-b408-11f0-ab52-fbe7249bf639.html",
  "fsm_config": {
    "topic": "Interactive Application",
    "description": "Finite state machine modeling the user interaction for adding keys to a visual hash table with validation, hashing, collision detection, and feedback.",
    "states": [
      {
        "name": "idle",
        "onEnter": "ready_for_input",
        "on": {
          "CLICK_ADD": "validating_input"
        }
      },
      {
        "name": "validating_input",
        "onEnter": "validate_input",
        "on": {
          "INVALID_INPUT": "invalid_input",
          "VALID_INPUT": "hashing"
        }
      },
      {
        "name": "invalid_input",
        "onEnter": "show_feedback_invalid",
        "on": {
          "CLICK_ADD": "validating_input"
        }
      },
      {
        "name": "hashing",
        "onEnter": "compute_bucket",
        "on": {
          "BUCKET_COMPUTED": "checking_collision"
        }
      },
      {
        "name": "checking_collision",
        "onEnter": "check_collision",
        "on": {
          "COLLISION_DETECTED": "collision",
          "BUCKET_EMPTY": "filling_bucket"
        }
      },
      {
        "name": "collision",
        "onEnter": "show_feedback_collision",
        "on": {
          "CLICK_ADD": "validating_input"
        }
      },
      {
        "name": "filling_bucket",
        "onEnter": "mark_bucket_filled",
        "on": {
          "VALUE_ADDED": "success"
        }
      },
      {
        "name": "success",
        "onEnter": "show_feedback_success",
        "on": {
          "CLICK_ADD": "validating_input"
        }
      }
    ],
    "events": [
      "CLICK_ADD",
      "VALID_INPUT",
      "INVALID_INPUT",
      "BUCKET_COMPUTED",
      "COLLISION_DETECTED",
      "BUCKET_EMPTY",
      "VALUE_ADDED"
    ],
    "notes": "This FSM reflects the single interaction implemented: clicking the 'Add to Hash Table' button. Actions map to the actual DOM operations: validate_input parses the key and checks 0-9 range; compute_bucket uses key % 10; check_collision checks bucket.classList.contains('filled'); mark_bucket_filled adds the 'filled' class and sets the bucket text to the key; show_feedback_invalid/collision/success set feedbackElement.textContent accordingly. Internal events (VALID_INPUT/INVALID_INPUT, BUCKET_COMPUTED, COLLISION_DETECTED/BUCKET_EMPTY, VALUE_ADDED) are emitted by onEnter actions to drive transitions. There is no reset or removal; buckets remain filled across interactions, and collisions will occur on subsequent valid inputs targeting already-filled buckets. CSS transitions handle visual highlighting of filled buckets, but no explicit animation states are managed in JavaScript."
  },
  "discovered_elements": {
    "buttons": [
      {
        "selector": "button",
        "text": "Add to Hash Table",
        "id": "addButton",
        "className": "",
        "type": "submit",
        "tagName": "BUTTON"
      }
    ],
    "inputs": [
      {
        "selector": "input[type=\"text\"]",
        "id": "keyInput",
        "name": "",
        "type": "text",
        "placeholder": "Enter Key (0-9)",
        "className": "",
        "tagName": "INPUT"
      },
      {
        "selector": "input:not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"])",
        "id": "keyInput",
        "name": "",
        "type": "text",
        "placeholder": "Enter Key (0-9)",
        "className": "",
        "tagName": "INPUT"
      }
    ],
    "interactive": []
  },
  "event_mappings": [
    {
      "event": "VALID_INPUT",
      "action": "input",
      "element": {
        "selector": "input[type=\"text\"]",
        "id": "keyInput",
        "name": "",
        "type": "text",
        "placeholder": "Enter Key (0-9)",
        "className": "",
        "tagName": "INPUT"
      },
      "selector": "#keyInput",
      "confidence": 0.7
    },
    {
      "event": "VALID_INPUT",
      "action": "input",
      "element": {
        "selector": "input:not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"])",
        "id": "keyInput",
        "name": "",
        "type": "text",
        "placeholder": "Enter Key (0-9)",
        "className": "",
        "tagName": "INPUT"
      },
      "selector": "#keyInput",
      "confidence": 0.7
    },
    {
      "event": "INVALID_INPUT",
      "action": "input",
      "element": {
        "selector": "input[type=\"text\"]",
        "id": "keyInput",
        "name": "",
        "type": "text",
        "placeholder": "Enter Key (0-9)",
        "className": "",
        "tagName": "INPUT"
      },
      "selector": "#keyInput",
      "confidence": 0.7
    },
    {
      "event": "INVALID_INPUT",
      "action": "input",
      "element": {
        "selector": "input:not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"])",
        "id": "keyInput",
        "name": "",
        "type": "text",
        "placeholder": "Enter Key (0-9)",
        "className": "",
        "tagName": "INPUT"
      },
      "selector": "#keyInput",
      "confidence": 0.7
    }
  ],
  "total_screenshots": 22,
  "screenshot_folder": "D:\\largeProjects\\CS-Capstone\\capstone\\workspace\\vlm-test\\visuals\\46878530-b408-11f0-ab52-fbe7249bf639"
}