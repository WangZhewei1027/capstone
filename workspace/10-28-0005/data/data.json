[
  {
    "id": "8922f830-b402-11f0-bdbc-23fe6fc76a5e",
    "timestamp": "2025-10-28T13:34:21.873Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Deque",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort — Interactive Module</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --safe-margin: 24px;\n      --gap: 16px;\n      --radius: 10px;\n      --bg: #0b0e12;\n      --panel: #12161c;\n      --text: #eaf0f6;\n      --muted: #b7c3cf;\n      --accent: #4da3ff;\n      --accent-2: #1abc9c;\n      --warn: #f7b500;\n      --error: #ff6b6b;\n      --bar: #5b7c99;\n      --bar-contrast: #dbe8f3;\n      --focus: #ffe27a;\n      --shadow: 0 12px 28px rgba(0,0,0,0.45);\n      --speed-scale: 1; /* higher = faster */\n      --bar-transition: calc(280ms / var(--speed-scale));\n      --swap-transition: calc(200ms / var(--speed-scale));\n      --highlight-transition: calc(160ms / var(--speed-scale));\n    }\n\n    html, body {\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n      line-height: 1.5;\n    }\n\n    .page {\n      padding: var(--safe-margin);\n      max-width: 1100px;\n      margin: 0 auto;\n    }\n\n    h1, h2, h3 {\n      margin: 0 0 8px 0;\n      font-weight: 700;\n      letter-spacing: 0.2px;\n    }\n    h1 { font-size: 26px; }\n    h2 { font-size: 20px; color: var(--muted); }\n    h3 { font-size: 16px; color: var(--muted); }\n\n    p {\n      margin: 0 0 12px 0;\n      color: var(--muted);\n    }\n\n    ul {\n      margin: 0 0 var(--gap) 0;\n      padding-left: 18px;\n      color: var(--muted);\n    }\n\n    .module {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    .card {\n      background: var(--panel);\n      border-radius: var(--radius);\n      box-shadow: var(--shadow);\n      padding: 18px;\n    }\n\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n\n    label {\n      font-weight: 600;\n      color: var(--text);\n    }\n\n    input[type=\"text\"], input[type=\"number\"], input[type=\"range\"], select {\n      background: #0f1318;\n      border: 1px solid #1e2732;\n      color: var(--text);\n      padding: 10px 12px;\n      border-radius: 8px;\n      outline: none;\n      transition: border var(--highlight-transition);\n    }\n\n    input[type=\"text\"]:focus, input[type=\"number\"]:focus, input[type=\"range\"]:focus, button:focus, select:focus {\n      border-color: var(--focus);\n      box-shadow: 0 0 0 2px rgba(255,226,122,0.25);\n    }\n\n    input[type=\"text\"] {\n      min-width: 260px;\n      flex: 1;\n    }\n\n    input[type=\"range\"] {\n      width: 220px;\n    }\n\n    button {\n      appearance: none;\n      border: 1px solid #1e2732;\n      background: #0f1318;\n      color: var(--text);\n      padding: 10px 14px;\n      border-radius: 10px;\n      cursor: pointer;\n      transition: transform 80ms ease, background 140ms ease, border var(--highlight-transition);\n    }\n\n    button:hover {\n      background: #151b22;\n    }\n\n    button.primary {\n      background: var(--accent);\n      border-color: #2f6eb6;\n      color: #041324;\n    }\n\n    button.primary:hover {\n      filter: brightness(1.08);\n    }\n\n    button.tinted {\n      background: rgba(77,163,255,0.14);\n      border-color: #2f6eb6;\n    }\n\n    button.success {\n      background: var(--accent-2);\n      border-color: #0f7e66;\n      color: #04221c;\n    }\n\n    button.warn {\n      background: rgba(247,181,0,0.16);\n      border-color: #7c5a05;\n      color: var(--text);\n    }\n\n    .visual {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    .board-wrap {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 8px;\n    }\n\n    .board-labels {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      color: var(--muted);\n      font-size: 14px;\n    }\n\n    .board {\n      position: relative;\n      height: 320px;\n      background: #0e1319;\n      border: 1px solid #1e2732;\n      border-radius: 12px;\n      overflow: hidden;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      width: 40px; /* will be overridden in JS */\n      transform-origin: bottom center;\n      background: var(--bar);\n      color: var(--bar-contrast);\n      border-radius: 8px 8px 0 0;\n      transition:\n        left var(--bar-transition) ease,\n        height var(--highlight-transition) ease,\n        transform var(--swap-transition) ease,\n        background var(--highlight-transition) ease,\n        box-shadow var(--highlight-transition) ease;\n      box-shadow: 0 8px 18px rgba(0,0,0,0.35);\n      touch-action: none;\n    }\n\n    .bar .value {\n      font-weight: 700;\n      font-size: 14px;\n      margin-bottom: 8px;\n      pointer-events: none;\n      text-shadow: 0 1px 2px rgba(0,0,0,0.4);\n    }\n\n    .bar:focus {\n      outline: 2px solid var(--focus);\n      outline-offset: 2px;\n    }\n\n    .bar.compare {\n      background: #2e4b6a;\n      box-shadow: 0 0 0 2px var(--warn) inset;\n    }\n\n    .bar.swap {\n      transform: translateY(-6px) scale(1.04);\n      background: #3b5f84;\n    }\n\n    .bar.locked {\n      background: var(--accent-2);\n      color: #07261f;\n      box-shadow: 0 0 0 2px rgba(26,188,156,0.5) inset, 0 8px 18px rgba(0,0,0,0.35);\n    }\n\n    .legend {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .legend .swatch {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n    }\n    .legend .dot {\n      width: 18px; height: 18px; border-radius: 50%;\n      box-shadow: 0 0 0 2px rgba(255,255,255,0.08) inset;\n    }\n    .dot.compare { background: #2e4b6a; box-shadow: 0 0 0 2px var(--warn) inset; }\n    .dot.swap { background: #3b5f84; }\n    .dot.locked { background: var(--accent-2); }\n\n    .status {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(220px, 1fr));\n      gap: var(--gap);\n    }\n\n    .stat {\n      background: #0f1318;\n      border: 1px solid #1e2732;\n      border-radius: 12px;\n      padding: 12px;\n    }\n    .stat .big {\n      font-size: 22px;\n      font-weight: 800;\n      color: var(--text);\n    }\n    .stat .label {\n      font-size: 12px;\n      color: var(--muted);\n    }\n\n    .aria-info {\n      font-size: 13px;\n      color: var(--muted);\n    }\n\n    .plan {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    details {\n      border: 1px solid #1e2732;\n      border-radius: 12px;\n      padding: 12px;\n      background: #0f1318;\n    }\n\n    details summary {\n      cursor: pointer;\n      font-weight: 700;\n      color: var(--text);\n      outline: none;\n    }\n\n    /* Responsive tweaks */\n    @media (min-width: 840px) {\n      .module {\n        grid-template-columns: 1.2fr 0.8fr;\n      }\n    }\n    @media (max-width: 640px) {\n      .status {\n        grid-template-columns: 1fr;\n      }\n      input[type=\"range\"] {\n        width: 100%;\n      }\n    }\n  </style>\n</head>\n<body>\n  <main class=\"page\" role=\"main\" aria-label=\"Bubble Sort interactive module\">\n    <header style=\"margin-bottom: 16px;\">\n      <h1>Bubble Sort — Sorting by Adjacent Swaps</h1>\n      <p>Manipulate the array and step through bubble sort to see how adjacent comparisons slowly “bubble” the largest elements to the end.</p>\n    </header>\n\n    <section class=\"module\" aria-labelledby=\"module-title\">\n      <!-- Interactive area -->\n      <div class=\"card visual\" aria-label=\"Interactive bubble sort visual and controls\">\n        <h2 id=\"module-title\">Interactive Module</h2>\n\n        <div class=\"controls\" aria-label=\"Controls\">\n          <div class=\"row\" role=\"group\" aria-label=\"Array input controls\">\n            <label for=\"arrayInput\">Array (comma-separated):</label>\n            <input id=\"arrayInput\" type=\"text\" inputmode=\"numeric\"\n                   aria-label=\"Array input field\"\n                   value=\"7, 3, 5, 2, 9, 1, 4\" />\n            <button id=\"loadBtn\" class=\"primary\" aria-label=\"Load array\">Load</button>\n            <button id=\"randomBtn\" class=\"tinted\" aria-label=\"Randomize array\">Random</button>\n            <label for=\"lenInput\" class=\"visually-hidden\" style=\"position:absolute;left:-9999px;\">Random length</label>\n            <input id=\"lenInput\" type=\"number\" min=\"3\" max=\"12\" value=\"8\" aria-label=\"Random array length\" title=\"Length (3–12)\" style=\"width:110px;\">\n          </div>\n\n          <div class=\"row\" role=\"group\" aria-label=\"Sort controls\">\n            <button id=\"stepBtn\" class=\"primary\" aria-label=\"Step one comparison\">Step</button>\n            <button id=\"passBtn\" class=\"tinted\" aria-label=\"Run one pass\">Run Pass</button>\n            <button id=\"playBtn\" class=\"success\" aria-label=\"Play or pause sorting\">Play</button>\n            <button id=\"resetBtn\" class=\"warn\" aria-label=\"Reset to initial\">Reset</button>\n            <div class=\"row\" style=\"flex:1; justify-content:flex-end;\">\n              <label for=\"speedRange\">Speed:</label>\n              <input id=\"speedRange\" type=\"range\" min=\"0.5\" max=\"3\" step=\"0.1\" value=\"1.4\" aria-label=\"Animation speed\">\n              <span id=\"speedLabel\" aria-live=\"polite\">1.4×</span>\n            </div>\n          </div>\n\n          <div class=\"legend\" aria-label=\"Legend\">\n            <span class=\"swatch\"><span class=\"dot compare\" aria-hidden=\"true\"></span> comparing pair</span>\n            <span class=\"swatch\"><span class=\"dot swap\" aria-hidden=\"true\"></span> swapping</span>\n            <span class=\"swatch\"><span class=\"dot locked\" aria-hidden=\"true\"></span> sorted suffix (locked)</span>\n          </div>\n        </div>\n\n        <div class=\"board-wrap\">\n          <div class=\"board-labels\">\n            <span>Drag bars up/down to change values. Tab to a bar and use ArrowUp/ArrowDown for fine adjustments.</span>\n            <span id=\"passInfo\">Pass 0 of 0</span>\n          </div>\n          <div id=\"board\" class=\"board\" role=\"group\" aria-label=\"Array visualization\"></div>\n        </div>\n\n        <div class=\"status\" aria-label=\"Status panel\">\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"big\"><span id=\"compareCount\">0</span></div>\n            <div class=\"label\">Comparisons</div>\n          </div>\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"big\"><span id=\"swapCount\">0</span></div>\n            <div class=\"label\">Swaps</div>\n          </div>\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"big\"><span id=\"indexInfo\">i = 0</span></div>\n            <div class=\"label\">Current comparison index</div>\n          </div>\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"big\"><span id=\"invariantInfo\">Largest of unsorted moves right each pass</span></div>\n            <div class=\"label\">Bubble sort invariant</div>\n          </div>\n        </div>\n\n        <div class=\"aria-info\">\n          Tip: Screen readers can tab to each bar. Use arrow keys to adjust values. Use the Step and Play buttons to control the algorithm. Visual states are reinforced by text status.\n        </div>\n      </div>\n\n      <!-- Design plan content -->\n      <aside class=\"card plan\" aria-label=\"Design plan\">\n        <h2>Design Plan</h2>\n\n        <section>\n          <h3>Concept Title</h3>\n          <p>Bubble Sort: Adjacent Comparisons and Swaps</p>\n        </section>\n\n        <section>\n          <h3>Learning Objective</h3>\n          <ul>\n            - Understand that bubble sort repeatedly compares adjacent elements, swapping out-of-order pairs.\n            - See the invariant: after each pass, the largest remaining element is “bubbled” to the end and locked.\n            - Experience the algorithm step-by-step and control speed, passes, and data values.\n          </ul>\n        </section>\n\n        <section>\n          <h3>Interaction Design</h3>\n          <ul>\n            - Input: Enter a comma-separated list or generate a random array.\n            - Direct manipulation: Drag any bar vertically (or use arrow keys) to adjust its value; changes reflect immediately.\n            - Controls:\n              • Step: performs one adjacent comparison (and swap if needed).\n              • Run Pass: completes the current pass, locking the next largest element at the end.\n              • Play/Pause: auto-steps until the array is sorted.\n              • Reset: restores the initial unsorted configuration.\n            - Visual feedback:\n              • Compared bars highlight.\n              • Swaps animate with a bounce and smooth horizontal movement.\n              • Sorted suffix bars turn green (“locked”).\n            - Status: Live counters for comparisons and swaps, current index i, pass progress, and invariant description.\n          </ul>\n        </section>\n\n        <section>\n          <h3>Layout Description</h3>\n          <ul>\n            - Safe area margins: 24 px around the viewport, applied via page padding.\n            - Structure: Two-column layout on wide screens (interactive module left, plan right); single-column on narrow screens.\n            - Spacing: Minimum 16 px between interactive elements (buttons, inputs, board).\n            - Clarity: Controls grouped (array input, sort control, speed). Visual board centered with labels and legend directly below.\n            - Accessibility: Keyboard-operable bars, ARIA labels, polite live regions for status updates, high-contrast states, and responsive design across breakpoints.\n          </ul>\n        </section>\n      </aside>\n    </section>\n  </main>\n\n  <script>\n    (function () {\n      const board = document.getElementById('board');\n      const arrayInput = document.getElementById('arrayInput');\n      const loadBtn = document.getElementById('loadBtn');\n      const randomBtn = document.getElementById('randomBtn');\n      const lenInput = document.getElementById('lenInput');\n      const stepBtn = document.getElementById('stepBtn');\n      const passBtn = document.getElementById('passBtn');\n      const playBtn = document.getElementById('playBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const speedRange = document.getElementById('speedRange');\n      const speedLabel = document.getElementById('speedLabel');\n\n      const compareCountEl = document.getElementById('compareCount');\n      const swapCountEl = document.getElementById('swapCount');\n      const indexInfoEl = document.getElementById('indexInfo');\n      const invariantInfoEl = document.getElementById('invariantInfo');\n      const passInfoEl = document.getElementById('passInfo');\n\n      const MIN_VAL = 1;\n      const MAX_VAL = 99;\n\n      let arr = [7, 3, 5, 2, 9, 1, 4];\n      let bars = [];\n      let initialArr = arr.slice();\n\n      let i = 0;\n      let pass = 0;\n      let comparisons = 0;\n      let swaps = 0;\n      let running = false;\n      let passRunning = false;\n      let stepTimer = null;\n\n      function clamp(n, min, max) { return Math.max(min, Math.min(max, n)); }\n      function randomInt(min, max) { return min + Math.floor(Math.random() * (max - min + 1)); }\n\n      function applySpeed(scale) {\n        document.documentElement.style.setProperty('--speed-scale', scale.toString());\n        speedLabel.textContent = scale.toFixed(1) + '×';\n      }\n\n      function validateArrayFromInput(text) {\n        const parts = text.split(',').map(s => s.trim()).filter(s => s.length);\n        if (parts.length < 2 || parts.length > 30) {\n          alert('Please provide between 2 and 30 numbers.');\n          return null;\n        }\n        const nums = [];\n        for (const p of parts) {\n          const v = Number(p);\n          if (!Number.isFinite(v)) { alert('Only numbers are allowed.'); return null; }\n          nums.push(clamp(Math.round(v), MIN_VAL, MAX_VAL));\n        }\n        return nums;\n      }\n\n      function randomArray(length) {\n        const len = clamp(Math.round(length), 3, 12);\n        const out = [];\n        for (let k = 0; k < len; k++) {\n          out.push(randomInt(1, 99));\n        }\n        return out;\n      }\n\n      function clearBoard() {\n        while (board.firstChild) board.removeChild(board.firstChild);\n        bars = [];\n      }\n\n      function layoutBars() {\n        const width = board.clientWidth || board.offsetWidth;\n        const height = board.clientHeight || board.offsetHeight;\n        const n = arr.length;\n        const slot = Math.max(40, Math.floor(width / n) - 6);\n        const gap = Math.max(6, Math.floor((width - n * slot) / Math.max(1, n - 1)));\n        const maxH = height - 28;\n\n        for (let k = 0; k < bars.length; k++) {\n          const bar = bars[k];\n          bar.el.style.width = slot + 'px';\n          bar.el.style.left = (k * (slot + gap)) + 'px';\n          const h = Math.floor((arr[k] / MAX_VAL) * maxH);\n          bar.el.style.height = Math.max(24, h) + 'px';\n          bar.el.setAttribute('aria-label', `Index ${k}, value ${arr[k]}`);\n          bar.el.dataset.index = String(k);\n          bar.valueEl.textContent = String(arr[k]);\n        }\n      }\n\n      function renderBars() {\n        clearBoard();\n        const n = arr.length;\n        for (let k = 0; k < n; k++) {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.tabIndex = 0;\n          bar.setAttribute('role', 'slider');\n          bar.setAttribute('aria-valuemin', String(MIN_VAL));\n          bar.setAttribute('aria-valuemax', String(MAX_VAL));\n          bar.setAttribute('aria-valuenow', String(arr[k]));\n          bar.setAttribute('aria-label', `Index ${k}, value ${arr[k]}`);\n\n          const label = document.createElement('div');\n          label.className = 'value';\n          label.textContent = String(arr[k]);\n          bar.appendChild(label);\n\n          attachBarEvents(bar, k);\n\n          board.appendChild(bar);\n          bars.push({ el: bar, valueEl: label });\n        }\n        layoutBars();\n        updateStatus();\n        updateLockedState();\n      }\n\n      function updateStatus() {\n        compareCountEl.textContent = String(comparisons);\n        swapCountEl.textContent = String(swaps);\n        indexInfoEl.textContent = `i = ${i}`;\n        passInfoEl.textContent = `Pass ${pass} of ${Math.max(0, arr.length - 1)}`;\n        invariantInfoEl.textContent = (pass === 0)\n          ? 'Largest of unsorted moves right each pass'\n          : `Locked suffix size: ${pass}`;\n      }\n\n      function resetAlgorithmState() {\n        i = 0; pass = 0;\n        comparisons = 0; swaps = 0;\n        running = false; passRunning = false;\n        clearTimer();\n        playBtn.textContent = 'Play';\n        removeAllStates();\n        updateStatus();\n      }\n\n      function removeAllStates() {\n        bars.forEach(b => {\n          b.el.classList.remove('compare', 'swap', 'locked');\n        });\n      }\n\n      function updateLockedState() {\n        // Lock last 'pass' bars\n        const n = arr.length;\n        for (let k = 0; k < n; k++) {\n          if (k >= n - pass) {\n            bars[k].el.classList.add('locked');\n          } else {\n            bars[k].el.classList.remove('locked');\n          }\n        }\n      }\n\n      function markCompare(idx) {\n        removeComparisons();\n        if (bars[idx]) bars[idx].el.classList.add('compare');\n        if (bars[idx + 1]) bars[idx + 1].el.classList.add('compare');\n      }\n      function removeComparisons() {\n        bars.forEach(b => b.el.classList.remove('compare', 'swap'));\n      }\n\n      function swapVisual(idxA, idxB) {\n        // Swap array values and DOM bars positions\n        const tmp = arr[idxA]; arr[idxA] = arr[idxB]; arr[idxB] = tmp;\n\n        const tmpBar = bars[idxA];\n        bars[idxA] = bars[idxB];\n        bars[idxB] = tmpBar;\n\n        // Indicate swap\n        bars[idxA].el.classList.add('swap');\n        bars[idxB].el.classList.add('swap');\n\n        layoutBars();\n        setTimeout(() => {\n          bars[idxA].el.classList.remove('swap');\n          bars[idxB].el.classList.remove('swap');\n        }, 200);\n      }\n\n      function isSorted() {\n        for (let k = 1; k < arr.length; k++) {\n          if (arr[k - 1] > arr[k]) return false;\n        }\n        return true;\n      }\n\n      function clearTimer() {\n        if (stepTimer) {\n          clearTimeout(stepTimer);\n          stepTimer = null;\n        }\n      }\n\n      function stepOnce() {\n        const n = arr.length;\n        if (pass >= n - 1) {\n          running = false;\n          playBtn.textContent = 'Play';\n          removeComparisons();\n          updateLockedState();\n          invariantInfoEl.textContent = 'Sorted complete';\n          return;\n        }\n\n        if (i >= n - 1 - pass) {\n          // End of pass: lock the bubbled element at position n-1-pass\n          pass++;\n          i = 0;\n          updateLockedState();\n          updateStatus();\n          return;\n        }\n\n        markCompare(i);\n        comparisons++;\n        updateStatus();\n\n        if (arr[i] > arr[i + 1]) {\n          swaps++;\n          swapVisual(i, i + 1);\n        }\n        i++;\n        updateStatus();\n      }\n\n      function runPlayLoop() {\n        if (!running) return;\n        stepOnce();\n        if (pass >= arr.length - 1) {\n          running = false;\n          playBtn.textContent = 'Play';\n          return;\n        }\n        stepTimer = setTimeout(runPlayLoop, Math.max(90, 300 / Number(speedRange.value)));\n      }\n\n      function runPass() {\n        if (passRunning || running) return;\n        passRunning = true;\n        const n = arr.length;\n        function loop() {\n          if (i >= n - 1 - pass) {\n            pass++;\n            i = 0;\n            updateLockedState();\n            passRunning = false;\n            updateStatus();\n            return;\n          }\n          stepOnce();\n          if (passRunning) {\n            stepTimer = setTimeout(loop, Math.max(90, 300 / Number(speedRange.value)));\n          }\n        }\n        loop();\n      }\n\n      // Events\n      loadBtn.addEventListener('click', () => {\n        const parsed = validateArrayFromInput(arrayInput.value);\n        if (!parsed) return;\n        arr = parsed;\n        initialArr = arr.slice();\n        renderBars();\n        resetAlgorithmState();\n      });\n\n      randomBtn.addEventListener('click', () => {\n        const len = clamp(Number(lenInput.value) || 8, 3, 12);\n        arr = randomArray(len);\n        arrayInput.value = arr.join(', ');\n        initialArr = arr.slice();\n        renderBars();\n        resetAlgorithmState();\n      });\n\n      stepBtn.addEventListener('click', () => {\n        if (running) {\n          running = false;\n          playBtn.textContent = 'Play';\n          clearTimer();\n        }\n        stepOnce();\n      });\n\n      passBtn.addEventListener('click', () => {\n        runPass();\n      });\n\n      playBtn.addEventListener('click', () => {\n        running = !running;\n        playBtn.textContent = running ? 'Pause' : 'Play';\n        if (running) {\n          runPlayLoop();\n        } else {\n          clearTimer();\n        }\n      });\n\n      resetBtn.addEventListener('click', () => {\n        arr = initialArr.slice();\n        renderBars();\n        resetAlgorithmState();\n      });\n\n      speedRange.addEventListener('input', () => {\n        applySpeed(Number(speedRange.value));\n      });\n\n      window.addEventListener('resize', () => {\n        layoutBars();\n      });\n\n      // Drag and keyboard adjust for bars\n      function attachBarEvents(bar, index) {\n        let dragging = false;\n        let startY = 0;\n        let startVal = arr[index];\n\n        function setValueFromPointer(clientY) {\n          const rect = board.getBoundingClientRect();\n          const relY = clamp(clientY - rect.top, 0, rect.height);\n          const ratio = 1 - (relY / rect.height);\n          const val = clamp(Math.round(ratio * MAX_VAL), MIN_VAL, MAX_VAL);\n          return val;\n        }\n\n        function updateBarValue(idx, val) {\n          arr[idx] = val;\n          bars[idx].valueEl.textContent = String(val);\n          bars[idx].el.setAttribute('aria-valuenow', String(val));\n          layoutBars();\n          // Changing data invalidates locks; restart algorithm state\n          removeAllStates();\n          i = 0; pass = 0; comparisons = 0; swaps = 0;\n          updateStatus();\n        }\n\n        bar.addEventListener('pointerdown', (e) => {\n          e.preventDefault();\n          dragging = true;\n          startY = e.clientY;\n          startVal = arr[Number(bar.dataset.index)];\n          bar.setPointerCapture(e.pointerId);\n          if (running) {\n            running = false;\n            playBtn.textContent = 'Play';\n            clearTimer();\n          }\n        });\n\n        bar.addEventListener('pointermove', (e) => {\n          if (!dragging) return;\n          const idx = Number(bar.dataset.index);\n          const newVal = setValueFromPointer(e.clientY);\n          updateBarValue(idx, newVal);\n        });\n\n        bar.addEventListener('pointerup', (e) => {\n          dragging = false;\n          try { bar.releasePointerCapture(e.pointerId); } catch (_) {}\n        });\n\n        bar.addEventListener('keydown', (e) => {\n          const idx = Number(bar.dataset.index);\n          let delta = 0;\n          if (e.key === 'ArrowUp') delta = 1;\n          else if (e.key === 'ArrowDown') delta = -1;\n          else if (e.key === 'PageUp') delta = 5;\n          else if (e.key === 'PageDown') delta = -5;\n          if (delta !== 0) {\n            e.preventDefault();\n            const newVal = clamp(arr[idx] + delta, MIN_VAL, MAX_VAL);\n            updateBarValue(idx, newVal);\n          }\n        });\n      }\n\n      // Initialize\n      applySpeed(Number(speedRange.value));\n      renderBars();\n\n      // Keyboard shortcuts\n      document.addEventListener('keydown', (e) => {\n        if (e.target && ['INPUT', 'TEXTAREA'].includes(e.target.tagName)) return;\n        if (e.key === ' ') {\n          e.preventDefault();\n          playBtn.click();\n        } else if (e.key.toLowerCase() === 's') {\n          stepBtn.click();\n        } else if (e.key.toLowerCase() === 'p') {\n          passBtn.click();\n        } else if (e.key.toLowerCase() === 'r') {\n          resetBtn.click();\n        }\n      });\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Deque"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for the Bubble Sort interactive module, modeling algorithm execution (step/play/pass), data editing, visual compare/swap/lock feedback, and completion.",
      "states": [
        {
          "name": "idle",
          "onEnter": "updateStatus",
          "on": {
            "LOAD_CLICK": "loading",
            "RANDOM_CLICK": "loading",
            "RESET_CLICK": "resetting",
            "STEP_CLICK": "step_comparing",
            "PASS_CLICK": "pass_running",
            "PLAY_TOGGLE": "playing",
            "SPEED_CHANGE": "idle",
            "WINDOW_RESIZE": "idle",
            "BAR_POINTER_DOWN": "editing_drag",
            "BAR_KEY_ADJUST_ARROW_UP": "editing_keyboard",
            "BAR_KEY_ADJUST_ARROW_DOWN": "editing_keyboard",
            "BAR_KEY_ADJUST_PAGE_UP": "editing_keyboard",
            "BAR_KEY_ADJUST_PAGE_DOWN": "editing_keyboard",
            "KEYBOARD_SPACE": "playing",
            "KEYBOARD_S": "step_comparing",
            "KEYBOARD_P": "pass_running",
            "KEYBOARD_R": "resetting"
          }
        },
        {
          "name": "playing",
          "onEnter": "runPlayLoop",
          "onExit": "clearTimer",
          "on": {
            "TIMER_TICK": "step_comparing",
            "PLAY_TOGGLE": "idle",
            "STEP_CLICK": "step_comparing",
            "BAR_POINTER_DOWN": "editing_drag",
            "ARRAY_SORTED": "done",
            "SPEED_CHANGE": "playing",
            "WINDOW_RESIZE": "playing",
            "KEYBOARD_SPACE": "idle",
            "KEYBOARD_S": "step_comparing",
            "KEYBOARD_R": "resetting"
          }
        },
        {
          "name": "pass_running",
          "onEnter": "runPass",
          "onExit": "clearTimer",
          "on": {
            "PASS_TIMER_TICK": "step_comparing",
            "END_OF_PASS": "idle",
            "BAR_POINTER_DOWN": "editing_drag",
            "ARRAY_SORTED": "done",
            "KEYBOARD_R": "resetting"
          }
        },
        {
          "name": "step_comparing",
          "onEnter": "markCompare",
          "onExit": "removeComparisons",
          "on": {
            "SWAP_REQUIRED": "step_swapping",
            "NO_SWAP": "idle",
            "END_OF_PASS": "end_of_pass_locking",
            "ARRAY_SORTED": "done",
            "CONTINUE_PLAY": "playing",
            "CONTINUE_IDLE": "idle"
          }
        },
        {
          "name": "step_swapping",
          "onEnter": "swapVisual",
          "on": {
            "SWAP_ANIMATION_DONE": "idle",
            "END_OF_PASS": "end_of_pass_locking",
            "CONTINUE_PLAY": "playing",
            "ARRAY_SORTED": "done"
          }
        },
        {
          "name": "end_of_pass_locking",
          "onEnter": "updateLockedState",
          "on": {
            "CONTINUE_PLAY": "playing",
            "PASS_LOOP_COMPLETED": "idle",
            "CONTINUE_IDLE": "idle",
            "ARRAY_SORTED": "done"
          }
        },
        {
          "name": "editing_drag",
          "onEnter": "clearTimer",
          "onExit": "releasePointerCapture",
          "on": {
            "BAR_POINTER_MOVE": "editing_drag",
            "BAR_POINTER_UP": "idle",
            "LOAD_CLICK": "loading",
            "RANDOM_CLICK": "loading",
            "RESET_CLICK": "resetting"
          }
        },
        {
          "name": "editing_keyboard",
          "onEnter": "updateBarValue",
          "on": {
            "KEY_ADJUST_APPLIED": "idle",
            "LOAD_CLICK": "loading",
            "RANDOM_CLICK": "loading",
            "RESET_CLICK": "resetting"
          }
        },
        {
          "name": "loading",
          "onEnter": "renderBars",
          "on": {
            "LOAD_SUCCESS": "idle",
            "RANDOM_SUCCESS": "idle",
            "INVALID_INPUT": "idle"
          }
        },
        {
          "name": "resetting",
          "onEnter": "resetAlgorithmState",
          "on": {
            "RESET_DONE": "idle"
          }
        },
        {
          "name": "done",
          "onEnter": "updateLockedState",
          "on": {
            "LOAD_CLICK": "loading",
            "RANDOM_CLICK": "loading",
            "RESET_CLICK": "resetting",
            "BAR_POINTER_DOWN": "editing_drag",
            "BAR_KEY_ADJUST_ARROW_UP": "editing_keyboard",
            "BAR_KEY_ADJUST_ARROW_DOWN": "editing_keyboard",
            "BAR_KEY_ADJUST_PAGE_UP": "editing_keyboard",
            "BAR_KEY_ADJUST_PAGE_DOWN": "editing_keyboard",
            "STEP_CLICK": "done",
            "PASS_CLICK": "done",
            "PLAY_TOGGLE": "done",
            "SPEED_CHANGE": "done",
            "WINDOW_RESIZE": "done",
            "KEYBOARD_SPACE": "done",
            "KEYBOARD_S": "done",
            "KEYBOARD_P": "done",
            "KEYBOARD_R": "resetting"
          }
        }
      ],
      "events": [
        "LOAD_CLICK",
        "RANDOM_CLICK",
        "RESET_CLICK",
        "STEP_CLICK",
        "PASS_CLICK",
        "PLAY_TOGGLE",
        "SPEED_CHANGE",
        "WINDOW_RESIZE",
        "BAR_POINTER_DOWN",
        "BAR_POINTER_MOVE",
        "BAR_POINTER_UP",
        "BAR_KEY_ADJUST_ARROW_UP",
        "BAR_KEY_ADJUST_ARROW_DOWN",
        "BAR_KEY_ADJUST_PAGE_UP",
        "BAR_KEY_ADJUST_PAGE_DOWN",
        "KEYBOARD_SPACE",
        "KEYBOARD_S",
        "KEYBOARD_P",
        "KEYBOARD_R",
        "TIMER_TICK",
        "PASS_TIMER_TICK",
        "SWAP_REQUIRED",
        "NO_SWAP",
        "SWAP_ANIMATION_DONE",
        "END_OF_PASS",
        "PASS_LOOP_COMPLETED",
        "ARRAY_SORTED",
        "LOAD_SUCCESS",
        "RANDOM_SUCCESS",
        "INVALID_INPUT",
        "RESET_DONE",
        "KEY_ADJUST_APPLIED",
        "CONTINUE_PLAY",
        "CONTINUE_IDLE"
      ],
      "notes": "Mapping to code: idle corresponds to the default state when not auto-playing or running a pass. playing is when the 'running' flag is true; onEnter runPlayLoop schedules TIMER_TICKs and sets the Play button to 'Pause' in code; onExit clearTimer sets 'running' false and returns Play label to 'Play'. pass_running corresponds to 'passRunning' true; onEnter runPass executes a timed loop until END_OF_PASS, then PASS_LOOP_COMPLETED leads back to idle. step_comparing uses markCompare() to add 'compare' CSS class to the two bars and increments comparisons; onExit removeComparisons() clears 'compare'/'swap' classes. step_swapping uses swapVisual() which swaps array contents and bar positions, adds 'swap' CSS class, animates, and schedules removal; SWAP_ANIMATION_DONE fires after ~200 ms. end_of_pass_locking uses updateLockedState() to add 'locked' CSS class to the bubbled element; updateStatus() also updates counters and pass info (invoked within stepOnce/runPass). editing_drag is entered on BAR_POINTER_DOWN; onEnter it interrupts playing (running=false, clearTimer()) and sets pointer capture; BAR_POINTER_MOVE repeatedly calls updateBarValue(), which resets algorithm state (i=0, pass=0, comparisons=0, swaps=0), removes all visual states via removeAllStates(), updates ARIA and layout; BAR_POINTER_UP releases capture and returns to idle. editing_keyboard is entered for arrow/page key adjustments on a focused bar; onEnter updateBarValue() performs the same algorithm reset behaviors, then KEY_ADJUST_APPLIED returns to idle. loading covers both Load and Random: validateArrayFromInput() or randomArray() produce new data; onEnter renderBars() rebuilds DOM bars and layout; resetAlgorithmState() is applied afterward; LOAD_SUCCESS/RANDOM_SUCCESS immediately return to idle, INVALID_INPUT keeps previous data. resetting sets arr = initialArr, then renderBars() and resetAlgorithmState() to clear counters/visual states. done occurs when pass >= n-1 (sorted complete); onEnter updateLockedState() ensures all bars are locked, removeComparisons() clears highlights, invariantInfoEl shows 'Sorted complete', and Play text is set to 'Play'; user actions that change data (drag/keyboard) or load/reset leave done. Shortcuts: SPACE triggers PLAY_TOGGLE, 's' triggers STEP_CLICK, 'p' triggers PASS_CLICK, 'r' triggers RESET_CLICK. Speed slider changes (SPEED_CHANGE) call applySpeed() and alter CSS variables; they do not change state but affect timer cadence and animation duration. WINDOW_RESIZE triggers layoutBars(); it is modeled as self-transitions in the current state. Conditional events emitted by the algorithm controller: SWAP_REQUIRED vs NO_SWAP are determined by arr[i] > arr[i+1]; END_OF_PASS occurs when i >= n-1-pass; ARRAY_SORTED occurs when pass >= n-1; CONTINUE_PLAY/CONTINUE_IDLE indicate whether auto-play or pass loop should continue versus staying idle after a step."
    }
  },
  {
    "id": "b089cac0-b402-11f0-bdbc-23fe6fc76a5e",
    "timestamp": "2025-10-28T13:35:13.856Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Array",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Bubble Sort Interactive Module</title>\n  <style>\n    :root {\n      --bg: #0f172a;          /* slate-900 */\n      --surface: #111827;     /* gray-900 */\n      --panel: #1f2937;       /* gray-800 */\n      --text: #f8fafc;        /* slate-50 */\n      --muted: #cbd5e1;       /* slate-300 */\n      --accent: #22c55e;      /* green-500 */\n      --compare: #f59e0b;     /* amber-500 */\n      --swap: #ef4444;        /* red-500 */\n      --sorted: #38bdf8;      /* sky-400 */\n      --focus: #a78bfa;       /* violet-400 */\n      --warn: #fb7185;        /* rose-400 */\n      --gap-16: 16px;\n      --gap-24: 24px;\n      --radius-8: 8px;\n      --radius-12: 12px;\n      --shadow-1: 0 6px 24px rgba(0,0,0,0.25);\n      --swap-duration: 320ms;\n    }\n\n    @media (prefers-color-scheme: light) {\n      :root {\n        --bg: #f8fafc;        /* slate-50 */\n        --surface: #ffffff;   /* white */\n        --panel: #f1f5f9;     /* slate-100 */\n        --text: #0f172a;      /* slate-900 */\n        --muted: #475569;     /* slate-600 */\n        --accent: #16a34a;    /* green-600 */\n        --compare: #b45309;   /* amber-700 */\n        --swap: #b91c1c;      /* red-700 */\n        --sorted: #0284c7;    /* sky-600 */\n        --focus: #7c3aed;     /* violet-600 */\n        --warn: #be123c;      /* rose-700 */\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\", sans-serif;\n      line-height: 1.5;\n    }\n\n    body {\n      margin: 0;\n    }\n\n    main.safe-area {\n      padding: var(--gap-24);\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    h1, h2, h3 {\n      margin: 0 0 8px 0;\n    }\n\n    p {\n      margin: 0 0 12px 0;\n      color: var(--muted);\n    }\n\n    .design-plan {\n      background: var(--panel);\n      border-radius: var(--radius-12);\n      padding: var(--gap-24);\n      box-shadow: var(--shadow-1);\n      margin-bottom: var(--gap-24);\n    }\n\n    .design-plan ul {\n      padding-left: 18px;\n      margin: 8px 0 0 0;\n    }\n    .design-plan li {\n      margin: 6px 0;\n    }\n\n    .module {\n      background: var(--surface);\n      border-radius: var(--radius-12);\n      box-shadow: var(--shadow-1);\n      padding: var(--gap-24);\n    }\n\n    .module-grid {\n      display: grid;\n      grid-template-columns: 1fr 1.5fr;\n      gap: var(--gap-24);\n    }\n\n    @media (max-width: 900px) {\n      .module-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap-16);\n    }\n\n    .controls .row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: var(--gap-16);\n    }\n    @media (max-width: 560px) {\n      .controls .row {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .control-group {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 8px;\n    }\n\n    label {\n      font-size: 14px;\n      color: var(--muted);\n    }\n\n    input[type=\"text\"],\n    input[type=\"number\"],\n    input[type=\"range\"],\n    select {\n      width: 100%;\n      padding: 10px 12px;\n      border-radius: 8px;\n      border: 1px solid transparent;\n      background: var(--panel);\n      color: var(--text);\n      outline: none;\n    }\n\n    input[type=\"text\"]:focus,\n    input[type=\"number\"]:focus,\n    select:focus {\n      border-color: var(--focus);\n      box-shadow: 0 0 0 3px color-mix(in oklab, var(--focus) 35%, transparent);\n    }\n\n    .button-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap-16);\n    }\n\n    button {\n      appearance: none;\n      border: none;\n      border-radius: 10px;\n      padding: 10px 14px;\n      background: var(--panel);\n      color: var(--text);\n      cursor: pointer;\n      transition: background 160ms ease, transform 100ms ease;\n      min-height: 40px;\n    }\n    button:hover {\n      background: color-mix(in oklab, var(--panel) 80%, var(--text) 20%);\n    }\n    button:active {\n      transform: translateY(1px);\n    }\n    button:focus-visible {\n      outline: 3px solid var(--focus);\n      outline-offset: 2px;\n    }\n    .primary {\n      background: var(--accent);\n      color: #0b1320;\n      font-weight: 600;\n    }\n    .danger {\n      background: var(--swap);\n      color: #fff;\n      font-weight: 600;\n    }\n    .secondary {\n      background: var(--panel);\n      border: 1px solid color-mix(in oklab, var(--panel) 60%, var(--text) 40%);\n    }\n    .toggle {\n      display: inline-flex;\n      align-items: center;\n      gap: 10px;\n      background: var(--panel);\n      border-radius: 10px;\n      padding: 10px 12px;\n    }\n    .toggle input {\n      transform: translateY(1px);\n    }\n\n    .viz {\n      display: grid;\n      grid-template-rows: auto auto 1fr auto;\n      gap: var(--gap-16);\n      min-height: 420px;\n    }\n\n    .viz-header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: var(--gap-16);\n    }\n\n    .status {\n      display: grid;\n      grid-template-columns: repeat(3, minmax(120px, 1fr));\n      gap: var(--gap-16);\n    }\n    @media (max-width: 560px) {\n      .status {\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n    .stat {\n      background: var(--panel);\n      border-radius: 10px;\n      padding: 10px 12px;\n    }\n    .stat h4 {\n      margin: 0 0 4px 0;\n      font-size: 13px;\n      color: var(--muted);\n      font-weight: 500;\n    }\n    .stat .value {\n      font-size: 18px;\n      font-weight: 700;\n    }\n\n    .bars-wrap {\n      background: var(--panel);\n      border-radius: var(--radius-12);\n      padding: 16px;\n      position: relative;\n    }\n\n    .bars {\n      position: relative;\n      display: flex;\n      align-items: flex-end;\n      gap: 8px;\n      height: 320px;\n      overflow: hidden;\n    }\n\n    .bar {\n      position: relative;\n      flex: 1 1 0px;\n      min-width: 24px;\n      background: linear-gradient(180deg, color-mix(in oklab, var(--sorted) 15%, var(--accent) 85%), var(--accent));\n      border-radius: 8px 8px 4px 4px;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      transition: filter 200ms ease;\n    }\n\n    .bar .label {\n      position: absolute;\n      top: -24px;\n      font-size: 12px;\n      color: var(--text);\n      background: rgba(0,0,0,0.25);\n      padding: 4px 6px;\n      border-radius: 6px;\n      backdrop-filter: blur(2px);\n    }\n\n    .bar.comparing {\n      outline: 3px solid var(--compare);\n      outline-offset: 2px;\n      filter: brightness(1.1);\n      animation: pulse 420ms ease-in-out;\n    }\n\n    @keyframes pulse {\n      0%   { transform: scale(1); }\n      25%  { transform: scale(1.02); }\n      50%  { transform: scale(1); }\n      75%  { transform: scale(1.02); }\n      100% { transform: scale(1); }\n    }\n\n    .bar.animating {\n      will-change: transform;\n      transition: transform var(--swap-duration) ease-in-out;\n    }\n\n    .bar.swapped {\n      box-shadow: 0 0 0 3px var(--swap) inset;\n    }\n\n    .bar.sorted {\n      background: linear-gradient(180deg, color-mix(in oklab, var(--sorted) 65%, var(--accent) 35%), var(--sorted));\n      filter: saturate(1.2);\n    }\n\n    .legend {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px 20px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .legend .swatch {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n    }\n    .legend .box {\n      width: 16px;\n      height: 16px;\n      border-radius: 4px;\n      background: var(--accent);\n      outline: 2px solid transparent;\n    }\n    .legend .box.compare { outline-color: var(--compare); }\n    .legend .box.swap { background: var(--swap); }\n    .legend .box.sorted { background: var(--sorted); }\n\n    .pseudocode {\n      background: var(--panel);\n      border-radius: var(--radius-12);\n      padding: 12px 14px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .pseudocode .line {\n      padding: 6px 8px;\n      border-radius: 8px;\n    }\n    .pseudocode .line.active {\n      background: color-mix(in oklab, var(--focus) 22%, transparent);\n      color: var(--text);\n    }\n    .pseudocode .line.dim {\n      opacity: 0.75;\n    }\n\n    .sr-status {\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      overflow: hidden;\n      clip-path: inset(50%);\n    }\n\n    .error {\n      color: var(--warn);\n      font-size: 13px;\n      min-height: 18px;\n    }\n\n    .footer {\n      margin-top: var(--gap-24);\n      color: var(--muted);\n      font-size: 14px;\n    }\n\n    .kbd {\n      display: inline-block;\n      padding: 2px 6px;\n      border-radius: 6px;\n      border: 1px solid color-mix(in oklab, var(--panel) 60%, var(--text) 40%);\n      background: var(--panel);\n      color: var(--text);\n      font-weight: 600;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <main class=\"safe-area\">\n    <section class=\"design-plan\" aria-labelledby=\"plan-title\">\n      <h2 id=\"plan-title\">Interactive Design Plan</h2>\n\n      <h3>Concept Title</h3>\n      <p>Bubble Sort: Adjacent Comparisons and Passes</p>\n\n      <h3>Learning Objective</h3>\n      <ul>\n        <li>Understand how bubble sort repeatedly compares adjacent elements and swaps them to “bubble” larger (or smaller) values toward the end (or start).</li>\n        <li>Experience the algorithm step-by-step, observing passes, comparisons, swaps, and the early-exit optimization.</li>\n        <li>Relate the visual process to pseudocode by seeing the currently active line highlighted.</li>\n      </ul>\n\n      <h3>Interaction Design</h3>\n      <ul>\n        <li>Typing: Enter a custom array in the input field using comma or space-separated numbers; click Load Array to start.</li>\n        <li>Clicking:\n          <ul>\n            <li>Play/Pause animates comparisons and swaps automatically at the chosen speed.</li>\n            <li>Step performs a single compare-and-optional-swap with visual highlighting.</li>\n            <li>Randomize generates a new array of the selected size.</li>\n            <li>Reset returns to the original unsorted array.</li>\n            <li>Ascending/Descending changes the comparison direction; Early Exit enables the optimization.</li>\n          </ul>\n        </li>\n        <li>Visual feedback:\n          <ul>\n            <li>Compared pair is outlined in amber; if swapped, bars slide into new positions with a smooth animation and a red accent.</li>\n            <li>After each pass, the last sorted element gains a blue tint.</li>\n            <li>Pseudocode lines highlight to match each phase (initialize, compare, swap, end of pass/early exit).</li>\n            <li>Counters for comparisons and swaps update live; a status line describes the active operation.</li>\n          </ul>\n        </li>\n        <li>Keyboard: Space toggles play/pause; S or Right Arrow steps; R resets; G randomizes.</li>\n      </ul>\n\n      <h3>Layout Description</h3>\n      <ul>\n        <li>Safe area margins: The main module is centered with 24 px padding on all viewport sides.</li>\n        <li>Spatial organization: A two-column grid places controls on the left and visualization on the right; on narrow screens it stacks vertically for clarity.</li>\n        <li>Controls: Labeled inputs and buttons use at least 16 px spacing; focus styles are visible and high contrast for accessibility.</li>\n        <li>Visualization: Bars panel occupies generous vertical space, with a legend, status counters, and pseudocode beneath to maintain focus and balance.</li>\n        <li>Responsiveness: The grid collapses smoothly; bars flex to available width. All interactive elements remain touch-friendly.</li>\n        <li>Accessibility: Semantic labels, ARIA region labels, and an aria-live status are included. Focus rings and large tap targets enhance usability.</li>\n      </ul>\n    </section>\n\n    <section class=\"module\" role=\"region\" aria-label=\"Bubble Sort Interactive Module\">\n      <div class=\"module-grid\">\n        <div class=\"controls\" aria-label=\"Controls\">\n          <div class=\"control-group\">\n            <label for=\"arrayInput\">Array (comma or space-separated)</label>\n            <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 7, 3, 9, 2, 5\" aria-describedby=\"inputHelp\" />\n            <div id=\"inputHelp\" class=\"error\" aria-live=\"polite\"></div>\n            <div class=\"button-row\">\n              <button id=\"loadBtn\" class=\"primary\" title=\"Load the typed array\">Load Array</button>\n              <button id=\"resetBtn\" class=\"secondary\" title=\"Reset to original unsorted array\">Reset</button>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"control-group\">\n              <label for=\"sizeRange\">Random Size</label>\n              <input id=\"sizeRange\" type=\"range\" min=\"3\" max=\"20\" value=\"10\" />\n              <div class=\"button-row\">\n                <button id=\"randomBtn\" title=\"Generate a random array at the chosen size\">Randomize</button>\n              </div>\n            </div>\n\n            <div class=\"control-group\">\n              <label for=\"speedRange\">Speed (ms per step)</label>\n              <input id=\"speedRange\" type=\"range\" min=\"80\" max=\"1200\" value=\"420\" />\n              <div class=\"button-row\">\n                <span id=\"speedLabel\" aria-live=\"polite\">420 ms</span>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"control-group\">\n              <label for=\"orderSelect\">Order</label>\n              <select id=\"orderSelect\" aria-label=\"Sort order\">\n                <option value=\"asc\">Ascending (smallest to largest)</option>\n                <option value=\"desc\">Descending (largest to smallest)</option>\n              </select>\n            </div>\n\n            <div class=\"control-group\">\n              <label class=\"toggle\" for=\"earlyExit\">\n                <input id=\"earlyExit\" type=\"checkbox\" checked />\n                <span>Early Exit Optimization</span>\n              </label>\n            </div>\n          </div>\n\n          <div class=\"button-row\" aria-label=\"Playback Controls\">\n            <button id=\"playBtn\" class=\"primary\" title=\"Play or pause animation\">Play</button>\n            <button id=\"stepBtn\" title=\"Perform a single step\">Step</button>\n            <button id=\"stopBtn\" class=\"danger\" title=\"Stop and mark as finished if possible\">Stop</button>\n          </div>\n\n          <p class=\"footer\">\n            Keyboard: <span class=\"kbd\">Space</span> Play/Pause • <span class=\"kbd\">S</span> or <span class=\"kbd\">→</span> Step • <span class=\"kbd\">R</span> Reset • <span class=\"kbd\">G</span> Randomize\n          </p>\n        </div>\n\n        <div class=\"viz\">\n          <div class=\"viz-header\">\n            <h2>Bubble Sort Explorer</h2>\n            <div class=\"legend\" aria-label=\"Legend\">\n              <span class=\"swatch\"><span class=\"box compare\"></span> Comparing pair</span>\n              <span class=\"swatch\"><span class=\"box swap\"></span> Swap</span>\n              <span class=\"swatch\"><span class=\"box sorted\"></span> Sorted boundary</span>\n            </div>\n          </div>\n\n          <div class=\"status\" aria-label=\"Sort Status\">\n            <div class=\"stat\"><h4>Pass</h4><div class=\"value\" id=\"passStat\">0</div></div>\n            <div class=\"stat\"><h4>Comparisons</h4><div class=\"value\" id=\"compStat\">0</div></div>\n            <div class=\"stat\"><h4>Swaps</h4><div class=\"value\" id=\"swapStat\">0</div></div>\n          </div>\n\n          <div class=\"bars-wrap\" aria-label=\"Bars Visualization\">\n            <div id=\"bars\" class=\"bars\" role=\"list\" aria-label=\"Array bars\"></div>\n            <div id=\"srStatus\" class=\"sr-status\" aria-live=\"polite\"></div>\n          </div>\n\n          <div class=\"pseudocode\" aria-label=\"Pseudocode\">\n            <div class=\"line dim\" data-line=\"1\">for end = n - 1 down to 1:</div>\n            <div class=\"line dim\" data-line=\"2\">  swapped = false</div>\n            <div class=\"line dim\" data-line=\"3\">  for i = 0 to end - 1:</div>\n            <div class=\"line dim\" data-line=\"4\">    if order(a[i], a[i+1]) then</div>\n            <div class=\"line dim\" data-line=\"5\">      swap(a[i], a[i+1])</div>\n            <div class=\"line dim\" data-line=\"6\">      swapped = true</div>\n            <div class=\"line dim\" data-line=\"7\">  if earlyExit and not swapped: break</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </main>\n\n  <script>\n    (function() {\n      const barsEl = document.getElementById('bars');\n      const srStatusEl = document.getElementById('srStatus');\n      const loadBtn = document.getElementById('loadBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const randomBtn = document.getElementById('randomBtn');\n      const playBtn = document.getElementById('playBtn');\n      const stepBtn = document.getElementById('stepBtn');\n      const stopBtn = document.getElementById('stopBtn');\n      const arrayInput = document.getElementById('arrayInput');\n      const inputHelp = document.getElementById('inputHelp');\n      const sizeRange = document.getElementById('sizeRange');\n      const speedRange = document.getElementById('speedRange');\n      const speedLabel = document.getElementById('speedLabel');\n      const orderSelect = document.getElementById('orderSelect');\n      const earlyExit = document.getElementById('earlyExit');\n\n      const passStat = document.getElementById('passStat');\n      const compStat = document.getElementById('compStat');\n      const swapStat = document.getElementById('swapStat');\n\n      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n      const state = {\n        arr: [],\n        original: [],\n        size: parseInt(sizeRange.value, 10),\n        ascending: orderSelect.value === 'asc',\n        earlyExit: earlyExit.checked,\n        playing: false,\n        passIndex: 0,          // 0-based pass count\n        j: 0,                  // current inner index\n        swappedThisPass: false,\n        comparisons: 0,\n        swaps: 0,\n        speed: parseInt(speedRange.value, 10),\n        finished: false,\n        animating: false\n      };\n\n      function clamp(n, min, max) { return Math.max(min, Math.min(max, n)); }\n\n      function randomArray(size) {\n        const out = [];\n        for (let i = 0; i < size; i++) {\n          out.push(Math.floor(Math.random() * 99) + 1);\n        }\n        return out;\n      }\n\n      function renderBars(arr) {\n        barsEl.innerHTML = '';\n        const maxVal = Math.max(...arr);\n        arr.forEach((v, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.setAttribute('role', 'listitem');\n          bar.setAttribute('aria-label', `Index ${idx}, Value ${v}`);\n          bar.style.height = `${clamp((v / maxVal) * 100, 4, 100)}%`;\n\n          const label = document.createElement('div');\n          label.className = 'label';\n          label.textContent = String(v);\n\n          bar.appendChild(label);\n          barsEl.appendChild(bar);\n        });\n      }\n\n      function updateStats() {\n        passStat.textContent = String(state.passIndex);\n        compStat.textContent = String(state.comparisons);\n        swapStat.textContent = String(state.swaps);\n      }\n\n      function clearHighlights() {\n        [...barsEl.children].forEach(bar => {\n          bar.classList.remove('comparing', 'swapped');\n        });\n      }\n\n      function setSortedBoundary() {\n        const endIdx = state.arr.length - 1 - state.passIndex;\n        if (endIdx >= 0 && endIdx < barsEl.children.length) {\n          barsEl.children[endIdx].classList.add('sorted');\n        }\n      }\n\n      function resetSortedMarkers() {\n        [...barsEl.children].forEach(bar => bar.classList.remove('sorted'));\n      }\n\n      function setPseudocodeActive(lines = []) {\n        const all = document.querySelectorAll('.pseudocode .line');\n        all.forEach(el => el.classList.remove('active'));\n        lines.forEach(n => {\n          const el = document.querySelector(`.pseudocode .line[data-line=\"${n}\"]`);\n          if (el) el.classList.add('active');\n        });\n      }\n\n      function statusSpeak(text) {\n        srStatusEl.textContent = text;\n      }\n\n      function parseArrayInput(text) {\n        const parts = text.trim().split(/[\\s,]+/).filter(Boolean);\n        if (parts.length === 0) return { ok: false, error: 'Please enter at least one number.' };\n        const nums = [];\n        for (const p of parts) {\n          const n = Number(p);\n          if (!isFinite(n)) return { ok: false, error: `\"${p}\" is not a valid number.` };\n          if (Math.abs(n) > 9999) return { ok: false, error: `Value ${n} is too large (limit 9999).` };\n          nums.push(Math.round(n));\n        }\n        if (nums.length < 3 || nums.length > 20) {\n          return { ok: false, error: `Please provide between 3 and 20 numbers (you provided ${nums.length}).` };\n        }\n        return { ok: true, value: nums };\n      }\n\n      function initArray(arr, fromUser = false) {\n        state.arr = arr.slice();\n        state.original = arr.slice();\n        state.size = arr.length;\n        resetAlgorithmState();\n        renderBars(state.arr);\n        resetSortedMarkers();\n        updateStats();\n        inputHelp.textContent = '';\n        if (fromUser) arrayInput.value = arr.join(', ');\n      }\n\n      function resetAlgorithmState() {\n        state.passIndex = 0;\n        state.j = 0;\n        state.swappedThisPass = false;\n        state.comparisons = 0;\n        state.swaps = 0;\n        state.finished = false;\n        state.animating = false;\n        clearHighlights();\n        setPseudocodeActive([1]);\n        statusSpeak('Ready to start bubble sort. Press Play or Step.');\n      }\n\n      function shouldSwap(a, b) {\n        return state.ascending ? a > b : a < b;\n      }\n\n      function getEndIndex() {\n        return state.arr.length - 1 - state.passIndex;\n      }\n\n      function markComparing(j) {\n        clearHighlights();\n        const a = barsEl.children[j];\n        const b = barsEl.children[j + 1];\n        if (a && b) {\n          a.classList.add('comparing');\n          b.classList.add('comparing');\n        }\n      }\n\n      function flipSwap(j) {\n        return new Promise(resolve => {\n          const a = barsEl.children[j];\n          const b = barsEl.children[j + 1];\n          if (!a || !b) { resolve(); return; }\n\n          const aStart = a.getBoundingClientRect();\n          const bStart = b.getBoundingClientRect();\n\n          // Perform DOM swap\n          a.before(b);\n\n          const aEnd = a.getBoundingClientRect();\n          const bEnd = b.getBoundingClientRect();\n\n          const aDeltaX = aStart.left - aEnd.left;\n          const bDeltaX = bStart.left - bEnd.left;\n\n          // Apply FLIP transforms\n          a.style.transform = `translateX(${aDeltaX}px)`;\n          b.style.transform = `translateX(${bDeltaX}px)`;\n          a.classList.add('animating', 'swapped');\n          b.classList.add('animating', 'swapped');\n\n          // Force reflow, then animate to final position\n          void a.offsetWidth;\n          void b.offsetWidth;\n\n          const duration = prefersReducedMotion ? 1 : parseInt(getComputedStyle(document.documentElement).getPropertyValue('--swap-duration')) || 320;\n\n          function onDone(e) {\n            // Clean up after animation\n            a.style.transform = '';\n            b.style.transform = '';\n            a.classList.remove('animating');\n            b.classList.remove('animating');\n            a.removeEventListener('transitionend', onDone);\n            resolve();\n          }\n\n          a.addEventListener('transitionend', onDone);\n          // Start animation\n          requestAnimationFrame(() => {\n            a.style.transform = 'translateX(0px)';\n            b.style.transform = 'translateX(0px)';\n          });\n        });\n      }\n\n      async function performStep() {\n        if (state.finished || state.animating) return;\n        const end = getEndIndex();\n        if (end <= 0) {\n          finishAll();\n          return;\n        }\n\n        setPseudocodeActive([3, 4]);\n        const j = state.j;\n\n        if (j >= end) {\n          // End of pass\n          setPseudocodeActive([7]);\n          if (state.earlyExit && !state.swappedThisPass) {\n            finishAll();\n            return;\n          }\n          // Mark boundary as sorted\n          setSortedBoundary();\n          state.passIndex += 1;\n          state.j = 0;\n          state.swappedThisPass = false;\n          updateStats();\n          statusSpeak(`Pass ${state.passIndex} started.`);\n          setPseudocodeActive([2]);\n          return;\n        }\n\n        // Compare pair j and j+1\n        const aVal = state.arr[j];\n        const bVal = state.arr[j + 1];\n        markComparing(j);\n        state.comparisons += 1;\n        updateStats();\n        statusSpeak(`Comparing indices ${j} and ${j + 1}: ${aVal} and ${bVal}.`);\n\n        if (shouldSwap(aVal, bVal)) {\n          // Swap in data and animate bars\n          setPseudocodeActive([5, 6]);\n          state.animating = true;\n          // Swap in data\n          const tmp = state.arr[j];\n          state.arr[j] = state.arr[j + 1];\n          state.arr[j + 1] = tmp;\n          state.swaps += 1;\n          state.swappedThisPass = true;\n          updateStats();\n          await flipSwap(j);\n          state.animating = false;\n          clearHighlights();\n        } else {\n          // No swap; brief highlight remains\n        }\n\n        state.j += 1;\n      }\n\n      function finishAll() {\n        state.finished = true;\n        state.playing = false;\n        playBtn.textContent = 'Play';\n        setPseudocodeActive([1]);\n        // Mark all as sorted\n        [...barsEl.children].forEach(bar => bar.classList.add('sorted'));\n        statusSpeak('Array sorted!');\n      }\n\n      function setSpeed(ms) {\n        state.speed = ms;\n        speedLabel.textContent = `${ms} ms`;\n        const duration = Math.max(140, Math.floor(ms * 0.7));\n        if (prefersReducedMotion) {\n          document.documentElement.style.setProperty('--swap-duration', '1ms');\n        } else {\n          document.documentElement.style.setProperty('--swap-duration', `${duration}ms`);\n        }\n      }\n\n      async function playLoop() {\n        if (!state.playing) return;\n        await performStep();\n        if (!state.playing) return;\n        setTimeout(playLoop, state.speed);\n      }\n\n      // Event handlers\n      loadBtn.addEventListener('click', () => {\n        const text = arrayInput.value;\n        const res = parseArrayInput(text);\n        if (!res.ok) {\n          inputHelp.textContent = res.error;\n          return;\n        }\n        initArray(res.value, true);\n      });\n\n      resetBtn.addEventListener('click', () => {\n        arrayInput.value = state.original.join(', ');\n        initArray(state.original.slice(), true);\n      });\n\n      randomBtn.addEventListener('click', () => {\n        const size = parseInt(sizeRange.value, 10);\n        const arr = randomArray(size);\n        arrayInput.value = arr.join(', ');\n        initArray(arr, true);\n      });\n\n      playBtn.addEventListener('click', () => {\n        if (state.finished) {\n          resetAlgorithmState();\n          resetSortedMarkers();\n        }\n        state.playing = !state.playing;\n        playBtn.textContent = state.playing ? 'Pause' : 'Play';\n        if (state.playing) playLoop();\n      });\n\n      stepBtn.addEventListener('click', async () => {\n        if (state.finished) return;\n        await performStep();\n      });\n\n      stopBtn.addEventListener('click', () => {\n        state.playing = false;\n        playBtn.textContent = 'Play';\n        finishAll();\n      });\n\n      orderSelect.addEventListener('change', () => {\n        state.ascending = orderSelect.value === 'asc';\n      });\n\n      earlyExit.addEventListener('change', () => {\n        state.earlyExit = earlyExit.checked;\n      });\n\n      speedRange.addEventListener('input', () => {\n        setSpeed(parseInt(speedRange.value, 10));\n      });\n\n      document.addEventListener('keydown', (e) => {\n        const tag = (e.target.tagName || '').toLowerCase();\n        const typing = tag === 'input' || tag === 'textarea' || tag === 'select';\n        if (typing) return;\n\n        if (e.code === 'Space') {\n          e.preventDefault();\n          playBtn.click();\n        } else if (e.key.toLowerCase() === 's' || e.code === 'ArrowRight') {\n          e.preventDefault();\n          stepBtn.click();\n        } else if (e.key.toLowerCase() === 'r') {\n          e.preventDefault();\n          resetBtn.click();\n        } else if (e.key.toLowerCase() === 'g') {\n          e.preventDefault();\n          randomBtn.click();\n        }\n      });\n\n      // Initialize\n      setSpeed(state.speed);\n      const initial = randomArray(state.size);\n      arrayInput.value = initial.join(', ');\n      initArray(initial, true);\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Array"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for a Bubble Sort interactive module covering array loading, playback control, stepwise execution, visual comparison/swapping animations, pass transitions, and completion.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "initialize_default_array_and_ui",
          "on": {
            "INIT_COMPLETE": "ready"
          }
        },
        {
          "name": "ready",
          "onEnter": "reset_algorithm_state_and_show_ready",
          "on": {
            "PLAY_TOGGLE": "playing",
            "STEP_COMPARE": "comparing",
            "STEP_END_OF_PASS": "pass_transition",
            "STEP_SORT_COMPLETE": "finished",
            "LOAD_ARRAY_SUCCESS": "ready",
            "RESET_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "STOP_CLICK": "finished",
            "ORDER_CHANGE": "ready",
            "EARLY_EXIT_TOGGLE": "ready",
            "SPEED_CHANGE": "ready"
          }
        },
        {
          "name": "paused",
          "onEnter": "set_play_button_to_play",
          "on": {
            "PLAY_TOGGLE": "playing",
            "STEP_COMPARE": "comparing",
            "STEP_END_OF_PASS": "pass_transition",
            "STEP_SORT_COMPLETE": "finished",
            "LOAD_ARRAY_SUCCESS": "ready",
            "RESET_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "STOP_CLICK": "finished",
            "ORDER_CHANGE": "paused",
            "EARLY_EXIT_TOGGLE": "paused",
            "SPEED_CHANGE": "paused"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_play_loop",
          "onExit": "stop_play_loop",
          "on": {
            "AUTO_STEP_COMPARE": "comparing",
            "AUTO_STEP_END_OF_PASS": "pass_transition",
            "AUTO_STEP_SORT_COMPLETE": "finished",
            "PLAY_TOGGLE": "paused",
            "STOP_CLICK": "finished",
            "LOAD_ARRAY_SUCCESS": "playing",
            "RESET_CLICK": "playing",
            "RANDOMIZE_CLICK": "playing",
            "ORDER_CHANGE": "playing",
            "EARLY_EXIT_TOGGLE": "playing",
            "SPEED_CHANGE": "playing"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_pair_and_update_stats",
          "on": {
            "NEEDS_SWAP": "swapping",
            "NO_SWAP_STEP_DONE_PLAY": "playing",
            "NO_SWAP_STEP_DONE_PAUSE": "paused"
          }
        },
        {
          "name": "swapping",
          "onEnter": "flip_swap_animation_and_update_stats",
          "onExit": "clear_highlights",
          "on": {
            "ANIMATION_END_PLAY": "playing",
            "ANIMATION_END_PAUSE": "paused"
          }
        },
        {
          "name": "pass_transition",
          "onEnter": "end_of_pass_update_and_mark_boundary",
          "on": {
            "EARLY_EXIT_BREAK": "finished",
            "PASS_CONTINUE_PLAY": "playing",
            "PASS_CONTINUE_PAUSE": "paused"
          }
        },
        {
          "name": "finished",
          "onEnter": "mark_all_sorted_and_announce",
          "on": {
            "PLAY_TOGGLE": "playing",
            "LOAD_ARRAY_SUCCESS": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "STOP_CLICK": "finished",
            "ORDER_CHANGE": "finished",
            "EARLY_EXIT_TOGGLE": "finished",
            "SPEED_CHANGE": "finished"
          }
        }
      ],
      "events": [
        "INIT_COMPLETE",
        "LOAD_ARRAY_SUCCESS",
        "LOAD_ARRAY_FAILURE",
        "RESET_CLICK",
        "RANDOMIZE_CLICK",
        "PLAY_TOGGLE",
        "STOP_CLICK",
        "STEP_COMPARE",
        "STEP_END_OF_PASS",
        "STEP_SORT_COMPLETE",
        "AUTO_STEP_COMPARE",
        "AUTO_STEP_END_OF_PASS",
        "AUTO_STEP_SORT_COMPLETE",
        "NEEDS_SWAP",
        "NO_SWAP_STEP_DONE_PLAY",
        "NO_SWAP_STEP_DONE_PAUSE",
        "ANIMATION_END_PLAY",
        "ANIMATION_END_PAUSE",
        "PASS_CONTINUE_PLAY",
        "PASS_CONTINUE_PAUSE",
        "EARLY_EXIT_BREAK",
        "ORDER_CHANGE",
        "EARLY_EXIT_TOGGLE",
        "SPEED_CHANGE"
      ],
      "notes": "Mapping to implementation: initializing occurs on page load (setSpeed + randomArray + initArray). ready is the idle/start state after any initialization, load, randomize, or reset; pseudocode line 1 is highlighted and SR status announces 'Ready'. paused is any non-playing mid-progress state; Play/Pause button toggles between playing and paused. playing sets state.playing = true, updates Play button text to 'Pause', and runs playLoop which emits AUTO_STEP_* events every state.speed ms. A user 'Step' in ready/paused emits STEP_* events. performStep behavior: (a) If end <= 0 emit STEP_SORT_COMPLETE/AUTO_STEP_SORT_COMPLETE, leading to finished. (b) If j >= end emit STEP_END_OF_PASS/AUTO_STEP_END_OF_PASS, transitioning to pass_transition. (c) Otherwise emit STEP_COMPARE/AUTO_STEP_COMPARE to enter comparing. In comparing, markComparing() occurs, comparisons++ and pseudocode lines [3,4] highlight; if shouldSwap() is true, emit NEEDS_SWAP; else emit NO_SWAP_STEP_DONE_{PLAY|PAUSE} depending on state.playing, which advances index and returns to playing or paused. In swapping, data is swapped, swaps++ and pseudocode lines [5,6] highlight; flipSwap() runs until transitionend and then emits ANIMATION_END_{PLAY|PAUSE} depending on state.playing. pass_transition highlights line [7], checks earlyExit; if no swaps this pass and earlyExit is enabled, emit EARLY_EXIT_BREAK to finished; otherwise mark boundary as sorted, increment pass, reset j, highlight line [2], and emit PASS_CONTINUE_{PLAY|PAUSE} depending on state.playing. finished sets state.finished = true, state.playing = false, highlights pseudocode line [1], announces 'Array sorted!', and marks all bars sorted. From finished, PLAY_TOGGLE triggers resetAlgorithmState() and resetSortedMarkers() before re-entering playing (as per click handler). LOAD_ARRAY_SUCCESS, RANDOMIZE_CLICK, and RESET_CLICK always (re)initialize the array (initArray) and lead to ready unless already in playing, in which case this FSM keeps state as playing with reinitialized data; in the actual code these events can occur during playing without stopping the loop. LOAD_ARRAY_FAILURE only updates the inline error message (inputHelp.textContent) and does not change the algorithmic state; thus it is listed as an event but intentionally has no transition in the states. ORDER_CHANGE, EARLY_EXIT_TOGGLE, and SPEED_CHANGE update configuration in place and do not change states. Keyboard shortcuts: Space -> PLAY_TOGGLE; S or ArrowRight -> STEP_*; R -> RESET_CLICK; G -> RANDOMIZE_CLICK."
    }
  },
  {
    "id": "a3d142e0-b402-11f0-bdbc-23fe6fc76a5e",
    "timestamp": "2025-10-28T13:35:40.026Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Linked List",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Interactive Lab</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --safe-margin: 24px;\n      --gap: 16px;\n      --bar-gap: 12px;\n      --bar-border-radius: 6px;\n      --bg: #0f172a;\n      --panel: #111827;\n      --card: #1f2937;\n      --text: #f9fafb;\n      --muted: #cbd5e1;\n      --accent: #60a5fa;\n      --accent-2: #34d399;\n      --warn: #f97316;\n      --danger: #ef4444;\n      --compare: #fde047;\n      --focus: #a78bfa;\n    }\n    html, body {\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\", sans-serif;\n    }\n    body {\n      margin: 0;\n      padding: var(--safe-margin);\n      box-sizing: border-box;\n    }\n    .container {\n      max-width: 1000px;\n      margin: 0 auto;\n    }\n    header {\n      margin-bottom: 16px;\n    }\n    h1 {\n      margin: 0 0 8px 0;\n      font-size: 28px;\n      line-height: 1.2;\n    }\n    .subtitle {\n      color: var(--muted);\n      font-size: 14px;\n    }\n    .card {\n      background: var(--card);\n      border-radius: 12px;\n      padding: 16px;\n      box-shadow: 0 1px 0 rgba(255,255,255,0.04), 0 24px 64px rgba(0,0,0,0.3);\n    }\n    .controls {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: flex-end;\n      margin-bottom: var(--gap);\n    }\n    .control-group {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      min-width: 220px;\n      flex: 1;\n    }\n    label {\n      font-size: 13px;\n      color: var(--muted);\n    }\n    input[type=\"text\"] {\n      background: var(--panel);\n      color: var(--text);\n      border: 1px solid #374151;\n      border-radius: 10px;\n      padding: 10px 12px;\n      outline: none;\n    }\n    input[type=\"text\"]:focus {\n      border-color: var(--focus);\n      box-shadow: 0 0 0 3px rgba(167, 139, 250, 0.25);\n    }\n    .button-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n    button {\n      background: #334155;\n      color: var(--text);\n      border: none;\n      border-radius: 10px;\n      padding: 10px 14px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: transform 0.05s ease, background 0.2s ease, box-shadow 0.2s ease;\n    }\n    button:hover {\n      background: #3b4a61;\n    }\n    button:active {\n      transform: translateY(1px);\n    }\n    button:focus-visible {\n      outline: 2px solid var(--focus);\n      outline-offset: 2px;\n    }\n    .btn-primary {\n      background: var(--accent);\n      color: #0b1020;\n    }\n    .btn-primary:hover {\n      background: #4f92ee;\n    }\n    .btn-danger {\n      background: var(--danger);\n    }\n    .btn-danger:hover {\n      background: #d83d3d;\n    }\n    .btn-secondary {\n      background: #374151;\n    }\n    .inline {\n      display: flex;\n      gap: var(--gap);\n      align-items: center;\n    }\n    .slider-group {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    input[type=\"range\"] {\n      width: 180px;\n      accent-color: var(--accent);\n    }\n    .checkbox-group {\n      display: flex;\n      gap: 8px;\n      align-items: center;\n      color: var(--muted);\n      font-size: 14px;\n    }\n    .viz {\n      margin-top: var(--gap);\n    }\n    .bars {\n      position: relative;\n      height: 280px;\n      background: var(--panel);\n      border: 1px solid #374151;\n      border-radius: 12px;\n      overflow: hidden;\n    }\n    .bar {\n      position: absolute;\n      bottom: 36px;\n      left: 0;\n      transform: translateX(0);\n      transition: transform var(--move-duration, 300ms) ease, filter 120ms ease;\n      width: var(--bar-width, 60px);\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 8px;\n    }\n    .bar-rect {\n      width: 100%;\n      background: #3b82f6;\n      border-radius: var(--bar-border-radius);\n      height: var(--bar-height, 80px);\n      transition: height 220ms ease, background 120ms ease, transform 200ms ease;\n      box-shadow: inset 0 -6px 0 rgba(255,255,255,0.08);\n    }\n    .bar-label {\n      font-size: 12px;\n      color: var(--muted);\n      text-align: center;\n      user-select: none;\n    }\n    .bar.compare .bar-rect {\n      background: var(--compare);\n      filter: drop-shadow(0 0 8px rgba(253, 224, 71, 0.4));\n    }\n    .bar.swap .bar-rect {\n      background: var(--danger);\n      filter: drop-shadow(0 0 8px rgba(239, 68, 68, 0.45));\n    }\n    .bar.sorted .bar-rect {\n      background: var(--accent-2);\n      filter: none;\n      opacity: 0.9;\n    }\n    .legend {\n      display: flex;\n      gap: 24px;\n      align-items: center;\n      padding: 10px 12px;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    .legend-item {\n      display: inline-flex;\n      gap: 8px;\n      align-items: center;\n    }\n    .pill {\n      width: 18px;\n      height: 10px;\n      border-radius: 6px;\n      display: inline-block;\n      background: #3b82f6;\n    }\n    .pill.compare { background: var(--compare); }\n    .pill.swap { background: var(--danger); }\n    .pill.sorted { background: var(--accent-2); }\n\n    .status {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n      gap: var(--gap);\n      margin-top: var(--gap);\n    }\n    .status-item {\n      background: var(--panel);\n      border: 1px solid #374151;\n      border-radius: 12px;\n      padding: 12px;\n      font-size: 14px;\n      color: var(--muted);\n    }\n    .status-item strong {\n      display: block;\n      color: var(--text);\n      font-size: 16px;\n      margin-bottom: 6px;\n    }\n    .assist {\n      font-size: 13px;\n      color: var(--muted);\n      margin-top: 8px;\n    }\n    .sr-live {\n      position: absolute;\n      left: -9999px;\n      top: auto;\n      width: 1px;\n      height: 1px;\n      overflow: hidden;\n    }\n\n    details {\n      margin-top: 24px;\n      background: var(--panel);\n      border: 1px solid #374151;\n      border-radius: 12px;\n      padding: 12px 16px;\n    }\n    summary {\n      cursor: pointer;\n      font-weight: 600;\n    }\n    .info-grid {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 12px;\n      margin-top: 12px;\n    }\n    .info-block h3 {\n      margin: 0 0 6px 0;\n      font-size: 18px;\n    }\n    .info-block p, .info-block ul {\n      margin: 0;\n      color: var(--muted);\n      font-size: 14px;\n      line-height: 1.5;\n    }\n    .info-block ul {\n      padding-left: 18px;\n    }\n\n    @media (min-width: 860px) {\n      .info-grid {\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n\n    /* Keep at least 16px spacing between interactive elements */\n    .controls .control-group,\n    .controls .button-row,\n    .controls .inline {\n      margin-bottom: 0; /* gap handles spacing */\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\" role=\"main\">\n    <header>\n      <h1>Bubble Sort Interactive Lab</h1>\n      <div class=\"subtitle\">Explore adjacent comparisons, swaps, and the pass-by-pass \"bubbling\" effect with visual feedback.</div>\n    </header>\n\n    <section class=\"card\" aria-label=\"Interactive Bubble Sort Module\">\n      <div class=\"controls\" aria-label=\"Controls\">\n        <div class=\"control-group\">\n          <label for=\"dataInput\">Data (numbers separated by commas or spaces)</label>\n          <input id=\"dataInput\" type=\"text\" placeholder=\"e.g., 5, 3, 8, 1, 4, 7, 2, 6\" aria-label=\"Enter numbers to sort\" />\n        </div>\n        <div class=\"button-row\" role=\"group\" aria-label=\"Data actions\">\n          <button id=\"setDataBtn\" class=\"btn-primary\">Set Data</button>\n          <button id=\"randomBtn\" class=\"btn-secondary\">Randomize</button>\n          <button id=\"shuffleBtn\" class=\"btn-secondary\">Shuffle</button>\n          <button id=\"resetBtn\" class=\"btn-danger\">Reset</button>\n        </div>\n        <div class=\"inline\">\n          <div class=\"slider-group\" aria-label=\"Animation speed\">\n            <label for=\"speedRange\">Speed</label>\n            <input id=\"speedRange\" type=\"range\" min=\"0.25\" max=\"2.5\" step=\"0.25\" value=\"1\" />\n            <span id=\"speedLabel\" aria-live=\"polite\">1.0×</span>\n          </div>\n          <div class=\"checkbox-group\">\n            <input id=\"earlyExit\" type=\"checkbox\" />\n            <label for=\"earlyExit\">Early exit optimization</label>\n          </div>\n        </div>\n        <div class=\"button-row\" role=\"group\" aria-label=\"Playback controls\">\n          <button id=\"stepBtn\" class=\"btn-primary\">Step</button>\n          <button id=\"playBtn\">Play</button>\n          <button id=\"pauseBtn\">Pause</button>\n        </div>\n      </div>\n\n      <div class=\"viz\">\n        <div class=\"legend\" aria-hidden=\"false\">\n          <span class=\"legend-item\"><span class=\"pill\"></span> Default</span>\n          <span class=\"legend-item\"><span class=\"pill compare\"></span> Comparing</span>\n          <span class=\"legend-item\"><span class=\"pill swap\"></span> Swapping</span>\n          <span class=\"legend-item\"><span class=\"pill sorted\"></span> Sorted zone</span>\n        </div>\n        <div id=\"bars\" class=\"bars\" aria-label=\"Bar visualization of array\"></div>\n        <div class=\"assist\">Tip: Press Space to Play/Pause, and S to Step. The rightmost green region grows each pass—largest elements settle there.</div>\n      </div>\n\n      <div class=\"status\" aria-label=\"Sorting status\">\n        <div class=\"status-item\">\n          <strong>Current Pass</strong>\n          <div>Pass <span id=\"passNum\">0</span> of <span id=\"passTotal\">0</span></div>\n        </div>\n        <div class=\"status-item\">\n          <strong>Comparing Indices</strong>\n          <div><span id=\"compareIndices\">–</span></div>\n        </div>\n        <div class=\"status-item\">\n          <strong>Comparisons</strong>\n          <div id=\"comparisonCount\">0</div>\n        </div>\n        <div class=\"status-item\">\n          <strong>Swaps</strong>\n          <div id=\"swapCount\">0</div>\n        </div>\n        <div class=\"status-item\">\n          <strong>Array</strong>\n          <div id=\"arrayText\">[]</div>\n        </div>\n      </div>\n      <div id=\"live\" class=\"sr-live\" aria-live=\"polite\"></div>\n    </section>\n\n    <details>\n      <summary>About this module</summary>\n      <div class=\"info-grid\">\n        <div class=\"info-block\">\n          <h3>Concept Title</h3>\n          <p>Bubble Sort: Adjacent comparisons and swaps across passes.</p>\n        </div>\n        <div class=\"info-block\">\n          <h3>Learning Objective</h3>\n          <p>After interacting, you should be able to:\n          </p>\n          <ul>\n            <li>Describe how bubble sort repeatedly compares adjacent elements, swapping when needed.</li>\n            <li>Explain why the largest unsorted element moves to the end each pass.</li>\n            <li>Recognize the early-exit optimization when a pass performs no swaps.</li>\n          </ul>\n        </div>\n        <div class=\"info-block\">\n          <h3>Interaction Design</h3>\n          <p>\n            Type custom numbers or randomize/shuffle the list. Use Step to run one comparison (with swap if needed) or Play to animate continuously at your chosen speed. Current pairs glow yellow (compare), swaps flash red, and the rightmost sorted zone turns green at the end of each pass. Status panels update live with indices, pass counts, comparisons, and swaps. Keyboard shortcuts: Space to Play/Pause, S to Step.\n          </p>\n        </div>\n        <div class=\"info-block\">\n          <h3>Layout Description</h3>\n          <p>\n            The page maintains 24 px safe margins. Controls are grouped with at least 16 px spacing between interactive elements. The bar visualization sits beneath controls for focus, with a concise legend and live status panels below. Elements are responsive; bars and text adjust to viewport width while preserving accessibility (focus styles, ARIA labels, and live announcements).\n          </p>\n        </div>\n      </div>\n    </details>\n  </div>\n\n  <script>\n    // Utility\n    const $ = (sel) => document.querySelector(sel);\n    const $$ = (sel) => document.querySelectorAll(sel);\n    const sleep = (ms) => new Promise((res) => setTimeout(res, ms));\n\n    // DOM refs\n    const barsEl = $(\"#bars\");\n    const dataInput = $(\"#dataInput\");\n    const setDataBtn = $(\"#setDataBtn\");\n    const randomBtn = $(\"#randomBtn\");\n    const shuffleBtn = $(\"#shuffleBtn\");\n    const resetBtn = $(\"#resetBtn\");\n    const speedRange = $(\"#speedRange\");\n    const speedLabel = $(\"#speedLabel\");\n    const earlyExitChk = $(\"#earlyExit\");\n    const stepBtn = $(\"#stepBtn\");\n    const playBtn = $(\"#playBtn\");\n    const pauseBtn = $(\"#pauseBtn\");\n\n    const passNumEl = $(\"#passNum\");\n    const passTotalEl = $(\"#passTotal\");\n    const compareIndicesEl = $(\"#compareIndices\");\n    const comparisonCountEl = $(\"#comparisonCount\");\n    const swapCountEl = $(\"#swapCount\");\n    const arrayTextEl = $(\"#arrayText\");\n    const liveEl = $(\"#live\");\n\n    // Data model: array of { id, value }\n    let nextId = 1;\n    let initialArr = [];\n    let arr = [];\n    const barDomById = new Map();\n\n    // Sorting state\n    let state = {\n      pass: 0,\n      j: 0,\n      comparisons: 0,\n      swaps: 0,\n      finished: false,\n      swappedInPass: false\n    };\n\n    let playing = false;\n\n    function parseInput(str) {\n      const parts = str\n        .trim()\n        .replace(/,/g, \" \")\n        .split(/\\s+/)\n        .filter((p) => p.length);\n      if (parts.length === 0) return [];\n      const values = [];\n      for (const p of parts) {\n        const n = Number(p);\n        if (!Number.isFinite(n)) return null;\n        values.push(n);\n      }\n      return values;\n    }\n\n    function makeArr(values) {\n      return values.map((v) => ({ id: nextId++, value: v }));\n    }\n\n    function randomValues() {\n      const len = Math.floor(Math.random() * 6) + 6; // 6..11\n      const vals = [];\n      for (let i = 0; i < len; i++) {\n        vals.push(Math.floor(Math.random() * 98) + 2); // 2..99\n      }\n      return vals;\n    }\n\n    function setInitialData(values) {\n      initialArr = makeArr(values);\n      arr = initialArr.map((x) => ({ ...x }));\n      resetState();\n      createOrSyncBars(true);\n      announce(\"Data set. Ready to sort.\");\n    }\n\n    function resetState() {\n      state = {\n        pass: 0,\n        j: 0,\n        comparisons: 0,\n        swaps: 0,\n        finished: false,\n        swappedInPass: false\n      };\n      updateStatus();\n      clearHighlights();\n    }\n\n    function shuffleArray(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n    }\n\n    // Bars creation and layout\n    function createOrSyncBars(recreate = false) {\n      if (recreate) {\n        barsEl.innerHTML = \"\";\n        barDomById.clear();\n        // Create persistent bar nodes for each item id\n        for (const item of arr) {\n          const bar = document.createElement(\"div\");\n          bar.className = \"bar\";\n          bar.setAttribute(\"role\", \"button\");\n          bar.setAttribute(\"tabindex\", \"0\");\n          bar.setAttribute(\"aria-label\", `Value ${item.value}`);\n          bar.dataset.id = item.id;\n\n          const rect = document.createElement(\"div\");\n          rect.className = \"bar-rect\";\n\n          const label = document.createElement(\"div\");\n          label.className = \"bar-label\";\n          label.textContent = String(item.value);\n\n          bar.appendChild(rect);\n          bar.appendChild(label);\n          barsEl.appendChild(bar);\n          barDomById.set(item.id, bar);\n\n          // Optional focus/keyboard interactions: arrow keys change focus among bars\n          bar.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"ArrowRight\" || e.key === \"ArrowLeft\") {\n              e.preventDefault();\n              const idx = arr.findIndex((x) => x.id === item.id);\n              const nextIdx = Math.min(arr.length - 1, Math.max(0, idx + (e.key === \"ArrowRight\" ? 1 : -1)));\n              const nextBar = barDomById.get(arr[nextIdx].id);\n              nextBar?.focus();\n            }\n          });\n        }\n      } else {\n        // Update labels if needed\n        for (const item of arr) {\n          const bar = barDomById.get(item.id);\n          if (bar) {\n            const label = bar.querySelector(\".bar-label\");\n            if (label) label.textContent = String(item.value);\n            bar.setAttribute(\"aria-label\", `Value ${item.value}`);\n          }\n        }\n      }\n      layoutBars();\n      updateSortedZone();\n      updateStatus();\n    }\n\n    function layoutBars() {\n      const containerWidth = barsEl.clientWidth;\n      const containerHeight = barsEl.clientHeight - 36; // leave room for labels\n      const n = arr.length;\n      const gap = Math.max(8, Math.min(24, Math.floor(containerWidth / (n * 8))));\n      const slot = containerWidth / n;\n      const barWidth = Math.max(40, Math.min(84, slot - gap));\n\n      const maxVal = Math.max(...arr.map((x) => Math.abs(x.value)), 1);\n      const minRect = 30;\n      const maxRect = Math.max(minRect + 60, containerHeight - 20);\n\n      for (let i = 0; i < n; i++) {\n        const item = arr[i];\n        const bar = barDomById.get(item.id);\n        if (!bar) continue;\n        const x = i * slot + (slot - barWidth) / 2;\n        const h = Math.round(minRect + (Math.abs(item.value) / maxVal) * (maxRect - minRect));\n\n        bar.style.setProperty(\"--bar-width\", `${barWidth}px`);\n        bar.style.setProperty(\"--bar-height\", `${h}px`);\n        bar.style.transform = `translateX(${x}px)`;\n        bar.style.setProperty(\"--move-duration\", `${getMoveDuration()}ms`);\n      }\n    }\n\n    function updateSortedZone() {\n      const n = arr.length;\n      const sortedStart = Math.max(0, n - state.pass);\n      for (let i = 0; i < n; i++) {\n        const bar = barDomById.get(arr[i].id);\n        if (!bar) continue;\n        bar.classList.toggle(\"sorted\", i >= sortedStart && state.pass > 0);\n      }\n    }\n\n    function clearHighlights() {\n      for (const bar of barDomById.values()) {\n        bar.classList.remove(\"compare\", \"swap\");\n      }\n    }\n\n    function highlightCompare(i) {\n      clearHighlights();\n      const ids = [arr[i]?.id, arr[i + 1]?.id];\n      for (const id of ids) {\n        const el = barDomById.get(id);\n        if (el) el.classList.add(\"compare\");\n      }\n    }\n\n    function highlightSwap(i) {\n      const ids = [arr[i]?.id, arr[i + 1]?.id];\n      for (const id of ids) {\n        const el = barDomById.get(id);\n        if (el) el.classList.add(\"swap\");\n      }\n    }\n\n    function getSpeedMultiplier() {\n      return Number(speedRange.value);\n    }\n    function getMoveDuration() {\n      // Base 320ms scaled inversely by speed multiplier\n      const m = getSpeedMultiplier();\n      const dur = Math.round(320 / m);\n      return Math.max(140, dur);\n    }\n    function getStepPause() {\n      // Pause between compare and swap phases\n      const m = getSpeedMultiplier();\n      const base = 280;\n      return Math.max(80, Math.round(base / m));\n    }\n\n    function updateStatus() {\n      passNumEl.textContent = state.pass;\n      passTotalEl.textContent = Math.max(0, arr.length - 1);\n      comparisonCountEl.textContent = state.comparisons;\n      swapCountEl.textContent = state.swaps;\n      if (!state.finished) {\n        const totalPairs = Math.max(0, arr.length - 1 - state.pass);\n        const jText = totalPairs > 0 ? `${state.j} & ${state.j + 1}` : \"–\";\n        compareIndicesEl.textContent = jText;\n      } else {\n        compareIndicesEl.textContent = \"–\";\n      }\n      arrayTextEl.textContent = `[${arr.map((x) => x.value).join(\", \")}]`;\n    }\n\n    function announce(text) {\n      liveEl.textContent = text;\n    }\n\n    async function stepOnce() {\n      if (state.finished || arr.length < 2) return;\n      const n = arr.length;\n      const lastIndex = n - 1 - state.pass;\n      if (state.j >= lastIndex) {\n        // Pass complete\n        if (earlyExitChk.checked && !state.swappedInPass) {\n          state.finished = true;\n          updateSortedZone(); // whole array sorted\n          updateStatus();\n          announce(\"No swaps in last pass. Early exit: array sorted.\");\n          return;\n        }\n        state.pass++;\n        state.j = 0;\n        state.swappedInPass = false;\n        updateSortedZone();\n        updateStatus();\n        if (state.pass >= n - 1) {\n          state.finished = true;\n          updateSortedZone();\n          updateStatus();\n          announce(\"Sorting complete.\");\n          return;\n        }\n      }\n\n      // Compare arr[j] and arr[j+1]\n      highlightCompare(state.j);\n      announce(`Comparing indices ${state.j} and ${state.j + 1}.`);\n      state.comparisons++;\n      updateStatus();\n\n      await sleep(getStepPause());\n\n      const a = arr[state.j].value;\n      const b = arr[state.j + 1].value;\n\n      if (a > b) {\n        // Swap visuals\n        highlightSwap(state.j);\n        // Swap data\n        [arr[state.j], arr[state.j + 1]] = [arr[state.j + 1], arr[state.j]];\n        state.swaps++;\n        state.swappedInPass = true;\n        layoutBars(); // animate movement via transform transition\n        announce(`Swap performed: ${a} > ${b}.`);\n        updateStatus();\n        await sleep(getMoveDuration());\n      }\n\n      clearHighlights();\n      state.j++;\n      updateStatus();\n    }\n\n    async function playLoop() {\n      playing = true;\n      playBtn.disabled = true;\n      pauseBtn.disabled = false;\n      stepBtn.disabled = true;\n      while (playing && !state.finished) {\n        await stepOnce();\n        await sleep(Math.max(60, Math.round(getStepPause() * 0.6)));\n      }\n      if (state.finished) {\n        playing = false;\n        playBtn.disabled = false;\n        pauseBtn.disabled = true;\n        stepBtn.disabled = false;\n      }\n    }\n\n    function pause() {\n      playing = false;\n      playBtn.disabled = false;\n      pauseBtn.disabled = true;\n      stepBtn.disabled = false;\n      announce(\"Paused.\");\n    }\n\n    function resetToInitial() {\n      arr = initialArr.map((x) => ({ ...x }));\n      pause();\n      resetState();\n      createOrSyncBars(false);\n      announce(\"Reset to initial order.\");\n    }\n\n    function onResize() {\n      layoutBars();\n    }\n\n    // Event handlers\n    setDataBtn.addEventListener(\"click\", () => {\n      const values = parseInput(dataInput.value);\n      if (values === null || values.length === 0) {\n        announce(\"Invalid input. Enter numbers separated by commas or spaces.\");\n        dataInput.focus();\n        return;\n      }\n      setInitialData(values);\n    });\n\n    randomBtn.addEventListener(\"click\", () => {\n      const values = randomValues();\n      dataInput.value = values.join(\", \");\n      setInitialData(values);\n    });\n\n    shuffleBtn.addEventListener(\"click\", () => {\n      shuffleArray(arr);\n      pause();\n      resetState();\n      createOrSyncBars(false);\n      announce(\"Shuffled current data.\");\n    });\n\n    resetBtn.addEventListener(\"click\", resetToInitial);\n\n    speedRange.addEventListener(\"input\", () => {\n      const v = Number(speedRange.value).toFixed(2);\n      speedLabel.textContent = `${Number(v).toFixed(2).replace(/\\.00$/, \".0\")}×`;\n      layoutBars();\n    });\n\n    stepBtn.addEventListener(\"click\", () => {\n      pause();\n      stepOnce();\n    });\n\n    playBtn.addEventListener(\"click\", () => {\n      if (!playing) playLoop();\n    });\n\n    pauseBtn.addEventListener(\"click\", pause);\n\n    // Keyboard shortcuts\n    document.addEventListener(\"keydown\", (e) => {\n      if (e.target && (e.target.tagName === \"INPUT\" || e.target.tagName === \"TEXTAREA\")) {\n        return; // don't intercept typing\n      }\n      if (e.code === \"Space\") {\n        e.preventDefault();\n        if (playing) pause(); else playLoop();\n      } else if (e.key.toLowerCase() === \"s\") {\n        e.preventDefault();\n        pause();\n        stepOnce();\n      }\n    });\n\n    window.addEventListener(\"resize\", onResize);\n\n    // Initialize with a default dataset\n    const defaultVals = [5, 3, 8, 1, 4, 7, 2, 6];\n    dataInput.value = defaultVals.join(\", \");\n    setInitialData(defaultVals);\n    pauseBtn.disabled = true;\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Linked List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for an interactive Bubble Sort lab covering data entry/reset, playback control (play/pause/step), visual compare/swap phases, pass boundary updates, and completion.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "loadDefaultDataset",
          "on": {
            "INIT_COMPLETED": "paused"
          }
        },
        {
          "name": "paused",
          "onEnter": "setControlsPaused",
          "on": {
            "SET_DATA_VALID": "paused",
            "SET_DATA_INVALID": "paused",
            "RANDOMIZE": "paused",
            "SHUFFLE": "paused",
            "RESET": "paused",
            "PLAY_CLICK": "playing_pass_check",
            "SPACE_TOGGLE_PLAY_PAUSE": "playing_pass_check",
            "STEP_CLICK": "stepping_pass_check",
            "KEY_STEP": "stepping_pass_check",
            "SPEED_CHANGE": "paused",
            "WINDOW_RESIZE": "paused",
            "EARLY_EXIT_TOGGLED": "paused",
            "BAR_FOCUS_LEFT": "paused",
            "BAR_FOCUS_RIGHT": "paused"
          }
        },
        {
          "name": "stepping_pass_check",
          "onEnter": "checkPassBoundaryAndUpdate",
          "on": {
            "PASS_COMPLETED_NO_SWAPS_EARLY_EXIT": "done",
            "SORTING_FINISHED": "done",
            "PASS_COMPLETED_MORE_REMAINING": "paused",
            "PASS_NOT_COMPLETE": "stepping_comparing"
          }
        },
        {
          "name": "stepping_comparing",
          "onEnter": "highlightCompareAndAnnounce",
          "on": {
            "AFTER_COMPARE_DELAY_AND_A_GT_B": "stepping_swapping",
            "AFTER_COMPARE_DELAY_AND_A_LE_B": "stepping_advance_pointer"
          }
        },
        {
          "name": "stepping_swapping",
          "onEnter": "swapBarsAnimateAndAnnounce",
          "onExit": "clearHighlights",
          "on": {
            "AFTER_SWAP_ANIMATION": "stepping_advance_pointer"
          }
        },
        {
          "name": "stepping_advance_pointer",
          "onEnter": "clearHighlightsAndAdvancePointer",
          "on": {
            "STEP_DONE": "paused"
          }
        },
        {
          "name": "playing_pass_check",
          "onEnter": "setControlsPlaying",
          "on": {
            "PAUSE_CLICK": "paused",
            "SPACE_TOGGLE_PLAY_PAUSE": "paused",
            "PASS_COMPLETED_NO_SWAPS_EARLY_EXIT": "done",
            "SORTING_FINISHED": "done",
            "PASS_NOT_COMPLETE": "playing_comparing",
            "PASS_COMPLETED_MORE_REMAINING": "playing_pass_check"
          }
        },
        {
          "name": "playing_comparing",
          "onEnter": "highlightCompareAndAnnounce",
          "on": {
            "PAUSE_CLICK": "paused",
            "SPACE_TOGGLE_PLAY_PAUSE": "paused",
            "AFTER_COMPARE_DELAY_AND_A_GT_B": "playing_swapping",
            "AFTER_COMPARE_DELAY_AND_A_LE_B": "playing_advance_pointer"
          }
        },
        {
          "name": "playing_swapping",
          "onEnter": "swapBarsAnimateAndAnnounce",
          "onExit": "clearHighlights",
          "on": {
            "PAUSE_CLICK": "paused",
            "SPACE_TOGGLE_PLAY_PAUSE": "paused",
            "AFTER_SWAP_ANIMATION": "playing_advance_pointer"
          }
        },
        {
          "name": "playing_advance_pointer",
          "onEnter": "clearHighlightsAndAdvancePointer",
          "on": {
            "PAUSE_CLICK": "paused",
            "SPACE_TOGGLE_PLAY_PAUSE": "paused",
            "WAIT_BETWEEN_AUTO_STEPS": "playing_pass_check"
          }
        },
        {
          "name": "done",
          "onEnter": "announceCompleteAndShowSorted",
          "on": {
            "SET_DATA_VALID": "paused",
            "RANDOMIZE": "paused",
            "SHUFFLE": "paused",
            "RESET": "paused",
            "SPEED_CHANGE": "done",
            "WINDOW_RESIZE": "done",
            "PLAY_CLICK": "done",
            "STEP_CLICK": "done",
            "KEY_STEP": "done",
            "SPACE_TOGGLE_PLAY_PAUSE": "done"
          }
        }
      ],
      "events": [
        "INIT_COMPLETED",
        "SET_DATA_VALID",
        "SET_DATA_INVALID",
        "RANDOMIZE",
        "SHUFFLE",
        "RESET",
        "PLAY_CLICK",
        "PAUSE_CLICK",
        "SPACE_TOGGLE_PLAY_PAUSE",
        "STEP_CLICK",
        "KEY_STEP",
        "SPEED_CHANGE",
        "WINDOW_RESIZE",
        "EARLY_EXIT_TOGGLED",
        "BAR_FOCUS_LEFT",
        "BAR_FOCUS_RIGHT",
        "PASS_NOT_COMPLETE",
        "PASS_COMPLETED_MORE_REMAINING",
        "PASS_COMPLETED_NO_SWAPS_EARLY_EXIT",
        "SORTING_FINISHED",
        "AFTER_COMPARE_DELAY_AND_A_GT_B",
        "AFTER_COMPARE_DELAY_AND_A_LE_B",
        "AFTER_SWAP_ANIMATION",
        "STEP_DONE",
        "WAIT_BETWEEN_AUTO_STEPS"
      ],
      "notes": "Mapping to code: initializing.loadDefaultDataset corresponds to setting default values, setInitialData(defaultVals), and initial UI setup. paused.setControlsPaused mirrors pause(): playing=false; playBtn.enabled=true; pauseBtn.disabled=true; stepBtn.enabled=true; clearHighlights; updateStatus. Playing states setControlsPlaying matches playLoop() entry: playing=true; playBtn.disabled=true; pauseBtn.disabled=false; stepBtn.disabled=true. The pass boundary logic is centralized in checkPassBoundaryAndUpdate: if j >= lastIndex then (a) if earlyExit checked and no swaps in the pass -> set finished=true, updateSortedZone(), updateStatus(), announce('No swaps...'), emit PASS_COMPLETED_NO_SWAPS_EARLY_EXIT; (b) else increment pass, reset j and swappedInPass, updateSortedZone(), updateStatus(), then if pass >= n-1 -> emit SORTING_FINISHED; else emit PASS_COMPLETED_MORE_REMAINING. highlightCompareAndAnnounce performs highlightCompare(j), increments comparisons, updateStatus(), and announce('Comparing indices i and i+1'), followed by a timed delay; its result emits AFTER_COMPARE_DELAY_AND_A_GT_B if a > b or AFTER_COMPARE_DELAY_AND_A_LE_B otherwise. swapBarsAnimateAndAnnounce corresponds to highlightSwap(j), swapping arr[j]/arr[j+1], increment swaps, set swappedInPass=true, layoutBars() (animated transform), announce('Swap performed...'), updateStatus(), then after move duration emits AFTER_SWAP_ANIMATION. clearHighlightsAndAdvancePointer clears compare/swap classes, increments j, updateStatus(), emitting STEP_DONE (for stepping) or WAIT_BETWEEN_AUTO_STEPS (for playing). In playing_advance_pointer and playing_pass_check, the loop timing between steps is represented by WAIT_BETWEEN_AUTO_STEPS. Data events: SET_DATA_VALID (Set Data with valid numbers), SET_DATA_INVALID (invalid/empty input -> announce error, remain paused), RANDOMIZE (generate random values and set), SHUFFLE (shuffle current arr then pause and reset counters), RESET (revert to initialArr, pause, reset counters). SPEED_CHANGE updates speed label and re-computes durations via layoutBars(); WINDOW_RESIZE triggers layoutBars(); both are modeled as self-transitions. Keyboard: Space toggles play/pause; S triggers step when paused. Arrow keys on bars only move focus (BAR_FOCUS_LEFT/RIGHT) and do not affect sorting state. Completion: done.announceCompleteAndShowSorted covers both normal completion and early exit; in the early-exit case, the specific message is already announced in pass check; sorted zone is rendered via updateSortedZone()."
    }
  },
  {
    "id": "c66e0a40-b402-11f0-bdbc-23fe6fc76a5e",
    "timestamp": "2025-10-28T13:35:59.835Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Queue",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Bubble Sort — Hands-on Interactive Explorer</title>\n  <style>\n    :root {\n      --bg: #0f172a;             /* slate-900 */\n      --panel: #111827;          /* gray-900 */\n      --panel-2: #0b1222;        /* darker bluish panel */\n      --text: #e5e7eb;           /* gray-200 */\n      --muted: #9ca3af;          /* gray-400 */\n      --accent: #60a5fa;         /* blue-400 */\n      --accent-strong: #3b82f6;  /* blue-500 */\n      --good: #34d399;           /* green-400 */\n      --warn: #fbbf24;           /* amber-400 */\n      --danger: #fb7185;         /* rose-400 */\n      --outline: #f59e0b;        /* amber-500 for focus */\n      --gap: 16px;\n      --radius: 12px;\n\n      --swap-ms: 260ms;\n      --compare-ms: 420ms;\n      --highlight-ms: 220ms;\n      --bar-gap: 8px;\n      --bar-min-width: 24px;\n    }\n\n    @media (prefers-color-scheme: light) {\n      :root {\n        --bg: #f9fafb;\n        --panel: #ffffff;\n        --panel-2: #f3f4f6;\n        --text: #111827;\n        --muted: #4b5563;\n        --accent: #2563eb;\n        --accent-strong: #1d4ed8;\n        --good: #059669;\n        --warn: #d97706;\n        --danger: #dc2626;\n        --outline: #7c3aed;\n      }\n      body {\n        color-scheme: light;\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n    }\n\n    body {\n      margin: 0;\n      padding: 24px; /* Safe area margins: 24 px on all sides */\n      background: radial-gradient(1200px 600px at 10% 10%, rgba(99,102,241,0.08), transparent 55%),\n                  radial-gradient(800px 500px at 90% 20%, rgba(56,189,248,0.08), transparent 60%),\n                  var(--bg);\n      color: var(--text);\n      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.4;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    h1 {\n      font-size: clamp(1.4rem, 1rem + 2vw, 2rem);\n      margin: 0 0 8px 0;\n      letter-spacing: 0.2px;\n    }\n    p.lead {\n      margin: 0 0 16px;\n      color: var(--muted);\n    }\n\n    /* Module layout */\n    .module {\n      display: grid;\n      grid-template-columns: 1.7fr 1fr;\n      gap: 24px;\n      margin-top: 16px;\n      align-items: start;\n    }\n    @media (max-width: 960px) {\n      .module {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .panel {\n      background: linear-gradient(180deg, var(--panel), var(--panel-2));\n      border: 1px solid rgba(255,255,255,0.06);\n      border-radius: var(--radius);\n      box-shadow: 0 10px 30px rgba(0,0,0,0.25), inset 0 1px 0 rgba(255,255,255,0.04);\n      padding: 16px;\n    }\n\n    .panel h2,\n    .panel h3 {\n      margin: 0 0 8px 0;\n      font-size: 1rem;\n      letter-spacing: 0.2px;\n    }\n    .panel h2 + p {\n      margin-top: 0;\n    }\n\n    /* Visualization area */\n    .viz {\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n\n    .bars-wrap {\n      position: relative;\n      height: clamp(220px, 32vh, 360px);\n      min-height: 200px;\n      overflow: hidden;\n      border-radius: calc(var(--radius) - 4px);\n      background:\n        linear-gradient(transparent 95%, rgba(255,255,255,0.06) 95%) 0 0/100% 20%,\n        linear-gradient(transparent 75%, rgba(255,255,255,0.06) 75%) 0 0/100% 25%,\n        linear-gradient(180deg, rgba(255,255,255,0.04), transparent);\n      padding: 12px;\n      border: 1px dashed rgba(255,255,255,0.08);\n    }\n\n    .bars {\n      position: absolute;\n      inset: 12px;\n      display: flex;\n      align-items: flex-end;\n      gap: var(--bar-gap);\n    }\n\n    .bar {\n      position: relative;\n      flex: 1 1 auto;\n      min-width: var(--bar-min-width);\n      background: linear-gradient(180deg, rgba(99,102,241,0.9), rgba(56,189,248,0.9));\n      border: 1px solid rgba(255,255,255,0.18);\n      border-radius: 6px 6px 4px 4px;\n      transition: filter var(--highlight-ms) ease, outline-color var(--highlight-ms) ease;\n      outline: 2px solid transparent;\n      outline-offset: 2px;\n    }\n    .bar .value {\n      position: absolute;\n      top: -28px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 0.85rem;\n      font-weight: 600;\n      color: var(--text);\n      background: rgba(0,0,0,0.25);\n      border: 1px solid rgba(255,255,255,0.12);\n      padding: 2px 6px;\n      border-radius: 999px;\n      backdrop-filter: blur(6px);\n      pointer-events: none;\n      white-space: nowrap;\n    }\n\n    /* States */\n    .bar.comparing {\n      filter: saturate(1.4) drop-shadow(0 0 8px rgba(59,130,246,0.55));\n      outline-color: var(--accent);\n    }\n    .bar.to-swap {\n      filter: saturate(1.5) drop-shadow(0 0 10px rgba(251,113,133,0.6));\n      outline-color: var(--danger);\n      background: linear-gradient(180deg, rgba(251,113,133,0.95), rgba(249,115,22,0.9));\n    }\n    .bar.sorted {\n      background: linear-gradient(180deg, rgba(52,211,153,0.95), rgba(16,185,129,0.9));\n      border-color: rgba(16,185,129,0.6);\n    }\n\n    .bar.swapping {\n      transition: transform var(--swap-ms) ease-in-out, filter var(--highlight-ms) ease;\n      z-index: 2;\n    }\n\n    /* Guide legend */\n    .legend {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px 16px;\n      font-size: 0.9rem;\n      color: var(--muted);\n    }\n    .key {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n    }\n    .swatch {\n      width: 16px; height: 16px; border-radius: 3px; border: 1px solid rgba(255,255,255,0.14);\n    }\n    .swatch.compare { background: linear-gradient(180deg, rgba(99,102,241,0.8), rgba(56,189,248,0.8)); box-shadow: 0 0 0 2px rgba(59,130,246,0.3) inset; }\n    .swatch.swap { background: linear-gradient(180deg, rgba(251,113,133,0.9), rgba(249,115,22,0.9)); }\n    .swatch.sorted { background: linear-gradient(180deg, rgba(52,211,153,0.95), rgba(16,185,129,0.9)); }\n\n    /* Controls */\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      align-items: center;\n    }\n    .control {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      min-width: min(100%, 260px);\n      flex: 1 1 240px;\n    }\n\n    label {\n      font-size: 0.92rem;\n      color: var(--muted);\n      letter-spacing: 0.2px;\n    }\n\n    input[type=\"text\"],\n    input[type=\"number\"],\n    input[type=\"range\"],\n    button {\n      border-radius: 10px;\n      border: 1px solid rgba(255,255,255,0.14);\n      background: rgba(255,255,255,0.04);\n      color: var(--text);\n      padding: 10px 12px;\n      min-height: 44px; /* touch target */\n    }\n    input[type=\"text\"]::placeholder {\n      color: #9aa2b1;\n    }\n    input[type=\"number\"] {\n      width: 120px;\n    }\n    input[type=\"range\"] {\n      height: 44px;\n      padding: 0 6px;\n      accent-color: var(--accent-strong);\n    }\n\n    button {\n      cursor: pointer;\n      font-weight: 600;\n      letter-spacing: 0.2px;\n      transition: transform 120ms ease, background 120ms ease, border-color 120ms ease, color 120ms ease;\n    }\n    button:active {\n      transform: translateY(1px);\n    }\n    button:focus-visible,\n    input:focus-visible {\n      outline: 3px solid var(--outline);\n      outline-offset: 2px;\n    }\n    .btn {\n      background: linear-gradient(180deg, rgba(59,130,246,0.95), rgba(37,99,235,0.9));\n      border: 1px solid rgba(99,102,241,0.5);\n      color: white;\n    }\n    .btn.secondary {\n      background: rgba(255,255,255,0.05);\n    }\n\n    .group {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px; /* Minimum spacing between controls */\n    }\n\n    .note {\n      font-size: 0.88rem;\n      color: var(--muted);\n    }\n\n    /* Pseudocode */\n    .code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 0.95rem;\n      background: rgba(2,6,23,0.6);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: 10px;\n      padding: 12px;\n      line-height: 1.45;\n    }\n    .code .line {\n      display: block;\n      padding: 3px 8px;\n      border-radius: 8px;\n      color: var(--text);\n      position: relative;\n    }\n    .code .line:not(:last-child) {\n      margin-bottom: 4px;\n    }\n    .code .line[data-depth=\"1\"] { padding-left: 20px; }\n    .code .line[data-depth=\"2\"] { padding-left: 36px; }\n    .code .line[data-depth=\"3\"] { padding-left: 52px; }\n\n    .code .line.active {\n      background: linear-gradient(90deg, rgba(59,130,246,0.18), transparent 70%);\n      box-shadow: inset 2px 0 0 var(--accent-strong);\n    }\n\n    .kbd {\n      font-family: ui-monospace, monospace;\n      background: rgba(255,255,255,0.08);\n      border: 1px solid rgba(255,255,255,0.18);\n      padding: 2px 6px;\n      border-radius: 6px;\n    }\n\n    /* Info and sections */\n    section {\n      margin-top: 24px;\n    }\n\n    .sr-only {\n      position: absolute !important;\n      width: 1px; height: 1px;\n      padding: 0; margin: -1px;\n      overflow: hidden; clip: rect(0,0,0,0);\n      border: 0;\n      white-space: nowrap;\n    }\n\n    @media (prefers-reduced-motion: reduce) {\n      :root {\n        --swap-ms: 0ms;\n        --compare-ms: 0ms;\n        --highlight-ms: 0ms;\n      }\n      .bar, .bar.swapping {\n        transition: none !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <a class=\"sr-only\" href=\"#interactive\">Skip to interactive module</a>\n  <div class=\"container\">\n    <header>\n      <h1>Bubble Sort — Hands-on Interactive Explorer</h1>\n      <p class=\"lead\">Compare neighbors, swap when needed, and watch the largest values “bubble” to the end.</p>\n    </header>\n\n    <main id=\"interactive\" class=\"module\" aria-label=\"Bubble sort interactive module\">\n      <!-- Visualization + legend -->\n      <section class=\"panel viz\" aria-labelledby=\"viz-title\">\n        <h2 id=\"viz-title\">Live visualization</h2>\n\n        <div class=\"bars-wrap\" role=\"group\" aria-label=\"Bars visualization area\">\n          <div id=\"bars\" class=\"bars\" aria-live=\"off\" aria-atomic=\"false\"></div>\n        </div>\n\n        <div class=\"legend\" aria-hidden=\"true\">\n          <span class=\"key\"><span class=\"swatch compare\"></span>Comparing pair</span>\n          <span class=\"key\"><span class=\"swatch swap\"></span>Swapping</span>\n          <span class=\"key\"><span class=\"swatch sorted\"></span>Sorted boundary</span>\n        </div>\n\n        <div class=\"code\" aria-labelledby=\"code-title\">\n          <h3 id=\"code-title\" style=\"margin: 0 0 8px 0; font-size: 0.95rem; color: var(--muted);\">Bubble sort pseudocode</h3>\n          <code id=\"pseudo\">\n            <span class=\"line\" data-line=\"1\">for i from 0 to n-2:</span>\n            <span class=\"line\" data-line=\"2\" data-depth=\"1\">swapped = false</span>\n            <span class=\"line\" data-line=\"3\" data-depth=\"1\">for j from 0 to n-2-i:</span>\n            <span class=\"line\" data-line=\"4\" data-depth=\"2\">if a[j] > a[j+1]:</span>\n            <span class=\"line\" data-line=\"5\" data-depth=\"3\">swap(a[j], a[j+1])</span>\n            <span class=\"line\" data-line=\"6\" data-depth=\"3\">swapped = true</span>\n            <span class=\"line\" data-line=\"7\" data-depth=\"1\">if not swapped: break</span>\n          </code>\n        </div>\n\n        <div id=\"status\" class=\"note\" aria-live=\"polite\" aria-atomic=\"true\">\n          Ready. Press Play or Step to begin.\n        </div>\n      </section>\n\n      <!-- Controls + inputs -->\n      <aside class=\"panel controls\" aria-label=\"Controls\">\n        <div class=\"row\" role=\"group\" aria-label=\"Sort controls\" style=\"gap:16px;\">\n          <button id=\"playPause\" class=\"btn\" aria-pressed=\"false\" title=\"Play/Pause (Space)\">▶ Play</button>\n          <button id=\"step\" class=\"btn secondary\" title=\"Step (→)\">Step</button>\n          <button id=\"reset\" class=\"btn secondary\" title=\"Reset (R)\">Reset</button>\n        </div>\n\n        <div class=\"row\" role=\"group\" aria-label=\"Dataset controls\">\n          <div class=\"control\">\n            <label for=\"numbers\">Custom numbers (2–12 values, 0–99), comma-separated</label>\n            <div class=\"group\">\n              <input id=\"numbers\" type=\"text\" inputmode=\"numeric\" placeholder=\"e.g., 5, 1, 4, 2, 8\" aria-describedby=\"numbers-help\" />\n              <button id=\"apply\" class=\"btn secondary\">Apply</button>\n            </div>\n            <div id=\"numbers-help\" class=\"note\">You can also randomize below.</div>\n          </div>\n        </div>\n\n        <div class=\"row\" role=\"group\" aria-label=\"Randomize options\">\n          <div class=\"control\">\n            <label for=\"count\">Item count</label>\n            <div class=\"group\">\n              <input id=\"count\" type=\"number\" min=\"3\" max=\"12\" step=\"1\" value=\"8\" aria-label=\"Number of items to generate\" />\n              <button id=\"randomize\" class=\"btn secondary\" title=\"Shuffle (S)\">Randomize</button>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\" role=\"group\" aria-label=\"Speed control and info\">\n          <div class=\"control\">\n            <label for=\"speed\">Animation speed: <span id=\"speedLabel\">1.0×</span></label>\n            <input id=\"speed\" type=\"range\" min=\"0.25\" max=\"2\" step=\"0.25\" value=\"1\" />\n          </div>\n          <div class=\"control\">\n            <label>Keyboard shortcuts</label>\n            <div class=\"note\">\n              <span class=\"kbd\">Space</span> Play/Pause\n              &nbsp; <span class=\"kbd\">→</span> Step\n              &nbsp; <span class=\"kbd\">R</span> Reset\n              &nbsp; <span class=\"kbd\">S</span> Randomize\n            </div>\n          </div>\n        </div>\n      </aside>\n    </main>\n\n    <!-- Required sections -->\n    <section class=\"panel\" aria-labelledby=\"concept-title\">\n      <h2 id=\"concept-title\">Concept Title</h2>\n      <p>Bubble Sort: Visualizing adjacent comparisons and swaps to progressively move the largest elements to the end of the list.</p>\n    </section>\n\n    <section class=\"panel\" aria-labelledby=\"learning-objective\">\n      <h2 id=\"learning-objective\">Learning Objective</h2>\n      <ul>\n        - Understand how bubble sort repeatedly compares adjacent elements and swaps them if out of order.<br />\n        - Recognize the “bubbling” effect: after each pass, the largest remaining element settles at the end (sorted boundary grows).<br />\n        - Read the algorithm’s pseudocode and map each line to the live state of the visualization.<br />\n        - Control the sorting process via step-by-step execution or continuous play, and observe the impact of swaps.\n      </ul>\n    </section>\n\n    <section class=\"panel\" aria-labelledby=\"interaction-design\">\n      <h2 id=\"interaction-design\">Interaction Design</h2>\n      <ul>\n        - Clicking Play starts automated, animated comparisons and swaps; Pause halts it without losing progress. The Step button performs exactly one comparison/swap cycle.<br />\n        - Type your own numbers or Randomize to generate a dataset; Reset returns to the unsorted starting state with the current dataset.<br />\n        - When two bars are compared, they glow blue; if a swap is required, they turn warm (orange/rose) and slide past each other. Completed elements become green at the right boundary.<br />\n        - A pseudocode panel highlights the current line corresponding to the algorithm’s state, reinforcing the mapping between code and behavior.<br />\n        - Speed slider adjusts all timing; keyboard shortcuts provide accessible control. Screen reader announcements describe current comparisons and swaps.\n      </ul>\n    </section>\n\n    <section class=\"panel\" aria-labelledby=\"layout-desc\">\n      <h2 id=\"layout-desc\">Layout Description</h2>\n      <ul>\n        - The page maintains 24 px safe-area margins on all sides; interactive elements have at least 16 px spacing between them.<br />\n        - The module uses a two-column layout on larger screens: the visualization and pseudocode on the left; controls on the right. On small screens, these stack vertically for clarity and focus.<br />\n        - The bars area is visually contained with clear legends and color-coded states (compare, swap, sorted). Labels above bars display exact values for readability and accessibility.<br />\n        - Controls are grouped with labels for dataset, execution, and speed. All tappable elements meet a minimum 44 px touch target. Focus-visible outlines and ARIA live regions support accessibility.\n      </ul>\n    </section>\n\n    <div id=\"live\" class=\"sr-only\" aria-live=\"polite\" aria-atomic=\"true\"></div>\n  </div>\n\n  <script>\n    (function () {\n      const barsEl = document.getElementById('bars');\n      const statusEl = document.getElementById('status');\n      const liveEl = document.getElementById('live');\n\n      const playBtn = document.getElementById('playPause');\n      const stepBtn = document.getElementById('step');\n      const resetBtn = document.getElementById('reset');\n      const randomizeBtn = document.getElementById('randomize');\n      const applyBtn = document.getElementById('apply');\n\n      const numbersInput = document.getElementById('numbers');\n      const countInput = document.getElementById('count');\n      const speedInput = document.getElementById('speed');\n      const speedLabel = document.getElementById('speedLabel');\n\n      const pseudoEl = document.getElementById('pseudo');\n\n      let arr = [];\n      let initialArr = [];\n      let i = 0; // pass\n      let j = 0; // index in pass\n      let swappedInPass = false;\n      let playing = false;\n      let done = false;\n      let busy = false;\n      let reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n      let speedScale = parseFloat(speedInput.value); // 0.25..2\n\n      function randInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n      function announce(msg) {\n        liveEl.textContent = msg;\n        statusEl.textContent = msg;\n      }\n\n      function setSpeed(scale) {\n        speedScale = scale;\n        speedLabel.textContent = scale.toFixed(2).replace(/\\.00$/, '') + '×';\n        const swap = Math.max(80, 260 / scale);\n        const compare = Math.max(60, 420 / scale);\n        const highlight = Math.max(40, 220 / scale);\n        document.documentElement.style.setProperty('--swap-ms', swap + 'ms');\n        document.documentElement.style.setProperty('--compare-ms', compare + 'ms');\n        document.documentElement.style.setProperty('--highlight-ms', highlight + 'ms');\n      }\n\n      function clearPseudoActive() {\n        pseudoEl.querySelectorAll('.line').forEach(el => el.classList.remove('active'));\n      }\n      function markPseudo(line) {\n        clearPseudoActive();\n        const el = pseudoEl.querySelector(`.line[data-line=\"${line}\"]`);\n        if (el) el.classList.add('active');\n      }\n\n      function buildBars(data) {\n        barsEl.innerHTML = '';\n        const maxVal = Math.max(...data, 1);\n        data.forEach((v, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.setAttribute('role', 'img');\n          bar.setAttribute('aria-label', `Index ${idx}, value ${v}`);\n          const heightPct = Math.max(6, (v / maxVal) * 100);\n          bar.style.height = heightPct + '%';\n\n          const label = document.createElement('div');\n          label.className = 'value';\n          label.textContent = v;\n          bar.appendChild(label);\n\n          barsEl.appendChild(bar);\n        });\n      }\n\n      function resetState(keepArray = true) {\n        i = 0;\n        j = 0;\n        swappedInPass = false;\n        done = false;\n        busy = false;\n        playing = false;\n        playBtn.textContent = '▶ Play';\n        playBtn.setAttribute('aria-pressed', 'false');\n        barsEl.querySelectorAll('.bar').forEach(b => {\n          b.classList.remove('sorted', 'comparing', 'to-swap', 'swapping');\n          b.style.transform = '';\n        });\n        clearPseudoActive();\n        announce('Ready. Press Play or Step to begin.');\n        if (!keepArray) {\n          arr = initialArr.slice();\n          buildBars(arr);\n        } else {\n          // Remove sorted coloring if any\n          barsEl.querySelectorAll('.bar').forEach(b => b.classList.remove('sorted'));\n        }\n      }\n\n      function randomize() {\n        const count = clamp(parseInt(countInput.value) || 8, 3, 12);\n        countInput.value = count;\n        const data = Array.from({ length: count }, () => randInt(1, 99));\n        arr = data.slice();\n        initialArr = data.slice();\n        buildBars(arr);\n        resetState(true);\n        announce(`Randomized ${count} values.`);\n      }\n\n      function applyCustom() {\n        const raw = numbersInput.value.trim();\n        if (!raw) {\n          announce('Please enter numbers separated by commas, or use Randomize.');\n          return;\n        }\n        const parts = raw.split(',').map(s => s.trim()).filter(Boolean);\n        if (parts.length < 2 || parts.length > 12) {\n          announce('Please enter between 2 and 12 values.');\n          return;\n        }\n        const nums = [];\n        for (const p of parts) {\n          if (!/^-?\\d+$/.test(p)) {\n            announce('Only integer values allowed (0–99).');\n            return;\n          }\n          const v = parseInt(p, 10);\n          if (v < 0 || v > 99) {\n            announce('Values must be between 0 and 99.');\n            return;\n          }\n          nums.push(v);\n        }\n        arr = nums.slice();\n        initialArr = nums.slice();\n        buildBars(arr);\n        resetState(true);\n        countInput.value = nums.length;\n        announce(`Loaded ${nums.length} custom values.`);\n      }\n\n      function clamp(v, min, max) {\n        return Math.max(min, Math.min(max, v));\n      }\n\n      function getBars() {\n        return Array.from(barsEl.children);\n      }\n\n      function markSortedBoundary() {\n        // Last element of current unsorted range becomes sorted (at the right)\n        const bars = getBars();\n        const idx = bars.length - 1 - (i - 1); // after incrementing i\n        for (let k = idx; k < bars.length; k++) {\n          bars[k]?.classList.add('sorted');\n        }\n      }\n\n      function setCompareState(aIdx, bIdx, swap) {\n        const bars = getBars();\n        bars.forEach(b => b.classList.remove('comparing', 'to-swap'));\n        const A = bars[aIdx];\n        const B = bars[bIdx];\n        if (!A || !B) return;\n        A.classList.add('comparing');\n        B.classList.add('comparing');\n        if (swap) {\n          A.classList.add('to-swap');\n          B.classList.add('to-swap');\n        }\n      }\n\n      function sleep(ms) {\n        return new Promise(r => setTimeout(r, ms));\n      }\n\n      async function animateSwap(indexA, indexB) {\n        const bars = getBars();\n        const A = bars[indexA];\n        const B = bars[indexB];\n        if (!A || !B) return;\n\n        if (reduceMotion) {\n          // Swap DOM immediately\n          if (A.nextSibling === B) {\n            barsEl.insertBefore(B, A);\n          } else {\n            barsEl.insertBefore(A, B);\n          }\n          return;\n        }\n\n        const rectA = A.getBoundingClientRect();\n        const rectB = B.getBoundingClientRect();\n        const dxA = rectB.left - rectA.left;\n        const dxB = rectA.left - rectB.left;\n\n        A.classList.add('swapping');\n        B.classList.add('swapping');\n        A.style.transform = `translateX(${dxA}px)`;\n        B.style.transform = `translateX(${dxB}px)`;\n\n        await new Promise(resolve => {\n          let doneCount = 0;\n          const onEnd = () => {\n            doneCount++;\n            if (doneCount >= 2) {\n              A.removeEventListener('transitionend', onEnd);\n              B.removeEventListener('transitionend', onEnd);\n              resolve();\n            }\n          };\n          A.addEventListener('transitionend', onEnd);\n          B.addEventListener('transitionend', onEnd);\n        });\n\n        // Swap DOM order\n        if (A.nextSibling === B) {\n          barsEl.insertBefore(B, A);\n        } else if (B.nextSibling === A) {\n          barsEl.insertBefore(A, B);\n        }\n\n        // Clean transforms after DOM swap so they snap into place\n        requestAnimationFrame(() => {\n          A.classList.remove('swapping');\n          B.classList.remove('swapping');\n          A.style.transform = '';\n          B.style.transform = '';\n        });\n      }\n\n      function highlightCompare(lineDelay = true) {\n        markPseudo(3);\n        return sleep(lineDelay ? parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--compare-ms')) : 0);\n      }\n\n      async function doOneStep() {\n        if (busy || done) return;\n        busy = true;\n\n        const n = getBars().length;\n        if (i >= n - 1) {\n          done = true;\n          getBars().forEach(b => b.classList.add('sorted'));\n          markPseudo(7);\n          announce('Done. Array is sorted.');\n          busy = false;\n          return;\n        }\n\n        // New pass initialization\n        if (j === 0) {\n          markPseudo(1);\n          await sleep(30);\n          markPseudo(2);\n          swappedInPass = false;\n        }\n\n        if (j >= n - 1 - i) {\n          // End of pass\n          i++;\n          j = 0;\n          markSortedBoundary();\n          if (!swappedInPass) {\n            // Already sorted early exit\n            done = true;\n            getBars().forEach(b => b.classList.add('sorted'));\n            markPseudo(7);\n            announce('No swaps in last pass. Early exit: sorted.');\n            busy = false;\n            return;\n          } else {\n            markPseudo(1);\n            busy = false;\n            return; // Next step begins a new pass\n          }\n        }\n\n        // Compare j and j+1\n        markPseudo(3);\n        const bars = getBars();\n        const A = bars[j];\n        const B = bars[j + 1];\n\n        // Read numerical values from labels for accuracy with DOM\n        const aVal = parseInt(A.querySelector('.value').textContent, 10);\n        const bVal = parseInt(B.querySelector('.value').textContent, 10);\n\n        setCompareState(j, j + 1, false);\n        announce(`Comparing index ${j} (${aVal}) and ${j + 1} (${bVal}).`);\n        await highlightCompare();\n\n        // Branch: swap if needed\n        markPseudo(4);\n        const mustSwap = aVal > bVal;\n        setCompareState(j, j + 1, mustSwap);\n\n        if (mustSwap) {\n          markPseudo(5);\n          announce(`Swapping ${aVal} and ${bVal}.`);\n          await animateSwap(j, j + 1);\n          swappedInPass = true;\n          markPseudo(6);\n          // After swap, the element previously at j is now at j+1; for bubble sort we continue at next j\n        } else {\n          announce(`No swap needed for ${aVal} and ${bVal}.`);\n        }\n\n        // Clear compare markers (but not sorted)\n        getBars().forEach(b => b.classList.remove('comparing', 'to-swap'));\n\n        j++;\n        busy = false;\n\n        // If we're at end after increment, mark boundary in next step\n        if (i >= n - 1) {\n          done = true;\n          getBars().forEach(b => b.classList.add('sorted'));\n          markPseudo(7);\n          announce('Done. Array is sorted.');\n        }\n      }\n\n      async function run() {\n        if (playing) return;\n        playing = true;\n        playBtn.textContent = '⏸ Pause';\n        playBtn.setAttribute('aria-pressed', 'true');\n\n        while (playing && !done) {\n          await doOneStep();\n          if (!playing || done) break;\n          // Small pacing delay between steps\n          const wait = Math.max(50, 260 / speedScale);\n          await sleep(wait);\n        }\n\n        playing = false;\n        playBtn.textContent = '▶ Play';\n        playBtn.setAttribute('aria-pressed', 'false');\n      }\n\n      // Event wiring\n      playBtn.addEventListener('click', async () => {\n        if (done) {\n          resetState(true);\n        }\n        if (playing) {\n          playing = false;\n          playBtn.textContent = '▶ Play';\n          playBtn.setAttribute('aria-pressed', 'false');\n          announce('Paused.');\n        } else {\n          run();\n          announce('Playing.');\n        }\n      });\n\n      stepBtn.addEventListener('click', async () => {\n        if (playing) return; // prevent concurrent\n        await doOneStep();\n      });\n\n      resetBtn.addEventListener('click', () => {\n        resetState(true);\n      });\n\n      randomizeBtn.addEventListener('click', () => {\n        randomize();\n      });\n\n      applyBtn.addEventListener('click', () => {\n        applyCustom();\n      });\n\n      numbersInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          applyCustom();\n        }\n      });\n\n      speedInput.addEventListener('input', () => {\n        const val = parseFloat(speedInput.value);\n        setSpeed(val);\n      });\n\n      document.addEventListener('keydown', (e) => {\n        // Don't trigger shortcuts while typing in an input\n        const tag = document.activeElement?.tagName?.toLowerCase();\n        const typing = tag === 'input' || tag === 'textarea';\n        if (typing) return;\n\n        if (e.code === 'Space') {\n          e.preventDefault();\n          playBtn.click();\n        } else if (e.key === 'ArrowRight') {\n          e.preventDefault();\n          stepBtn.click();\n        } else if (e.key.toLowerCase() === 'r') {\n          e.preventDefault();\n          resetBtn.click();\n        } else if (e.key.toLowerCase() === 's') {\n          e.preventDefault();\n          randomizeBtn.click();\n        }\n      });\n\n      // Initialize\n      setSpeed(speedScale);\n      // Start with a random dataset\n      randomize();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Bubble Sort — Hands-on Interactive Explorer",
      "description": "Finite state machine capturing user controls, algorithm execution phases, visual/animation states, and completion for the bubble sort interactive web app.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "init_app",
          "on": {
            "INIT_COMPLETE": "ready"
          }
        },
        {
          "name": "ready",
          "onEnter": "show_ready_status",
          "onExit": "clear_transient_ui",
          "on": {
            "TOGGLE_PLAY": "playing",
            "STEP": "pass_initializing",
            "RANDOMIZE": "dataset_randomizing",
            "APPLY_CUSTOM_VALID": "dataset_applying",
            "APPLY_CUSTOM_INVALID": "ready",
            "RESET": "resetting",
            "KEY_SPACE": "playing",
            "KEY_ARROW_RIGHT": "pass_initializing",
            "KEY_R": "resetting",
            "KEY_S": "dataset_randomizing",
            "SPEED_CHANGE": "ready"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_autoplay",
          "onExit": "stop_autoplay",
          "on": {
            "AUTOPLAY_TICK": "pass_initializing",
            "TOGGLE_PLAY": "paused",
            "ALGORITHM_DONE": "done",
            "RESET": "resetting",
            "RANDOMIZE": "dataset_randomizing",
            "APPLY_CUSTOM_VALID": "dataset_applying",
            "KEY_SPACE": "paused",
            "KEY_R": "resetting",
            "KEY_S": "dataset_randomizing",
            "SPEED_CHANGE": "playing"
          }
        },
        {
          "name": "paused",
          "onEnter": "announce_paused",
          "on": {
            "TOGGLE_PLAY": "playing",
            "STEP": "pass_initializing",
            "RESET": "resetting",
            "RANDOMIZE": "dataset_randomizing",
            "APPLY_CUSTOM_VALID": "dataset_applying",
            "APPLY_CUSTOM_INVALID": "paused",
            "KEY_SPACE": "playing",
            "KEY_ARROW_RIGHT": "pass_initializing",
            "KEY_R": "resetting",
            "KEY_S": "dataset_randomizing",
            "SPEED_CHANGE": "paused"
          }
        },
        {
          "name": "pass_initializing",
          "onEnter": "initialize_pass_if_needed",
          "on": {
            "ALGORITHM_DONE": "done",
            "PASS_INIT_DONE": "comparing"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_compare",
          "onExit": "compare_phase_complete",
          "on": {
            "HIGHLIGHT_TIMEOUT": "checking_swap"
          }
        },
        {
          "name": "checking_swap",
          "onEnter": "check_swap_condition",
          "on": {
            "SWAP_DECISION_SWAP": "swapping",
            "SWAP_DECISION_NO_SWAP": "no_swap"
          }
        },
        {
          "name": "swapping",
          "onEnter": "perform_swap_animation",
          "onExit": "clear_swap_transform",
          "on": {
            "SWAP_ANIMATION_END": "step_cleanup"
          }
        },
        {
          "name": "no_swap",
          "onEnter": "announce_no_swap",
          "on": {
            "STEP_ADVANCE": "step_cleanup"
          }
        },
        {
          "name": "step_cleanup",
          "onEnter": "clear_compare_and_advance_index",
          "on": {
            "END_OF_PASS_NO_SWAPS": "done",
            "END_OF_PASS_WITH_SWAPS": "pass_completed",
            "CONTINUE": "ready",
            "ALGORITHM_DONE": "done"
          }
        },
        {
          "name": "pass_completed",
          "onEnter": "mark_sorted_boundary",
          "on": {
            "PASS_EARLY_EXIT": "done",
            "PASS_NEXT": "ready"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_done_state",
          "on": {
            "RESET": "resetting",
            "TOGGLE_PLAY": "resetting",
            "RANDOMIZE": "dataset_randomizing",
            "APPLY_CUSTOM_VALID": "dataset_applying",
            "APPLY_CUSTOM_INVALID": "done",
            "KEY_SPACE": "resetting",
            "KEY_R": "resetting",
            "KEY_S": "dataset_randomizing",
            "SPEED_CHANGE": "done"
          }
        },
        {
          "name": "dataset_randomizing",
          "onEnter": "randomize_dataset",
          "on": {
            "RANDOMIZE_COMPLETE": "ready"
          }
        },
        {
          "name": "dataset_applying",
          "onEnter": "apply_custom_dataset",
          "on": {
            "APPLY_COMPLETE": "ready",
            "APPLY_CUSTOM_INVALID": "ready"
          }
        },
        {
          "name": "resetting",
          "onEnter": "reset_to_ready",
          "on": {
            "RESET_COMPLETE": "ready"
          }
        }
      ],
      "events": [
        "INIT",
        "INIT_COMPLETE",
        "TOGGLE_PLAY",
        "PAUSE",
        "STEP",
        "AUTOPLAY_TICK",
        "HIGHLIGHT_TIMEOUT",
        "SWAP_DECISION_SWAP",
        "SWAP_DECISION_NO_SWAP",
        "SWAP_ANIMATION_END",
        "STEP_ADVANCE",
        "END_OF_PASS_WITH_SWAPS",
        "END_OF_PASS_NO_SWAPS",
        "PASS_INIT_DONE",
        "PASS_EARLY_EXIT",
        "PASS_NEXT",
        "ALGORITHM_DONE",
        "RESET",
        "RESET_COMPLETE",
        "RANDOMIZE",
        "RANDOMIZE_COMPLETE",
        "APPLY_CUSTOM_VALID",
        "APPLY_CUSTOM_INVALID",
        "APPLY_COMPLETE",
        "SPEED_CHANGE",
        "KEY_SPACE",
        "KEY_ARROW_RIGHT",
        "KEY_R",
        "KEY_S",
        "ENTER_KEY_ON_NUMBERS"
      ],
      "notes": "Mapping to code and UI:\n- init_app: setSpeed(...) then randomize() on load; INIT_COMPLETE transitions to ready.\n- show_ready_status: resetState(true) behavior (i=0, j=0, swappedInPass=false, playing=false, done=false, busy=false; clear bar classes; clear pseudo highlight; update Play button; announce 'Ready. Press Play or Step to begin.').\n- start_autoplay/stop_autoplay: run() enters a loop calling doOneStep(), updates Play/Pause button text and aria-pressed; stop_autoplay restores Play state.\n- initialize_pass_if_needed: only when j==0 of the current pass — markPseudo(1), small delay, markPseudo(2), swappedInPass=false; otherwise this is a quick no-op leading to comparing.\n- highlight_compare: markPseudo(3), setCompareState(j, j+1, false), announce current pair, wait compare-ms (HIGHLIGHT_TIMEOUT).\n- check_swap_condition: markPseudo(4), compute mustSwap (aVal > bVal), setCompareState(j, j+1, mustSwap). If true emit SWAP_DECISION_SWAP → swapping; else SWAP_DECISION_NO_SWAP → no_swap.\n- perform_swap_animation: markPseudo(5), announce swap, animateSwap(j, j+1). On animation end (transitionend) emit SWAP_ANIMATION_END. During animation, bars get class 'swapping' and transforms; clear_swap_transform removes those and resets transforms.\n- announce_no_swap: speak and status message 'No swap needed...'.\n- clear_compare_and_advance_index: remove 'comparing'/'to-swap' classes, increment j. Then branch: if j >= n-1-i, emit END_OF_PASS_*; if i >= n-1 after updates, emit ALGORITHM_DONE.\n- mark_sorted_boundary: color right-side bars with 'sorted' after i++/j=0. If swappedInPass is false, emit PASS_EARLY_EXIT → done (early exit); else emit PASS_NEXT → ready (next pass will start on next STEP/AUTOPLAY_TICK).\n- finalize_done_state: add 'sorted' to all bars, markPseudo(7), announce 'Done. Array is sorted.', ensure playing=false. In playing loop, ALGORITHM_DONE stops autoplay.\n- randomize_dataset: generate count values (3–12), buildBars(...), resetState(true), announce randomized.\n- apply_custom_dataset: validate text input (2–12 integers, 0–99), buildBars, resetState(true), update count input, announce loaded; on invalid input emit APPLY_CUSTOM_INVALID and remain in current non-playing state.\n- reset_to_ready: resetState(true) (preserve array, clear visuals), announce ready; then RESET_COMPLETE → ready.\n- Keyboard shortcuts: Space triggers TOGGLE_PLAY; ArrowRight triggers STEP; 'R' triggers RESET; 'S' triggers RANDOMIZE; Enter in numbers input triggers APPLY_CUSTOM_VALID/APPLY_CUSTOM_INVALID depending on validation (ENTER_KEY_ON_NUMBERS is a UI-level trigger mapped to apply logic).\n- Visual state classes: comparing → bars get 'comparing'; mustSwap → add 'to-swap'; swapping → add 'swapping' and transforms until SWAP_ANIMATION_END; sorted boundary grows via 'sorted' classes at right side; all bars 'sorted' when done.\n- Pseudocode panel highlights: lines 1,2 at pass init; line 3 during compare; line 4 for condition; line 5 during swap; line 6 to mark swapped flag; line 7 when done/early exit.\n- Speed changes: SPEED_CHANGE updates CSS variables for --swap-ms, --compare-ms, --highlight-ms via setSpeed(scale) and does not change state; applies in any state.\n- Concurrency guard: busy prevents concurrent doOneStep. When playing, autotick waits between steps. If prefers-reduced-motion is set, animateSwap bypasses transitions and reorders DOM immediately.\n- Play button while done: TOGGLE_PLAY first calls resetState(true) then starts run(), effectively transitioning done → resetting → ready → playing."
    }
  },
  {
    "id": "e9133610-b402-11f0-bdbc-23fe6fc76a5e",
    "timestamp": "2025-10-28T13:36:52.558Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Stack",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Bubble Sort — Interactive Visual Module</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      --bg: #0f1420;\n      --surface: #161d2e;\n      --panel: #1b2439;\n      --text: #e8ecf7;\n      --muted: #b7c0d8;\n      --accent: #62d2a2;\n      --accent-2: #7aa7ff;\n      --compare-a: #ff7a7a;\n      --compare-b: #ffd37a;\n      --swap: #ffcc66;\n      --sorted: #78e08f;\n      --focus: #fff389;\n      --warn: #ff9369;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      margin: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.45;\n    }\n\n    main.module {\n      padding: 24px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    h1, h2, h3 {\n      margin: 0 0 12px 0;\n      font-weight: 700;\n      letter-spacing: 0.2px;\n    }\n\n    p {\n      margin: 0 0 12px 0;\n    }\n\n    .grid {\n      display: grid;\n      grid-template-columns: 1fr 1.2fr;\n      gap: 24px;\n    }\n\n    @media (max-width: 980px) {\n      .grid {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .card {\n      background: var(--surface);\n      border: 1px solid #233052;\n      border-radius: 12px;\n      padding: 16px;\n      box-shadow: 0 12px 24px rgba(0,0,0,0.25);\n    }\n\n    .meta {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n\n    .meta .block + .block {\n      margin-top: 4px;\n    }\n\n    .subtle {\n      color: var(--muted);\n    }\n\n    /* Controls */\n    .controls {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      align-items: flex-end;\n      margin-bottom: 16px;\n    }\n\n    .control {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      min-width: 140px;\n      flex: 1 1 140px;\n    }\n\n    label {\n      font-size: 14px;\n      color: var(--muted);\n    }\n\n    input[type=\"number\"],\n    input[type=\"text\"],\n    select {\n      background: var(--panel);\n      border: 1px solid #314066;\n      color: var(--text);\n      padding: 10px 12px;\n      border-radius: 8px;\n      outline: none;\n      transition: border-color 120ms ease, box-shadow 120ms ease;\n    }\n\n    input[type=\"range\"] {\n      width: 100%;\n    }\n\n    input:focus, select:focus {\n      border-color: var(--accent-2);\n      box-shadow: 0 0 0 3px rgba(122, 167, 255, 0.25);\n    }\n\n    .checkbox-row {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      padding: 10px 12px;\n      background: var(--panel);\n      border: 1px solid #314066;\n      border-radius: 8px;\n      min-height: 44px;\n    }\n\n    .actions {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      margin-bottom: 16px;\n    }\n\n    button {\n      background: var(--accent-2);\n      color: #0b1220;\n      border: none;\n      border-radius: 8px;\n      padding: 10px 14px;\n      min-height: 44px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: transform 120ms ease, box-shadow 120ms ease, background 120ms ease;\n    }\n\n    button.secondary {\n      background: #2a3553;\n      color: var(--text);\n      border: 1px solid #3a4a77;\n    }\n\n    button.warn {\n      background: var(--warn);\n      color: #1a1000;\n    }\n\n    button:focus-visible {\n      outline: 3px solid var(--focus);\n      outline-offset: 2px;\n    }\n\n    button:hover {\n      transform: translateY(-1px);\n      box-shadow: 0 6px 14px rgba(0,0,0,0.25);\n    }\n\n    button[disabled] {\n      opacity: 0.6;\n      cursor: not-allowed;\n      box-shadow: none;\n      transform: none;\n    }\n\n    /* Visualization */\n    .viz {\n      background: var(--panel);\n      border: 1px solid #314066;\n      border-radius: 12px;\n      padding: 16px;\n    }\n\n    .bar-area {\n      position: relative;\n      height: 260px;\n      background: linear-gradient(to bottom, rgba(255,255,255,0.06), rgba(255,255,255,0.02));\n      border-radius: 8px;\n      overflow: hidden;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      width: 40px; /* will be overridden dynamically */\n      height: 100px; /* from value */\n      background: #4A70C5;\n      border-radius: 6px 6px 0 0;\n      border: 1px solid #20305b;\n      transition: left 300ms ease, height 300ms ease, background-color 200ms ease, transform 200ms ease, box-shadow 200ms ease;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      color: #eaf1ff;\n      font-weight: 600;\n      user-select: none;\n    }\n\n    .bar .label {\n      font-size: 13px;\n      padding: 6px 0;\n      width: 100%;\n      text-align: center;\n      background: rgba(0,0,0,0.2);\n      border-radius: 6px 6px 0 0;\n    }\n\n    .bar.compare-a {\n      background: var(--compare-a);\n      box-shadow: 0 10px 20px rgba(255, 122, 122, 0.35);\n    }\n\n    .bar.compare-b {\n      background: var(--compare-b);\n      box-shadow: 0 10px 20px rgba(255, 211, 122, 0.35);\n    }\n\n    .bar.swap {\n      animation: bubble 250ms ease;\n      box-shadow: 0 12px 22px rgba(255, 204, 102, 0.35);\n    }\n\n    @keyframes bubble {\n      0%   { transform: translateY(0); }\n      40%  { transform: translateY(-10px); }\n      100% { transform: translateY(0); }\n    }\n\n    .bar.sorted-tail {\n      background: var(--sorted);\n      border-color: #2f7a57;\n    }\n\n    .legend {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      margin-top: 12px;\n      color: var(--muted);\n      font-size: 14px;\n    }\n\n    .legend .dot {\n      width: 12px;\n      height: 12px;\n      border-radius: 50%;\n      display: inline-block;\n      margin-right: 6px;\n    }\n\n    /* Status */\n    .status {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n      gap: 16px;\n      margin-bottom: 16px;\n    }\n\n    .stat {\n      background: var(--panel);\n      border: 1px solid #314066;\n      border-radius: 8px;\n      padding: 12px;\n    }\n\n    .stat .value {\n      font-size: 22px;\n      font-weight: 700;\n    }\n\n    .stat .label {\n      font-size: 13px;\n      color: var(--muted);\n    }\n\n    .narration {\n      background: var(--panel);\n      border: 1px solid #314066;\n      border-radius: 8px;\n      padding: 12px;\n      min-height: 48px;\n    }\n\n    .code {\n      background: #12182a;\n      border: 1px solid #2a375e;\n      border-radius: 8px;\n      padding: 12px;\n      font-family: ui-monospace, Menlo, Consolas, \"SF Mono\", monospace;\n      font-size: 13px;\n      color: #dbe6ff;\n      margin-top: 12px;\n      white-space: pre;\n      overflow-x: auto;\n    }\n\n    .sr-only {\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0,0,0,0);\n      border: 0;\n    }\n\n    /* Safe area for the page */\n    @supports (padding: env(safe-area-inset-top)) {\n      main.module {\n        padding-left: calc(24px + env(safe-area-inset-left));\n        padding-right: calc(24px + env(safe-area-inset-right));\n        padding-top: calc(24px + env(safe-area-inset-top));\n        padding-bottom: calc(24px + env(safe-area-inset-bottom));\n      }\n    }\n  </style>\n</head>\n<body>\n  <main class=\"module\" aria-labelledby=\"title\">\n    <h1 id=\"title\">Bubble Sort — Visual, Step-by-Step Interaction</h1>\n\n    <div class=\"grid\">\n      <!-- Left: Design Plan and Explanations -->\n      <section class=\"card meta\" aria-label=\"Module overview\">\n        <div class=\"block\">\n          <h2>Concept Title</h2>\n          <p class=\"subtle\">Bubble Sort: adjacent comparisons and swaps to move the largest element to the end on each pass.</p>\n        </div>\n\n        <div class=\"block\">\n          <h2>Learning Objective</h2>\n          <p>After interacting, you will be able to:</p>\n          <ul>\n            <li>Explain how bubble sort compares adjacent elements and swaps out-of-order pairs.</li>\n            <li>Observe why each pass “bubbles” the largest remaining item to the end, growing a sorted tail.</li>\n            <li>Relate steps, passes, comparisons, and swaps to algorithmic complexity and the early-exit optimization.</li>\n          </ul>\n        </div>\n\n        <div class=\"block\">\n          <h2>Interaction Design</h2>\n          <p>Use controls to generate data, set sort direction, and choose optimized mode. Press Play to watch animated comparisons and swaps. Step performs a single comparison; Step Pass advances to the end of the current pass. The visualization provides:</p>\n          <ul>\n            <li>Animated highlight of the two elements being compared.</li>\n            <li>Swap animation when elements are out of order.</li>\n            <li>Green highlight of the sorted tail after each pass.</li>\n            <li>Live narration of the current comparison and decision.</li>\n          </ul>\n          <p>Keyboard shortcuts: Space toggles play/pause; Enter performs one step; Esc resets.</p>\n        </div>\n\n        <div class=\"block\">\n          <h2>Layout Description</h2>\n          <p>The page uses a two-column layout on wide screens and stacks on narrow screens. The safe-area margin is 24 px on all sides. Interactive elements maintain at least 16 px spacing. The right column holds the interactive module with controls above the visualization, followed by status and narration for clear focus and balance.</p>\n          <p>Accessibility features include labeled controls, focus outlines, color contrast, and a live region announcing comparisons/swaps.</p>\n        </div>\n      </section>\n\n      <!-- Right: Interactive Module -->\n      <section class=\"card\" aria-label=\"Bubble sort interactive module\">\n        <h2>Hands-on Bubble Sort Playground</h2>\n\n        <div class=\"controls\" role=\"group\" aria-label=\"Configuration controls\">\n          <div class=\"control\">\n            <label for=\"size\">Array size</label>\n            <input id=\"size\" type=\"number\" min=\"5\" max=\"30\" value=\"10\" aria-describedby=\"sizeHelp\">\n            <div id=\"sizeHelp\" class=\"sr-only\">Choose from 5 to 30 elements.</div>\n          </div>\n\n          <div class=\"control\">\n            <label for=\"order\">Order</label>\n            <select id=\"order\" aria-label=\"Sort order\">\n              <option value=\"asc\" selected>Ascending (small → big)</option>\n              <option value=\"desc\">Descending (big → small)</option>\n            </select>\n          </div>\n\n          <div class=\"control\">\n            <label for=\"speed\">Speed</label>\n            <input id=\"speed\" type=\"range\" min=\"0\" max=\"100\" value=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"50\" aria-label=\"Animation speed\">\n          </div>\n\n          <div class=\"control\">\n            <div class=\"checkbox-row\">\n              <input id=\"optimized\" type=\"checkbox\" aria-label=\"Enable early exit\">\n              <label for=\"optimized\">Optimized early exit (stop when pass has no swaps)</label>\n            </div>\n          </div>\n\n          <div class=\"control\">\n            <label>&nbsp;</label>\n            <button id=\"generate\" class=\"secondary\" aria-label=\"Generate random data\">Generate Random</button>\n          </div>\n        </div>\n\n        <div class=\"actions\" role=\"group\" aria-label=\"Sorting actions\">\n          <button id=\"play\" aria-pressed=\"false\" aria-label=\"Play or pause sorting\">Play</button>\n          <button id=\"step\" class=\"secondary\" aria-label=\"Step one comparison\">Step</button>\n          <button id=\"pass\" class=\"secondary\" aria-label=\"Advance one pass\">Step Pass</button>\n          <button id=\"reset\" class=\"warn\" aria-label=\"Reset to initial unsorted array\">Reset</button>\n        </div>\n\n        <div class=\"viz\" aria-live=\"off\">\n          <div class=\"bar-area\" id=\"barArea\" role=\"img\" aria-label=\"Bar chart showing array values\"></div>\n\n          <div class=\"legend\" aria-hidden=\"true\">\n            <span><span class=\"dot\" style=\"background: var(--compare-a);\"></span>Compare A</span>\n            <span><span class=\"dot\" style=\"background: var(--compare-b);\"></span>Compare B</span>\n            <span><span class=\"dot\" style=\"background: var(--sorted);\"></span>Sorted tail</span>\n          </div>\n\n          <div class=\"status\">\n            <div class=\"stat\">\n              <div class=\"value\" id=\"passes\">0</div>\n              <div class=\"label\">Passes completed</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"value\" id=\"comparisons\">0</div>\n              <div class=\"label\">Comparisons</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"value\" id=\"swaps\">0</div>\n              <div class=\"label\">Swaps</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"value\" id=\"length\">0</div>\n              <div class=\"label\">Array length</div>\n            </div>\n          </div>\n\n          <div class=\"narration\" id=\"narration\" aria-live=\"polite\">\n            Ready. Generate or press Play to begin bubble sort.\n          </div>\n\n          <div class=\"code\" aria-label=\"Pseudocode\">\nbubbleSort(A):\n  repeat for pass = 0 to n-2:\n    swapped = false\n    for i = 0 to n-2-pass:\n      if outOfOrder(A[i], A[i+1]):\n        swap(A[i], A[i+1])\n        swapped = true\n    if optimized and not swapped:\n      break\n          </div>\n        </div>\n\n        <div id=\"live\" class=\"sr-only\" aria-live=\"polite\"></div>\n      </section>\n    </div>\n  </main>\n\n  <script>\n    (function() {\n      // State\n      const barArea = document.getElementById('barArea');\n      const sizeInput = document.getElementById('size');\n      const orderSelect = document.getElementById('order');\n      const speedInput = document.getElementById('speed');\n      const optimizedCheckbox = document.getElementById('optimized');\n      const generateBtn = document.getElementById('generate');\n      const playBtn = document.getElementById('play');\n      const stepBtn = document.getElementById('step');\n      const passBtn = document.getElementById('pass');\n      const resetBtn = document.getElementById('reset');\n\n      const narration = document.getElementById('narration');\n      const live = document.getElementById('live');\n\n      const passesEl = document.getElementById('passes');\n      const compsEl = document.getElementById('comparisons');\n      const swapsEl = document.getElementById('swaps');\n      const lengthEl = document.getElementById('length');\n\n      let arr = [];\n      let originalArr = [];\n      let playing = false;\n      let busy = false;\n      let pass = 0;\n      let i = 0;\n      let comparisons = 0;\n      let swaps = 0;\n      let swappedInPass = false;\n      let sortedTailStart = Number.POSITIVE_INFINITY; // index where sorted tail begins (n - pass)\n\n      // Parameters\n      function stepDuration() {\n        const val = +speedInput.value; // 0..100\n        // Map to 1400ms (slow) -> 200ms (fast)\n        return Math.round(1400 - (val / 100) * 1200);\n      }\n\n      function inOrder(a, b) {\n        const dir = orderSelect.value;\n        return dir === 'asc' ? a <= b : a >= b;\n      }\n\n      // Initialize\n      initArray(+sizeInput.value);\n      renderBars();\n      updateStats();\n      announce(\"Module ready. Use Play, Step, or Step Pass.\");\n\n      // Events\n      window.addEventListener('resize', positionBars);\n      sizeInput.addEventListener('change', () => {\n        clampSize();\n        stop();\n        initArray(+sizeInput.value);\n        renderBars();\n        updateStats();\n        setNarration(\"Array size changed. Ready.\");\n      });\n\n      orderSelect.addEventListener('change', () => {\n        stop();\n        // Changing order does not mutate data; just affects comparisons.\n        setNarration(\"Order set to \" + (orderSelect.value === 'asc' ? \"ascending.\" : \"descending.\"));\n      });\n\n      speedInput.addEventListener('input', () => {\n        speedInput.setAttribute('aria-valuenow', speedInput.value);\n      });\n\n      optimizedCheckbox.addEventListener('change', () => {\n        setNarration(optimizedCheckbox.checked ?\n          \"Early exit enabled. Sorting stops when a pass has zero swaps.\" :\n          \"Early exit disabled. All passes will run.\");\n      });\n\n      generateBtn.addEventListener('click', () => {\n        stop();\n        initArray(+sizeInput.value, true);\n        renderBars();\n        updateStats();\n        setNarration(\"Generated a new random array.\");\n      });\n\n      playBtn.addEventListener('click', togglePlay);\n      stepBtn.addEventListener('click', () => { stepOnce(); });\n      passBtn.addEventListener('click', () => { stepPass(); });\n      resetBtn.addEventListener('click', () => { reset(); });\n\n      // Keyboard accessibility\n      document.addEventListener('keydown', (e) => {\n        if (e.key === ' ') {\n          e.preventDefault();\n          togglePlay();\n        } else if (e.key === 'Enter') {\n          e.preventDefault();\n          stepOnce();\n        } else if (e.key === 'Escape') {\n          e.preventDefault();\n          reset();\n        }\n      });\n\n      // Core logic\n      function clampSize() {\n        let v = +sizeInput.value;\n        if (Number.isNaN(v)) v = 10;\n        v = Math.min(30, Math.max(5, v));\n        sizeInput.value = v;\n      }\n\n      function initArray(n, randomize = true) {\n        arr = new Array(n).fill(0).map(() => randomInt(8, 99));\n        if (!randomize) {\n          // Keep the original order if requested; here we always randomize on init\n        }\n        originalArr = arr.slice();\n        resetStateCounters();\n      }\n\n      function resetStateCounters() {\n        playing = false;\n        busy = false;\n        pass = 0;\n        i = 0;\n        comparisons = 0;\n        swaps = 0;\n        swappedInPass = false;\n        sortedTailStart = arr.length; // none sorted at start\n        playBtn.textContent = 'Play';\n        playBtn.setAttribute('aria-pressed', 'false');\n        enableControls(true);\n      }\n\n      function renderBars() {\n        barArea.innerHTML = '';\n        const n = arr.length;\n        lengthEl.textContent = String(n);\n\n        const dims = computeBarLayout(n);\n        arr.forEach((val, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.setAttribute('data-index', String(idx));\n          bar.setAttribute('aria-label', `Index ${idx}, value ${val}`);\n          bar.style.height = `${mapHeight(val)}px`;\n          bar.style.left = `${dims.positions[idx]}px`;\n          bar.style.width = `${dims.width}px`;\n\n          const label = document.createElement('div');\n          label.className = 'label';\n          label.textContent = String(val);\n          bar.appendChild(label);\n\n          barArea.appendChild(bar);\n        });\n\n        highlightSortedTail();\n      }\n\n      function positionBars() {\n        const n = arr.length;\n        const dims = computeBarLayout(n);\n        const bars = Array.from(barArea.querySelectorAll('.bar'));\n        bars.forEach((bar, idx) => {\n          bar.style.left = `${dims.positions[idx]}px`;\n          bar.style.width = `${dims.width}px`;\n          const val = arr[idx];\n          bar.style.height = `${mapHeight(val)}px`;\n          bar.querySelector('.label').textContent = String(val);\n        });\n      }\n\n      function computeBarLayout(n) {\n        const areaW = barArea.clientWidth;\n        const gap = Math.max(6, Math.floor(areaW / n * 0.08));\n        const width = Math.max(18, Math.floor((areaW - gap * (n - 1)) / n));\n        let positions = new Array(n).fill(0);\n        for (let k = 0; k < n; k++) {\n          positions[k] = k * (width + gap);\n        }\n        return { width, positions };\n      }\n\n      function mapHeight(val) {\n        // Scale values to [40px..240px]\n        const minH = 40;\n        const maxH = 240;\n        const minV = 0;\n        const maxV = 100;\n        const h = minH + (val - minV) * (maxH - minH) / (maxV - minV);\n        return Math.round(h);\n      }\n\n      function setNarration(text) {\n        narration.textContent = text;\n        announce(text);\n      }\n\n      function updateStats() {\n        passesEl.textContent = String(pass);\n        compsEl.textContent = String(comparisons);\n        swapsEl.textContent = String(swaps);\n      }\n\n      function announce(msg) {\n        // Screen reader live region\n        live.textContent = msg;\n      }\n\n      function togglePlay() {\n        if (busy) return;\n        if (isSorted()) {\n          setNarration(\"Array already sorted.\");\n          return;\n        }\n        playing = !playing;\n        playBtn.textContent = playing ? 'Pause' : 'Play';\n        playBtn.setAttribute('aria-pressed', playing ? 'true' : 'false');\n        enableControls(!playing);\n        // Allow changing speed/order while playing\n        speedInput.disabled = false;\n        orderSelect.disabled = false;\n\n        if (playing) {\n          loop();\n        }\n      }\n\n      function stop() {\n        playing = false;\n        playBtn.textContent = 'Play';\n        playBtn.setAttribute('aria-pressed', 'false');\n        enableControls(true);\n      }\n\n      function enableControls(enabled) {\n        // Maintain accessible spacing; disable relevant interactive controls during play\n        stepBtn.disabled = !enabled;\n        passBtn.disabled = !enabled;\n        generateBtn.disabled = !enabled;\n        sizeInput.disabled = !enabled;\n        optimizedCheckbox.disabled = !enabled;\n        resetBtn.disabled = !enabled;\n      }\n\n      function isSorted() {\n        const dir = orderSelect.value;\n        for (let k = 0; k < arr.length - 1; k++) {\n          if (dir === 'asc') {\n            if (arr[k] > arr[k + 1]) return false;\n          } else {\n            if (arr[k] < arr[k + 1]) return false;\n          }\n        }\n        return true;\n      }\n\n      function loop() {\n        if (!playing) return;\n        stepOnce().then(() => {\n          if (playing) {\n            setTimeout(loop, stepDuration() * 0.2); // small gap between steps\n          }\n        });\n      }\n\n      async function stepOnce() {\n        if (busy) return;\n        busy = true;\n\n        const n = arr.length;\n        const endIdx = n - 1 - pass;\n\n        if (i > endIdx - 1) {\n          // End of pass\n          sortedTailStart = n - pass;\n          highlightSortedTail();\n\n          if (optimizedCheckbox.checked && !swappedInPass) {\n            // Early exit\n            pass++;\n            updateStats();\n            setNarration(\"No swaps in last pass. Early exit: array is sorted.\");\n            stop();\n            busy = false;\n            return;\n          }\n\n          pass++;\n          updateStats();\n          swappedInPass = false;\n          i = 0;\n          highlightSortedTail();\n          setNarration(`Pass ${pass} complete. Sorted tail grows from index ${n - pass} to end.`);\n          await delay(stepDuration() * 0.4);\n        }\n\n        if (pass >= n - 1) {\n          // Done\n          sortedTailStart = 0;\n          highlightSortedTail();\n          setNarration(\"Sorting complete.\");\n          stop();\n          busy = false;\n          return;\n        }\n\n        // Compare i and i+1\n        const a = arr[i];\n        const b = arr[i + 1];\n        const bars = getBars();\n        const barA = bars[i];\n        const barB = bars[i + 1];\n\n        setCompareHighlight(barA, barB, true);\n        setNarration(`Compare indices ${i} and ${i + 1}: ${a} vs ${b}.`);\n        comparisons++;\n        updateStats();\n\n        await delay(stepDuration() * 0.5);\n\n        if (!inOrder(a, b)) {\n          // Swap\n          setNarration(`Swap needed: ${a} and ${b} are out of order.`);\n          swapValues(i, i + 1);\n          swaps++;\n          swappedInPass = true;\n          updateStats();\n          // Animate positions\n          barA.classList.add('swap');\n          barB.classList.add('swap');\n          positionBars();\n          await delay(280);\n          barA.classList.remove('swap');\n          barB.classList.remove('swap');\n        } else {\n          setNarration(`No swap: ${a} and ${b} are in order.`);\n        }\n\n        await delay(stepDuration() * 0.2);\n        setCompareHighlight(barA, barB, false);\n        i++;\n\n        busy = false;\n      }\n\n      async function stepPass() {\n        if (busy) return;\n        let startPass = pass;\n        while (startPass === pass && pass < arr.length - 1) {\n          await stepOnce();\n          // If early exit was triggered, break\n          if (optimizedCheckbox.checked && !playing && isSorted()) break;\n        }\n      }\n\n      function reset() {\n        stop();\n        arr = originalArr.slice();\n        resetStateCounters();\n        renderBars();\n        updateStats();\n        setNarration(\"Reset to initial unsorted order.\");\n      }\n\n      function swapValues(aIndex, bIndex) {\n        const tmp = arr[aIndex];\n        arr[aIndex] = arr[bIndex];\n        arr[bIndex] = tmp;\n      }\n\n      function setCompareHighlight(barA, barB, on) {\n        if (!barA || !barB) return;\n        if (on) {\n          barA.classList.add('compare-a');\n          barB.classList.add('compare-b');\n          announce(`Comparing index ${i} and ${i + 1}.`);\n        } else {\n          barA.classList.remove('compare-a');\n          barB.classList.remove('compare-b');\n        }\n      }\n\n      function highlightSortedTail() {\n        const bars = getBars();\n        const n = arr.length;\n        for (let k = 0; k < n; k++) {\n          if (k >= n - pass) {\n            bars[k]?.classList.add('sorted-tail');\n          } else {\n            bars[k]?.classList.remove('sorted-tail');\n          }\n        }\n      }\n\n      function getBars() {\n        return Array.from(barArea.querySelectorAll('.bar'));\n      }\n\n      function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n      function delay(ms) {\n        return new Promise(res => setTimeout(res, ms));\n      }\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Stack"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application — Bubble Sort Visualizer",
      "description": "Finite state machine for an interactive, step-by-step bubble sort visualization with play/pause, single-step, and pass-step controls, including visual compare/swap animations, sorted-tail highlighting, and narration.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "init_module",
          "on": {
            "INIT_DONE": "idle"
          }
        },
        {
          "name": "idle",
          "onEnter": "enable_controls",
          "on": {
            "TOGGLE_PLAY": "playing",
            "SPACE_PRESS": "playing",
            "STEP_CLICK": "step_precheck",
            "ENTER_PRESS": "step_precheck",
            "PASS_CLICK": "stepping_pass",
            "RESET_CLICK": "resetting",
            "ESC_PRESS": "resetting",
            "GENERATE_CLICK": "generating",
            "SIZE_CHANGE": "generating",
            "ORDER_CHANGE": "order_updated",
            "SPEED_INPUT": "idle",
            "WINDOW_RESIZE": "idle"
          }
        },
        {
          "name": "paused",
          "onEnter": "set_paused_ui",
          "on": {
            "TOGGLE_PLAY": "playing",
            "SPACE_PRESS": "playing",
            "STEP_CLICK": "step_precheck",
            "ENTER_PRESS": "step_precheck",
            "PASS_CLICK": "stepping_pass",
            "RESET_CLICK": "resetting",
            "ESC_PRESS": "resetting",
            "GENERATE_CLICK": "generating",
            "SIZE_CHANGE": "generating",
            "ORDER_CHANGE": "paused",
            "SPEED_INPUT": "paused",
            "WINDOW_RESIZE": "paused"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_playing",
          "on": {
            "TOGGLE_PLAY": "paused",
            "SPACE_PRESS": "paused",
            "AUTO_STEP": "step_precheck",
            "GENERATE_CLICK": "generating",
            "SIZE_CHANGE": "generating",
            "RESET_CLICK": "resetting",
            "ESC_PRESS": "resetting",
            "ORDER_CHANGE": "playing",
            "SPEED_INPUT": "playing",
            "SORT_COMPLETE": "done",
            "EARLY_EXIT": "done",
            "WINDOW_RESIZE": "playing"
          }
        },
        {
          "name": "generating",
          "onEnter": "generate_array_and_render",
          "on": {
            "GENERATION_DONE": "idle"
          }
        },
        {
          "name": "resetting",
          "onEnter": "reset_to_original",
          "on": {
            "RESET_DONE": "idle"
          }
        },
        {
          "name": "order_updated",
          "onEnter": "narrate_order_changed",
          "on": {
            "ORDER_CHANGE_HANDLED": "idle"
          }
        },
        {
          "name": "stepping_pass",
          "onEnter": "prepare_pass_mode",
          "on": {
            "START_PASS_STEP": "step_precheck",
            "STEP_DONE_CONTINUE_PASS": "step_precheck",
            "PASS_COMPLETED_TO_IDLE": "idle",
            "EARLY_EXIT": "done",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "step_precheck",
          "onEnter": "enter_step_and_check_pass",
          "on": {
            "END_OF_PASS": "pass_handling",
            "PROCEED_TO_COMPARE": "comparing",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "pass_handling",
          "onEnter": "handle_pass_end",
          "on": {
            "EARLY_EXIT": "done",
            "SORT_COMPLETE": "done",
            "PASS_INCREMENTED": "comparing"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_and_narrate_compare",
          "on": {
            "SWAP_NEEDED": "swapping",
            "NO_SWAP_NEEDED": "no_swap"
          }
        },
        {
          "name": "swapping",
          "onEnter": "perform_swap_and_animate",
          "on": {
            "SWAP_ANIM_DONE": "step_cooldown"
          }
        },
        {
          "name": "no_swap",
          "onEnter": "narrate_no_swap",
          "on": {
            "NO_SWAP_HANDLED": "step_cooldown"
          }
        },
        {
          "name": "step_cooldown",
          "onEnter": "finalize_step_and_clear_highlights",
          "on": {
            "STEP_DONE_CONTINUE_PLAY": "playing",
            "STEP_DONE_RETURN_IDLE": "idle",
            "STEP_DONE_CONTINUE_PASS": "stepping_pass"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_sorted",
          "on": {
            "GENERATE_CLICK": "generating",
            "SIZE_CHANGE": "generating",
            "RESET_CLICK": "resetting",
            "ESC_PRESS": "resetting",
            "TOGGLE_PLAY": "done",
            "SPACE_PRESS": "done",
            "STEP_CLICK": "done",
            "ENTER_PRESS": "done",
            "PASS_CLICK": "done",
            "ORDER_CHANGE": "done",
            "SPEED_INPUT": "done",
            "WINDOW_RESIZE": "done"
          }
        }
      ],
      "events": [
        "INIT",
        "INIT_DONE",
        "TOGGLE_PLAY",
        "SPACE_PRESS",
        "STEP_CLICK",
        "ENTER_PRESS",
        "PASS_CLICK",
        "RESET_CLICK",
        "ESC_PRESS",
        "GENERATE_CLICK",
        "SIZE_CHANGE",
        "ORDER_CHANGE",
        "ORDER_CHANGE_HANDLED",
        "SPEED_INPUT",
        "WINDOW_RESIZE",
        "AUTO_STEP",
        "START_PASS_STEP",
        "END_OF_PASS",
        "PROCEED_TO_COMPARE",
        "PASS_INCREMENTED",
        "EARLY_EXIT",
        "SORT_COMPLETE",
        "SWAP_NEEDED",
        "NO_SWAP_NEEDED",
        "SWAP_ANIM_DONE",
        "NO_SWAP_HANDLED",
        "STEP_DONE_CONTINUE_PLAY",
        "STEP_DONE_RETURN_IDLE",
        "STEP_DONE_CONTINUE_PASS",
        "PASS_COMPLETED_TO_IDLE",
        "GENERATION_DONE",
        "RESET_DONE"
      ],
      "notes": "Mapping to code: initializing.init_module runs initArray(size), renderBars(), updateStats(), and announce(). idle is the ready state (playing=false, busy=false) with controls enabled; it transitions to playing via Play button or Space. paused is functionally like idle after toggling Play off during playback; onEnter set_paused_ui should mirror stop(): set play button text to 'Play', aria-pressed=false, and enable controls. playing.onEnter start_playing should toggle play button to 'Pause', set aria-pressed=true, disable step/pass/generate/size/optimized/reset (but keep speed and order enabled), and start the loop() that emits AUTO_STEP repeatedly with a small inter-step delay based on stepDuration(). During a step, busy=true prevents re-entry; user inputs are effectively ignored. step_precheck.enter_step_and_check_pass corresponds to the top of stepOnce(): compute endIdx=n-1-pass and branch to END_OF_PASS (if i>endIdx-1) or PROCEED_TO_COMPARE. pass_handling.handle_pass_end performs sorted-tail highlight (highlightSortedTail), then either: (a) EARLY_EXIT when optimized is enabled and no swaps occurred in the pass (sets narration and stops), (b) PASS_INCREMENTED when a normal pass completes (increment pass, reset i=0, swappedInPass=false, highlight tail again, set narration, await a short delay), or (c) SORT_COMPLETE if pass >= n-1 after increment (sets entire tail and stops). comparing.highlight_and_narrate_compare sets compare highlights on the two bars, narrates 'Compare i and i+1', increments comparisons, then after a delay determines SWAP_NEEDED vs NO_SWAP_NEEDED using inOrder(). swapping.perform_swap_and_animate calls swapValues(), increments swaps and sets swappedInPass=true, adds 'swap' animation classes to both bars, calls positionBars(), waits ~280ms, and removes the classes. no_swap.narrate_no_swap sets narration for in-order case. step_cooldown.finalize_step_and_clear_highlights waits a short delay, removes compare highlights, increments i, sets busy=false, and emits one of: STEP_DONE_CONTINUE_PLAY (returns to playing; loop() schedules the next AUTO_STEP), STEP_DONE_RETURN_IDLE (when the user performed a single Step), or STEP_DONE_CONTINUE_PASS (when Step Pass is active). stepping_pass represents the while-loop in stepPass(): it repeatedly routes through step_precheck/comparing/swapping/step_cooldown until either PASS_COMPLETED_TO_IDLE (end of the current pass), EARLY_EXIT, or SORT_COMPLETE. generating.generate_array_and_render maps to stop(), initArray(size, true), renderBars(), updateStats(), and narration 'Generated...' before GENERATION_DONE -> idle. resetting.reset_to_original maps to stop(), arr=originalArr.slice(), resetStateCounters(), renderBars(), updateStats(), narration 'Reset...' then RESET_DONE -> idle. order change does not alter data; it updates narration and affects future comparisons; it is allowed during playing. speed input updates aria-valuenow and the stepDuration used by future steps; allowed during playing. Window resize calls positionBars() but does not change state. Pressing Play when already sorted narrates 'Array already sorted' and stays in done. Visual feedback states captured here are comparing (highlight), swapping (animated), pass_handling (sorted-tail highlight), and done (all green tail). Controls are disabled during playing (except speed/order) and while busy=true during animations."
    }
  },
  {
    "id": "7b481390-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:02:06.852Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Weighted Graph",
    "answer": {
      "role": "assistant",
      "content": "You mentioned “Weighted Graph,” but this single interactive module focuses on one concept: bubble sort. If you’d like a separate module for weighted graphs after this, I’m happy to create one.\n\nConcept Title:\n- Bubble Sort: Visual Passes and Swaps\n\nLearning Objective:\n- After interacting, users will be able to:\n  - Explain how bubble sort compares adjacent elements and swaps out-of-order pairs.\n  - Identify the “pass” structure and the growing sorted suffix at the end of the array.\n  - Trace comparisons, swaps, and an early-exit optimization.\n  - Relate algorithm steps to visual changes and counter metrics (comparisons, swaps).\n\nInteraction Design:\n- Users can:\n  - Generate a random array or enter custom values (CSV).\n  - Drag bars or use keyboard arrows to reorder the array before sorting.\n  - Choose ascending/descending order and adjust animation speed.\n  - Step through the algorithm one comparison at a time, run automatically, pause, or jump to the next pass.\n- Visual feedback:\n  - Two bars being compared are highlighted.\n  - Swaps animate by sliding bars horizontally into new positions.\n  - A green shaded “sorted suffix” appears and expands after each pass.\n  - Pseudocode is highlighted to mirror the current algorithm line.\n  - Status panel updates pass number, inner index (j), comparison/swap counts, and descriptive narration via an ARIA live region.\n- Accessibility:\n  - All controls are keyboard accessible.\n  - Bars are focusable; arrow keys move a focused bar left/right to reorder.\n  - High-contrast colors, visible focus outlines, and ARIA labels/live updates are provided.\n\nLayout Description:\n- Spatial organization:\n  - Safe area: 24 px padding around the entire module.\n  - Top row: Control panel with two groups (Data and Playback), each using 16 px gaps between interactive elements.\n  - Middle row: Main visualization (bars) on the left; Pseudocode and Status on the right. On narrow screens, these stack vertically.\n  - Bottom: Brief guidance/tips.\n- Clarity and balance:\n  - The visualization container is prominent and centered.\n  - Pseudocode panel mirrors algorithm flow; status panel provides concise metrics and narration.\n  - Consistent spacing and typography ensure readability and scanability.\n- Responsiveness:\n  - Flex layouts reflow for smaller screens; bars scale in width/height to the container.\n- Minimum spacing:\n  - All interactive controls maintain at least 16 px spacing; overall padding is 24 px.\n\nBelow is a self-contained HTML page (vanilla HTML/CSS/JS) implementing the interactive module.\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Bubble Sort: Visual Passes and Swaps</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      --safe-padding: 24px;\n      --gap: 16px;\n      --bg: #0f172a;          /* Slate-900 */\n      --panel: #111827;       /* Gray-900 */\n      --text: #e5e7eb;        /* Gray-200 */\n      --muted: #cbd5e1;       /* Slate-300 */\n      --accent: #38bdf8;      /* Sky-400 */\n      --accent-2: #22c55e;    /* Green-500 */\n      --compare: #f59e0b;     /* Amber-500 */\n      --swap: #ef4444;        /* Red-500 */\n      --suffix: rgba(34, 197, 94, 0.15);\n      --focus: #fbbf24;       /* Amber-400 */\n      --btn: #1f2937;         /* Gray-800 */\n      --btn-hover: #374151;   /* Gray-700 */\n      --border: #334155;      /* Slate-700 */\n      --code-bg: #0b1220;\n      --shadow: 0 8px 20px rgba(0,0,0,0.35);\n    }\n\n    * { box-sizing: border-box; }\n    html, body { height: 100%; }\n    body {\n      margin: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.4;\n    }\n\n    .module {\n      padding: var(--safe-padding);\n      display: flex;\n      flex-direction: column;\n      gap: 24px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    header h1 {\n      margin: 0;\n      font-size: 24px;\n      font-weight: 700;\n      letter-spacing: 0.2px;\n    }\n    header p {\n      margin: 8px 0 0 0;\n      color: var(--muted);\n      font-size: 14px;\n    }\n\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: var(--gap);\n    }\n\n    .panel {\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n      box-shadow: var(--shadow);\n    }\n\n    .group-title {\n      font-size: 13px;\n      color: var(--muted);\n      margin-bottom: 12px;\n      letter-spacing: 0.2px;\n    }\n\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n\n    label {\n      font-size: 13px;\n      color: var(--muted);\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n    }\n\n    input[type=\"number\"],\n    input[type=\"text\"],\n    select {\n      background: #0c1324;\n      color: var(--text);\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 8px 10px;\n      min-width: 120px;\n      outline: none;\n    }\n    input[type=\"range\"] {\n      width: 180px;\n    }\n\n    button {\n      background: var(--btn);\n      color: var(--text);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px 14px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: background 0.2s ease, transform 0.05s ease;\n    }\n    button:hover { background: var(--btn-hover); }\n    button:active { transform: scale(0.98); }\n    button[disabled] {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .primary {\n      background: #0ea5e9;\n      border-color: #0284c7;\n    }\n    .primary:hover {\n      background: #38bdf8;\n    }\n\n    .main {\n      display: grid;\n      grid-template-columns: 2fr 1fr;\n      gap: var(--gap);\n    }\n\n    .viz-wrapper {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n    .viz-header {\n      display: flex;\n      align-items: baseline;\n      justify-content: space-between;\n      gap: var(--gap);\n    }\n    .viz-header .legend {\n      display: inline-flex;\n      gap: 12px;\n      font-size: 12px;\n      color: var(--muted);\n    }\n    .legend span {\n      display: inline-flex;\n      gap: 6px;\n      align-items: center;\n    }\n    .legend b {\n      width: 14px; height: 14px;\n      border-radius: 3px;\n      display: inline-block;\n    }\n    .legend .compare b { background: var(--compare); }\n    .legend .swap b { background: var(--swap); }\n    .legend .sorted b { background: var(--accent-2); opacity: 0.5; }\n\n    .viz.panel {\n      position: relative;\n      height: 320px;\n      overflow: hidden;\n    }\n    .bars {\n      position: relative;\n      height: 100%;\n      width: 100%;\n    }\n    .suffix-mask {\n      position: absolute;\n      top: 0; right: 0; bottom: 0;\n      width: 0;\n      background: var(--suffix);\n      transition: width 300ms ease;\n      pointer-events: none;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      border-radius: 8px 8px 0 0;\n      background: linear-gradient(180deg, #0ea5e9, #0369a1);\n      border: 2px solid #0ea5e9;\n      transition: left 300ms ease, height 200ms ease, box-shadow 150ms ease, transform 100ms ease;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      color: #051320;\n      font-weight: 700;\n      padding-bottom: 6px;\n      user-select: none;\n      touch-action: none;\n    }\n    .bar:focus {\n      outline: 3px solid var(--focus);\n      outline-offset: 2px;\n    }\n    .bar.comparing {\n      box-shadow: 0 0 0 3px var(--compare);\n      border-color: var(--compare);\n    }\n    .bar.swapping {\n      box-shadow: 0 0 0 3px var(--swap);\n      border-color: var(--swap);\n    }\n    .bar.sorted {\n      background: linear-gradient(180deg, #22c55e, #15803d);\n      border-color: #22c55e;\n      color: #072511;\n    }\n    .bar.dragging {\n      transform: translateY(-6px);\n      box-shadow: 0 10px 24px rgba(0,0,0,0.45);\n    }\n\n    .side.panel {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n\n    .code {\n      background: var(--code-bg);\n      border-radius: 8px;\n      border: 1px solid var(--border);\n      overflow: hidden;\n    }\n    .code pre {\n      margin: 0;\n      padding: 12px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      font-size: 13px;\n      color: var(--text);\n      white-space: pre-wrap;\n    }\n    .code .line {\n      display: block;\n      padding: 4px 6px;\n      border-radius: 6px;\n    }\n    .code .active {\n      background: rgba(56, 189, 248, 0.18);\n      border-left: 3px solid var(--accent);\n    }\n\n    .status {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 8px;\n      font-size: 13px;\n    }\n    .status .box {\n      background: #0c1324;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 10px;\n    }\n    .status .box b {\n      color: var(--muted);\n      font-weight: 600;\n      display: block;\n      margin-bottom: 4px;\n      letter-spacing: 0.2px;\n    }\n\n    .tips {\n      font-size: 13px;\n      color: var(--muted);\n    }\n\n    /* Responsive */\n    @media (max-width: 900px) {\n      .main { grid-template-columns: 1fr; }\n    }\n    @media (max-width: 640px) {\n      .controls { grid-template-columns: 1fr; }\n      .viz.panel { height: 280px; }\n      .status { grid-template-columns: 1fr; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"module\" role=\"main\">\n    <header>\n      <h1>Bubble Sort: Visual Passes and Swaps</h1>\n      <p>Explore adjacent comparisons, swapping, and the growing sorted suffix—with step-by-step control and animated feedback.</p>\n    </header>\n\n    <section class=\"controls\">\n      <div class=\"panel\" aria-label=\"Data controls\">\n        <div class=\"group-title\">Data</div>\n        <div class=\"row\">\n          <label for=\"size\">\n            Size\n            <input id=\"size\" type=\"number\" min=\"5\" max=\"20\" value=\"10\" aria-label=\"Array size\">\n          </label>\n          <button id=\"randomBtn\" aria-label=\"Generate random array\">Randomize</button>\n          <button id=\"shuffleBtn\" aria-label=\"Shuffle current array\">Shuffle</button>\n          <label for=\"order\">\n            Order\n            <select id=\"order\" aria-label=\"Sort order\">\n              <option value=\"asc\">Ascending</option>\n              <option value=\"desc\">Descending</option>\n            </select>\n          </label>\n        </div>\n        <div class=\"row\">\n          <label for=\"csv\">\n            Custom values (CSV)\n            <input id=\"csv\" type=\"text\" placeholder=\"e.g., 4,1,9,3,7\" aria-label=\"CSV values\">\n          </label>\n          <button id=\"applyCsvBtn\" aria-label=\"Apply CSV values\">Apply</button>\n          <button id=\"resetBtn\" aria-label=\"Reset to initial arrangement\">Reset</button>\n        </div>\n      </div>\n\n      <div class=\"panel\" aria-label=\"Playback controls\">\n        <div class=\"group-title\">Playback</div>\n        <div class=\"row\">\n          <button id=\"startBtn\" class=\"primary\" aria-label=\"Start sorting\">Start</button>\n          <button id=\"pauseBtn\" aria-label=\"Pause sorting\">Pause</button>\n          <button id=\"stepBtn\" aria-label=\"Step one comparison\">Step</button>\n          <button id=\"nextPassBtn\" aria-label=\"Jump to next pass\">Next Pass</button>\n          <label for=\"speed\">\n            Speed\n            <input id=\"speed\" type=\"range\" min=\"0\" max=\"100\" value=\"50\" aria-label=\"Animation speed\">\n          </label>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"main\">\n      <div class=\"viz-wrapper\">\n        <div class=\"viz-header\">\n          <div>\n            <strong>Array Visualization</strong>\n          </div>\n          <div class=\"legend\" aria-hidden=\"true\">\n            <span class=\"compare\"><b></b> comparing</span>\n            <span class=\"swap\"><b></b> swapping</span>\n            <span class=\"sorted\"><b></b> sorted suffix</span>\n          </div>\n        </div>\n        <div class=\"viz panel\">\n          <div class=\"bars\" id=\"bars\" aria-label=\"Bar chart representation of array\"></div>\n          <div class=\"suffix-mask\" id=\"suffixMask\" aria-hidden=\"true\"></div>\n        </div>\n      </div>\n\n      <aside class=\"side panel\" aria-label=\"Algorithm and status\">\n        <div class=\"code\" aria-label=\"Bubble sort pseudocode\">\n          <pre id=\"code\">\n<span class=\"line\" data-line=\"1\">1. function bubbleSort(A):</span>\n<span class=\"line\" data-line=\"2\">2.   for pass from 0 to n-1:</span>\n<span class=\"line\" data-line=\"3\">3.     swapped = false</span>\n<span class=\"line\" data-line=\"4\">4.     for j from 0 to n-2-pass:</span>\n<span class=\"line\" data-line=\"5\">5.       if needsSwap(A[j], A[j+1]):</span>\n<span class=\"line\" data-line=\"6\">6.         swap(A[j], A[j+1]); swapped = true</span>\n<span class=\"line\" data-line=\"7\">7.     if not swapped: break</span>\n          </pre>\n        </div>\n\n        <div class=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n          <div class=\"box\">\n            <b>Progress</b>\n            <div>Pass: <span id=\"passCount\">0</span></div>\n            <div>Inner index j: <span id=\"jIndex\">-</span></div>\n            <div>Array size: <span id=\"nSize\">0</span></div>\n          </div>\n          <div class=\"box\">\n            <b>Metrics</b>\n            <div>Comparisons: <span id=\"cmpCount\">0</span></div>\n            <div>Swaps: <span id=\"swpCount\">0</span></div>\n          </div>\n          <div class=\"box\" style=\"grid-column: span 2;\">\n            <b>Narration</b>\n            <div id=\"narration\">Ready.</div>\n          </div>\n        </div>\n      </aside>\n    </section>\n\n    <section class=\"tips panel\" aria-label=\"Tips\">\n      - Drag bars or use Left/Right arrows on a focused bar to reorder the starting array.\n      - Step to see each comparison; swaps animate. The green area shows the sorted suffix growing after each pass.\n      - Keyboard shortcuts: Space toggles start/pause; N steps; R resets.\n    </section>\n  </div>\n\n  <script>\n    // Utility: clamp\n    const clamp = (v, min, max) => Math.max(min, Math.min(max, v));\n\n    // State\n    const state = {\n      values: [],\n      initialValues: [],\n      orderAsc: true,\n      isRunning: false,\n      speedMs: 500,\n      pass: 0,\n      j: 0,\n      swappedInPass: false,\n      comparisons: 0,\n      swaps: 0,\n      timer: null,\n      layout: { barWidth: 0, gap: 8, scaleH: 2 },\n    };\n\n    // Elements\n    const barsEl = document.getElementById('bars');\n    const suffixMaskEl = document.getElementById('suffixMask');\n    const sizeInput = document.getElementById('size');\n    const orderSelect = document.getElementById('order');\n    const csvInput = document.getElementById('csv');\n    const applyCsvBtn = document.getElementById('applyCsvBtn');\n    const randomBtn = document.getElementById('randomBtn');\n    const shuffleBtn = document.getElementById('shuffleBtn');\n    const resetBtn = document.getElementById('resetBtn');\n\n    const startBtn = document.getElementById('startBtn');\n    const pauseBtn = document.getElementById('pauseBtn');\n    const stepBtn = document.getElementById('stepBtn');\n    const nextPassBtn = document.getElementById('nextPassBtn');\n    const speedInput = document.getElementById('speed');\n\n    const passCountEl = document.getElementById('passCount');\n    const jIndexEl = document.getElementById('jIndex');\n    const nSizeEl = document.getElementById('nSize');\n    const cmpCountEl = document.getElementById('cmpCount');\n    const swpCountEl = document.getElementById('swpCount');\n    const narrationEl = document.getElementById('narration');\n    const codePre = document.getElementById('code');\n\n    // Build random values\n    function randomValues(n) {\n      const arr = [];\n      for (let i = 0; i < n; i++) {\n        arr.push(Math.floor(10 + Math.random() * 90)); // 10..99\n      }\n      return arr;\n    }\n\n    // Layout calculation\n    function computeLayout() {\n      const rect = barsEl.getBoundingClientRect();\n      const n = state.values.length;\n      const gap = state.layout.gap;\n      const totalGap = gap * (n + 1);\n      const barWidth = Math.max(16, Math.floor((rect.width - totalGap) / n));\n      state.layout.barWidth = barWidth;\n      const maxVal = Math.max(...state.values, 1);\n      const scaleH = Math.max(2, Math.floor((rect.height - 24) / maxVal));\n      state.layout.scaleH = scaleH;\n    }\n\n    // Render bars\n    function renderBars() {\n      barsEl.innerHTML = '';\n      const n = state.values.length;\n      nSizeEl.textContent = n;\n      computeLayout();\n\n      for (let i = 0; i < n; i++) {\n        const bar = document.createElement('div');\n        bar.className = 'bar';\n        bar.setAttribute('tabindex', '0');\n        bar.setAttribute('role', 'button');\n        bar.setAttribute('aria-label', `Value ${state.values[i]}`);\n        bar.dataset.index = i;\n        bar.textContent = state.values[i];\n\n        barsEl.appendChild(bar);\n      }\n      positionBars();\n      addBarInteractions();\n      updateSuffixMask();\n    }\n\n    // Position bars based on current state.values order\n    function positionBars() {\n      const n = state.values.length;\n      const gap = state.layout.gap;\n      const w = state.layout.barWidth;\n      const scaleH = state.layout.scaleH;\n\n      const rect = barsEl.getBoundingClientRect();\n      for (let i = 0; i < n; i++) {\n        const bar = barsEl.children[i];\n        const left = gap + i * (w + gap);\n        bar.style.left = `${left}px`;\n        bar.style.width = `${w}px`;\n        bar.style.height = `${Math.max(12, state.values[i] * scaleH)}px`;\n      }\n    }\n\n    // Pseudocode highlighting\n    function setActiveLine(lineNum) {\n      const lines = codePre.querySelectorAll('.line');\n      lines.forEach(l => l.classList.remove('active'));\n      const target = codePre.querySelector(`.line[data-line=\"${lineNum}\"]`);\n      if (target) target.classList.add('active');\n    }\n\n    // Narration\n    function narrate(text) {\n      narrationEl.textContent = text;\n    }\n\n    // Update status counters\n    function updateStatus() {\n      passCountEl.textContent = state.pass;\n      jIndexEl.textContent = state.pass >= state.values.length - 1 ? '-' : state.j;\n      cmpCountEl.textContent = state.comparisons;\n      swpCountEl.textContent = state.swaps;\n    }\n\n    // Update sorted suffix mask width\n    function updateSuffixMask() {\n      const n = state.values.length;\n      const suffixLen = Math.min(state.pass, n);\n      const w = state.layout.barWidth;\n      const gap = state.layout.gap;\n      const rect = barsEl.getBoundingClientRect();\n      const suffixWidth = suffixLen * (w + gap);\n      suffixMaskEl.style.width = `${suffixWidth}px`;\n    }\n\n    // Compare helper for order\n    function needsSwap(a, b) {\n      return state.orderAsc ? a > b : a < b;\n    }\n\n    // Highlight bars i and i+1 as comparing\n    function highlightCompare(i) {\n      clearHighlights();\n      const barA = barsEl.children[i];\n      const barB = barsEl.children[i + 1];\n      barA.classList.add('comparing');\n      barB.classList.add('comparing');\n    }\n\n    // Clear highlights\n    function clearHighlights() {\n      [...barsEl.children].forEach(b => {\n        b.classList.remove('comparing', 'swapping');\n      });\n    }\n\n    // Swap values at positions i and i+1 and animate\n    function animateSwap(i) {\n      return new Promise(resolve => {\n        const a = barsEl.children[i];\n        const b = barsEl.children[i + 1];\n        a.classList.add('swapping');\n        b.classList.add('swapping');\n\n        // Swap values in state\n        const tmp = state.values[i];\n        state.values[i] = state.values[i + 1];\n        state.values[i + 1] = tmp;\n\n        // Update accessible labels and text\n        a.textContent = state.values[i];\n        a.setAttribute('aria-label', `Value ${state.values[i]}`);\n        b.textContent = state.values[i + 1];\n        b.setAttribute('aria-label', `Value ${state.values[i + 1]}`);\n\n        // Reorder DOM children for accurate left positions\n        // We will swap innerHTML/labels but keep DOM order consistent with indices.\n        // Then just reposition all bars according to values.\n        positionBars();\n\n        // Wait for CSS transition on 'left'\n        const onEnd = (e) => {\n          if (e.propertyName === 'left') {\n            a.removeEventListener('transitionend', onEnd);\n            resolve();\n          }\n        };\n        a.addEventListener('transitionend', onEnd);\n      });\n    }\n\n    // Initialize sorting state\n    function resetSortState() {\n      state.pass = 0;\n      state.j = 0;\n      state.swappedInPass = false;\n      state.comparisons = 0;\n      state.swaps = 0;\n      clearHighlights();\n      updateStatus();\n      updateSuffixMask();\n      setActiveLine(1);\n      narrate('Ready.');\n    }\n\n    // Step: one comparison (and possible swap)\n    async function stepOnce() {\n      const n = state.values.length;\n      if (state.pass >= n - 1) {\n        setActiveLine(1);\n        narrate('Sorting complete.');\n        return false;\n      }\n\n      // Enter inner loop if at start of pass\n      if (state.j === 0) {\n        setActiveLine(2);\n        narrate(`Pass ${state.pass}: starting inner loop.`);\n        await waitMs(0.5 * state.speedMs);\n        setActiveLine(3);\n        narrate('Reset swapped flag for this pass.');\n        state.swappedInPass = false;\n        await waitMs(0.4 * state.speedMs);\n      }\n\n      // Inner loop check\n      setActiveLine(4);\n      const maxJ = (n - 2) - state.pass;\n      if (state.j > maxJ) {\n        // End of inner loop: early exit check\n        setActiveLine(7);\n        if (!state.swappedInPass) {\n          narrate('No swaps in this pass. Early exit: array is sorted.');\n          // Mark remaining as sorted\n          state.pass = n - 1;\n          updateSuffixMask(); // full width\n          updateStatus();\n          return false;\n        }\n        // Completed pass; increment pass, reset j\n        state.pass++;\n        updateSuffixMask();\n        narrate(`Pass complete. The largest (or smallest) has bubbled to index ${n - 1 - (state.pass - 1)}.`);\n        state.j = 0;\n        updateStatus();\n        await waitMs(0.6 * state.speedMs);\n        return true;\n      }\n\n      // Compare A[j] and A[j+1]\n      highlightCompare(state.j);\n      setActiveLine(5);\n      state.comparisons++;\n      updateStatus();\n\n      const a = state.values[state.j];\n      const b = state.values[state.j + 1];\n      narrate(`Compare A[${state.j}]=${a} and A[${state.j + 1}]=${b}.`);\n\n      await waitMs(0.6 * state.speedMs);\n\n      if (needsSwap(a, b)) {\n        setActiveLine(6);\n        narrate(`Swap needed: ${a} and ${b} are out of order.`);\n        state.swaps++;\n        updateStatus();\n        await animateSwap(state.j);\n        state.swappedInPass = true;\n        narrate(`Swapped. A[${state.j}]=${state.values[state.j]}, A[${state.j + 1}]=${state.values[state.j + 1]}.`);\n      } else {\n        narrate('No swap needed.');\n      }\n\n      clearHighlights();\n      state.j++;\n      updateStatus();\n      return true;\n    }\n\n    // Auto-run\n    function startAuto() {\n      if (state.isRunning) return;\n      state.isRunning = true;\n      toggleButtons();\n      runLoop();\n    }\n\n    async function runLoop() {\n      while (state.isRunning) {\n        const progressed = await stepOnce();\n        if (!progressed) {\n          // Completed sorting\n          state.isRunning = false;\n          toggleButtons();\n          break;\n        }\n        await waitMs(0.3 * state.speedMs);\n      }\n    }\n\n    function pauseAuto() {\n      state.isRunning = false;\n      toggleButtons();\n    }\n\n    // Next pass: step until inner loop ends\n    async function nextPass() {\n      if (state.isRunning) return;\n      const targetPass = state.pass + 1;\n      let guard = 0; // prevent infinite loop\n      while (state.pass < targetPass && state.pass < state.values.length - 1 && guard < 1000) {\n        guard++;\n        const progressed = await stepOnce();\n        if (!progressed) break;\n        await waitMs(0.2 * state.speedMs);\n      }\n    }\n\n    // Helpers\n    function waitMs(ms) {\n      return new Promise(res => setTimeout(res, ms));\n    }\n\n    function toggleButtons() {\n      startBtn.disabled = state.isRunning || state.pass >= state.values.length - 1;\n      pauseBtn.disabled = !state.isRunning;\n      stepBtn.disabled = state.isRunning || state.pass >= state.values.length - 1;\n      nextPassBtn.disabled = state.isRunning || state.pass >= state.values.length - 1;\n    }\n\n    // Drag and keyboard reorder\n    function addBarInteractions() {\n      const n = state.values.length;\n      const gap = state.layout.gap;\n      const w = state.layout.barWidth;\n      const rect = barsEl.getBoundingClientRect();\n\n      [...barsEl.children].forEach((bar, index) => {\n        // Keyboard reorder\n        bar.addEventListener('keydown', (e) => {\n          if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n            e.preventDefault();\n            if (state.isRunning) return;\n            const dir = e.key === 'ArrowLeft' ? -1 : 1;\n            const newIdx = clamp(index + dir, 0, n - 1);\n            if (newIdx !== index) {\n              const val = state.values[index];\n              state.values.splice(index, 1);\n              state.values.splice(newIdx, 0, val);\n              renderBars();\n              resetSortState();\n              narrate(`Moved value ${val} to index ${newIdx} via keyboard.`);\n            }\n          }\n        });\n\n        // Pointer drag\n        bar.addEventListener('pointerdown', (e) => {\n          if (state.isRunning) return;\n          bar.setPointerCapture(e.pointerId);\n          bar.classList.add('dragging');\n          const startX = e.clientX;\n\n          function onMove(ev) {\n            const dx = ev.clientX - startX;\n            // Compute target index\n            const step = w + gap;\n            let offsetIndex = Math.round(dx / step);\n            let target = clamp(index + offsetIndex, 0, n - 1);\n            // Visual hint: do nothing here, we commit on pointerup\n          }\n\n          function onUp(ev) {\n            bar.classList.remove('dragging');\n            bar.releasePointerCapture(ev.pointerId);\n            bar.removeEventListener('pointermove', onMove);\n            bar.removeEventListener('pointerup', onUp);\n\n            const endX = ev.clientX;\n            const dx = endX - startX;\n            const step = w + gap;\n            let offsetIndex = Math.round(dx / step);\n            let target = clamp(index + offsetIndex, 0, n - 1);\n\n            if (target !== index) {\n              const val = state.values[index];\n              state.values.splice(index, 1);\n              state.values.splice(target, 0, val);\n              renderBars();\n              resetSortState();\n              narrate(`Dragged value ${val} from index ${index} to ${target}.`);\n            }\n          }\n\n          bar.addEventListener('pointermove', onMove);\n          bar.addEventListener('pointerup', onUp);\n        });\n      });\n    }\n\n    // CSV parsing\n    function parseCsvValues(text) {\n      const parts = text.split(/[, ]+/).map(s => s.trim()).filter(Boolean);\n      if (!parts.length) return null;\n      const vals = parts.map(Number);\n      if (vals.some(v => !Number.isFinite(v))) return null;\n      // Normalize bounds 1..999\n      const normalized = vals.map(v => clamp(Math.round(v), 1, 999));\n      return normalized;\n    }\n\n    // Event bindings\n    sizeInput.addEventListener('change', () => {\n      const n = clamp(Number(sizeInput.value), Number(sizeInput.min), Number(sizeInput.max));\n      sizeInput.value = n;\n      state.values = randomValues(n);\n      state.initialValues = [...state.values];\n      renderBars();\n      resetSortState();\n      narrate(`Generated random array of size ${n}.`);\n    });\n\n    orderSelect.addEventListener('change', () => {\n      state.orderAsc = orderSelect.value === 'asc';\n      narrate(`Order set to ${state.orderAsc ? 'ascending' : 'descending'}.`);\n    });\n\n    randomBtn.addEventListener('click', () => {\n      const n = clamp(Number(sizeInput.value), Number(sizeInput.min), Number(sizeInput.max));\n      state.values = randomValues(n);\n      state.initialValues = [...state.values];\n      renderBars();\n      resetSortState();\n      narrate(`Randomized array.`);\n    });\n\n    shuffleBtn.addEventListener('click', () => {\n      for (let i = state.values.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [state.values[i], state.values[j]] = [state.values[j], state.values[i]];\n      }\n      renderBars();\n      resetSortState();\n      narrate('Shuffled current array.');\n    });\n\n    applyCsvBtn.addEventListener('click', () => {\n      const vals = parseCsvValues(csvInput.value);\n      if (!vals || vals.length < 2) {\n        narrate('Invalid CSV. Enter at least two numeric values.');\n        return;\n      }\n      sizeInput.value = clamp(vals.length, Number(sizeInput.min), Number(sizeInput.max));\n      state.values = vals.slice(0, Number(sizeInput.max));\n      state.initialValues = [...state.values];\n      renderBars();\n      resetSortState();\n      narrate('Applied custom values.');\n    });\n\n    resetBtn.addEventListener('click', () => {\n      if (state.initialValues.length) {\n        state.values = [...state.initialValues];\n        renderBars();\n        resetSortState();\n        narrate('Reset to initial arrangement.');\n      }\n    });\n\n    startBtn.addEventListener('click', startAuto);\n    pauseBtn.addEventListener('click', pauseAuto);\n    stepBtn.addEventListener('click', async () => {\n      if (state.isRunning) return;\n      await stepOnce();\n    });\n    nextPassBtn.addEventListener('click', nextPass);\n\n    speedInput.addEventListener('input', () => {\n      // Map 0..100 -> 800..150 ms (inverse)\n      const v = Number(speedInput.value);\n      state.speedMs = Math.round(800 - (v / 100) * 650);\n      narrate(`Speed set to ${Math.round((800 - state.speedMs) / 6.5)}%.`);\n    });\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', async (e) => {\n      if (e.target && e.target.tagName && /INPUT|SELECT|TEXTAREA/.test(e.target.tagName)) return;\n      if (e.code === 'Space') {\n        e.preventDefault();\n        if (state.isRunning) pauseAuto(); else startAuto();\n      } else if (e.key.toLowerCase() === 'n') {\n        e.preventDefault();\n        if (!state.isRunning) await stepOnce();\n      } else if (e.key.toLowerCase() === 'r') {\n        e.preventDefault();\n        resetBtn.click();\n      }\n    });\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      computeLayout();\n      positionBars();\n      updateSuffixMask();\n    });\n\n    // Init\n    function init() {\n      state.orderAsc = orderSelect.value === 'asc';\n      state.values = randomValues(Number(sizeInput.value));\n      state.initialValues = [...state.values];\n      speedInput.dispatchEvent(new Event('input'));\n      renderBars();\n      resetSortState();\n      toggleButtons();\n    }\n    init();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Weighted Graph"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a bubble sort visualization that models data configuration, manual reordering, playback control, algorithmic animation states (comparing, swapping), pass transitions, and completion.",
      "states": [
        {
          "name": "ready",
          "onEnter": "render_and_reset",
          "on": {
            "CLICK_START": "running",
            "KEY_SPACE": "running",
            "CLICK_STEP": "pass_init",
            "KEY_N": "pass_init",
            "CLICK_NEXT_PASS": "next_pass",
            "CLICK_RANDOMIZE": "data_randomized",
            "CHANGE_SIZE": "data_randomized",
            "CLICK_SHUFFLE": "data_shuffled",
            "CLICK_RESET": "data_reset",
            "KEY_R": "data_reset",
            "CLICK_APPLY_CSV": "csv_applying",
            "CHANGE_ORDER": "order_changed",
            "INPUT_SPEED": "speed_adjusting",
            "RESIZE_WINDOW": "resizing",
            "BAR_POINTER_DOWN": "dragging_bar",
            "BAR_ARROW_LEFT": "keyboard_reorder",
            "BAR_ARROW_RIGHT": "keyboard_reorder"
          }
        },
        {
          "name": "running",
          "onEnter": "startAuto",
          "on": {
            "CLICK_PAUSE": "paused",
            "KEY_SPACE": "paused",
            "AUTO_TICK": "pass_init",
            "STEP_NO_PROGRESS": "done",
            "SORTING_COMPLETE": "done",
            "RESIZE_WINDOW": "resizing",
            "INPUT_SPEED": "speed_adjusting",
            "CLICK_RESET": "data_reset",
            "CLICK_RANDOMIZE": "data_randomized",
            "CLICK_SHUFFLE": "data_shuffled",
            "CLICK_APPLY_CSV": "csv_applying",
            "CHANGE_ORDER": "order_changed"
          }
        },
        {
          "name": "paused",
          "onEnter": "pauseAuto",
          "on": {
            "CLICK_START": "running",
            "KEY_SPACE": "running",
            "CLICK_STEP": "pass_init",
            "KEY_N": "pass_init",
            "CLICK_NEXT_PASS": "next_pass",
            "CLICK_RESET": "data_reset",
            "KEY_R": "data_reset",
            "CLICK_RANDOMIZE": "data_randomized",
            "CHANGE_SIZE": "data_randomized",
            "CLICK_SHUFFLE": "data_shuffled",
            "CLICK_APPLY_CSV": "csv_applying",
            "CHANGE_ORDER": "order_changed",
            "INPUT_SPEED": "speed_adjusting",
            "RESIZE_WINDOW": "resizing",
            "BAR_POINTER_DOWN": "dragging_bar",
            "BAR_ARROW_LEFT": "keyboard_reorder",
            "BAR_ARROW_RIGHT": "keyboard_reorder"
          }
        },
        {
          "name": "pass_init",
          "onEnter": "pass_init_setup",
          "on": {
            "PASS_INIT_DONE": "inner_loop_check"
          }
        },
        {
          "name": "inner_loop_check",
          "onEnter": "setActiveLine_4",
          "on": {
            "INNER_LOOP_END": "early_exit_check",
            "COMPARISON_READY": "comparing"
          }
        },
        {
          "name": "early_exit_check",
          "onEnter": "setActiveLine_7",
          "on": {
            "EARLY_EXIT_NO_SWAPS": "early_exit",
            "PASS_COMPLETED": "pass_complete"
          }
        },
        {
          "name": "early_exit",
          "onEnter": "apply_early_exit",
          "on": {
            "SORTING_COMPLETE": "done"
          }
        },
        {
          "name": "pass_complete",
          "onEnter": "complete_pass",
          "on": {
            "AUTO_RUNNING_CONTINUE": "running",
            "MANUAL_CONTINUE": "ready"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlightCompare_and_stats",
          "on": {
            "SWAP_NEEDED": "swapping",
            "NO_SWAP_NEEDED": "no_swap"
          }
        },
        {
          "name": "swapping",
          "onEnter": "swap_animation_and_stats",
          "onExit": "clearHighlights",
          "on": {
            "SWAP_ANIM_DONE": "advance_j"
          }
        },
        {
          "name": "no_swap",
          "onEnter": "narrate_no_swap",
          "onExit": "clearHighlights",
          "on": {
            "COMPARISON_DONE": "advance_j"
          }
        },
        {
          "name": "advance_j",
          "onEnter": "increment_j_and_update_status",
          "on": {
            "AUTO_RUNNING_CONTINUE": "running",
            "STEP_COMPLETE": "ready"
          }
        },
        {
          "name": "next_pass",
          "onEnter": "advance_to_next_pass",
          "on": {
            "PASS_COMPLETED": "ready",
            "EARLY_EXIT_NO_SWAPS": "early_exit",
            "SORTING_COMPLETE": "done"
          }
        },
        {
          "name": "dragging_bar",
          "onEnter": "start_drag",
          "on": {
            "BAR_POINTER_MOVE": "dragging_bar",
            "BAR_POINTER_UP": "reorder_commit"
          }
        },
        {
          "name": "reorder_commit",
          "onEnter": "commit_drag_reorder",
          "on": {
            "REORDER_DONE": "ready"
          }
        },
        {
          "name": "keyboard_reorder",
          "onEnter": "keyboard_reorder_action",
          "on": {
            "REORDER_DONE": "ready"
          }
        },
        {
          "name": "data_randomized",
          "onEnter": "randomize_values",
          "on": {
            "DATA_APPLIED": "ready"
          }
        },
        {
          "name": "data_shuffled",
          "onEnter": "shuffle_values",
          "on": {
            "DATA_APPLIED": "ready"
          }
        },
        {
          "name": "data_reset",
          "onEnter": "reset_to_initial_values",
          "on": {
            "DATA_APPLIED": "ready"
          }
        },
        {
          "name": "csv_applying",
          "onEnter": "apply_csv_values",
          "on": {
            "CSV_VALID": "ready",
            "CSV_INVALID": "csv_invalid_feedback"
          }
        },
        {
          "name": "csv_invalid_feedback",
          "onEnter": "narrate_invalid_csv",
          "on": {
            "DISMISS": "ready"
          }
        },
        {
          "name": "order_changed",
          "onEnter": "set_order",
          "on": {
            "ORDER_SET": "ready"
          }
        },
        {
          "name": "speed_adjusting",
          "onEnter": "set_speed",
          "on": {
            "SPEED_SET": "ready"
          }
        },
        {
          "name": "resizing",
          "onEnter": "recompute_layout",
          "on": {
            "RESIZE_DONE": "ready"
          }
        },
        {
          "name": "done",
          "onEnter": "narrate_complete",
          "on": {
            "CLICK_RESET": "data_reset",
            "CLICK_RANDOMIZE": "data_randomized",
            "CHANGE_SIZE": "data_randomized",
            "CLICK_SHUFFLE": "data_shuffled",
            "CLICK_APPLY_CSV": "csv_applying",
            "CHANGE_ORDER": "order_changed",
            "INPUT_SPEED": "speed_adjusting",
            "RESIZE_WINDOW": "resizing",
            "BAR_POINTER_DOWN": "dragging_bar",
            "BAR_ARROW_LEFT": "keyboard_reorder",
            "BAR_ARROW_RIGHT": "keyboard_reorder"
          }
        }
      ],
      "events": [
        "CLICK_START",
        "CLICK_PAUSE",
        "CLICK_STEP",
        "CLICK_NEXT_PASS",
        "CLICK_RANDOMIZE",
        "CLICK_SHUFFLE",
        "CLICK_RESET",
        "CLICK_APPLY_CSV",
        "CHANGE_SIZE",
        "CHANGE_ORDER",
        "INPUT_SPEED",
        "RESIZE_WINDOW",
        "KEY_SPACE",
        "KEY_N",
        "KEY_R",
        "BAR_POINTER_DOWN",
        "BAR_POINTER_MOVE",
        "BAR_POINTER_UP",
        "BAR_ARROW_LEFT",
        "BAR_ARROW_RIGHT",
        "AUTO_TICK",
        "PASS_INIT_DONE",
        "INNER_LOOP_END",
        "COMPARISON_READY",
        "SWAP_NEEDED",
        "NO_SWAP_NEEDED",
        "SWAP_ANIM_DONE",
        "COMPARISON_DONE",
        "AUTO_RUNNING_CONTINUE",
        "MANUAL_CONTINUE",
        "STEP_COMPLETE",
        "STEP_NO_PROGRESS",
        "PASS_COMPLETED",
        "EARLY_EXIT_NO_SWAPS",
        "SORTING_COMPLETE",
        "DATA_APPLIED",
        "CSV_VALID",
        "CSV_INVALID",
        "ORDER_SET",
        "SPEED_SET",
        "RESIZE_DONE",
        "REORDER_DONE",
        "DISMISS"
      ],
      "notes": "Mapping to code: render_and_reset = renderBars() + resetSortState() + toggleButtons(); startAuto = startAuto() which sets isRunning=true, disables/enables buttons via toggleButtons(), and begins runLoop(); pauseAuto = pauseAuto() which sets isRunning=false and calls toggleButtons(). pass_init_setup corresponds to the initial part of stepOnce() when j===0: setActiveLine(2), narrate('Pass ...'), wait, setActiveLine(3), swappedInPass=false, wait. setActiveLine_4 and setActiveLine_7 correspond to highlighting pseudocode lines 4 and 7. highlightCompare_and_stats wraps highlightCompare(j), setActiveLine(5), comparisons++, updateStatus(), narrate(), wait. swap_animation_and_stats wraps setActiveLine(6), narrate('Swap needed'), swaps++, updateStatus(), animateSwap(j), swappedInPass=true, narrate('Swapped ...'). increment_j_and_update_status is j++, updateStatus(). complete_pass increments pass, updates suffix mask and status, narrates pass completion, resets j=0, waits; subsequent continuation depends on isRunning: AUTO_RUNNING_CONTINUE (back to running) vs MANUAL_CONTINUE (back to ready). apply_early_exit sets pass=n-1, updateSuffixMask(), updateStatus(), narrate early exit; transitions to done via SORTING_COMPLETE. advance_to_next_pass models nextPass(): repeatedly calling stepOnce() until pass increments, or early exit; transitions via PASS_COMPLETED to ready or EARLY_EXIT_NO_SWAPS to early_exit -> done. start_drag / commit_drag_reorder / keyboard_reorder_action mirror pointer and keyboard reorder logic: splice values, renderBars(), resetSortState(), narrate. randomize_values, shuffle_values, reset_to_initial_values, apply_csv_values, set_order, set_speed, recompute_layout reflect the respective button/input handlers; each returns to ready via DATA_APPLIED/CSV_VALID/ORDER_SET/SPEED_SET/RESIZE_DONE. narrate_invalid_csv corresponds to narrate('Invalid CSV...'). narrate_complete corresponds to narrate('Sorting complete.') and disabling step/next via toggleButtons(); done state allows data reconfiguration and reordering. Guards: INNER_LOOP_END occurs when j > (n-2-pass); EARLY_EXIT_NO_SWAPS occurs when swappedInPass===false at inner-loop end; PASS_COMPLETED occurs when inner loop ends with swappedInPass===true; SORTING_COMPLETE occurs when pass >= n-1. Speed-dependent waits use state.speedMs and are applied in stepOnce() and auto runLoop. Button disabling/enabling is driven by toggleButtons() based on isRunning and completion (pass >= n-1). Resizing recomputes layout and repositions bars without changing algorithmic indices."
    }
  },
  {
    "id": "6a9e5450-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:02:11.783Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Binary Search Tree (BST)",
    "answer": {
      "role": "assistant",
      "content": "It looks like you mentioned Binary Search Tree (BST). The current module is scoped to a single concept: bubble sort. If you’d like a BST module instead, let me know and I can adapt. Below is a complete interactive bubble sort module as requested.\n\nConcept Title:\n- Bubble Sort, Visualized and Explored\n\nLearning Objective:\n- After interacting, users will be able to:\n  - Explain how bubble sort works: comparing adjacent elements and swapping when out of order.\n  - Identify “passes” and understand why the largest elements “bubble” to the end.\n  - Observe early termination when a pass makes no swaps.\n  - Step through or animate the algorithm to connect code-level logic with visual behavior.\n\nInteraction Design:\n- Users can:\n  - Generate a random array or type a custom list of numbers.\n  - Start/Pause an animation of bubble sort with speed control.\n  - Step through one comparison/swap at a time to see precise actions.\n  - Reset at any time to the initial state.\n- Visual feedback and animations:\n  - Adjacent elements being compared are highlighted.\n  - When a swap occurs, bars slide horizontally to new positions with a smooth transition.\n  - The sorted tail (end of the array after each pass) is shaded to indicate elements that no longer need comparisons.\n  - Live narration announces each comparison and swap in an ARIA live region for accessibility.\n- Reinforcement of understanding:\n  - Counters display comparisons, swaps, and pass number.\n  - An “early exit” notice appears when a pass has zero swaps, demonstrating optimization.\n\nLayout Description:\n- Spatial organization:\n  - Safe area: 24 px padding around the entire module.\n  - Top: Title and a one-line objective to set context.\n  - Left (controls panel): array input, randomize button, Start/Pause, Step, Reset, speed slider, and size control (min spacing 16 px between interactive elements).\n  - Right (visual panel): the animated bar chart representing the array, a shaded sorted region at the end, and algorithm counters.\n  - Bottom: concise explanation text and status messages (including ARIA live narration for screen readers).\n- Clarity, focus, balance:\n  - Controls are grouped and labeled; the visual area has generous spacing and avoids clutter.\n  - Highlight colors are consistent and readable; focus outlines are visible for keyboard navigation.\n- Accessibility and responsiveness:\n  - All controls have labels; the narration region uses aria-live=\"polite\".\n  - Layout switches to a vertical stack on narrow screens so controls and visualization remain readable.\n  - Colors meet contrast guidelines; keyboard focus states are apparent.\n\n----- Begin Self-Contained HTML (vanilla) -----\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort, Visualized and Explored</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f172a;          /* slate-900 */\n      --panel: #111827;       /* gray-900 */\n      --text: #e5e7eb;        /* gray-200 */\n      --muted: #9ca3af;       /* gray-400 */\n      --accent: #22c55e;      /* green-500 */\n      --accent-dark: #16a34a; /* green-600 */\n      --danger: #ef4444;      /* red-500 */\n      --warning: #f59e0b;     /* amber-500 */\n      --compare: #60a5fa;     /* blue-400 */\n      --sortedTail: rgba(34, 197, 94, 0.15);\n      --bar: #34d399;         /* emerald-400 */\n      --bar-contrast: #064e3b;/* emerald-900 */\n      --focus: #fbbf24;       /* amber-400 */\n      --gap: 16px;\n      --margin: 24px;\n    }\n\n    * { box-sizing: border-box; }\n    html, body {\n      height: 100%;\n      margin: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      line-height: 1.35;\n    }\n\n    .page {\n      padding: var(--margin);\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .title {\n      font-size: 1.75rem;\n      font-weight: 700;\n      margin: 0 0 8px 0;\n    }\n\n    .subtitle {\n      color: var(--muted);\n      margin: 0 0 24px 0;\n    }\n\n    .layout {\n      display: flex;\n      gap: 24px;\n      align-items: flex-start;\n      flex-wrap: wrap;\n    }\n\n    .panel {\n      background: var(--panel);\n      border-radius: 12px;\n      padding: 16px;\n      flex: 1 1 340px;\n      min-width: 280px;\n    }\n\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    .controls label {\n      font-size: 0.95rem;\n      margin-bottom: 4px;\n      display: block;\n    }\n\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n\n    .row > * {\n      flex: 0 1 auto;\n    }\n\n    input[type=\"text\"], input[type=\"number\"], input[type=\"range\"], select {\n      width: 100%;\n      padding: 10px 12px;\n      border-radius: 8px;\n      border: 1px solid #1f2937; /* gray-800 */\n      background: #0b1220;\n      color: var(--text);\n    }\n\n    input[type=\"range\"] {\n      accent-color: var(--accent);\n    }\n\n    button {\n      padding: 10px 14px;\n      border-radius: 8px;\n      border: 1px solid #1f2937;\n      background: #0b1220;\n      color: var(--text);\n      cursor: pointer;\n    }\n    button:hover { background: #0c1528; }\n    button:active { transform: translateY(1px); }\n    button:focus-visible {\n      outline: 2px solid var(--focus);\n      outline-offset: 2px;\n    }\n\n    .btn-primary {\n      background: var(--accent);\n      color: #082016;\n      border-color: var(--accent-dark);\n    }\n    .btn-primary:hover { background: var(--accent-dark); }\n\n    .stats {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(140px, 1fr));\n      gap: var(--gap);\n      margin-top: 8px;\n    }\n    .stat {\n      background: #0b1220;\n      border: 1px solid #1f2937;\n      border-radius: 8px;\n      padding: 10px 12px;\n    }\n    .stat .label {\n      font-size: 0.8rem;\n      color: var(--muted);\n    }\n    .stat .value {\n      font-size: 1.25rem;\n      font-weight: 700;\n    }\n\n    .viz-wrapper {\n      position: relative;\n      min-height: 280px;\n    }\n\n    .viz {\n      position: relative;\n      height: 280px;\n      background: #0b1220;\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      overflow: hidden;\n    }\n\n    .sorted-tail {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      width: 0;\n      background: var(--sortedTail);\n      pointer-events: none;\n      transition: width 300ms ease;\n    }\n\n    .bars {\n      position: absolute;\n      inset: 8px 8px 8px 8px;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      width: 40px;         /* initial, will be sized by JS */\n      left: 0;             /* positioned by JS */\n      height: 40px;        /* sized by JS based on value */\n      background: var(--bar);\n      color: var(--bar-contrast);\n      border-radius: 8px 8px 0 0;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      padding-bottom: 6px;\n      font-weight: 700;\n      transition: left 250ms ease, height 250ms ease, background 150ms ease, transform 250ms ease;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.35);\n    }\n\n    .bar.compare {\n      background: var(--compare);\n    }\n    .bar.swap {\n      background: var(--danger);\n      transform: translateY(-4px);\n    }\n    .bar.finished {\n      background: var(--accent);\n    }\n\n    .legend {\n      margin-top: 12px;\n      color: var(--muted);\n      font-size: 0.9rem;\n    }\n\n    .status {\n      margin-top: 10px;\n      min-height: 22px;\n      color: var(--text);\n    }\n    .status .ok { color: var(--accent); }\n    .status .warn { color: var(--warning); }\n    .status .err { color: var(--danger); }\n\n    .note {\n      margin-top: 24px;\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n\n    @media (max-width: 760px) {\n      .layout { flex-direction: column; }\n      .viz { height: 320px; }\n      .bars { inset: 8px; }\n    }\n  </style>\n</head>\n<body>\n  <main class=\"page\" role=\"main\">\n    <h1 class=\"title\">Bubble Sort, Visualized and Explored</h1>\n    <p class=\"subtitle\">Step through adjacent comparisons, see swaps animate, and watch the largest values bubble to the end. Adjust speed, input your own numbers, and observe early termination.</p>\n\n    <section class=\"layout\" aria-label=\"Interactive bubble sort module\">\n      <!-- Controls Panel -->\n      <section class=\"panel\" aria-label=\"Controls\">\n        <div class=\"controls\">\n          <div>\n            <label for=\"arrayInput\">Array (comma-separated numbers)</label>\n            <input id=\"arrayInput\" type=\"text\" value=\"5,3,8,1,4,7\"\n                   aria-describedby=\"arrayHelp\" placeholder=\"e.g., 12, 3, 7, 1, 9\" />\n            <div id=\"arrayHelp\" class=\"legend\">Enter integers separated by commas. Example: 5, 3, 8, 1</div>\n          </div>\n\n          <div class=\"row\">\n            <button id=\"applyArray\" class=\"btn-primary\" aria-label=\"Apply custom array\">Apply</button>\n            <button id=\"randomArray\" aria-label=\"Generate random array\">Randomize</button>\n            <label for=\"sizeInput\" style=\"min-width: 120px;\">Size</label>\n            <input id=\"sizeInput\" type=\"number\" min=\"5\" max=\"30\" value=\"6\" aria-label=\"Array size (5 to 30)\" />\n          </div>\n\n          <div class=\"row\">\n            <button id=\"startPause\" class=\"btn-primary\" aria-label=\"Start or pause animation\">Start</button>\n            <button id=\"stepOnce\" aria-label=\"Perform one comparison and possible swap\">Step</button>\n            <button id=\"reset\" aria-label=\"Reset to initial array\">Reset</button>\n          </div>\n\n          <div>\n            <label for=\"speed\">Speed</label>\n            <input id=\"speed\" type=\"range\" min=\"0.25\" max=\"2\" step=\"0.25\" value=\"1\" aria-label=\"Animation speed\" />\n            <div class=\"legend\">Lower = slower, higher = faster.</div>\n          </div>\n\n          <div class=\"stats\" aria-label=\"Algorithm stats\">\n            <div class=\"stat\">\n              <div class=\"label\">Pass</div>\n              <div id=\"statPass\" class=\"value\">0</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"label\">Comparisons</div>\n              <div id=\"statComp\" class=\"value\">0</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"label\">Swaps</div>\n              <div id=\"statSwap\" class=\"value\">0</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"label\">Length</div>\n              <div id=\"statLen\" class=\"value\">0</div>\n            </div>\n          </div>\n\n          <div class=\"status\" aria-live=\"polite\" id=\"narration\">Ready.</div>\n        </div>\n      </section>\n\n      <!-- Visualization Panel -->\n      <section class=\"panel\" aria-label=\"Visualization\">\n        <div class=\"viz-wrapper\">\n          <div class=\"viz\" id=\"viz\">\n            <div class=\"sorted-tail\" id=\"sortedTail\"></div>\n            <div class=\"bars\" id=\"bars\"></div>\n          </div>\n\n          <div class=\"legend\">\n            Legend:\n            Compare = blue, Swap = red, Sorted tail (end) = green shade.\n          </div>\n          <div class=\"note\">\n            Bubble sort compares adjacent elements left-to-right. After each pass, the largest unsorted element has moved to the end. If a pass makes no swaps, the array is already sorted and we stop early.\n          </div>\n        </div>\n      </section>\n    </section>\n  </main>\n\n  <script>\n    // Bubble sort interactive module (vanilla JS)\n    (function() {\n      const barsEl = document.getElementById('bars');\n      const sortedTailEl = document.getElementById('sortedTail');\n      const narrationEl = document.getElementById('narration');\n\n      const arrayInput = document.getElementById('arrayInput');\n      const applyBtn = document.getElementById('applyArray');\n      const randomBtn = document.getElementById('randomArray');\n      const sizeInput = document.getElementById('sizeInput');\n\n      const startPauseBtn = document.getElementById('startPause');\n      const stepBtn = document.getElementById('stepOnce');\n      const resetBtn = document.getElementById('reset');\n\n      const speedInput = document.getElementById('speed');\n\n      const statPass = document.getElementById('statPass');\n      const statComp = document.getElementById('statComp');\n      const statSwap = document.getElementById('statSwap');\n      const statLen  = document.getElementById('statLen');\n\n      const state = {\n        initial: [5,3,8,1,4,7],\n        arr: [],\n        i: 0,           // current pass index\n        j: 0,           // current comparison index\n        swappedInPass: false,\n        comparisons: 0,\n        swaps: 0,\n        running: false,\n        speed: 1,       // 1 = base speed, scaled\n        timer: null,\n        finished: false\n      };\n\n      // Utility: parse user input\n      function parseArray(str) {\n        const parts = str.split(',')\n          .map(s => s.trim())\n          .filter(s => s.length > 0);\n        if (parts.length === 0) return null;\n        const nums = [];\n        for (let p of parts) {\n          const n = Number(p);\n          if (!Number.isFinite(n)) return null;\n          nums.push(Math.round(n));\n        }\n        return nums;\n      }\n\n      function randomArray(len) {\n        const out = [];\n        for (let i=0; i<len; i++) {\n          out.push(Math.floor(Math.random() * 99) + 1); // 1..99\n        }\n        return out;\n      }\n\n      // Visualization: layout bars with absolute positioning and animate left/height\n      function renderBars(arr) {\n        const n = arr.length;\n        statLen.textContent = n;\n\n        // Compute layout metrics\n        const containerRect = barsEl.getBoundingClientRect();\n        const width = containerRect.width || barsEl.clientWidth;\n        const height = containerRect.height || barsEl.clientHeight;\n\n        const gap = 8; // internal gap between bars\n        const barWidth = Math.max(20, Math.floor((width - gap*(n-1)) / n));\n\n        const maxVal = Math.max(...arr);\n        const minBarHeight = 28;\n        const scale = (height - 16 - minBarHeight) / Math.max(1, maxVal);\n\n        // Create missing bars or update existing\n        // Ensure we have exactly n .bar elements in order\n        const existing = Array.from(barsEl.children);\n        // Fast rebuild if length mismatch\n        if (existing.length !== n) {\n          barsEl.innerHTML = '';\n        }\n\n        for (let i=0; i<n; i++) {\n          let bar = barsEl.children[i];\n          if (!bar) {\n            bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.setAttribute('role', 'img');\n            bar.setAttribute('aria-label', `Value ${arr[i]} at position ${i}`);\n            barsEl.appendChild(bar);\n          }\n          const left = i * (barWidth + gap);\n          const h = Math.round(minBarHeight + arr[i] * scale);\n          bar.style.width = barWidth + 'px';\n          bar.style.left = left + 'px';\n          bar.style.height = h + 'px';\n          bar.textContent = String(arr[i]);\n          // Clear dynamic classes unless set by algorithm\n          bar.classList.remove('compare', 'swap', 'finished');\n        }\n\n        // Update sorted tail indicator width (end segment shaded)\n        const tailCount = state.i > 0 ? state.i : 0;\n        const tailWidth = tailCount * (barWidth + gap);\n        sortedTailEl.style.width = tailWidth + 'px';\n      }\n\n      // Highlight the current comparison pair\n      function highlightPair(j) {\n        const bars = barsEl.children;\n        for (let b of bars) b.classList.remove('compare', 'swap');\n        const a = bars[j];\n        const b = bars[j+1];\n        if (a && b) {\n          a.classList.add('compare');\n          b.classList.add('compare');\n        }\n      }\n\n      function markSwap(j) {\n        const a = barsEl.children[j];\n        const b = barsEl.children[j+1];\n        if (a && b) {\n          a.classList.add('swap');\n          b.classList.add('swap');\n        }\n      }\n\n      function clearHighlights() {\n        for (let b of barsEl.children) {\n          b.classList.remove('compare', 'swap');\n        }\n      }\n\n      function updateStats() {\n        statPass.textContent = state.i;\n        statComp.textContent = state.comparisons;\n        statSwap.textContent = state.swaps;\n      }\n\n      function setNarration(msg, level='') {\n        narrationEl.className = 'status ' + (level || '');\n        narrationEl.textContent = msg;\n      }\n\n      function finish() {\n        state.running = false;\n        state.finished = true;\n        clearTimeout(state.timer);\n        // Mark all bars finished\n        for (let b of barsEl.children) {\n          b.classList.remove('compare', 'swap');\n          b.classList.add('finished');\n        }\n        setNarration('Sorted! Bubble sort complete.', 'ok');\n        startPauseBtn.textContent = 'Start';\n      }\n\n      function earlyExit() {\n        setNarration('No swaps in last pass — array already sorted. Early exit.', 'ok');\n      }\n\n      // One algorithm step: compare adjacent and possibly swap\n      function stepOnceInternal() {\n        if (state.finished) return;\n        const n = state.arr.length;\n        // If j reached end-of-pass boundary, evaluate pass result\n        if (state.j >= n - state.i - 1) {\n          // End of pass\n          if (!state.swappedInPass) {\n            // Early termination\n            earlyExit();\n            finish();\n            return;\n          }\n          state.i += 1;\n          state.j = 0;\n          state.swappedInPass = false;\n          updateStats();\n          renderBars(state.arr);\n          // Update sorted tail shading\n          setNarration(`Starting pass ${state.i}. Final ${state.i} elements are sorted and shaded.`);\n          // If all passes done\n          if (state.i >= n - 1) {\n            finish();\n          }\n          return;\n        }\n\n        // Compare pair j and j+1\n        highlightPair(state.j);\n        const a = state.arr[state.j];\n        const b = state.arr[state.j+1];\n        setNarration(`Comparing positions ${state.j} and ${state.j+1}: ${a} vs ${b}`);\n\n        // Simulate time for visual compare before acting\n        const compareDelay = 300 / state.speed;\n        const swapDelay = 350 / state.speed;\n\n        state.timer = setTimeout(() => {\n          state.comparisons += 1;\n\n          if (a > b) {\n            // Swap needed\n            markSwap(state.j);\n            setNarration(`Swapping ${a} and ${b} because ${a} > ${b}`, 'warn');\n            // Perform swap in data\n            const tmp = state.arr[state.j];\n            state.arr[state.j] = state.arr[state.j+1];\n            state.arr[state.j+1] = tmp;\n\n            state.swaps += 1;\n            state.swappedInPass = true;\n            updateStats();\n\n            // Re-render positions (this triggers animated left movement)\n            renderBars(state.arr);\n\n            // Clear marks after swap animation\n            state.timer = setTimeout(() => {\n              clearHighlights();\n              state.j += 1;\n              // Auto-advance loop if running\n              if (state.running) {\n                stepOnceInternal();\n              }\n            }, swapDelay);\n          } else {\n            // No swap\n            setNarration(`No swap: ${a} ≤ ${b}.`);\n            clearHighlights();\n            state.j += 1;\n            if (state.running) {\n              stepOnceInternal();\n            }\n          }\n        }, compareDelay);\n      }\n\n      function startOrPause() {\n        if (state.finished && state.running === false) {\n          // Restart not allowed without reset; clarify\n          setNarration('Already finished. Press Reset to run again.', 'warn');\n          return;\n        }\n        state.running = !state.running;\n        startPauseBtn.textContent = state.running ? 'Pause' : 'Start';\n        if (state.running) {\n          stepOnceInternal();\n        } else {\n          clearTimeout(state.timer);\n          setNarration('Paused.');\n        }\n      }\n\n      function stepOnce() {\n        if (state.finished) {\n          setNarration('Already finished. Press Reset to run again.', 'warn');\n          return;\n        }\n        if (state.running) {\n          // Pause and step to ensure single action clarity\n          state.running = false;\n          startPauseBtn.textContent = 'Start';\n          clearTimeout(state.timer);\n        }\n        stepOnceInternal();\n      }\n\n      function reset() {\n        clearTimeout(state.timer);\n        state.arr = state.initial.slice();\n        state.i = 0;\n        state.j = 0;\n        state.swappedInPass = false;\n        state.comparisons = 0;\n        state.swaps = 0;\n        state.running = false;\n        state.finished = false;\n        startPauseBtn.textContent = 'Start';\n        updateStats();\n        renderBars(state.arr);\n        clearHighlights();\n        setNarration('Ready.');\n      }\n\n      function applyArrayFromInput() {\n        const parsed = parseArray(arrayInput.value);\n        if (!parsed || parsed.length < 2) {\n          setNarration('Please enter at least two valid numbers separated by commas.', 'err');\n          return;\n        }\n        state.initial = parsed.slice();\n        sizeInput.value = parsed.length;\n        reset();\n      }\n\n      function randomizeArray() {\n        const size = clampInt(Number(sizeInput.value), 5, 30);\n        sizeInput.value = size;\n        const arr = randomArray(size);\n        arrayInput.value = arr.join(', ');\n        state.initial = arr.slice();\n        reset();\n      }\n\n      function clampInt(n, min, max) {\n        if (!Number.isFinite(n)) return min;\n        return Math.max(min, Math.min(max, Math.round(n)));\n      }\n\n      // Respond to speed changes (affects delays)\n      function updateSpeed() {\n        const val = Number(speedInput.value);\n        state.speed = val;\n      }\n\n      // Wire up events\n      applyBtn.addEventListener('click', applyArrayFromInput);\n      randomBtn.addEventListener('click', randomizeArray);\n      startPauseBtn.addEventListener('click', startOrPause);\n      stepBtn.addEventListener('click', stepOnce);\n      resetBtn.addEventListener('click', reset);\n      speedInput.addEventListener('input', updateSpeed);\n      sizeInput.addEventListener('change', () => {\n        // Optional: just keep size synced; randomize uses it explicitly.\n        const val = clampInt(Number(sizeInput.value), 5, 30);\n        sizeInput.value = val;\n      });\n\n      // Keyboard accessibility: space/enter on focused buttons\n      [applyBtn, randomBtn, startPauseBtn, stepBtn, resetBtn].forEach(btn => {\n        btn.addEventListener('keyup', (e) => {\n          if (e.key === 'Enter' || e.key === ' ') btn.click();\n        });\n      });\n\n      // Initialize\n      function init() {\n        // Fill initial UI\n        arrayInput.value = state.initial.join(', ');\n        updateSpeed();\n        renderBars(state.initial);\n        state.arr = state.initial.slice();\n        updateStats();\n        setNarration('Ready.');\n      }\n\n      // On resize, re-render positions to keep bars aligned responsively\n      window.addEventListener('resize', () => {\n        renderBars(state.arr);\n      });\n\n      init();\n    })();\n  </script>\n</body>\n</html>\n----- End Self-Contained HTML -----"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Binary Search Tree (BST)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a bubble sort visualization with start/pause, step, reset, input/apply, randomize, and speed controls. It models auto-play, manual stepping, animation phases (compare/swap), pass boundaries, and completion.",
      "states": [
        {
          "name": "idle",
          "onEnter": "set_start_button_label_start",
          "on": {
            "CLICK_START": "compute_next_step_auto",
            "CLICK_STEP": "compute_next_step_step",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_APPLY_INVALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "SPEED_CHANGE": "idle",
            "SIZE_CHANGE": "idle",
            "RESIZE": "idle"
          }
        },
        {
          "name": "compute_next_step_auto",
          "onEnter": "check_pass_boundary_and_dispatch",
          "on": {
            "PASS_END_NO_SWAPS": "finished",
            "FINAL_PASS_COMPLETE": "finished",
            "PASS_END_WITH_SWAPS": "between_pass",
            "READY_TO_COMPARE": "playing_comparing",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "CLICK_PAUSE": "paused"
          }
        },
        {
          "name": "compute_next_step_step",
          "onEnter": "check_pass_boundary_and_dispatch",
          "on": {
            "PASS_END_NO_SWAPS": "finished",
            "FINAL_PASS_COMPLETE": "finished",
            "PASS_END_WITH_SWAPS": "between_pass",
            "READY_TO_COMPARE": "stepping_comparing",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle"
          }
        },
        {
          "name": "playing_comparing",
          "onEnter": "highlight_pair_and_schedule_compare_timer",
          "onExit": "noop",
          "on": {
            "TIMER_COMPARE_DONE_SWAP": "playing_swapping",
            "TIMER_COMPARE_DONE_NO_SWAP": "compute_next_step_auto",
            "CLICK_PAUSE": "paused",
            "CLICK_STEP": "compute_next_step_step",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "SPEED_CHANGE": "playing_comparing",
            "RESIZE": "playing_comparing"
          }
        },
        {
          "name": "playing_swapping",
          "onEnter": "mark_swap_swap_values_render_and_schedule_swap_timer",
          "on": {
            "TIMER_SWAP_ANIM_DONE": "compute_next_step_auto",
            "CLICK_PAUSE": "paused",
            "CLICK_STEP": "compute_next_step_step",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "SPEED_CHANGE": "playing_swapping",
            "RESIZE": "playing_swapping"
          }
        },
        {
          "name": "between_pass",
          "onEnter": "update_stats_render_and_announce_new_pass",
          "on": {
            "CLICK_PAUSE": "paused",
            "CLICK_START": "compute_next_step_auto",
            "CLICK_STEP": "compute_next_step_step",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle"
          }
        },
        {
          "name": "stepping_comparing",
          "onEnter": "highlight_pair_and_schedule_compare_timer",
          "on": {
            "TIMER_COMPARE_DONE_SWAP": "stepping_swapping",
            "TIMER_COMPARE_DONE_NO_SWAP": "idle",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "SPEED_CHANGE": "stepping_comparing",
            "RESIZE": "stepping_comparing"
          }
        },
        {
          "name": "stepping_swapping",
          "onEnter": "mark_swap_swap_values_render_and_schedule_swap_timer",
          "on": {
            "TIMER_SWAP_ANIM_DONE": "idle",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "SPEED_CHANGE": "stepping_swapping",
            "RESIZE": "stepping_swapping"
          }
        },
        {
          "name": "paused",
          "onEnter": "clear_timer_and_set_paused_message",
          "on": {
            "CLICK_START": "compute_next_step_auto",
            "CLICK_STEP": "compute_next_step_step",
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "SPEED_CHANGE": "paused",
            "SIZE_CHANGE": "paused",
            "RESIZE": "paused"
          }
        },
        {
          "name": "finished",
          "onEnter": "mark_bars_finished_and_announce_completion",
          "on": {
            "CLICK_RESET": "idle",
            "CLICK_APPLY_VALID": "idle",
            "CLICK_RANDOMIZE": "idle",
            "CLICK_START": "finished",
            "CLICK_STEP": "finished",
            "SPEED_CHANGE": "finished",
            "SIZE_CHANGE": "finished",
            "RESIZE": "finished"
          }
        }
      ],
      "events": [
        "INIT",
        "CLICK_START",
        "CLICK_PAUSE",
        "CLICK_STEP",
        "CLICK_RESET",
        "CLICK_APPLY_VALID",
        "CLICK_APPLY_INVALID",
        "CLICK_RANDOMIZE",
        "SPEED_CHANGE",
        "SIZE_CHANGE",
        "RESIZE",
        "READY_TO_COMPARE",
        "PASS_END_WITH_SWAPS",
        "PASS_END_NO_SWAPS",
        "FINAL_PASS_COMPLETE",
        "TIMER_COMPARE_DONE_SWAP",
        "TIMER_COMPARE_DONE_NO_SWAP",
        "TIMER_SWAP_ANIM_DONE"
      ],
      "notes": "Key mappings: Start/Pause is a single button; when it shows 'Start' it emits CLICK_START and sets running=true; when it shows 'Pause' it emits CLICK_PAUSE and sets running=false and clears any pending timer. Step always ensures running=false before performing one step. On every step invocation, the algorithm first checks if the current comparison index j has reached the pass boundary (j >= n - i - 1). If so, it either triggers PASS_END_NO_SWAPS (early exit) and goes to finished, or PASS_END_WITH_SWAPS to enter between_pass (announces next pass, updates stats and sorted-tail shading). Notably, auto-play does NOT automatically continue across pass boundaries; it halts in between_pass until the user clicks Pause->Start or Step to continue. Visual feedback: comparing states add 'compare' class to two bars; swapping states add 'swap' class, perform the in-array swap, update stats, re-render to animate positions, then clear highlights after the swap timer. Finished state adds 'finished' class to all bars and announces completion. Speed changes (SPEED_CHANGE) update delay scaling but do not change state. Resize (RESIZE) re-renders bar positions but does not change state. Apply (valid) and Randomize both reset the algorithm to the initial/selected array (transition to idle). Apply invalid does not change state; it only sets an error narration."
    }
  },
  {
    "id": "6f7e3170-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:02:55.069Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Binary Tree",
    "answer": {
      "role": "assistant",
      "content": "Below is a complete, self-contained interactive HTML module that teaches only one concept: bubble sort. It includes a clear title, learning objectives, detailed interaction design, and layout description, followed by the working code with visual feedback and animations.\n\nConcept Title:\n- Bubble Sort Visual Lab: Adjacent Comparisons and Passes\n\nLearning Objective:\n- After interacting with this module, users will be able to:\n  - Explain how bubble sort works via adjacent comparisons and swaps.\n  - Observe how the largest elements “bubble” to the end of the list each pass.\n  - Identify the role of passes and the early-exit optimization when no swaps occur.\n  - Relate the algorithm’s behavior to its time complexity (best-case O(n), typical/worst-case O(n²)) by monitoring comparison and swap counts.\n\nInteraction Design:\n- Input and setup:\n  - Users can type a custom list of integers (comma-separated) or generate arrays using size and pattern controls (Random, Nearly Sorted, Reversed). An option toggles duplicates.\n  - Shuffle and Reset regenerate or restore the current data while preserving the concept focus.\n- Sorting controls:\n  - Step: Performs exactly one comparison (and potential swap), highlighting the two adjacent elements being compared. If a swap occurs, the bars animate to their new positions.\n  - Play/Pause: Auto-runs bubble sort at a user-selected speed. Stops when sorted or when paused.\n  - Reset: Restores the array to its original unsorted state and clears stats.\n- Visual feedback:\n  - Bars represent values; height encodes magnitude; labels show the numeric value.\n  - Currently compared pair is highlighted with a pulse. A small pointer/brace appears above the pair being compared.\n  - Swap results animate smoothly, reinforcing the notion of adjacent exchange.\n  - End-of-pass feedback: When a pass completes, the last settled element is subtly marked, and an optional early-exit message appears if no swaps occurred.\n- Accessibility and keyboard:\n  - Buttons are large and keyboard accessible. Shortcuts: Space toggles Play/Pause, Enter performs Step, R resets, S shuffles.\n  - ARIA labels and readable contrast are used. All actions are possible via keyboard and screen readers.\n- Reinforcement:\n  - A live narration line describes each comparison step (“Comparing 12 and 7 → swap” or “Comparing 5 and 9 → keep”).\n  - Statistics (passes, comparisons, swaps) update in real time, connecting behavior to complexity.\n\nLayout Description:\n- Spatial organization:\n  - Safe area margins: 24 px padding on all sides via a top-level container.\n  - Main layout uses a responsive two-column design on larger screens: visualization on the left; controls, narration, and stats on the right. On small screens, stacks vertically in the order: title/objective, visualization, controls, narration/stats.\n  - Minimum spacing: 16 px applied between interactive controls and between control groups.\n- Visual area:\n  - The visualization takes priority, centered horizontally, with sufficient height for clear bar differences (approximately 320–400 px depending on viewport).\n  - Legend and pointer are unobtrusive, with high contrast and large touch targets.\n- Controls:\n  - Grouped by function (Data, Sorting, Playback), each clearly labeled. Inputs have validation and instructions.\n  - Speed slider adjusts animation duration and autoplay cadence.\n- Responsiveness:\n  - Uses flexible sizing for columns and bars. Recomputes bar positions on window resize.\n  - Touch-friendly targets (min height ~44 px).\n- Accessibility:\n  - High-contrast color palette and ARIA labels. Avoids color-only distinction by combining color and pulsing for comparisons.\n\n——————\nInteractive Module (HTML/CSS/JS)\nCopy the entire block into a single .html file and open in a browser.\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Bubble Sort Visual Lab</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    :root {\n      --safe-pad: 24px;\n      --gap: 16px;\n      --bar-gap: 8px;\n      --bg: #0f172a;           /* slate-900 */\n      --panel: #111827;        /* gray-900 */\n      --text: #e5e7eb;         /* gray-200 */\n      --muted: #94a3b8;        /* slate-400 */\n      --accent: #22c55e;       /* green-500 */\n      --accent-2: #60a5fa;     /* blue-400 */\n      --alert: #f97316;        /* orange-500 */\n      --danger: #ef4444;       /* red-500 */\n      --bar: #3b82f6;          /* blue-500 */\n      --bar-compare: #f59e0b;  /* amber-500 */\n      --bar-swap: #ef4444;     /* red-500 */\n      --bar-settled: #22c55e;  /* green-500 */\n      --anim-duration: 450ms;  /* default animation speed */\n      --radius: 10px;\n    }\n\n    * { box-sizing: border-box; }\n    html, body {\n      height: 100%;\n      background: linear-gradient(180deg, #0b1222 0%, #0f172a 100%);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.35;\n    }\n\n    .safe {\n      padding: var(--safe-pad);\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    header {\n      margin-bottom: 16px;\n    }\n    h1 {\n      font-size: 1.75rem;\n      margin: 0 0 8px 0;\n      letter-spacing: 0.2px;\n    }\n    .subtitle {\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n\n    .main {\n      display: grid;\n      grid-template-columns: 1.2fr 1fr;\n      gap: var(--gap);\n    }\n    @media (max-width: 900px) {\n      .main {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .viz-card, .control-card {\n      background: rgba(17, 24, 39, 0.8);\n      border: 1px solid rgba(148, 163, 184, 0.15);\n      border-radius: var(--radius);\n      padding: 16px;\n      backdrop-filter: blur(6px);\n    }\n\n    .viz-header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 8px;\n    }\n    .legend {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n    .legend i {\n      display: inline-block;\n      width: 14px;\n      height: 14px;\n      border-radius: 3px;\n      margin-right: 6px;\n    }\n    .legend-item {\n      font-size: 0.9rem;\n      color: var(--muted);\n      display: flex;\n      align-items: center;\n    }\n\n    /* Visualization area */\n    .viz {\n      position: relative;\n      width: 100%;\n      height: 360px;\n      background: linear-gradient(180deg, rgba(148, 163, 184, 0.12), rgba(148, 163, 184, 0.06));\n      border: 1px dashed rgba(148, 163, 184, 0.2);\n      border-radius: 10px;\n      overflow: hidden;\n    }\n\n    .bars {\n      position: absolute;\n      inset: 16px;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      border-radius: 6px 6px 0 0;\n      background: var(--bar);\n      color: #0b1222;\n      font-weight: 600;\n      text-shadow: 0 1px 0 rgba(255,255,255,0.3);\n      transition: transform var(--anim-duration) ease, height var(--anim-duration) ease, background-color 0.2s ease, box-shadow 0.2s ease;\n      box-shadow: 0 8px 14px rgba(59, 130, 246, 0.15);\n      will-change: transform, height;\n    }\n    .bar-label {\n      background: rgba(255, 255, 255, 0.9);\n      color: #0b1222;\n      padding: 4px 6px;\n      border-radius: 6px;\n      margin-bottom: 6px;\n      font-size: 0.85rem;\n      user-select: none;\n      pointer-events: none;\n    }\n\n    .bar.comparing {\n      background: var(--bar-compare);\n      animation: pulse 0.6s ease-in-out infinite alternate;\n      box-shadow: 0 10px 18px rgba(245, 158, 11, 0.25);\n    }\n    .bar.swapped {\n      background: var(--bar-swap);\n      box-shadow: 0 10px 18px rgba(239, 68, 68, 0.28);\n    }\n    .bar.settled {\n      background: linear-gradient(180deg, #22c55e, #16a34a);\n      box-shadow: 0 10px 18px rgba(34, 197, 94, 0.28);\n    }\n\n    @keyframes pulse {\n      from { filter: brightness(1); }\n      to { filter: brightness(1.15); }\n    }\n\n    /* Pointer above current comparison */\n    .pointer {\n      position: absolute;\n      top: 0;\n      height: 24px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: transform var(--anim-duration) ease;\n      pointer-events: none;\n    }\n    .pointer .brace {\n      width: 80px;\n      height: 16px;\n      border: 3px solid var(--accent-2);\n      border-top: none;\n      border-radius: 0 0 10px 10px;\n      filter: drop-shadow(0 2px 4px rgba(96, 165, 250, 0.35));\n    }\n    .pointer .label {\n      margin-left: 10px;\n      color: var(--muted);\n      font-size: 0.85rem;\n      background: rgba(17, 24, 39, 0.7);\n      padding: 2px 6px;\n      border-radius: 6px;\n      border: 1px solid rgba(148, 163, 184, 0.25);\n    }\n\n    /* Controls */\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    .group-title {\n      font-weight: 600;\n      color: var(--muted);\n      margin-bottom: 8px;\n    }\n\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n    }\n\n    button, .field, select, input[type=\"range\"] {\n      border-radius: 8px;\n      border: 1px solid rgba(148, 163, 184, 0.25);\n      background: rgba(17, 24, 39, 0.75);\n      color: var(--text);\n    }\n\n    button {\n      padding: 12px 16px;\n      min-height: 44px;\n      cursor: pointer;\n      font-weight: 600;\n      transition: background-color 0.2s ease, transform 0.02s ease;\n    }\n    button:hover { background: rgba(17,24,39,0.9); }\n    button:active { transform: translateY(1px); }\n    button.primary { background: linear-gradient(180deg, #2563eb, #1d4ed8); border-color: transparent; }\n    button.warning { background: linear-gradient(180deg, #f59e0b, #d97706); border-color: transparent; }\n    button.success { background: linear-gradient(180deg, #22c55e, #16a34a); border-color: transparent; }\n    button.muted { color: var(--muted); }\n\n    .field {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      padding: 10px 12px;\n      min-height: 44px;\n      width: 100%;\n    }\n    .field input[type=\"text\"] {\n      flex: 1;\n      min-width: 240px;\n      border: none;\n      outline: none;\n      background: transparent;\n      color: var(--text);\n      font-size: 0.95rem;\n    }\n    .field .hint {\n      color: var(--muted);\n      font-size: 0.85rem;\n    }\n\n    .range-row {\n      display: grid;\n      grid-template-columns: 1fr auto;\n      align-items: center;\n      gap: var(--gap);\n    }\n    input[type=\"range\"] {\n      width: 100%;\n      height: 4px;\n      -webkit-appearance: none;\n      appearance: none;\n      background: rgba(148, 163, 184, 0.35);\n      border-radius: 999px;\n    }\n    input[type=\"range\"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 20px;\n      height: 20px;\n      background: var(--accent-2);\n      border-radius: 50%;\n      box-shadow: 0 2px 6px rgba(96, 165, 250, 0.35);\n      cursor: pointer;\n    }\n    input[type=\"range\"]::-moz-range-thumb {\n      width: 20px; height: 20px; background: var(--accent-2); border-radius: 50%; cursor: pointer;\n    }\n\n    .narration {\n      font-size: 0.95rem;\n      color: var(--text);\n      padding: 12px;\n      border-radius: 8px;\n      border: 1px solid rgba(148, 163, 184, 0.25);\n      background: rgba(17, 24, 39, 0.6);\n    }\n    .narration .line {\n      margin-bottom: 8px;\n    }\n    .narration .sub {\n      color: var(--muted);\n      font-size: 0.9rem;\n    }\n\n    .stats {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: var(--gap);\n    }\n    .stat {\n      background: rgba(17, 24, 39, 0.6);\n      border: 1px solid rgba(148, 163, 184, 0.25);\n      border-radius: 8px;\n      padding: 12px;\n      text-align: center;\n    }\n    .stat .value {\n      font-size: 1.25rem;\n      font-weight: 700;\n    }\n    .stat .label {\n      color: var(--muted);\n      font-size: 0.85rem;\n    }\n\n    .footer-note {\n      margin-top: 12px;\n      color: var(--muted);\n      font-size: 0.85rem;\n    }\n\n    /* Accessibility focus */\n    :focus-visible {\n      outline: 3px solid #38bdf8;\n      outline-offset: 2px;\n      border-radius: 6px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"safe\">\n    <header role=\"banner\">\n      <h1 aria-label=\"Bubble Sort Visual Lab\">Bubble Sort Visual Lab</h1>\n      <p class=\"subtitle\">Learn bubble sort via adjacent comparisons, swaps, and passes—with real-time narration and animation.</p>\n    </header>\n\n    <div class=\"main\" role=\"main\">\n      <!-- Visualization Card -->\n      <section class=\"viz-card\" aria-labelledby=\"viz-title\">\n        <div class=\"viz-header\">\n          <h2 id=\"viz-title\" style=\"margin:0; font-size:1.2rem;\">Visualization</h2>\n          <div class=\"legend\" aria-label=\"legend\">\n            <div class=\"legend-item\"><i style=\"background: var(--bar);\"></i>Value</div>\n            <div class=\"legend-item\"><i style=\"background: var(--bar-compare);\"></i>Comparing</div>\n            <div class=\"legend-item\"><i style=\"background: var(--bar-swap);\"></i>Swapped</div>\n            <div class=\"legend-item\"><i style=\"background: var(--bar-settled);\"></i>Settled</div>\n          </div>\n        </div>\n\n        <div class=\"viz\" id=\"viz\" aria-live=\"polite\" aria-label=\"Bubble sort bars area\">\n          <div class=\"bars\" id=\"bars\"></div>\n          <div class=\"pointer\" id=\"pointer\" aria-hidden=\"true\">\n            <div class=\"brace\"></div>\n            <div class=\"label\">Comparing j & j+1</div>\n          </div>\n        </div>\n      </section>\n\n      <!-- Controls and Narration -->\n      <aside class=\"control-card\" aria-labelledby=\"controls-title\">\n        <h2 id=\"controls-title\" style=\"margin:0 0 8px 0; font-size:1.2rem;\">Controls</h2>\n        <div class=\"controls\">\n\n          <!-- Data Setup -->\n          <div>\n            <div class=\"group-title\">Data</div>\n            <div class=\"row\" role=\"group\" aria-label=\"Array input and generation\">\n              <div class=\"field\" aria-label=\"Array input field\">\n                <span class=\"hint\">List (comma-separated):</span>\n                <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 5, 1, 4, 2, 8\">\n                <button id=\"applyInputBtn\" class=\"primary\" aria-label=\"Apply array\">Apply</button>\n              </div>\n              <div class=\"row\">\n                <label class=\"field\" for=\"sizeSlider\" aria-label=\"Size slider\">\n                  <span class=\"hint\">Size</span>\n                  <input id=\"sizeSlider\" type=\"range\" min=\"5\" max=\"30\" value=\"12\" />\n                  <span id=\"sizeVal\" class=\"hint\">12</span>\n                </label>\n                <label class=\"field\" for=\"patternSelect\" aria-label=\"Pattern select\">\n                  <span class=\"hint\">Pattern</span>\n                  <select id=\"patternSelect\">\n                    <option value=\"random\">Random</option>\n                    <option value=\"nearly\">Nearly Sorted</option>\n                    <option value=\"reversed\">Reversed</option>\n                  </select>\n                </label>\n                <label class=\"field\" for=\"dupToggle\" aria-label=\"Duplicates toggle\">\n                  <input id=\"dupToggle\" type=\"checkbox\" />\n                  <span class=\"hint\">Allow duplicates</span>\n                </label>\n                <button id=\"shuffleBtn\" class=\"warning\" aria-label=\"Shuffle array\">Shuffle</button>\n                <button id=\"resetBtn\" class=\"muted\" aria-label=\"Reset array\">Reset</button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Sorting Controls -->\n          <div>\n            <div class=\"group-title\">Sorting</div>\n            <div class=\"row\" role=\"group\" aria-label=\"Sorting controls\">\n              <button id=\"stepBtn\" class=\"primary\" aria-label=\"Step\">Step</button>\n              <button id=\"playBtn\" class=\"success\" aria-label=\"Play or Pause\">Play</button>\n              <label class=\"field\" for=\"speedSlider\" aria-label=\"Speed slider\">\n                <span class=\"hint\">Speed</span>\n                <input id=\"speedSlider\" type=\"range\" min=\"150\" max=\"1200\" value=\"450\" />\n                <span id=\"speedVal\" class=\"hint\">450 ms</span>\n              </label>\n              <label class=\"field\" for=\"earlyToggle\" aria-label=\"Early exit toggle\">\n                <input id=\"earlyToggle\" type=\"checkbox\" checked />\n                <span class=\"hint\">Early exit (stop when no swaps in a pass)</span>\n              </label>\n            </div>\n          </div>\n\n          <!-- Narration and Stats -->\n          <div class=\"narration\" aria-live=\"polite\">\n            <div class=\"line\" id=\"narrationMain\">Ready. Enter data or press Shuffle to begin.</div>\n            <div class=\"sub\" id=\"narrationSub\">Bubble sort compares adjacent elements and swaps if out of order. Largest element settles at the end each pass.</div>\n          </div>\n\n          <div class=\"stats\" role=\"group\" aria-label=\"Stats\">\n            <div class=\"stat\">\n              <div class=\"value\" id=\"passesVal\">0</div>\n              <div class=\"label\">Passes</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"value\" id=\"comparisonsVal\">0</div>\n              <div class=\"label\">Comparisons</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"value\" id=\"swapsVal\">0</div>\n              <div class=\"label\">Swaps</div>\n            </div>\n          </div>\n\n          <div class=\"footer-note\">\n            Tips: Space → Play/Pause, Enter → Step, R → Reset, S → Shuffle. Bubble sort complexity: best-case O(n) with early exit; typical/worst-case O(n²).\n          </div>\n        </div>\n      </aside>\n    </div>\n  </div>\n\n  <script>\n    // Bubble Sort Visual Lab (Vanilla JS)\n    // State\n    const barsEl = document.getElementById('bars');\n    const vizEl = document.getElementById('viz');\n    const pointerEl = document.getElementById('pointer');\n\n    const arrayInput = document.getElementById('arrayInput');\n    const applyInputBtn = document.getElementById('applyInputBtn');\n    const sizeSlider = document.getElementById('sizeSlider');\n    const sizeVal = document.getElementById('sizeVal');\n    const patternSelect = document.getElementById('patternSelect');\n    const dupToggle = document.getElementById('dupToggle');\n    const shuffleBtn = document.getElementById('shuffleBtn');\n    const resetBtn = document.getElementById('resetBtn');\n    const stepBtn = document.getElementById('stepBtn');\n    const playBtn = document.getElementById('playBtn');\n    const speedSlider = document.getElementById('speedSlider');\n    const speedVal = document.getElementById('speedVal');\n    const earlyToggle = document.getElementById('earlyToggle');\n\n    const narrationMain = document.getElementById('narrationMain');\n    const narrationSub = document.getElementById('narrationSub');\n    const passesVal = document.getElementById('passesVal');\n    const comparisonsVal = document.getElementById('comparisonsVal');\n    const swapsVal = document.getElementById('swapsVal');\n\n    let initialArray = [];\n    let array = [];\n    let bars = []; // DOM elements referencing array positions\n    let playing = false;\n    let autoplayTimer = null;\n    let speedMs = parseInt(speedSlider.value, 10);\n\n    // Bubble sort indices\n    let iPass = 0;        // pass index\n    let jIndex = 0;       // compare index within pass\n    let swappedInPass = false;\n    let settledCount = 0; // number of settled items from the end\n\n    // Stats\n    let comparisons = 0;\n    let swaps = 0;\n\n    // Layout calculation\n    function getLayoutMetrics() {\n      const rect = barsEl.getBoundingClientRect();\n      const width = rect.width;\n      const height = rect.height;\n      const n = array.length;\n      const gap = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-gap')) || 8;\n      const barWidth = Math.max(12, Math.floor((width - gap * (n - 1)) / n));\n      const positions = [];\n      for (let k = 0; k < n; k++) {\n        const x = k * (barWidth + gap);\n        positions.push(x);\n      }\n      const maxVal = Math.max(...array);\n      return { width, height, barWidth, gap, positions, maxVal };\n    }\n\n    function renderBars(initial = false) {\n      barsEl.innerHTML = '';\n      bars = [];\n      const { height, barWidth, positions, maxVal } = getLayoutMetrics();\n\n      for (let idx = 0; idx < array.length; idx++) {\n        const val = array[idx];\n        const h = Math.max(24, Math.round((val / maxVal) * (height - 30))); // leave room for label\n        const bar = document.createElement('div');\n        bar.className = 'bar';\n        bar.style.width = barWidth + 'px';\n        bar.style.height = h + 'px';\n        bar.style.transform = `translateX(${positions[idx]}px)`;\n        bar.setAttribute('role', 'img');\n        bar.setAttribute('aria-label', `Value ${val} at position ${idx}`);\n\n        const label = document.createElement('div');\n        label.className = 'bar-label';\n        label.textContent = String(val);\n\n        bar.appendChild(label);\n        barsEl.appendChild(bar);\n        bars.push(bar);\n      }\n      updatePointerPosition();\n      if (initial) {\n        narrationMain.textContent = 'Ready. Enter data or press Shuffle to begin.';\n        narrationSub.textContent = 'Bubble sort compares adjacent elements and swaps if out of order. Largest element settles at the end each pass.';\n      }\n    }\n\n    function updateBarPositions(animated = true) {\n      const { barWidth, positions, maxVal, height } = getLayoutMetrics();\n      bars.forEach((bar, idx) => {\n        const val = array[idx];\n        const h = Math.max(24, Math.round((val / maxVal) * (height - 30)));\n        bar.style.width = barWidth + 'px';\n        bar.style.height = h + 'px';\n        const transform = `translateX(${positions[idx]}px)`;\n        if (animated) {\n          bar.style.transform = transform;\n        } else {\n          bar.style.transition = 'none';\n          bar.style.transform = transform;\n          // force reflow then restore transition\n          void bar.offsetWidth;\n          bar.style.transition = '';\n        }\n      });\n      updatePointerPosition();\n    }\n\n    function updatePointerPosition() {\n      if (array.length < 2) {\n        pointerEl.style.transform = 'translateX(0px)';\n        return;\n      }\n      const { barWidth, gap, positions } = getLayoutMetrics();\n      const j = Math.min(jIndex, array.length - 2 - settledCount);\n      const leftX = positions[j];\n      const rightX = positions[j + 1];\n      const centerX = (leftX + rightX + barWidth) / 2;\n      pointerEl.style.transform = `translateX(${centerX - 40}px)`; // center brace (80px wide)\n    }\n\n    function setAnimationSpeed(ms) {\n      speedMs = ms;\n      document.documentElement.style.setProperty('--anim-duration', `${ms}ms`);\n      speedVal.textContent = `${ms} ms`;\n    }\n\n    function setStats() {\n      passesVal.textContent = String(iPass);\n      comparisonsVal.textContent = String(comparisons);\n      swapsVal.textContent = String(swaps);\n    }\n\n    function clearHighlights() {\n      bars.forEach(bar => {\n        bar.classList.remove('comparing', 'swapped');\n      });\n    }\n\n    function markSettled() {\n      const idx = array.length - 1 - settledCount;\n      if (idx >= 0) {\n        bars[idx].classList.add('settled');\n      }\n    }\n\n    function unmarkAllSettled() {\n      bars.forEach(bar => bar.classList.remove('settled'));\n    }\n\n    function resetSortState() {\n      iPass = 0;\n      jIndex = 0;\n      swappedInPass = false;\n      settledCount = 0;\n      comparisons = 0;\n      swaps = 0;\n      setStats();\n      clearHighlights();\n      unmarkAllSettled();\n      narrationMain.textContent = 'Reset. Press Step or Play to start bubble sort.';\n      narrationSub.textContent = 'Pass 0: start at j = 0. Compare adjacent elements and swap if needed.';\n      updatePointerPosition();\n    }\n\n    function randomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function generateArray(size, pattern, allowDuplicates) {\n      let arr = [];\n      const maxVal = Math.max(10, size * 5);\n      const set = new Set();\n      for (let i = 0; i < size; i++) {\n        let v = randomInt(1, maxVal);\n        if (!allowDuplicates) {\n          while (set.has(v)) v = randomInt(1, maxVal);\n          set.add(v);\n        }\n        arr.push(v);\n      }\n      if (pattern === 'nearly') {\n        arr.sort((a, b) => a - b);\n        const swaps = Math.max(1, Math.floor(size / 6));\n        for (let s = 0; s < swaps; s++) {\n          const a = randomInt(0, size - 2);\n          const b = a + 1;\n          [arr[a], arr[b]] = [arr[b], arr[a]];\n        }\n      } else if (pattern === 'reversed') {\n        arr.sort((a, b) => b - a);\n      }\n      return arr;\n    }\n\n    function applyArrayInput() {\n      const text = arrayInput.value.trim();\n      if (!text) {\n        narrationMain.textContent = 'Input is empty. Provide comma-separated integers.';\n        narrationSub.textContent = 'Example: 5, 1, 4, 2, 8';\n        return;\n      }\n      const parts = text.split(',').map(s => s.trim()).filter(s => s.length > 0);\n      const parsed = [];\n      for (let p of parts) {\n        const num = parseInt(p, 10);\n        if (isNaN(num)) {\n          narrationMain.textContent = `Invalid entry \"${p}\". Only integers are allowed.`;\n          narrationSub.textContent = 'Try: 3, 9, 1, 4';\n          return;\n        }\n        const bounded = Math.max(1, Math.min(999, num));\n        parsed.push(bounded);\n      }\n      initialArray = parsed.slice();\n      array = parsed.slice();\n      resetSortState();\n      renderBars();\n    }\n\n    function shuffleCurrent() {\n      if (array.length === 0) {\n        narrationMain.textContent = 'No data yet. Use the controls to create an array.';\n        return;\n      }\n      const arr = array.slice();\n      for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n      initialArray = arr.slice();\n      array = arr.slice();\n      resetSortState();\n      renderBars();\n      narrationMain.textContent = 'Shuffled array. Largest elements will bubble to the end each pass.';\n      narrationSub.textContent = 'Step or Play to begin.';\n    }\n\n    function resetToInitial() {\n      if (initialArray.length === 0) {\n        narrationMain.textContent = 'Nothing to reset. Generate or apply an array first.';\n        return;\n      }\n      array = initialArray.slice();\n      resetSortState();\n      renderBars();\n    }\n\n    function isSorted(arr = array) {\n      for (let k = 0; k < arr.length - 1; k++) {\n        if (arr[k] > arr[k + 1]) return false;\n      }\n      return true;\n    }\n\n    function endIfSorted() {\n      if (isSorted()) {\n        playing = false;\n        playBtn.textContent = 'Play';\n        narrationMain.textContent = 'Sorted! Bubble sort complete.';\n        narrationSub.textContent = `Passes: ${iPass}, Comparisons: ${comparisons}, Swaps: ${swaps}.`;\n        clearHighlights();\n        unmarkAllSettled();\n        // mark all as settled for visual completeness\n        bars.forEach(bar => bar.classList.add('settled'));\n        stopAutoplay();\n        return true;\n      }\n      return false;\n    }\n\n    function stepOnce() {\n      if (array.length < 2) return;\n\n      // If end of pass reached, evaluate early-exit and setup new pass\n      const lastCompareIndex = array.length - 2 - settledCount;\n      if (jIndex > lastCompareIndex) {\n        // End of current pass\n        markSettled();\n        settledCount += 1;\n        iPass += 1;\n        setStats();\n\n        if (!swappedInPass && earlyToggle.checked) {\n          narrationMain.textContent = `End of pass ${iPass}: no swaps → early exit (already sorted).`;\n          narrationSub.textContent = 'Optimization stops bubble sort when a pass performs no swaps.';\n          endIfSorted();\n          return;\n        } else {\n          narrationMain.textContent = `End of pass ${iPass}. The largest remaining element has settled at the end.`;\n          narrationSub.textContent = 'Starting next pass from j = 0.';\n        }\n        swappedInPass = false;\n        jIndex = 0;\n\n        if (endIfSorted()) return;\n      }\n\n      // Compare adjacent elements\n      const j = jIndex;\n      const a = array[j];\n      const b = array[j + 1];\n      clearHighlights();\n      bars[j].classList.add('comparing');\n      bars[j + 1].classList.add('comparing');\n      updatePointerPosition();\n\n      comparisons += 1;\n      setStats();\n\n      if (a > b) {\n        narrationMain.textContent = `Comparing ${a} and ${b} → swap (since ${a} > ${b}).`;\n        narrationSub.textContent = 'Bubble sort swaps adjacent out-of-order elements.';\n        swaps += 1;\n        setStats();\n\n        // Perform swap in data\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n\n        // Animate swap by updating positions\n        bars[j].classList.remove('comparing'); // will shift index after swap\n        bars[j + 1].classList.remove('comparing');\n\n        // Swap DOM references to keep them mapped to data indices\n        [bars[j], bars[j + 1]] = [bars[j + 1], bars[j]];\n        bars[j].classList.add('swapped');\n        bars[j + 1].classList.add('swapped');\n\n        updateBarPositions(true);\n        swappedInPass = true;\n      } else {\n        narrationMain.textContent = `Comparing ${a} and ${b} → keep (since ${a} ≤ ${b}).`;\n        narrationSub.textContent = 'No swap, move to the next adjacent pair.';\n      }\n\n      jIndex += 1;\n\n      // If everything is sorted, allow graceful completion\n      if (settledCount === array.length - 1) {\n        endIfSorted();\n      }\n    }\n\n    function startAutoplay() {\n      stopAutoplay(); // ensure no duplicate timers\n      playing = true;\n      playBtn.textContent = 'Pause';\n      const tick = () => {\n        stepOnce();\n        if (playing) {\n          autoplayTimer = setTimeout(tick, speedMs + 60);\n        }\n      };\n      autoplayTimer = setTimeout(tick, 80);\n    }\n\n    function stopAutoplay() {\n      playing = false;\n      playBtn.textContent = 'Play';\n      if (autoplayTimer) {\n        clearTimeout(autoplayTimer);\n        autoplayTimer = null;\n      }\n    }\n\n    // Event wiring\n    applyInputBtn.addEventListener('click', applyArrayInput);\n    arrayInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        applyArrayInput();\n      }\n    });\n\n    sizeSlider.addEventListener('input', () => {\n      sizeVal.textContent = sizeSlider.value;\n    });\n    patternSelect.addEventListener('change', () => {\n      // No immediate render; used by Shuffle\n    });\n\n    shuffleBtn.addEventListener('click', () => {\n      const newArr = generateArray(parseInt(sizeSlider.value, 10), patternSelect.value, dupToggle.checked);\n      initialArray = newArr.slice();\n      array = newArr.slice();\n      resetSortState();\n      renderBars();\n      narrationMain.textContent = 'New array generated.';\n      narrationSub.textContent = 'Press Step to observe adjacent comparisons and swaps.';\n    });\n\n    resetBtn.addEventListener('click', resetToInitial);\n\n    stepBtn.addEventListener('click', () => {\n      stopAutoplay(); // ensure step is discrete\n      stepOnce();\n    });\n\n    playBtn.addEventListener('click', () => {\n      if (playing) stopAutoplay(); else startAutoplay();\n    });\n\n    speedSlider.addEventListener('input', () => {\n      setAnimationSpeed(parseInt(speedSlider.value, 10));\n    });\n\n    window.addEventListener('resize', () => {\n      updateBarPositions(false);\n    });\n\n    document.addEventListener('keydown', (e) => {\n      if (e.key.toLowerCase() === 'r') {\n        resetToInitial();\n      } else if (e.key.toLowerCase() === 's') {\n        shuffleBtn.click();\n      } else if (e.key === ' ') {\n        e.preventDefault();\n        playBtn.click();\n      } else if (e.key === 'Enter') {\n        stepBtn.click();\n      }\n    });\n\n    // Initialize\n    (function init() {\n      setAnimationSpeed(speedMs);\n      initialArray = generateArray(parseInt(sizeSlider.value, 10), 'random', false);\n      array = initialArray.slice();\n      renderBars(true);\n      resetSortState();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Binary Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Bubble Sort Visual Lab",
      "description": "Finite state machine for an interactive bubble sort visualization with data setup, step-by-step and autoplay sorting, visual states (comparing/swapping/settled), stats, and completion.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "init_app",
          "on": {
            "INIT": "idle"
          }
        },
        {
          "name": "idle",
          "on": {
            "APPLY_INPUT_CLICK": "applying_input",
            "ARRAY_INPUT_ENTER": "applying_input",
            "SHUFFLE_CLICK": "generating",
            "KEY_S": "generating",
            "RESET_CLICK": "resetting",
            "KEY_R": "resetting",
            "STEP_CLICK": "pass_check",
            "KEY_ENTER": "pass_check",
            "PLAY_CLICK": "playing",
            "KEY_SPACE": "playing",
            "SPEED_CHANGE": "idle",
            "SIZE_CHANGE": "idle",
            "PATTERN_CHANGE": "idle",
            "DUP_TOGGLE_CHANGE": "idle",
            "RESIZE": "idle"
          }
        },
        {
          "name": "applying_input",
          "onEnter": "apply_input_array",
          "on": {
            "INPUT_INVALID": "input_error",
            "INPUT_APPLIED": "idle"
          }
        },
        {
          "name": "input_error",
          "onEnter": "show_input_error",
          "on": {
            "APPLY_INPUT_CLICK": "applying_input",
            "ARRAY_INPUT_ENTER": "applying_input",
            "SHUFFLE_CLICK": "generating",
            "KEY_S": "generating",
            "RESET_CLICK": "resetting",
            "KEY_R": "resetting"
          }
        },
        {
          "name": "generating",
          "onEnter": "generate_and_render_array",
          "on": {
            "DATA_READY": "idle"
          }
        },
        {
          "name": "resetting",
          "onEnter": "reset_to_initial_and_render",
          "on": {
            "DATA_READY": "idle",
            "RESET_NO_DATA": "idle"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_autoplay",
          "onExit": "stop_autoplay",
          "on": {
            "PLAY_CLICK": "idle",
            "KEY_SPACE": "idle",
            "AUTOPLAY_TICK": "pass_check",
            "STEP_CLICK": "pass_check",
            "KEY_ENTER": "pass_check",
            "RESET_CLICK": "resetting",
            "KEY_R": "resetting",
            "SHUFFLE_CLICK": "generating",
            "KEY_S": "generating",
            "APPLY_INPUT_CLICK": "applying_input",
            "ARRAY_INPUT_ENTER": "applying_input",
            "SPEED_CHANGE": "playing",
            "RESIZE": "playing"
          }
        },
        {
          "name": "pass_check",
          "onEnter": "check_pass_boundary",
          "on": {
            "ARRAY_SORTED": "done",
            "PASS_ENDED_AND_EARLY_EXIT": "early_exit",
            "PASS_ENDED_CONTINUE": "comparing",
            "PASS_NOT_ENDED": "comparing"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_comparison_and_update_stats",
          "on": {
            "NEEDS_SWAP": "swapping",
            "NO_SWAP": "step_finalize"
          }
        },
        {
          "name": "swapping",
          "onEnter": "perform_swap_and_update",
          "on": {
            "SWAP_DONE": "step_finalize"
          }
        },
        {
          "name": "step_finalize",
          "onEnter": "increment_index_and_check_complete",
          "on": {
            "ARRAY_SORTED": "done",
            "STEP_CONTINUE_AUTOPLAY": "playing",
            "STEP_CONTINUE_PAUSED": "idle"
          }
        },
        {
          "name": "early_exit",
          "onEnter": "early_exit_and_finalize",
          "on": {
            "NEXT": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_sorted",
          "on": {
            "APPLY_INPUT_CLICK": "applying_input",
            "ARRAY_INPUT_ENTER": "applying_input",
            "SHUFFLE_CLICK": "generating",
            "KEY_S": "generating",
            "RESET_CLICK": "resetting",
            "KEY_R": "resetting",
            "PLAY_CLICK": "playing",
            "KEY_SPACE": "playing",
            "STEP_CLICK": "pass_check",
            "KEY_ENTER": "pass_check"
          }
        }
      ],
      "events": [
        "INIT",
        "APPLY_INPUT_CLICK",
        "ARRAY_INPUT_ENTER",
        "INPUT_INVALID",
        "INPUT_APPLIED",
        "SHUFFLE_CLICK",
        "KEY_S",
        "RESET_CLICK",
        "KEY_R",
        "STEP_CLICK",
        "KEY_ENTER",
        "PLAY_CLICK",
        "KEY_SPACE",
        "AUTOPLAY_TICK",
        "SPEED_CHANGE",
        "SIZE_CHANGE",
        "PATTERN_CHANGE",
        "DUP_TOGGLE_CHANGE",
        "RESIZE",
        "PASS_ENDED_AND_EARLY_EXIT",
        "PASS_ENDED_CONTINUE",
        "PASS_NOT_ENDED",
        "NEEDS_SWAP",
        "NO_SWAP",
        "SWAP_DONE",
        "STEP_CONTINUE_AUTOPLAY",
        "STEP_CONTINUE_PAUSED",
        "ARRAY_SORTED",
        "DATA_READY",
        "RESET_NO_DATA",
        "NEXT"
      ],
      "notes": "Implementation mapping and details: 1) init_app: called at boot; mirrors init(): setAnimationSpeed(speedMs), initialArray = generateArray(sizeSlider.value, 'random', false), array copy, renderBars(true), resetSortState(). Transition to idle occurs immediately. 2) apply_input_array: mirrors applyArrayInput(); parses arrayInput, validates ints; on invalid -> INPUT_INVALID (narrationMain shows error); on success -> array and initialArray updated, resetSortState(), renderBars(), then INPUT_APPLIED. 3) generate_and_render_array: mirrors shuffleBtn click handler; uses sizeSlider, patternSelect, dupToggle; sets initialArray/array, resetSortState(), renderBars(); sets narration; then DATA_READY. 4) reset_to_initial_and_render: mirrors resetToInitial(); if initialArray empty -> RESET_NO_DATA (shows narration); else set array to initialArray, resetSortState(), renderBars(); then DATA_READY. 5) playing mode: start_autoplay calls startAutoplay(); schedules repeated AUTOPLAY_TICK events that trigger a single sort step; stop_autoplay cancels timer and sets play button to 'Play'. Spacebar toggles play/pause; Enter triggers single step. 6) pass_check/check_pass_boundary: corresponds to the 'end of pass' block at the start of stepOnce(); if jIndex > lastCompareIndex: markSettled(), settledCount++, iPass++, setStats(); if (!swappedInPass && earlyToggle.checked) -> PASS_ENDED_AND_EARLY_EXIT; else swappedInPass=false; jIndex=0; if endIfSorted() then ARRAY_SORTED; otherwise PASS_ENDED_CONTINUE. If not end of pass -> PASS_NOT_ENDED. Note: In the real code, pass-end handling happens within stepOnce and then proceeds to comparison in the same step if not early-exiting. Modeling it as a separate state clarifies the flow. 7) comparing/highlight_comparison_and_update_stats: mirrors the comparison part of stepOnce(): clearHighlights(); add 'comparing' to bars[j] and bars[j+1]; updatePointerPosition(); comparisons++ and setStats(); if array[j] > array[j+1] -> NEEDS_SWAP else NO_SWAP. 8) swapping/perform_swap_and_update: mirrors swap path in stepOnce(): narration for swap, swaps++, setStats(); swap data array values; remove 'comparing' from the two bars; swap DOM bar references; add 'swapped' classes; updateBarPositions(true); set swappedInPass=true; then SWAP_DONE. 9) step_finalize/increment_index_and_check_complete: mirrors the tail of stepOnce(): jIndex += 1; if (settledCount === array.length - 1) -> ARRAY_SORTED (endIfSorted()); else transition either STEP_CONTINUE_AUTOPLAY (if the step was triggered by AUTOPLAY_TICK and playing remains true) or STEP_CONTINUE_PAUSED (if triggered by STEP_CLICK). In code, this routing depends on the 'playing' boolean; represent as two events. 10) early_exit_and_finalize: shows narration about early exit and calls endIfSorted(); then NEXT to done. 11) finalize_sorted: mirrors endIfSorted(): playing=false, playBtn 'Play', narration indicates completion and stats, clearHighlights(), unmarkAllSettled(), add 'settled' to all bars, stopAutoplay(). 12) Visual states: 'comparing' and 'swapped' are realized via CSS classes on bars; 'settled' marks end-of-pass and final completion. clearHighlights() removes 'comparing' and 'swapped' at the start of the next comparison step. 13) Controls: speed slider emits SPEED_CHANGE (setAnimationSpeed and CSS --anim-duration); size/pattern/duplicates do not change data until SHUFFLE_CLICK; RESIZE triggers updateBarPositions(false) without a state change. 14) Keyboard shortcuts: Space -> PLAY_CLICK; Enter in array input -> ARRAY_INPUT_ENTER (apply input); Enter globally -> STEP_CLICK; R -> RESET_CLICK; S -> SHUFFLE_CLICK. 15) Pointer follows jIndex via updatePointerPosition() each render/update. 16) The FSM models micro-phases of a single step; in the real code these occur within one function call (stepOnce) and the visible end-of-step state is either comparing or swapped. The transitions STEP_CONTINUE_AUTOPLAY vs STEP_CONTINUE_PAUSED depend on the 'playing' flag at the time of the step."
    }
  },
  {
    "id": "79b40610-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:02:58.919Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Red-Black Tree",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort — Interactive Module</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    /* Safe area and base */\n    :root {\n      --safe-margin: 24px;\n      --gap: 8px;\n      --control-gap: 16px;\n      --accent: #2563eb;      /* blue */\n      --accent-2: #10b981;    /* green */\n      --warn: #ef4444;        /* red */\n      --compare: #f59e0b;     /* amber */\n      --bg: #0f172a;          /* slate-900 */\n      --panel: #111827;       /* gray-900 */\n      --text: #f8fafc;        /* slate-50 */\n      --muted: #cbd5e1;       /* slate-300 */\n      --bar: #60a5fa;         /* blue-300 */\n      --bar-dup: #93c5fd;     /* blue-200 */\n      --ring: #ffffff;\n      --focus: #22d3ee;       /* cyan */\n      --shadow: 0 10px 20px rgba(0,0,0,0.35);\n      --radius: 12px;\n      --font: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n    }\n    * { box-sizing: border-box; }\n    html, body {\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: var(--font);\n    }\n    body {\n      margin: 0;\n      padding: var(--safe-margin);\n    }\n    h1, h2, h3 {\n      margin: 0 0 8px 0;\n      line-height: 1.2;\n    }\n    p { margin: 0 0 10px 0; color: var(--muted); }\n    .page {\n      max-width: 1200px;\n      margin: 0 auto;\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 24px;\n    }\n\n    /* Module header sections */\n    .section {\n      background: var(--panel);\n      border-radius: var(--radius);\n      padding: 20px;\n      box-shadow: var(--shadow);\n    }\n\n    .meta-grid {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 24px;\n    }\n    @media (min-width: 880px) {\n      .meta-grid {\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n\n    /* Interactive module layout */\n    .module {\n      display: grid;\n      grid-template-columns: 1.25fr 1fr;\n      gap: 24px;\n    }\n    @media (max-width: 900px) {\n      .module {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .visual-panel {\n      background: #0b1220;\n      border-radius: var(--radius);\n      padding: 16px;\n      box-shadow: var(--shadow);\n      display: flex;\n      flex-direction: column;\n      min-height: 380px;\n    }\n\n    .board {\n      position: relative;\n      flex: 1;\n      background: linear-gradient(to bottom, rgba(255,255,255,0.04), rgba(255,255,255,0.02));\n      border-radius: 10px;\n      padding: 12px;\n      overflow: hidden;\n    }\n\n    .legend {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      margin-bottom: 12px;\n      align-items: center;\n    }\n    .key {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      color: var(--muted);\n      font-size: 14px;\n    }\n    .swatch {\n      width: 16px; height: 16px; border-radius: 50%;\n      border: 2px solid rgba(255,255,255,0.3);\n    }\n    .swatch.compare { background: var(--compare); }\n    .swatch.swap { background: var(--warn); }\n    .swatch.settled { background: var(--accent-2); }\n\n    /* Bars */\n    .bars {\n      position: relative;\n      height: 260px;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      width: 40px;           /* will be updated dynamically */\n      left: 0px;             /* will be updated dynamically */\n      border-radius: 8px 8px 0 0;\n      background: var(--bar);\n      border: 2px solid rgba(255,255,255,0.15);\n      transition: left var(--anim, 320ms) cubic-bezier(.2,.8,.2,1), \n                  height var(--anim, 320ms) cubic-bezier(.2,.8,.2,1), \n                  transform 200ms ease;\n      box-shadow: 0 6px 14px rgba(0,0,0,0.35);\n    }\n    .bar.dup { background: var(--bar-dup); }\n    .bar.compare {\n      outline: 3px solid var(--compare);\n      outline-offset: 2px;\n      filter: brightness(1.05);\n    }\n    .bar.swap { outline: 3px solid var(--warn); outline-offset: 2px; }\n    .bar.settled { background: var(--accent-2); border-color: rgba(255,255,255,0.25); }\n    .bar:focus-visible {\n      outline: 3px solid var(--focus);\n      outline-offset: 3px;\n    }\n    .bar-label {\n      position: absolute;\n      top: -24px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(17,24,39,0.9);\n      padding: 2px 8px;\n      border-radius: 8px;\n      font-size: 12px;\n      color: var(--text);\n      pointer-events: none;\n      white-space: nowrap;\n    }\n    .bar-value {\n      position: absolute;\n      bottom: 6px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 13px;\n      font-weight: 700;\n      color: #0b1220;\n      text-shadow: 0 1px 0 rgba(255,255,255,0.6);\n    }\n\n    /* Controls */\n    .controls {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--control-gap);\n      margin-top: 16px;\n      align-items: flex-start;\n    }\n    .controls .group {\n      display: flex;\n      flex-wrap: wrap;\n      align-items: center;\n      gap: var(--control-gap);\n    }\n\n    button, input, select, label {\n      font: inherit;\n      color: var(--text);\n    }\n    button {\n      background: var(--accent);\n      border: none;\n      padding: 10px 16px;\n      border-radius: 10px;\n      cursor: pointer;\n      box-shadow: 0 6px 14px rgba(0,0,0,0.35);\n      transition: transform 80ms ease, background 150ms ease;\n    }\n    button.secondary { background: #374151; }\n    button.warn { background: var(--warn); }\n    button:disabled { opacity: 0.5; cursor: not-allowed; }\n    button:hover:not(:disabled) { transform: translateY(-1px); }\n    button:active:not(:disabled) { transform: translateY(0); }\n\n    .input-set {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      align-items: center;\n      background: #0e1626;\n      padding: 12px;\n      border-radius: 10px;\n      box-shadow: var(--shadow);\n    }\n    .input-set label { color: var(--muted); font-size: 14px; }\n    .text-input {\n      background: #111827;\n      border: 1px solid #2a3342;\n      border-radius: 10px;\n      padding: 10px;\n      min-width: 280px;\n    }\n    .text-input::placeholder { color: #6b7280; }\n    .slider {\n      width: 180px;\n      accent-color: var(--accent);\n    }\n    .checkbox {\n      accent-color: var(--accent-2);\n      width: 18px; height: 18px;\n    }\n\n    /* Sidebar / narration */\n    .side-panel {\n      background: var(--panel);\n      border-radius: var(--radius);\n      padding: 16px;\n      box-shadow: var(--shadow);\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n\n    .stats {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 12px;\n    }\n    .stat {\n      background: #0e1626;\n      padding: 12px;\n      border-radius: 10px;\n    }\n    .stat h4 { font-size: 13px; color: var(--muted); margin-bottom: 6px; }\n    .stat .val { font-size: 20px; font-weight: 700; }\n\n    .narration {\n      background: #0e1626;\n      border-radius: 10px;\n      padding: 12px;\n      min-height: 80px;\n    }\n    .narration h3 { font-size: 14px; color: var(--muted); }\n    .narration p { font-size: 14px; color: var(--text); }\n\n    .footer-note {\n      font-size: 12px; color: var(--muted);\n    }\n\n    /* Accessibility helpers */\n    .sr-only {\n      position: absolute !important;\n      height: 1px; width: 1px;\n      overflow: hidden;\n      clip: rect(1px, 1px, 1px, 1px);\n      white-space: nowrap;\n      border: 0; padding: 0; margin: -1px;\n    }\n  </style>\n</head>\n<body>\n  <main class=\"page\" aria-labelledby=\"title\">\n    <header class=\"section\" id=\"title\">\n      <h1>Bubble Sort — Adjacent Comparisons and Swaps</h1>\n      <p>Explore bubble sort interactively: compare adjacent values, perform swaps, watch largest items “bubble” to the end on each pass, and understand the early-exit optimization.</p>\n    </header>\n\n    <section class=\"meta-grid\">\n      <article class=\"section\" aria-labelledby=\"learning-objective\">\n        <h2 id=\"learning-objective\">Learning Objective</h2>\n        <p>After interacting with this module, you will be able to:</p>\n        <ul>\n          <li>Explain how bubble sort repeatedly compares and swaps adjacent elements.</li>\n          <li>Recognize how each pass moves the largest remaining element to its final position.</li>\n          <li>Use and understand the early-exit optimization (stop if a pass makes no swaps).</li>\n          <li>Observe algorithmic counts (comparisons, swaps, passes) to reason about performance.</li>\n        </ul>\n      </article>\n\n      <article class=\"section\" aria-labelledby=\"interaction-design\">\n        <h2 id=\"interaction-design\">Interaction Design</h2>\n        <p>How you interact and what happens:</p>\n        <ul>\n          <li>Typing: Enter a custom list of numbers (comma-separated) to visualize different inputs.</li>\n          <li>Clicking:\n            <ul>\n              <li>Step runs the next comparison (and a swap if needed), highlighting the pair.</li>\n              <li>Play animates comparisons continuously; Pause stops the animation.</li>\n              <li>Reset returns to your initial unsorted state.</li>\n              <li>Randomize generates a new list based on the chosen size.</li>\n              <li>Early Exit toggle enables/disables the optimization.</li>\n              <li>Speed slider adjusts animation duration.</li>\n            </ul>\n          </li>\n          <li>Visual Feedback:\n            <ul>\n              <li>Compared bars glow amber; swaps pulse red during movement.</li>\n              <li>Positions settled at the end of a pass turn green.</li>\n              <li>Narration explains each step in plain language and updates live.</li>\n            </ul>\n          </li>\n          <li>Keyboard:\n            <ul>\n              <li>Space toggles Play/Pause.</li>\n              <li>N performs a single Step.</li>\n              <li>R resets to the unsorted array.</li>\n            </ul>\n          </li>\n        </ul>\n      </article>\n    </section>\n\n    <section class=\"section\" aria-labelledby=\"layout-description\">\n      <h2 id=\"layout-description\">Layout Description</h2>\n      <p>The page uses a clear two-panel module layout:</p>\n      <ul>\n        <li>Left: Visual panel containing the legend, animated bar chart (the array), and controls.</li>\n        <li>Right: Side panel with live stats and narration.</li>\n      </ul>\n      <p>Spatial organization and spacing:</p>\n      <ul>\n        <li>A safe area margin of 24 px is maintained around the viewport.</li>\n        <li>Interactive controls (buttons, inputs, toggles) have at least 16 px spacing.</li>\n        <li>The bar chart uses consistent gaps; compared pairs are visually emphasized without clutter.</li>\n      </ul>\n      <p>Accessibility and responsiveness:</p>\n      <ul>\n        <li>All controls are keyboard-accessible with visible focus rings.</li>\n        <li>Narration is announced via an ARIA live region.</li>\n        <li>Colors are paired with outlines to avoid reliance on color alone.</li>\n        <li>The layout adapts to small screens by stacking the panels vertically.</li>\n      </ul>\n    </section>\n\n    <!-- Interactive Module -->\n    <section class=\"module\" aria-label=\"Bubble Sort Interactive Module\">\n      <div class=\"visual-panel\">\n        <div class=\"legend\" aria-hidden=\"true\">\n          <span class=\"key\"><span class=\"swatch compare\"></span>Comparing pair</span>\n          <span class=\"key\"><span class=\"swatch swap\"></span>Swapping</span>\n          <span class=\"key\"><span class=\"swatch settled\"></span>Settled this pass</span>\n        </div>\n\n        <div class=\"board\">\n          <div class=\"bars\" id=\"bars\" role=\"list\" aria-label=\"Array visualization\"></div>\n        </div>\n\n        <div class=\"controls\" aria-label=\"Controls\">\n          <div class=\"group\">\n            <button id=\"btnPlay\" aria-pressed=\"false\">Play</button>\n            <button id=\"btnStep\" class=\"secondary\">Step</button>\n            <button id=\"btnReset\" class=\"secondary\">Reset</button>\n            <button id=\"btnFinish\" class=\"secondary\">Finish</button>\n          </div>\n          <div class=\"group\">\n            <label for=\"speed\">Speed</label>\n            <input id=\"speed\" class=\"slider\" type=\"range\" min=\"0.25\" max=\"2.5\" step=\"0.25\" value=\"1\" aria-label=\"Animation speed (0.25x to 2.5x)\" />\n            <span id=\"speedVal\" aria-hidden=\"true\">1.0×</span>\n          </div>\n          <div class=\"group input-set\" style=\"gap: 12px;\">\n            <label for=\"numbers\">Numbers</label>\n            <input id=\"numbers\" class=\"text-input\" type=\"text\" placeholder=\"e.g., 7, 3, 9, 2, 5\" aria-label=\"Enter comma-separated numbers\" />\n            <button id=\"btnApply\" class=\"secondary\">Apply</button>\n          </div>\n          <div class=\"group\">\n            <label for=\"size\">Size</label>\n            <input id=\"size\" class=\"slider\" type=\"range\" min=\"5\" max=\"14\" step=\"1\" value=\"8\" aria-label=\"Random array size\" />\n            <span id=\"sizeVal\" aria-hidden=\"true\">8</span>\n            <button id=\"btnRandom\">Randomize</button>\n          </div>\n          <div class=\"group\">\n            <label for=\"earlyExit\" style=\"display:flex; align-items:center; gap:8px;\">\n              <input id=\"earlyExit\" class=\"checkbox\" type=\"checkbox\" checked aria-checked=\"true\" />\n              Early Exit Optimization\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <aside class=\"side-panel\" aria-label=\"Stats and Narration\">\n        <div class=\"stats\" role=\"group\" aria-label=\"Sort statistics\">\n          <div class=\"stat\">\n            <h4>Comparisons</h4>\n            <div id=\"statComparisons\" class=\"val\">0</div>\n          </div>\n          <div class=\"stat\">\n            <h4>Swaps</h4>\n            <div id=\"statSwaps\" class=\"val\">0</div>\n          </div>\n          <div class=\"stat\">\n            <h4>Pass</h4>\n            <div id=\"statPass\" class=\"val\">0</div>\n          </div>\n          <div class=\"stat\">\n            <h4>Range</h4>\n            <div id=\"statRange\" class=\"val\">0 → 0</div>\n          </div>\n        </div>\n\n        <div class=\"narration\" aria-live=\"polite\" aria-atomic=\"true\">\n          <h3>Algorithm Narration</h3>\n          <p id=\"narration\">Enter numbers or randomize, then Step or Play to watch bubble sort compare adjacent items and swap when out of order.</p>\n        </div>\n\n        <p class=\"footer-note\">\n          Tip: Bubble sort is stable and simple, but typically inefficient (O(n²) comparisons). Use Step to see exactly how a largest element “bubbles” to the end of the array each pass.\n        </p>\n      </aside>\n    </section>\n  </main>\n\n  <script>\n    // Bubble Sort Interactive Module (vanilla JS, self-contained)\n    (function() {\n      const barsEl = document.getElementById('bars');\n      const narrationEl = document.getElementById('narration');\n\n      const btnPlay = document.getElementById('btnPlay');\n      const btnStep = document.getElementById('btnStep');\n      const btnReset = document.getElementById('btnReset');\n      const btnRandom = document.getElementById('btnRandom');\n      const btnApply = document.getElementById('btnApply');\n      const btnFinish = document.getElementById('btnFinish');\n\n      const speedEl = document.getElementById('speed');\n      const speedValEl = document.getElementById('speedVal');\n      const earlyExitEl = document.getElementById('earlyExit');\n      const numbersEl = document.getElementById('numbers');\n      const sizeEl = document.getElementById('size');\n      const sizeValEl = document.getElementById('sizeVal');\n\n      const statComparisons = document.getElementById('statComparisons');\n      const statSwaps = document.getElementById('statSwaps');\n      const statPass = document.getElementById('statPass');\n      const statRange = document.getElementById('statRange');\n\n      let items = [];             // array of { id, value, label }\n      let initialItems = [];\n      let playing = false;\n      let animScale = 1.0;\n      let state = null;\n\n      function resetState() {\n        state = {\n          n: items.length,\n          pass: 0,\n          j: 0,\n          comparisons: 0,\n          swaps: 0,\n          swappedInPass: false,\n          settledFromRight: 0, // count of settled elements on right\n          finished: false,\n        };\n        clearHighlights();\n        updateStats();\n        updateRange();\n        setNarration('Ready. Press Step to compare the first adjacent pair.');\n        renderBars(true);\n      }\n\n      function cloneItems(arr) {\n        return arr.map(x => ({ id: x.id, value: x.value, label: x.label }));\n      }\n\n      function randomArray(n) {\n        const arr = [];\n        for (let i = 0; i < n; i++) {\n          // Include occasional duplicates to hint stability\n          const val = Math.floor(Math.random() * 9) + 1; // 1..9\n          arr.push(val);\n        }\n        return arr;\n      }\n\n      function withLabels(values) {\n        // Assign labels (A, B, C...) to items with the same value to suggest stability\n        const counts = new Map();\n        const res = [];\n        let nextId = 1;\n        for (const v of values) {\n          const c = (counts.get(v) || 0) + 1;\n          counts.set(v, c);\n          const label = c > 1 ? String.fromCharCode(64 + c) : ''; // 2->B, 3->C\n          res.push({ id: nextId++, value: v, label });\n        }\n        return res;\n      }\n\n      function renderBars(initial = false) {\n        const n = items.length;\n        barsEl.innerHTML = '';\n        const rect = barsEl.getBoundingClientRect();\n        const width = rect.width || barsEl.clientWidth || 700;\n        const gap = 8;\n        const barW = Math.max(28, Math.floor((width - gap * (n - 1)) / n));\n        const maxVal = Math.max(...items.map(x => x.value)) || 1;\n        const scaleH = (barsEl.clientHeight - 30) / maxVal;\n\n        // Set a CSS variable to scale animation speed\n        const dur = Math.round(320 / animScale);\n        barsEl.style.setProperty('--anim', `${dur}ms`);\n\n        items.forEach((item, idx) => {\n          const left = idx * (barW + gap);\n          const bar = document.createElement('button');\n          bar.setAttribute('role', 'listitem');\n          bar.className = 'bar' + (hasDuplicateLabel(item) ? ' dup' : '');\n          bar.style.left = `${left}px`;\n          bar.style.width = `${barW}px`;\n          bar.style.height = `${Math.max(20, Math.round(item.value * scaleH))}px`;\n          bar.dataset.index = String(idx);\n          bar.dataset.id = String(item.id);\n          bar.tabIndex = 0;\n          bar.title = `Index ${idx}: ${item.value}${item.label ? ' (' + item.label + ')' : ''}`;\n\n          const labelEl = document.createElement('span');\n          labelEl.className = 'bar-label';\n          labelEl.textContent = item.label ? `${item.value} ${item.label}` : String(item.value);\n\n          const valEl = document.createElement('span');\n          valEl.className = 'bar-value';\n          valEl.textContent = String(item.value);\n\n          bar.appendChild(labelEl);\n          bar.appendChild(valEl);\n\n          barsEl.appendChild(bar);\n        });\n\n        // Make compared/settled highlights consistent on initial render\n        if (!initial) applyHighlightClasses();\n      }\n\n      function hasDuplicateLabel(item) {\n        return !!item.label;\n      }\n\n      function updateStats() {\n        statComparisons.textContent = String(state.comparisons);\n        statSwaps.textContent = String(state.swaps);\n        statPass.textContent = String(state.pass);\n      }\n\n      function updateRange() {\n        const leftRange = 0;\n        const rightRange = state.n - 1 - state.settledFromRight;\n        statRange.textContent = `${leftRange} → ${Math.max(leftRange, rightRange)}`;\n      }\n\n      function setNarration(text) {\n        narrationEl.textContent = text;\n      }\n\n      function clearHighlights() {\n        barsEl.querySelectorAll('.bar').forEach(b => {\n          b.classList.remove('compare', 'swap', 'settled');\n        });\n      }\n\n      function applyHighlightClasses() {\n        clearHighlights();\n        const n = items.length;\n        const compareIdx = state.j;\n        const lastActiveIdx = n - 1 - state.settledFromRight;\n\n        // Set settled class for the right settled segment\n        for (let i = lastActiveIdx + 1; i < n; i++) {\n          const bar = barsEl.children[i];\n          if (bar) bar.classList.add('settled');\n        }\n        // Highlight current comparison pair\n        const a = barsEl.children[compareIdx];\n        const b = barsEl.children[compareIdx + 1];\n        if (a && b && compareIdx < lastActiveIdx) {\n          a.classList.add('compare');\n          b.classList.add('compare');\n        }\n      }\n\n      function parseInputNumbers(text) {\n        const parts = text.split(/[\\s,]+/).filter(Boolean);\n        if (parts.length === 0) return null;\n        const nums = [];\n        for (const p of parts) {\n          const n = Number(p);\n          if (!Number.isFinite(n)) return null;\n          nums.push(Math.round(n));\n        }\n        return nums;\n      }\n\n      function applyNumbersFromInput() {\n        const nums = parseInputNumbers(numbersEl.value);\n        if (!nums || nums.length < 2) {\n          setNarration('Please enter at least two valid numbers (comma-separated).');\n          return;\n        }\n        items = withLabels(nums);\n        initialItems = cloneItems(items);\n        resetState();\n      }\n\n      function randomize() {\n        const n = Number(sizeEl.value);\n        sizeValEl.textContent = String(n);\n        items = withLabels(randomArray(n));\n        initialItems = cloneItems(items);\n        resetState();\n        setNarration('Randomized array. Press Step to begin comparing adjacent elements.');\n      }\n\n      function resetToInitial() {\n        items = cloneItems(initialItems);\n        resetState();\n        setNarration('Reset to the initial array. Press Step or Play to continue.');\n      }\n\n      function setSpeed() {\n        animScale = Number(speedEl.value);\n        speedValEl.textContent = `${animScale.toFixed(2).replace(/\\.00/, '')}×`;\n        // Re-render to ensure durations update\n        renderBars(false);\n      }\n\n      function togglePlay() {\n        playing = !playing;\n        btnPlay.textContent = playing ? 'Pause' : 'Play';\n        btnPlay.setAttribute('aria-pressed', playing ? 'true' : 'false');\n        if (playing) autoRun();\n      }\n\n      function finishSort() {\n        if (state.finished) return;\n        playing = true;\n        btnPlay.textContent = 'Pause';\n        btnPlay.setAttribute('aria-pressed', 'true');\n        // Increase speed temporarily\n        const prevSpeed = animScale;\n        animScale = 2.5;\n        speedEl.value = String(animScale);\n        speedValEl.textContent = `${animScale.toFixed(2)}×`;\n        (async () => {\n          while (!state.finished && playing) {\n            await stepOnce();\n            await sleep(30);\n          }\n          // Restore speed\n          animScale = prevSpeed;\n          speedEl.value = String(animScale);\n          speedValEl.textContent = `${animScale.toFixed(2).replace(/\\.00/, '')}×`;\n          playing = false;\n          btnPlay.textContent = 'Play';\n          btnPlay.setAttribute('aria-pressed', 'false');\n        })();\n      }\n\n      function sleep(ms) {\n        return new Promise(res => setTimeout(res, ms));\n      }\n\n      async function autoRun() {\n        while (playing && !state.finished) {\n          await stepOnce();\n          // Small delay between steps to keep rhythm\n          await sleep(Math.max(60, 200 / animScale));\n        }\n      }\n\n      async function stepOnce() {\n        if (state.finished) return;\n\n        const n = state.n;\n        const lastActiveIdx = n - 1 - state.settledFromRight;\n\n        // If current pass is beyond range, we are done\n        if (lastActiveIdx <= 0) {\n          finalizeSort();\n          return;\n        }\n\n        // If j reached the last active pair, end pass\n        if (state.j >= lastActiveIdx) {\n          // End of pass: mark element at lastActiveIdx as settled\n          state.settledFromRight += 1;\n          applyHighlightClasses(); // will show settled on right side\n          state.pass += 1;\n\n          const noSwap = !state.swappedInPass;\n          const msg = `End of pass ${state.pass}: position ${lastActiveIdx} is settled.`\n                    + (earlyExitEl.checked && noSwap ? ' No swaps this pass — early exit.' : '');\n          setNarration(msg);\n          updateStats();\n          updateRange();\n\n          if (earlyExitEl.checked && noSwap) {\n            finalizeSort();\n            return;\n          }\n          // Prepare next pass\n          state.j = 0;\n          state.swappedInPass = false;\n          applyHighlightClasses();\n          await sleep(Math.max(120, 220 / animScale));\n          return;\n        }\n\n        // Compare j and j+1\n        applyHighlightClasses();\n        const aIdx = state.j, bIdx = state.j + 1;\n        const a = items[aIdx], b = items[bIdx];\n        state.comparisons += 1;\n        updateStats();\n        setNarration(`Comparing positions ${aIdx} and ${bIdx}: ${a.value} vs ${b.value}.`)\n\n        await sleep(Math.max(100, 160 / animScale));\n\n        if (a.value > b.value) {\n          // Swap needed\n          setNarration(`Swap needed: ${a.value} > ${b.value}. Swapping adjacent items.`);\n          await animateSwap(aIdx, bIdx);\n          // Perform swap in array after animation\n          [items[aIdx], items[bIdx]] = [items[bIdx], items[aIdx]];\n          state.swaps += 1;\n          state.swappedInPass = true;\n          updateStats();\n          state.j += 1;\n        } else {\n          // No swap\n          setNarration(`No swap: ${a.value} ≤ ${b.value}.`);\n          // Brief highlight then advance\n          await sleep(Math.max(80, 140 / animScale));\n          state.j += 1;\n        }\n        applyHighlightClasses();\n      }\n\n      function finalizeSort() {\n        state.finished = true;\n        applyHighlightClasses();\n        setNarration('Sorted! All elements are in non-decreasing order.');\n        playing = false;\n        btnPlay.textContent = 'Play';\n        btnPlay.setAttribute('aria-pressed', 'false');\n      }\n\n      async function animateSwap(i, j) {\n        return new Promise(resolve => {\n          const barA = barsEl.children[i];\n          const barB = barsEl.children[j];\n          if (!barA || !barB) return resolve();\n\n          barA.classList.add('swap');\n          barB.classList.add('swap');\n\n          // Calculate left positions from style\n          const leftA = parseFloat(barA.style.left || '0');\n          const leftB = parseFloat(barB.style.left || '0');\n\n          // Swap their left positions visually\n          barA.style.left = `${leftB}px`;\n          barB.style.left = `${leftA}px`;\n\n          // When both transitions complete, cleanup\n          let doneCount = 0;\n          function done() {\n            doneCount += 1;\n            if (doneCount >= 2) {\n              barA.classList.remove('swap');\n              barB.classList.remove('swap');\n              resolve();\n            }\n          }\n          barA.addEventListener('transitionend', done, { once: true });\n          barB.addEventListener('transitionend', done, { once: true });\n        });\n      }\n\n      // Event wiring\n      btnStep.addEventListener('click', () => {\n        stepOnce();\n      });\n      btnPlay.addEventListener('click', () => togglePlay());\n      btnReset.addEventListener('click', () => resetToInitial());\n      btnRandom.addEventListener('click', () => randomize());\n      btnApply.addEventListener('click', () => applyNumbersFromInput());\n      btnFinish.addEventListener('click', () => finishSort());\n\n      speedEl.addEventListener('input', setSpeed);\n      sizeEl.addEventListener('input', () => {\n        sizeValEl.textContent = String(sizeEl.value);\n      });\n\n      // Keyboard shortcuts\n      document.addEventListener('keydown', (e) => {\n        if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA')) return;\n        if (e.code === 'Space') {\n          e.preventDefault();\n          togglePlay();\n        } else if (e.key.toLowerCase() === 'n') {\n          e.preventDefault();\n          stepOnce();\n        } else if (e.key.toLowerCase() === 'r') {\n          e.preventDefault();\n          resetToInitial();\n        }\n      });\n\n      // Initialize\n      (function init() {\n        sizeValEl.textContent = String(sizeEl.value);\n        setSpeed();\n        items = withLabels(randomArray(Number(sizeEl.value)));\n        initialItems = cloneItems(items);\n        resetState();\n        numbersEl.value = items.map(x => x.value).join(', ');\n      })();\n\n      // Responsiveness: re-render bars on window resize\n      window.addEventListener('resize', () => {\n        renderBars(false);\n      });\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Red-Black Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for a bubble sort interactive module covering user controls (Play/Pause, Step, Reset, Randomize, Apply, Finish), algorithm animation states (comparing, swapping, pass end), and completion.",
      "states": [
        {
          "name": "idle",
          "onEnter": "await_next_action",
          "on": {
            "PLAY": "playing",
            "STEP": "comparing",
            "FINISH": "fast_forward",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "TOGGLE_EARLY_EXIT": "idle"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_auto_run",
          "onExit": "stop_auto_run",
          "on": {
            "PAUSE": "idle",
            "AUTO_STEP": "comparing",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "FINISH": "fast_forward"
          }
        },
        {
          "name": "fast_forward",
          "onEnter": "enable_high_speed_auto_run",
          "onExit": "restore_previous_speed_and_stop_auto_run",
          "on": {
            "PAUSE": "idle",
            "AUTO_STEP": "comparing",
            "COMPLETE_SORT": "done",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_compare_pair_and_update_stats_and_narrate_compare",
          "on": {
            "NEED_SWAP": "swapping",
            "NO_SWAP": "advancing",
            "REACHED_PASS_END": "pass_end",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "PAUSE": "idle",
            "FINISH": "fast_forward"
          }
        },
        {
          "name": "swapping",
          "onEnter": "animate_swap_adjacent_bars",
          "onExit": "clear_swap_highlight",
          "on": {
            "SWAP_ANIMATION_COMPLETE": "advancing",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "PAUSE": "idle",
            "FINISH": "fast_forward"
          }
        },
        {
          "name": "advancing",
          "onEnter": "increment_index_and_apply_highlights",
          "on": {
            "REACHED_PASS_END": "pass_end",
            "MORE_PAIRS_WHILE_PLAYING": "comparing",
            "MORE_PAIRS_WHILE_PAUSED": "idle",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "FINISH": "fast_forward",
            "PAUSE": "idle"
          }
        },
        {
          "name": "pass_end",
          "onEnter": "mark_rightmost_settled_increment_pass_update_range_and_narrate",
          "on": {
            "EARLY_EXIT": "done",
            "CONTINUE_PASS_WHILE_PLAYING": "comparing",
            "CONTINUE_PASS_WHILE_PAUSED": "idle",
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "FINISH": "fast_forward",
            "PAUSE": "idle"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_sort_and_update_ui",
          "on": {
            "RESET": "resetting",
            "RANDOMIZE": "randomizing",
            "APPLY_NUMBERS": "applying_input",
            "PLAY": "done",
            "STEP": "done",
            "FINISH": "done"
          }
        },
        {
          "name": "resetting",
          "onEnter": "reset_to_initial_items_and_reset_state_render_bars_update_stats_range_and_narrate",
          "on": {
            "AFTER_RESET": "idle"
          }
        },
        {
          "name": "randomizing",
          "onEnter": "generate_random_items_set_initial_reset_state_render_bars_update_stats_range_and_narrate",
          "on": {
            "AFTER_RANDOMIZE": "idle"
          }
        },
        {
          "name": "applying_input",
          "onEnter": "parse_and_apply_numbers_or_error",
          "on": {
            "APPLY_NUMBERS_VALID": "idle",
            "APPLY_NUMBERS_INVALID": "input_error"
          }
        },
        {
          "name": "input_error",
          "onEnter": "narrate_invalid_input",
          "on": {
            "APPLY_NUMBERS": "applying_input",
            "RANDOMIZE": "randomizing",
            "RESET": "resetting",
            "PLAY": "playing",
            "STEP": "comparing",
            "FINISH": "fast_forward"
          }
        }
      ],
      "events": [
        "INIT",
        "PLAY",
        "PAUSE",
        "STEP",
        "AUTO_STEP",
        "FINISH",
        "RESET",
        "RANDOMIZE",
        "APPLY_NUMBERS",
        "APPLY_NUMBERS_VALID",
        "APPLY_NUMBERS_INVALID",
        "NEED_SWAP",
        "NO_SWAP",
        "SWAP_ANIMATION_COMPLETE",
        "REACHED_PASS_END",
        "EARLY_EXIT",
        "CONTINUE_PASS_WHILE_PLAYING",
        "CONTINUE_PASS_WHILE_PAUSED",
        "MORE_PAIRS_WHILE_PLAYING",
        "MORE_PAIRS_WHILE_PAUSED",
        "COMPLETE_SORT",
        "AFTER_RESET",
        "AFTER_RANDOMIZE",
        "TOGGLE_EARLY_EXIT",
        "SPEED_CHANGE",
        "SIZE_CHANGE",
        "WINDOW_RESIZE"
      ],
      "notes": "Initial state is idle after INIT and resetState. User-triggered events come from: Play/Pause button or Space (PLAY/PAUSE), Step button or 'N' key (STEP), Reset button or 'R' key (RESET), Randomize button (RANDOMIZE), Apply button (APPLY_NUMBERS), Finish button (FINISH). Algorithm-side events: NEED_SWAP/NO_SWAP result from comparing values; SWAP_ANIMATION_COMPLETE fires after CSS transition in animateSwap; REACHED_PASS_END occurs when j reaches the last active index; EARLY_EXIT occurs at pass end when no swaps and the Early Exit checkbox is checked; COMPLETE_SORT triggers when all elements are settled or early exit finalizes. In playing, AUTO_STEP repeatedly drives transitions until paused or done; fast_forward is similar to playing but temporarily forces high speed and restores it on exit. Visual feedback is applied via applyHighlightClasses and CSS classes: compare (amber outline), swap (red outline during animation), settled (green at right after each pass). Speed changes (SPEED_CHANGE via slider) and window resizes (WINDOW_RESIZE) re-render bars and adjust animation durations but do not change FSM state; same for size slider changes (SIZE_CHANGE), which only update the displayed size until Randomize is used. Toggling the Early Exit checkbox (TOGGLE_EARLY_EXIT) affects branching at pass_end but does not change state by itself. Done state ignores Play/Step/Finish; only Reset/Randomize/Apply returns to idle with a fresh state."
    }
  },
  {
    "id": "8ff66b20-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:02.110Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Stack",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Bubble Sort Interactive Module</title>\n  <style>\n    :root {\n      --bg: #0b0f14;\n      --panel: #131a22;\n      --text: #e6edf3;\n      --muted: #9fb2c8;\n      --accent: #4fc3f7;\n      --accent2: #ffb74d;\n      --swap: #e57373;\n      --ok: #81c784;\n      --focus: #91c9ff;\n      --gap: 16px;\n      --margin: 24px;\n    }\n    * { box-sizing: border-box; }\n    html, body {\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n    }\n    .container {\n      padding: var(--margin);\n      max-width: 1100px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      margin: 0 0 8px 0;\n      line-height: 1.2;\n    }\n    p { margin: 0 0 12px 0; color: var(--muted); }\n    .section {\n      background: var(--panel);\n      border-radius: 12px;\n      padding: 16px;\n      margin-bottom: 16px;\n    }\n    .small { font-size: 0.95rem; }\n    ul { margin: 0; padding-left: 18px; }\n    a { color: var(--accent); }\n\n    .controls {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: flex-end;\n    }\n    .control {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      min-width: 200px;\n    }\n    .control.inline { min-width: auto; }\n    label { font-weight: 600; }\n    input[type=\"text\"], input[type=\"number\"], input[type=\"range\"], select {\n      background: #0e1520;\n      color: var(--text);\n      border: 1px solid #2b3a4c;\n      border-radius: 8px;\n      padding: 10px 12px;\n    }\n    input[type=\"range\"] { padding: 0; height: 32px; }\n    button {\n      appearance: none;\n      background: #203041;\n      color: var(--text);\n      border: 1px solid #2b3a4c;\n      border-radius: 8px;\n      padding: 10px 14px;\n      font-weight: 600;\n      cursor: pointer;\n    }\n    button:hover { background: #273c50; }\n    button:disabled { opacity: 0.6; cursor: not-allowed; }\n    button.primary { background: #2a4b63; border-color: #3a5f7a; }\n    button.primary:hover { background: #315973; }\n    .checkbox { display: flex; align-items: center; gap: 8px; }\n\n    .viz {\n      position: relative;\n      background: #0e1520;\n      border: 1px solid #2b3a4c;\n      border-radius: 12px;\n      height: 280px;\n      padding: 12px;\n      overflow: hidden;\n    }\n    .bar-area {\n      position: relative;\n      width: 100%;\n      height: 100%;\n    }\n    .bar {\n      position: absolute;\n      bottom: 0;\n      background: #355e7a;\n      border-radius: 8px 8px 0 0;\n      transition: left 320ms ease, background-color 160ms ease;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n    }\n    .bar span {\n      position: absolute;\n      bottom: -24px;\n      font-weight: 700;\n      color: var(--text);\n    }\n    .bar.compare { background: var(--accent2); }\n    .bar.swap { background: var(--swap); }\n    .bar.sorted { background: var(--ok); }\n    .bar.dragging { opacity: 0.8; outline: 2px dashed var(--accent); }\n    .bar:focus-visible { outline: 3px solid var(--focus); outline-offset: 2px; }\n    @keyframes pulse {\n      0% { transform: translateY(0); }\n      50% { transform: translateY(-3px); }\n      100% { transform: translateY(0); }\n    }\n    .bar.pulse { animation: pulse 140ms ease; }\n\n    .metrics {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n      margin-top: 8px;\n    }\n    .metric {\n      background: #0e1520;\n      border: 1px solid #2b3a4c;\n      border-radius: 8px;\n      padding: 8px 12px;\n      min-width: 120px;\n    }\n    .metric strong { display: block; font-size: 0.9rem; color: var(--muted); }\n    .metric .value { font-size: 1.2rem; font-weight: 700; }\n\n    .annotation {\n      margin-top: 8px;\n      color: var(--muted);\n    }\n    footer {\n      margin-top: 16px;\n      color: var(--muted);\n    }\n    @media (max-width: 640px) {\n      .control { min-width: 100%; }\n      .viz { height: 240px; }\n    }\n    .visually-hidden {\n      position: absolute !important;\n      height: 1px; width: 1px; overflow: hidden;\n      clip: rect(1px,1px,1px,1px); white-space: nowrap;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\" role=\"main\">\n    <section class=\"section\">\n      <h1>Bubble Sort — See comparisons bubble the largest to the end</h1>\n\n      <div class=\"small\">\n        <h2>Learning Objective</h2>\n        <p>After interacting, you will be able to:</p>\n        <ul>\n          <li>Explain how bubble sort compares adjacent items and swaps when out of order.</li>\n          <li>Describe passes, comparisons, and the sorted boundary that grows from the right.</li>\n          <li>Step through the algorithm to observe when swaps occur and why early exit optimization works.</li>\n        </ul>\n\n        <h2>Interaction Design</h2>\n        <ul>\n          <li>Type numbers or randomize to create an array. Drag bars to rearrange values before sorting.</li>\n          <li>Press Play to auto-run bubble sort; use Step to advance one comparison at a time. Bars animate:\n            compared pairs highlight amber; swaps slide horizontally; the rightmost sorted region turns green at the end of each pass.</li>\n          <li>Toggle Early Exit to stop when a full pass makes no swaps. Adjust speed; Pause to reflect; Reset any time.</li>\n          <li>Keyboard: Space toggles Play/Pause, Enter performs a Step. Screen reader users hear status updates for comparisons and swaps.</li>\n        </ul>\n\n        <h2>Layout Description</h2>\n        <ul>\n          <li>Safe area padding is 24 px on all sides; interactive controls use a 16 px gap for clear spacing.</li>\n          <li>Top section presents title and objectives. Below, the control panel sits above the visualization. Metrics appear under the visualization.</li>\n          <li>Responsive: controls wrap on small screens; bars scale to container width and height. Accessible labels, focus outlines, and ARIA live status are provided.</li>\n        </ul>\n      </div>\n    </section>\n\n    <section class=\"section\" aria-label=\"Bubble sort interactive module\">\n      <div class=\"controls\" aria-label=\"Controls\">\n        <div class=\"control\" style=\"flex:1 1 260px;\">\n          <label for=\"numbersInput\">Numbers (comma-separated, 3–12 items, values -99–99)</label>\n          <input id=\"numbersInput\" type=\"text\" value=\"9, 4, 7, 3, 1, 5\" aria-describedby=\"numbersHelp\" />\n          <div id=\"numbersHelp\" class=\"status\">Example: 9,4,7,3,1,5. You can also drag bars to reorder before sorting.</div>\n        </div>\n\n        <div class=\"control inline\">\n          <label class=\"visually-hidden\" for=\"loadBtn\">Load Numbers</label>\n          <button id=\"loadBtn\" class=\"primary\">Load Numbers</button>\n        </div>\n\n        <div class=\"control inline\">\n          <label class=\"visually-hidden\" for=\"randomBtn\">Randomize</label>\n          <button id=\"randomBtn\">Randomize</button>\n        </div>\n\n        <div class=\"control\" style=\"min-width:240px;\">\n          <label for=\"speedRange\">Speed</label>\n          <input id=\"speedRange\" type=\"range\" min=\"1\" max=\"5\" value=\"3\" aria-valuetext=\"Speed: medium\" />\n        </div>\n\n        <div class=\"control inline\">\n          <label class=\"visually-hidden\" for=\"playBtn\">Play</label>\n          <button id=\"playBtn\" class=\"primary\">Play</button>\n        </div>\n\n        <div class=\"control inline\">\n          <label class=\"visually-hidden\" for=\"stepBtn\">Step</label>\n          <button id=\"stepBtn\">Step</button>\n        </div>\n\n        <div class=\"control inline\">\n          <label class=\"visually-hidden\" for=\"resetBtn\">Reset</label>\n          <button id=\"resetBtn\">Reset</button>\n        </div>\n\n        <div class=\"control inline\">\n          <div class=\"checkbox\">\n            <input id=\"earlyExit\" type=\"checkbox\" checked />\n            <label for=\"earlyExit\">Early Exit Optimization</label>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"viz\" aria-label=\"Visualization\">\n        <div class=\"bar-area\" id=\"barArea\" role=\"list\" aria-label=\"Array bars\"></div>\n      </div>\n\n      <div class=\"metrics\" aria-label=\"Metrics\">\n        <div class=\"metric\">\n          <strong>Pass</strong>\n          <div class=\"value\" id=\"passCount\">0</div>\n        </div>\n        <div class=\"metric\">\n          <strong>Comparison</strong>\n          <div class=\"value\" id=\"compCount\">0</div>\n        </div>\n        <div class=\"metric\">\n          <strong>Swaps</strong>\n          <div class=\"value\" id=\"swapCount\">0</div>\n        </div>\n        <div class=\"metric\">\n          <strong>Sorted boundary</strong>\n          <div class=\"value\" id=\"sortedBoundary\">None</div>\n        </div>\n      </div>\n\n      <div class=\"annotation\" id=\"annotation\">\n        Tip: Click Play or press Space to watch values bubble to the end. Use Step to examine each comparison.\n      </div>\n\n      <div id=\"liveStatus\" class=\"visually-hidden\" aria-live=\"polite\" aria-atomic=\"true\"></div>\n    </section>\n\n    <footer class=\"section\">\n      Controls maintain at least 16 px spacing; the page uses a 24 px safe margin. This module demonstrates only bubble sort.\n    </footer>\n  </div>\n\n  <script>\n    (function() {\n      const barArea = document.getElementById('barArea');\n      const numbersInput = document.getElementById('numbersInput');\n      const loadBtn = document.getElementById('loadBtn');\n      const randomBtn = document.getElementById('randomBtn');\n      const playBtn = document.getElementById('playBtn');\n      const stepBtn = document.getElementById('stepBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const speedRange = document.getElementById('speedRange');\n      const earlyExitChk = document.getElementById('earlyExit');\n\n      const passCountEl = document.getElementById('passCount');\n      const compCountEl = document.getElementById('compCount');\n      const swapCountEl = document.getElementById('swapCount');\n      const sortedBoundaryEl = document.getElementById('sortedBoundary');\n      const annotationEl = document.getElementById('annotation');\n      const liveStatus = document.getElementById('liveStatus');\n\n      let data = [9, 4, 7, 3, 1, 5];\n      let bars = [];\n      let isSorting = false;\n      let isAuto = false;\n      let autoTimer = null;\n      let speedMs = 450;\n      let n = 0;\n\n      // bubble sort state\n      let iPass = 0;\n      let jComp = 0;\n      let swappedInPass = false;\n\n      let comparisons = 0;\n      let swaps = 0;\n\n      function clamp(val, min, max) { return Math.max(min, Math.min(max, val)); }\n\n      function parseInput(str) {\n        const parts = str.split(/[\\s,]+/).filter(Boolean);\n        if (parts.length < 3 || parts.length > 12) {\n          return { error: 'Please enter between 3 and 12 numbers.' };\n        }\n        const nums = [];\n        for (let p of parts) {\n          if (!/^-?\\d+$/.test(p)) return { error: 'Use integers only (e.g., 9,4,7,3,1).' };\n          const v = parseInt(p, 10);\n          if (Math.abs(v) > 99) return { error: 'Values should be between -99 and 99.' };\n          nums.push(v);\n        }\n        return { nums };\n      }\n\n      function randomArray() {\n        const len = Math.floor(Math.random() * 6) + 6; // 6-11\n        const arr = [];\n        for (let k = 0; k < len; k++) {\n          arr.push(Math.floor(Math.random() * 95) + 5); // 5-99\n        }\n        return arr;\n      }\n\n      function announce(msg) { liveStatus.textContent = msg; }\n\n      function resetState() {\n        isSorting = false;\n        isAuto = false;\n        clearInterval(autoTimer);\n        autoTimer = null;\n        iPass = 0;\n        jComp = 0;\n        swappedInPass = false;\n        comparisons = 0;\n        swaps = 0;\n        updateMetrics();\n        playBtn.textContent = 'Play';\n        annotationEl.textContent = 'Tip: Click Play or press Space to watch values bubble to the end. Use Step to examine each comparison.';\n        enableControls(true);\n        bars.forEach(b => b.classList.remove('compare', 'swap', 'sorted', 'dragging'));\n        updateSortedBoundary();\n      }\n\n      function enableControls(enabled) {\n        numbersInput.disabled = !enabled;\n        loadBtn.disabled = !enabled;\n        randomBtn.disabled = !enabled;\n        resetBtn.disabled = false;\n      }\n\n      function initData(arr) {\n        data = arr.slice();\n        n = data.length;\n        renderBars();\n        layoutBars();\n        resetState();\n      }\n\n      function valueToHeight(val) {\n        const absMax = Math.max(...data.map(v => Math.abs(v))) || 1;\n        const pct = Math.abs(val) / absMax;\n        const maxHeight = barArea.clientHeight - 32;\n        const h = clamp(Math.floor(maxHeight * (0.2 + 0.8 * pct)), 24, maxHeight);\n        return h;\n      }\n\n      function renderBars() {\n        barArea.innerHTML = '';\n        bars = [];\n        for (let idx = 0; idx < data.length; idx++) {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.setAttribute('role', 'listitem');\n          bar.setAttribute('tabindex', '0');\n          bar.dataset.index = idx;\n          bar.draggable = true;\n\n          const label = document.createElement('span');\n          label.textContent = data[idx];\n          bar.appendChild(label);\n\n          barArea.appendChild(bar);\n          bars.push(bar);\n\n          bar.addEventListener('dragstart', dragStart);\n          bar.addEventListener('dragend', dragEnd);\n          bar.addEventListener('dragover', dragOver);\n          bar.addEventListener('drop', dragDrop);\n\n          bar.addEventListener('keydown', (e) => {\n            if (!isSorting && (e.key === 'Enter' || e.key === ' ')) {\n              e.preventDefault();\n              editBarValue(bar);\n            }\n          });\n          bar.addEventListener('click', () => { if (!isSorting) editBarValue(bar); });\n        }\n      }\n\n      function editBarValue(bar) {\n        const idx = parseInt(bar.dataset.index, 10);\n        const current = data[idx];\n        const newVal = prompt('Enter a new integer value for this bar (-99 to 99):', current);\n        if (newVal === null) return;\n        const parsed = parseInt(newVal, 10);\n        if (Number.isNaN(parsed) || Math.abs(parsed) > 99) {\n          alert('Invalid value. Please enter an integer between -99 and 99.');\n          return;\n        }\n        data[idx] = parsed;\n        bar.querySelector('span').textContent = parsed;\n        layoutBars();\n        resetState();\n      }\n\n      function layoutBars() {\n        const areaWidth = barArea.clientWidth;\n        const gap = 8;\n        const barWidth = Math.max(24, Math.floor((areaWidth - gap * (n - 1)) / n));\n        for (let i = 0; i < n; i++) {\n          const bar = bars[i];\n          const val = data[i];\n          const left = i * (barWidth + gap);\n          const height = valueToHeight(val);\n          bar.style.width = barWidth + 'px';\n          bar.style.left = left + 'px';\n          bar.style.height = height + 'px';\n          bar.querySelector('span').textContent = val;\n        }\n      }\n\n      window.addEventListener('resize', layoutBars);\n\n      // Drag-and-drop to reorder before sorting\n      function dragStart(e) {\n        if (isSorting) { e.preventDefault(); return; }\n        const bar = e.currentTarget;\n        bar.classList.add('dragging');\n        e.dataTransfer.effectAllowed = 'move';\n        e.dataTransfer.setData('text/plain', bar.dataset.index);\n      }\n      function dragEnd(e) {\n        const bar = e.currentTarget;\n        bar.classList.remove('dragging');\n      }\n      function dragOver(e) {\n        if (isSorting) return;\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'move';\n      }\n      function dragDrop(e) {\n        if (isSorting) return;\n        e.preventDefault();\n        const fromIdx = parseInt(e.dataTransfer.getData('text/plain'), 10);\n        const toIdx = parseInt(e.currentTarget.dataset.index, 10);\n        if (fromIdx === toIdx || Number.isNaN(fromIdx) || Number.isNaN(toIdx)) return;\n        const val = data[fromIdx];\n        data.splice(fromIdx, 1);\n        data.splice(toIdx, 0, val);\n        initData(data);\n      }\n\n      // Sorting controls\n      loadBtn.addEventListener('click', () => {\n        const { nums, error } = parseInput(numbersInput.value);\n        if (error) {\n          annotationEl.textContent = error;\n          announce(error);\n          return;\n        }\n        initData(nums);\n        annotationEl.textContent = 'Loaded numbers. Drag bars to adjust, then Play or Step through bubble sort.';\n        announce('Numbers loaded.');\n      });\n\n      randomBtn.addEventListener('click', () => {\n        const arr = randomArray();\n        numbersInput.value = arr.join(', ');\n        initData(arr);\n        annotationEl.textContent = 'Randomized numbers. Press Play or Step to begin.';\n        announce('Random array generated.');\n      });\n\n      resetBtn.addEventListener('click', () => {\n        initData(data.slice());\n        annotationEl.textContent = 'Reset. Array restored to current order; sorting state cleared.';\n        announce('Reset complete.');\n      });\n\n      speedRange.addEventListener('input', () => {\n        const level = parseInt(speedRange.value, 10);\n        const map = { 1: 800, 2: 600, 3: 450, 4: 320, 5: 220 };\n        speedMs = map[level] || 450;\n        speedRange.setAttribute('aria-valuetext', 'Speed: ' + (['very slow','slow','medium','fast','very fast'][level-1]));\n        if (isAuto) {\n          clearInterval(autoTimer);\n          autoTimer = setInterval(autoStep, speedMs + 160);\n        }\n      });\n\n      playBtn.addEventListener('click', togglePlay);\n      stepBtn.addEventListener('click', () => {\n        if (!isSorting) startSorting();\n        performStep();\n      });\n\n      document.addEventListener('keydown', (e) => {\n        if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA')) return;\n        if (e.key === ' ') {\n          e.preventDefault();\n          togglePlay();\n        } else if (e.key === 'Enter') {\n          e.preventDefault();\n          if (!isSorting) startSorting();\n          performStep();\n        }\n      });\n\n      function togglePlay() {\n        if (!isSorting) startSorting();\n        isAuto = !isAuto;\n        playBtn.textContent = isAuto ? 'Pause' : 'Play';\n        if (isAuto) {\n          autoTimer = setInterval(autoStep, speedMs + 160);\n        } else {\n          clearInterval(autoTimer);\n        }\n      }\n\n      function startSorting() {\n        isSorting = true;\n        enableControls(false);\n        annotationEl.textContent = 'Sorting in progress: comparing adjacent values and swapping if out of order.';\n        announce('Bubble sort started.');\n      }\n\n      function autoStep() {\n        if (!isSorting) return;\n        const done = performStep();\n        if (done) {\n          clearInterval(autoTimer);\n          isAuto = false;\n          playBtn.textContent = 'Play';\n        }\n      }\n\n      function performStep() {\n        if (iPass >= n - 1) {\n          finishSorting();\n          return true;\n        }\n\n        if (jComp >= n - 1 - iPass) {\n          const sortedIdx = n - 1 - iPass;\n          for (let b = sortedIdx; b < n; b++) bars[b].classList.add('sorted');\n          passCountEl.textContent = iPass + 1;\n          if (earlyExitChk.checked && !swappedInPass) {\n            annotationEl.textContent = 'Early exit: no swaps in the last pass, array is sorted.';\n            announce('Early exit used.');\n            finishSorting();\n            return true;\n          }\n          swappedInPass = false;\n          iPass++;\n          jComp = 0;\n          updateSortedBoundary();\n          return false;\n        }\n\n        const a = data;\n        const leftIdx = jComp;\n        const rightIdx = jComp + 1;\n\n        clearCompareSwap();\n        bars[leftIdx].classList.add('compare');\n        bars[rightIdx].classList.add('compare');\n\n        const L = a[leftIdx];\n        const R = a[rightIdx];\n        comparisons++;\n        compCountEl.textContent = comparisons;\n        announce(`Compare positions ${leftIdx} and ${rightIdx}: ${L} vs ${R}.`);\n\n        setTimeout(() => {\n          if (L > R) {\n            doSwap(leftIdx, rightIdx);\n            swappedInPass = true;\n          } else {\n            bars[leftIdx].classList.add('pulse');\n            bars[rightIdx].classList.add('pulse');\n            setTimeout(() => {\n              bars[leftIdx].classList.remove('pulse');\n              bars[rightIdx].classList.remove('pulse');\n            }, 140);\n          }\n\n          jComp++;\n          updateSortedBoundary();\n\n          setTimeout(clearCompareSwap, 140);\n        }, 160);\n\n        return false;\n      }\n\n      function clearCompareSwap() {\n        bars.forEach(b => b.classList.remove('compare', 'swap'));\n      }\n\n      function doSwap(idxA, idxB) {\n        const barA = bars[idxA];\n        const barB = bars[idxB];\n        barA.classList.add('swap');\n        barB.classList.add('swap');\n\n        const tmp = data[idxA];\n        data[idxA] = data[idxB];\n        data[idxB] = tmp;\n\n        bars[idxA] = barB;\n        bars[idxB] = barA;\n        barA.dataset.index = idxB;\n        barB.dataset.index = idxA;\n\n        const areaWidth = barArea.clientWidth;\n        const gap = 8;\n        const barWidth = Math.max(24, Math.floor((areaWidth - gap * (n - 1)) / n));\n        const leftA = idxA * (barWidth + gap);\n        const leftB = idxB * (barWidth + gap);\n        barA.style.left = leftB + 'px';\n        barB.style.left = leftA + 'px';\n\n        swaps++;\n        swapCountEl.textContent = swaps;\n        announce(`Swapped: ${data[idxB]} moved left, ${data[idxA]} moved right.`);\n      }\n\n      function finishSorting() {\n        isSorting = false;\n        isAuto = false;\n        playBtn.textContent = 'Play';\n        clearInterval(autoTimer);\n        bars.forEach(b => b.classList.add('sorted'));\n        annotationEl.textContent = 'Done! Each pass bubbled the largest item to the right. The array is sorted.';\n        announce('Sorting complete.');\n        enableControls(true);\n      }\n\n      function updateMetrics() {\n        passCountEl.textContent = iPass;\n        compCountEl.textContent = comparisons;\n        swapCountEl.textContent = swaps;\n        updateSortedBoundary();\n      }\n      function updateSortedBoundary() {\n        if (iPass === 0) {\n          sortedBoundaryEl.textContent = 'None';\n        } else {\n          sortedBoundaryEl.textContent = '≥ index ' + (n - iPass);\n        }\n      }\n\n      initData(data);\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Stack"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a Bubble Sort interactive module, covering array setup, drag/edit interactions, play/step sorting flow, visual comparison/swapping feedback, pass completion, early-exit behavior, and completion.",
      "states": [
        {
          "name": "idle",
          "onEnter": "setupIdleUI",
          "on": {
            "LOAD_CLICK": "loading_numbers",
            "RANDOMIZE_CLICK": "randomizing",
            "RESET_CLICK": "resetting",
            "DRAG_START": "dragging",
            "EDIT_BAR": "editing_value",
            "PLAY_TOGGLE": "sorting_playing",
            "KEY_PLAY_TOGGLE": "sorting_playing",
            "STEP": "comparing",
            "KEY_STEP": "comparing",
            "SPEED_CHANGE": "idle",
            "EARLY_EXIT_TOGGLE": "idle",
            "RESIZE": "idle"
          }
        },
        {
          "name": "loading_numbers",
          "onEnter": "applyLoadNumbers",
          "on": {
            "LOAD_VALID": "idle",
            "LOAD_INVALID": "idle"
          }
        },
        {
          "name": "randomizing",
          "onEnter": "applyRandomize",
          "on": {
            "RANDOMIZE_DONE": "idle"
          }
        },
        {
          "name": "resetting",
          "onEnter": "applyReset",
          "on": {
            "RESET_DONE": "idle"
          }
        },
        {
          "name": "dragging",
          "onEnter": "addDraggingVisual",
          "onExit": "removeDraggingVisual",
          "on": {
            "DRAG_DROP": "idle",
            "DRAG_CANCEL": "idle"
          }
        },
        {
          "name": "editing_value",
          "onEnter": "applyEditValue",
          "on": {
            "EDIT_COMMIT": "idle",
            "EDIT_CANCEL": "idle"
          }
        },
        {
          "name": "sorting_playing",
          "onEnter": "beginSortingPlaying",
          "onExit": "stopAutoTimer",
          "on": {
            "AUTOSTEP_TICK": "comparing",
            "READY_FINISH": "done",
            "PLAY_TOGGLE": "sorting_paused",
            "KEY_PLAY_TOGGLE": "sorting_paused",
            "SPEED_CHANGE": "sorting_playing",
            "EARLY_EXIT_TOGGLE": "sorting_playing",
            "RESET_CLICK": "resetting",
            "RESIZE": "sorting_playing"
          }
        },
        {
          "name": "sorting_paused",
          "onEnter": "ensureSortingPaused",
          "on": {
            "STEP": "comparing",
            "KEY_STEP": "comparing",
            "READY_FINISH": "done",
            "PLAY_TOGGLE": "sorting_playing",
            "KEY_PLAY_TOGGLE": "sorting_playing",
            "SPEED_CHANGE": "sorting_paused",
            "EARLY_EXIT_TOGGLE": "sorting_paused",
            "RESET_CLICK": "resetting",
            "RESIZE": "sorting_paused"
          }
        },
        {
          "name": "comparing",
          "onEnter": "prepareComparison",
          "on": {
            "COMPARE_DECIDED_SWAP": "swapping",
            "COMPARE_DECIDED_NO_SWAP": "no_swap_feedback"
          }
        },
        {
          "name": "swapping",
          "onEnter": "performSwap",
          "on": {
            "ADVANCE": "advancing"
          }
        },
        {
          "name": "no_swap_feedback",
          "onEnter": "showNoSwapPulse",
          "on": {
            "ADVANCE": "advancing"
          }
        },
        {
          "name": "advancing",
          "onEnter": "advancePointer",
          "on": {
            "PASS_BOUNDARY_REACHED": "pass_complete",
            "ADVANCE_READY_AUTOPLAY": "sorting_playing",
            "ADVANCE_READY_PAUSED": "sorting_paused"
          }
        },
        {
          "name": "pass_complete",
          "onEnter": "completePassUpdate",
          "on": {
            "EARLY_EXIT_TRIGGER": "done",
            "CONTINUE_AUTOPLAY": "sorting_playing",
            "CONTINUE_MANUAL": "sorting_paused"
          }
        },
        {
          "name": "done",
          "onEnter": "completeSorting",
          "on": {
            "RESET_CLICK": "resetting",
            "LOAD_CLICK": "loading_numbers",
            "RANDOMIZE_CLICK": "randomizing",
            "DRAG_START": "dragging",
            "EDIT_BAR": "editing_value",
            "PLAY_TOGGLE": "sorting_playing",
            "KEY_PLAY_TOGGLE": "sorting_playing",
            "SPEED_CHANGE": "done",
            "EARLY_EXIT_TOGGLE": "done",
            "RESIZE": "done"
          }
        }
      ],
      "events": [
        "LOAD_CLICK",
        "LOAD_VALID",
        "LOAD_INVALID",
        "RANDOMIZE_CLICK",
        "RANDOMIZE_DONE",
        "RESET_CLICK",
        "RESET_DONE",
        "DRAG_START",
        "DRAG_DROP",
        "DRAG_CANCEL",
        "EDIT_BAR",
        "EDIT_COMMIT",
        "EDIT_CANCEL",
        "PLAY_TOGGLE",
        "KEY_PLAY_TOGGLE",
        "STEP",
        "KEY_STEP",
        "AUTOSTEP_TICK",
        "SPEED_CHANGE",
        "EARLY_EXIT_TOGGLE",
        "RESIZE",
        "READY_FINISH",
        "COMPARE_DECIDED_SWAP",
        "COMPARE_DECIDED_NO_SWAP",
        "ADVANCE",
        "PASS_BOUNDARY_REACHED",
        "ADVANCE_READY_AUTOPLAY",
        "ADVANCE_READY_PAUSED",
        "CONTINUE_AUTOPLAY",
        "CONTINUE_MANUAL",
        "EARLY_EXIT_TRIGGER"
      ],
      "notes": "State/action mappings to implementation:\n- setupIdleUI: mirrors resetState(), which clears sorting flags, updates metrics, enables controls, sets annotation to the tip, removes compare/swap/sorted/dragging classes, updates sorted boundary, play button 'Play'. Entered after initData() and after any load/randomize/reset/edit completes.\n- applyLoadNumbers: handles Load Numbers button. Calls parseInput() on numbersInput; on validation error, sets annotation and announces error then emit LOAD_INVALID; on success, initData(nums), sets annotation 'Loaded numbers...' and announces 'Numbers loaded.', then emit LOAD_VALID.\n- applyRandomize: creates random array with randomArray(), updates input field, calls initData(arr), sets annotation and announces 'Random array generated.', then emit RANDOMIZE_DONE.\n- applyReset: calls initData(data.slice()) to restore current order and clear sorting state, sets annotation 'Reset...' and announces 'Reset complete.', then emit RESET_DONE.\n- addDraggingVisual/removeDraggingVisual: add/remove 'dragging' class on the dragged bar; on DRAG_DROP, reorder data by splicing and call initData(data) to re-render and return to idle. Dragging is disabled while sorting (isSorting check prevents handlers).\n- applyEditValue: prompts user to edit a bar value (editBarValue()), validates (-99..99), updates data, bar label, calls layoutBars(), and then resetState(); either commits (EDIT_COMMIT) or cancels (EDIT_CANCEL) and returns to idle.\n- beginSortingPlaying: if first time this session (!isSorting), call startSorting() to set isSorting true, disable controls, set annotation 'Sorting in progress...' and announce 'Bubble sort started.'; set isAuto true, update play button to 'Pause', and start autoTimer at (speedMs + 160). SPEED_CHANGE while playing resets the interval accordingly.\n- stopAutoTimer: clears autoTimer; used when leaving sorting_playing (e.g., pause or reset).\n- ensureSortingPaused: represents sorting active (isSorting true) with auto-run paused (isAuto false). In practice, reached after toggling pause or after completing a step when not auto-running; play button shows 'Play'.\n- prepareComparison: performs one comparison step preface from performStep(): clears prior compare/swap classes (clearCompareSwap), highlights the two bars (add 'compare'), increments comparisons and updates compCount, and announces 'Compare positions i and j: L vs R.'. After ~160ms, decide: if L>R emit COMPARE_DECIDED_SWAP; else emit COMPARE_DECIDED_NO_SWAP.\n- performSwap: executes doSwap(idxA, idxB): applies 'swap' classes, swaps data and bars, animates left positions, increments swap counter and announces swap, and marks swappedInPass=true. Immediately emit ADVANCE (no need to wait for CSS transition end; code continues without it).\n- showNoSwapPulse: adds 'pulse' animation to both bars for visual feedback, schedules removal after 140ms. Immediately emit ADVANCE.\n- advancePointer: increments jComp, calls updateSortedBoundary(), schedules clearCompareSwap() after ~140ms. If jComp >= n-1-iPass emit PASS_BOUNDARY_REACHED; else emit ADVANCE_READY_AUTOPLAY if isAuto, or ADVANCE_READY_PAUSED if manual.\n- completePassUpdate: at pass boundary (jComp >= n-1-iPass), marks rightmost region [n-1-iPass .. n-1] as 'sorted', updates passCount. If earlyExit is enabled and swappedInPass==false, sets annotation 'Early exit...' and announces, then emit EARLY_EXIT_TRIGGER. Otherwise resets swappedInPass=false, increments iPass++, resets jComp=0, updates boundary; then emit CONTINUE_AUTOPLAY if isAuto else CONTINUE_MANUAL.\n- completeSorting: mirrors finishSorting(): sets isSorting=false and isAuto=false, clears autoTimer, sets play button 'Play', adds 'sorted' class to all bars, enables controls, sets completion annotation and announces 'Sorting complete.'.\n- Global/UI behaviors: RESIZE triggers layoutBars() but does not change states (self-transitions). SPEED_CHANGE updates speedMs; if in sorting_playing, the interval is restarted with new delay. EARLY_EXIT_TOGGLE is a configuration toggle stored in checkbox; it does not change state but affects pass-complete decisions.\n- Keyboard: Space triggers PLAY_TOGGLE; Enter triggers STEP. If focus is in an input/textarea, these are ignored by code.\n- Done detection: If iPass >= n-1 at the start of a step, performStep() calls finishSorting() immediately. This is modeled with READY_FINISH from sorting_playing/sorting_paused to done.\n- Visual feedback states: 'comparing' applies amber highlight; 'swapping' applies red and moves bars; 'no_swap_feedback' pulses bars; 'pass_complete' marks right boundary green; 'done' marks all bars green. Duration hints: compare decision delayed ~160ms; pulse clears after ~140ms; swap left-position CSS transitions are 320ms but logic advances without waiting."
    }
  },
  {
    "id": "776dbf90-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:04.025Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Queue",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Interactive Module</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --safe-margin: 24px;\n      --gap: 16px;\n      --surface: #0f172a; /* slate-900 */\n      --panel: #111827;   /* gray-900 */\n      --text: #e5e7eb;    /* gray-200 */\n      --muted: #9ca3af;   /* gray-400 */\n      --accent: #22c55e;  /* green-500 */\n      --accent-2: #f59e0b;/* amber-500 */\n      --danger: #ef4444;  /* red-500 */\n      --focus: #93c5fd;   /* blue-300 */\n      --bar: #60a5fa;     /* blue-400 */\n      --bar-compare: #f59e0b;\n      --bar-swap: #ef4444;\n      --bar-sorted: #22c55e;\n      --control-bg: #1f2937; /* gray-800 */\n      --control-border: #374151; /* gray-700 */\n      --ring: #3b82f6;\n      --radius: 12px;\n      --shadow: 0 6px 20px rgba(0,0,0,0.25);\n      --transition: 220ms cubic-bezier(.2,.8,.2,1);\n    }\n\n    html, body {\n      background: conic-gradient(from 180deg at 50% 100%, #0b1225, #0f172a 30%, #0f172a 70%, #0b1225);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      line-height: 1.5;\n      margin: 0;\n      padding: 0;\n    }\n\n    .container {\n      padding: var(--safe-margin);\n      min-height: 100vh;\n      box-sizing: border-box;\n      display: grid;\n      grid-template-rows: auto auto auto 1fr auto;\n      gap: var(--gap);\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .card {\n      background: linear-gradient(180deg, rgba(255,255,255,0.04), rgba(255,255,255,0.02));\n      backdrop-filter: blur(4px);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: var(--radius);\n      box-shadow: var(--shadow);\n    }\n\n    header.card {\n      padding: 24px;\n    }\n\n    header h1 {\n      margin: 0 0 8px 0;\n      font-size: 28px;\n      letter-spacing: 0.2px;\n    }\n\n    header p {\n      margin: 0;\n      color: var(--muted);\n    }\n\n    .objective.card, .interaction.card, .layout.card {\n      padding: 16px 24px;\n    }\n    .section-title {\n      font-weight: 700;\n      margin: 0 0 8px 0;\n      font-size: 18px;\n    }\n    .section-body {\n      color: var(--muted);\n      margin: 0;\n    }\n    .section-body ul {\n      margin: 8px 0 0 20px;\n    }\n\n    .controls.card {\n      padding: 16px;\n      display: grid;\n      gap: var(--gap);\n    }\n    .controls-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n    .control {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      min-width: 220px;\n      flex: 1 1 240px;\n    }\n    .control label {\n      font-size: 13px;\n      color: var(--muted);\n    }\n    input[type=\"text\"], input[type=\"number\"], input[type=\"range\"], select {\n      -webkit-appearance: none;\n      appearance: none;\n      background: var(--control-bg);\n      border: 1px solid var(--control-border);\n      color: var(--text);\n      padding: 10px 12px;\n      border-radius: 10px;\n      outline: none;\n      transition: border var(--transition), box-shadow var(--transition);\n    }\n    input[type=\"range\"] {\n      padding: 0;\n      height: 32px;\n    }\n    input:focus, select:focus {\n      border-color: var(--ring);\n      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);\n    }\n    .btn-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n    }\n    button {\n      -webkit-appearance: none;\n      appearance: none;\n      background: linear-gradient(180deg, #2563eb, #1d4ed8);\n      border: none;\n      color: white;\n      padding: 10px 14px;\n      border-radius: 10px;\n      font-weight: 600;\n      letter-spacing: 0.2px;\n      transition: transform 120ms ease, box-shadow 200ms ease, background 200ms;\n      cursor: pointer;\n      min-width: 120px;\n    }\n    button.secondary {\n      background: linear-gradient(180deg, #374151, #1f2937);\n      color: var(--text);\n      border: 1px solid var(--control-border);\n    }\n    button:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.35);\n    }\n    button:active {\n      transform: translateY(1px);\n    }\n    button[disabled] {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .stage.card {\n      padding: 16px;\n      display: grid;\n      gap: var(--gap);\n    }\n    .stage-top {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: var(--gap);\n      flex-wrap: wrap;\n    }\n    .legend {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    .legend .dot {\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n    }\n    .legend .dot::before {\n      content: \"\";\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n      display: inline-block;\n    }\n    .dot.compare::before { background: var(--bar-compare); }\n    .dot.swap::before { background: var(--bar-swap); }\n    .dot.sorted::before { background: var(--bar-sorted); }\n\n    .bars-wrap {\n      position: relative;\n      height: 280px;\n      border: 1px dashed rgba(255,255,255,0.08);\n      border-radius: 12px;\n      padding: 12px;\n      overflow: hidden;\n      background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));\n    }\n\n    .bars {\n      position: absolute;\n      inset: 12px;\n      display: grid;\n      grid-auto-flow: column;\n      grid-auto-columns: 1fr;\n      gap: 8px;\n      align-items: end;\n    }\n\n    .bar {\n      position: relative;\n      height: 20px; /* overridden dynamically */\n      background: linear-gradient(180deg, #60a5fa, #3b82f6);\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(59,130,246,0.35);\n      transform: translateZ(0); /* enable GPU compositing */\n      transition: transform var(--transition), background var(--transition), box-shadow var(--transition), outline var(--transition);\n      outline: none;\n    }\n    .bar[draggable=\"true\"] {\n      cursor: grab;\n    }\n    .bar:active {\n      cursor: grabbing;\n    }\n    .bar-label {\n      position: absolute;\n      bottom: 100%;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(31,41,55,0.85);\n      border: 1px solid rgba(255,255,255,0.12);\n      padding: 4px 6px;\n      border-radius: 6px;\n      font-size: 12px;\n      color: var(--text);\n      white-space: nowrap;\n      backdrop-filter: blur(3px);\n      pointer-events: none;\n    }\n    .bar.compare {\n      background: linear-gradient(180deg, var(--bar-compare), #f59e0b);\n      box-shadow: 0 2px 12px rgba(245,158,11,0.45);\n    }\n    .bar.swap {\n      background: linear-gradient(180deg, var(--bar-swap), #dc2626);\n      box-shadow: 0 2px 12px rgba(239,68,68,0.45);\n    }\n    .bar.sorted {\n      background: linear-gradient(180deg, var(--bar-sorted), #16a34a);\n      box-shadow: 0 2px 12px rgba(34,197,94,0.45);\n      opacity: 0.95;\n    }\n    .bar:focus-visible {\n      box-shadow: 0 0 0 3px rgba(147,197,253,0.6);\n    }\n\n    .explain.card {\n      display: grid;\n      grid-template-columns: 1.2fr 1fr;\n      gap: var(--gap);\n      padding: 16px;\n    }\n    @media (max-width: 900px) {\n      .explain.card {\n        grid-template-columns: 1fr;\n      }\n    }\n    .callout {\n      background: var(--panel);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: 10px;\n      padding: 12px;\n    }\n    .callout h3 {\n      margin: 0 0 8px 0;\n      font-size: 16px;\n    }\n    .callout .log {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 13px;\n      line-height: 1.6;\n      color: var(--text);\n      min-height: 84px;\n      max-height: 140px;\n      overflow: auto;\n      padding-right: 6px;\n    }\n    .pseudo {\n      background: var(--panel);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: 10px;\n      padding: 12px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;\n      font-size: 13px;\n      color: var(--text);\n    }\n    .pseudo .line {\n      padding: 4px 6px;\n      border-radius: 6px;\n    }\n    .pseudo .line.active {\n      background: rgba(59,130,246,0.18);\n      border-left: 3px solid var(--ring);\n    }\n    .pseudo .line.comment {\n      color: var(--muted);\n    }\n\n    .footer.card {\n      padding: 16px 24px;\n      color: var(--muted);\n      font-size: 13px;\n    }\n\n    /* Accessibility helper for live narration */\n    .sr-only {\n      position: absolute !important;\n      height: 1px; width: 1px;\n      overflow: hidden;\n      clip: rect(1px, 1px, 1px, 1px);\n      white-space: nowrap;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Concept Title -->\n    <header class=\"card\" role=\"banner\">\n      <h1>Bubble Sort: Compare, Swap, Repeat</h1>\n      <p>An interactive, visual walkthrough of bubble sort — one comparison at a time.</p>\n    </header>\n\n    <!-- Learning Objective -->\n    <section class=\"objective card\" aria-labelledby=\"obj-title\">\n      <h2 id=\"obj-title\" class=\"section-title\">Learning Objective</h2>\n      <div class=\"section-body\">\n        <ul>\n          - Understand how bubble sort repeatedly compares adjacent elements and swaps out-of-order pairs.\n          - See how completed passes “bubble” the largest remaining value to the end and grow the sorted region.\n          - Experience the algorithm step-by-step and control speed, data, and progression (play/pause/step).\n        </ul>\n      </div>\n    </section>\n\n    <!-- Interaction Design -->\n    <section class=\"interaction card\" aria-labelledby=\"interaction-title\">\n      <h2 id=\"interaction-title\" class=\"section-title\">Interaction Design</h2>\n      <div class=\"section-body\">\n        <ul>\n          - Typing: Enter a comma-separated list of numbers or set the size and randomize to generate values.\n          - Clicking: Use Play, Pause, Step, Reset to control the algorithm. Speed slider changes animation time.\n          - Dragging: Rearrange bars before starting by dragging them; this helps create your own scenarios.\n          - Visual feedback: Compared bars glow amber; swaps glow red and animate to new positions; after each pass, the sorted tail turns green.\n          - Narration: The Explanation panel describes the current comparison/swaps and highlights matching pseudocode lines.\n          - Keyboard: Space toggles play/pause; N steps; R randomizes for quick experimentation.\n        </ul>\n      </div>\n    </section>\n\n    <!-- Layout Description -->\n    <section class=\"layout card\" aria-labelledby=\"layout-title\">\n      <h2 id=\"layout-title\" class=\"section-title\">Layout Description</h2>\n      <div class=\"section-body\">\n        <ul>\n          - Safe area margins: 24 px padding around the entire viewport to keep content readable.\n          - Organization: Title and goals at top, controls next, central stage for bars, explanation below, footer last.\n          - Spacing: Minimum 16 px between interactive controls (buttons, inputs, sliders) to prevent mis-clicks.\n          - Accessibility: High-contrast colors, focus rings, aria-live narration, keyboard shortcuts. Draggable bars are focusable for device compatibility.\n          - Responsiveness: The bars scale to the container width; controls wrap as needed; explanation panel collapses to a single column on smaller screens.\n        </ul>\n      </div>\n    </section>\n\n    <!-- Controls -->\n    <section class=\"controls card\" aria-label=\"Controls\">\n      <div class=\"controls-row\">\n        <div class=\"control\">\n          <label for=\"listInput\">Numbers (comma-separated)</label>\n          <input id=\"listInput\" type=\"text\" value=\"7,3,9,1,5,2\" aria-describedby=\"listHelp\" />\n          <small id=\"listHelp\" style=\"color: var(--muted);\">Example: 7, 3, 9, 1, 5, 2 (values 1–99)</small>\n        </div>\n        <div class=\"control\">\n          <label for=\"sizeInput\">Size</label>\n          <input id=\"sizeInput\" type=\"number\" min=\"3\" max=\"20\" value=\"6\" />\n        </div>\n        <div class=\"control\">\n          <label for=\"speedRange\">Speed</label>\n          <input id=\"speedRange\" type=\"range\" min=\"0.2\" max=\"2\" step=\"0.1\" value=\"1\" aria-label=\"Animation speed multiplier\" />\n        </div>\n      </div>\n      <div class=\"btn-row\" role=\"group\" aria-label=\"Action buttons\">\n        <button id=\"applyBtn\" class=\"secondary\" title=\"Apply typed list\">Apply List</button>\n        <button id=\"randomBtn\" class=\"secondary\" title=\"Randomize numbers\">Randomize</button>\n        <button id=\"playBtn\" title=\"Start bubble sort (Space)\">Play</button>\n        <button id=\"pauseBtn\" class=\"secondary\" title=\"Pause bubble sort\">Pause</button>\n        <button id=\"stepBtn\" class=\"secondary\" title=\"Do next step (N)\">Step</button>\n        <button id=\"resetBtn\" class=\"secondary\" title=\"Reset\">Reset</button>\n      </div>\n    </section>\n\n    <!-- Stage -->\n    <section class=\"stage card\" aria-label=\"Sorting Stage\">\n      <div class=\"stage-top\">\n        <div class=\"legend\" aria-hidden=\"true\">\n          <span class=\"dot compare\">Compare</span>\n          <span class=\"dot swap\">Swap</span>\n          <span class=\"dot sorted\">Sorted tail</span>\n        </div>\n        <div id=\"statusText\" style=\"color: var(--muted); font-size: 13px;\">Ready.</div>\n      </div>\n\n      <div class=\"bars-wrap\">\n        <div id=\"bars\" class=\"bars\" aria-live=\"polite\" aria-label=\"Array bars\"></div>\n      </div>\n    </section>\n\n    <!-- Explanation -->\n    <section class=\"explain card\" aria-label=\"Explanation and pseudocode\">\n      <div class=\"callout\">\n        <h3>Explanation</h3>\n        <div id=\"explainLog\" class=\"log\" aria-live=\"polite\">\n          Use Play or Step to begin. The panel narrates each compare and swap, and passes.\n        </div>\n      </div>\n      <div class=\"pseudo\" aria-label=\"Bubble sort pseudocode\">\n        <div class=\"line comment\">// Bubble Sort (optimized with early exit)</div>\n        <div class=\"line\" data-line=\"1\">for pass from 0 to n-2:</div>\n        <div class=\"line\" data-line=\"2\">  swapped = false</div>\n        <div class=\"line\" data-line=\"3\">  for j from 0 to n-2-pass:</div>\n        <div class=\"line\" data-line=\"4\">    compare A[j] and A[j+1]</div>\n        <div class=\"line\" data-line=\"5\">    if A[j] &gt; A[j+1]:</div>\n        <div class=\"line\" data-line=\"6\">      swap(A[j], A[j+1]); swapped = true</div>\n        <div class=\"line\" data-line=\"7\">  if not swapped: break // already sorted</div>\n        <div class=\"line\" data-line=\"8\">return A</div>\n      </div>\n    </section>\n\n    <!-- Footer -->\n    <footer class=\"footer card\">\n      Keyboard shortcuts: Space = Play/Pause, N = Step, R = Randomize. Drag bars to rearrange before starting. This module focuses exclusively on bubble sort.\n    </footer>\n  </div>\n\n  <!-- Live narration for screen readers -->\n  <div id=\"srLive\" class=\"sr-only\" aria-live=\"assertive\"></div>\n\n  <script>\n    // State\n    const state = {\n      arr: [],\n      generator: null,\n      playing: false,\n      pass: 0,\n      j: 0,\n      speed: 1,\n      sortedTail: 0,\n      animMs: 500, // base animation (multiplied by speed)\n      busy: false\n    };\n\n    // Elements\n    const barsEl = document.getElementById('bars');\n    const listInput = document.getElementById('listInput');\n    const sizeInput = document.getElementById('sizeInput');\n    const speedRange = document.getElementById('speedRange');\n    const applyBtn = document.getElementById('applyBtn');\n    const randomBtn = document.getElementById('randomBtn');\n    const playBtn = document.getElementById('playBtn');\n    const pauseBtn = document.getElementById('pauseBtn');\n    const stepBtn = document.getElementById('stepBtn');\n    const resetBtn = document.getElementById('resetBtn');\n    const explainLog = document.getElementById('explainLog');\n    const statusText = document.getElementById('statusText');\n    const srLive = document.getElementById('srLive');\n    const pseudoLines = document.querySelectorAll('.pseudo .line');\n\n    // Utility\n    const clamp = (n, min, max) => Math.max(min, Math.min(max, n));\n    function parseList(str) {\n      const nums = str.split(/[, ]+/).filter(Boolean).map(v => clamp(parseInt(v, 10) || 0, 1, 99));\n      return nums.slice(0, 30);\n    }\n\n    function randomArray(size) {\n      const s = clamp(parseInt(size, 10) || 6, 3, 20);\n      const out = [];\n      for (let i = 0; i < s; i++) out.push(1 + Math.floor(Math.random() * 99));\n      return out;\n    }\n\n    function clearExplain() {\n      explainLog.textContent = '';\n    }\n    function logExplain(msg) {\n      const line = document.createElement('div');\n      line.textContent = msg;\n      explainLog.appendChild(line);\n      explainLog.scrollTop = explainLog.scrollHeight;\n      srLive.textContent = msg;\n    }\n\n    function setStatus(msg) {\n      statusText.textContent = msg;\n    }\n\n    function highlightPseudo(lines = []) {\n      pseudoLines.forEach(el => {\n        el.classList.toggle('active', lines.includes(el.dataset.line));\n      });\n    }\n\n    // Bars rendering and FLIP swapping\n    function renderBars(arr) {\n      barsEl.innerHTML = '';\n      const max = Math.max(...arr, 1);\n      arr.forEach((val, idx) => {\n        const wrap = document.createElement('div');\n        wrap.className = 'bar';\n        wrap.tabIndex = 0;\n        wrap.setAttribute('draggable', 'true');\n        wrap.dataset.index = String(idx);\n        wrap.dataset.value = String(val);\n        const pct = (val / max) * 100;\n        wrap.style.height = `calc(${pct}% - 6px)`; // keep some breathing room\n        const label = document.createElement('div');\n        label.className = 'bar-label';\n        label.textContent = String(val);\n        wrap.appendChild(label);\n        barsEl.appendChild(wrap);\n      });\n      attachDragHandlers();\n    }\n\n    function markSortedTail(tailCount) {\n      const children = [...barsEl.children];\n      children.forEach((el, i) => {\n        el.classList.remove('sorted');\n      });\n      if (tailCount <= 0) return;\n      const n = children.length;\n      for (let i = n - tailCount; i < n; i++) {\n        children[i]?.classList.add('sorted');\n      }\n    }\n\n    function clearHighlights() {\n      [...barsEl.children].forEach(el => el.classList.remove('compare', 'swap'));\n      highlightPseudo([]);\n    }\n\n    function compareHighlight(j) {\n      clearHighlights();\n      const a = barsEl.children[j];\n      const b = barsEl.children[j + 1];\n      if (!a || !b) return;\n      a.classList.add('compare');\n      b.classList.add('compare');\n      highlightPseudo(['4']);\n    }\n\n    function swapHighlight(j) {\n      clearHighlights();\n      const a = barsEl.children[j];\n      const b = barsEl.children[j + 1];\n      if (!a || !b) return;\n      a.classList.add('swap');\n      b.classList.add('swap');\n      highlightPseudo(['6']);\n    }\n\n    async function animateSwap(j) {\n      const a = barsEl.children[j];\n      const b = barsEl.children[j + 1];\n      if (!a || !b) return;\n\n      const rectA1 = a.getBoundingClientRect();\n      const rectB1 = b.getBoundingClientRect();\n\n      // Swap DOM\n      b.after(a);\n\n      const rectA2 = a.getBoundingClientRect();\n      const rectB2 = b.getBoundingClientRect();\n\n      const dxA = rectA1.left - rectA2.left;\n      const dxB = rectB1.left - rectB2.left;\n\n      a.style.transform = `translateX(${dxA}px)`;\n      b.style.transform = `translateX(${dxB}px)`;\n\n      // Force reflow\n      a.getBoundingClientRect();\n      b.getBoundingClientRect();\n\n      const duration = state.animMs / state.speed;\n      a.style.transition = `transform ${duration}ms cubic-bezier(.2,.8,.2,1)`;\n      b.style.transition = `transform ${duration}ms cubic-bezier(.2,.8,.2,1)`;\n      a.style.transform = 'translateX(0)';\n      b.style.transform = 'translateX(0)';\n\n      await new Promise(res => setTimeout(res, duration));\n\n      a.style.transition = '';\n      b.style.transition = '';\n    }\n\n    // Bubble sort generator\n    function* bubbleSortGenerator(a) {\n      const n = a.length;\n      for (let pass = 0; pass < n - 1; pass++) {\n        let swapped = false;\n        yield { type: 'passStart', pass };\n        for (let j = 0; j < n - 1 - pass; j++) {\n          yield { type: 'compare', j, j1: j + 1, pass };\n          if (a[j] > a[j + 1]) {\n            const tmp = a[j];\n            a[j] = a[j + 1];\n            a[j + 1] = tmp;\n            swapped = true;\n            yield { type: 'swap', j, j1: j + 1, pass };\n          } else {\n            yield { type: 'noswap', j, j1: j + 1, pass };\n          }\n        }\n        yield { type: 'passEnd', pass, swapped };\n        if (!swapped) {\n          yield { type: 'earlyExit', pass };\n          break;\n        }\n      }\n      yield { type: 'done' };\n    }\n\n    // Control flow\n    async function runAuto() {\n      if (!state.generator) return;\n      state.playing = true;\n      playBtn.disabled = true;\n      pauseBtn.disabled = false;\n      stepBtn.disabled = true;\n      setStatus('Playing...');\n      while (state.playing) {\n        const cont = await doStep();\n        if (!cont) break;\n        await new Promise(res => setTimeout(res, 120 / state.speed)); // small delay between steps\n      }\n      playBtn.disabled = false;\n      pauseBtn.disabled = true;\n      stepBtn.disabled = false;\n      setStatus('Paused.');\n    }\n\n    async function doStep() {\n      if (!state.generator) return false;\n      if (state.busy) return true;\n      const next = state.generator.next();\n      if (next.done) {\n        clearHighlights();\n        markSortedTail(state.arr.length);\n        setStatus('Sorted!');\n        logExplain('Done: array is fully sorted.');\n        highlightPseudo(['8']);\n        state.playing = false;\n        return false;\n      }\n      const ev = next.value;\n      switch (ev.type) {\n        case 'passStart':\n          clearHighlights();\n          state.sortedTail = ev.pass;\n          markSortedTail(ev.pass);\n          highlightPseudo(['1','2','3']);\n          logExplain(`Pass ${ev.pass + 1}: starting comparisons.`);\n          setStatus(`Pass ${ev.pass + 1}`);\n          break;\n        case 'compare':\n          compareHighlight(ev.j);\n          logExplain(`Compare indices ${ev.j} and ${ev.j + 1} (${state.arr[ev.j]} vs ${state.arr[ev.j + 1]})`);\n          setStatus(`Comparing ${ev.j} and ${ev.j + 1}`);\n          break;\n        case 'swap':\n          swapHighlight(ev.j);\n          logExplain(`Swap: ${state.arr[ev.j]} and ${state.arr[ev.j + 1]} were out of order.`);\n          setStatus(`Swapping ${ev.j} and ${ev.j + 1}`);\n          state.busy = true;\n          await animateSwap(ev.j);\n          state.busy = false;\n          break;\n        case 'noswap':\n          logExplain(`No swap needed.`);\n          setStatus(`No swap`);\n          break;\n        case 'passEnd':\n          clearHighlights();\n          const tail = ev.pass + 1;\n          markSortedTail(tail);\n          logExplain(`End of pass ${ev.pass + 1}: largest remaining value bubbled to position ${state.arr.length - tail}.`);\n          setStatus(`Pass ${ev.pass + 1} complete`);\n          highlightPseudo(['7']);\n          break;\n        case 'earlyExit':\n          clearHighlights();\n          markSortedTail(state.arr.length);\n          logExplain(`Early exit: no swaps in last pass → array is already sorted.`);\n          setStatus('Early exit: sorted');\n          break;\n        default:\n          break;\n      }\n      return true;\n    }\n\n    // Drag-and-drop to rearrange before sorting\n    function attachDragHandlers() {\n      const bars = [...barsEl.children];\n      bars.forEach(bar => {\n        bar.addEventListener('dragstart', e => {\n          e.dataTransfer.setData('text/plain', bar.dataset.index);\n          bar.style.opacity = '0.8';\n        });\n        bar.addEventListener('dragend', () => {\n          bar.style.opacity = '1';\n        });\n        bar.addEventListener('dragover', e => {\n          e.preventDefault();\n          bar.style.outline = `2px dashed ${getComputedStyle(document.documentElement).getPropertyValue('--ring')}`;\n        });\n        bar.addEventListener('dragleave', () => {\n          bar.style.outline = '';\n        });\n        bar.addEventListener('drop', e => {\n          e.preventDefault();\n          bar.style.outline = '';\n          const fromIdx = parseInt(e.dataTransfer.getData('text/plain'), 10);\n          const toIdx = parseInt(bar.dataset.index, 10);\n          if (Number.isInteger(fromIdx) && Number.isInteger(toIdx) && fromIdx !== toIdx) {\n            const val = state.arr[fromIdx];\n            state.arr.splice(fromIdx, 1);\n            state.arr.splice(toIdx, 0, val);\n            renderBars(state.arr);\n            clearExplain();\n            setStatus('Reordered by drag. Ready.');\n          }\n        });\n      });\n    }\n\n    // Controls handlers\n    function resetState(arr) {\n      state.arr = arr.slice();\n      state.generator = bubbleSortGenerator(state.arr.slice()); // generator works on a copy for logic, we animate DOM for swaps\n      renderBars(state.arr);\n      clearHighlights();\n      markSortedTail(0);\n      setStatus('Ready.');\n      clearExplain();\n      logExplain(`Array: [${state.arr.join(', ')}]`);\n      playBtn.disabled = false;\n      pauseBtn.disabled = true;\n      stepBtn.disabled = false;\n      state.playing = false;\n    }\n\n    function applyList() {\n      const arr = parseList(listInput.value);\n      if (arr.length < 3) {\n        setStatus('Please provide at least 3 numbers (1–99).');\n        return;\n      }\n      sizeInput.value = arr.length;\n      resetState(arr);\n    }\n\n    function randomize() {\n      const arr = randomArray(sizeInput.value);\n      listInput.value = arr.join(', ');\n      resetState(arr);\n    }\n\n    function resetAll() {\n      resetState(parseList(listInput.value));\n    }\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', e => {\n      if (e.target.tagName === 'INPUT') return;\n      if (e.code === 'Space') {\n        e.preventDefault();\n        if (state.playing) {\n          state.playing = false;\n          setStatus('Paused.');\n          playBtn.disabled = false;\n          pauseBtn.disabled = true;\n          stepBtn.disabled = false;\n        } else {\n          runAuto();\n        }\n      } else if (e.key.toLowerCase() === 'n') {\n        e.preventDefault();\n        doStep();\n      } else if (e.key.toLowerCase() === 'r') {\n        e.preventDefault();\n        randomize();\n      }\n    });\n\n    // Wire controls\n    applyBtn.addEventListener('click', applyList);\n    randomBtn.addEventListener('click', randomize);\n    playBtn.addEventListener('click', runAuto);\n    pauseBtn.addEventListener('click', () => {\n      state.playing = false;\n      setStatus('Paused.');\n      playBtn.disabled = false;\n      pauseBtn.disabled = true;\n      stepBtn.disabled = false;\n    });\n    stepBtn.addEventListener('click', () => { doStep(); });\n    resetBtn.addEventListener('click', resetAll);\n    speedRange.addEventListener('input', () => {\n      state.speed = parseFloat(speedRange.value) || 1;\n      setStatus(`Speed: ${state.speed.toFixed(1)}x`);\n    });\n\n    // Init\n    (function init() {\n      state.speed = parseFloat(speedRange.value) || 1;\n      const arr = parseList(listInput.value);\n      resetState(arr);\n      setStatus('Ready.');\n      logExplain('Use controls to start. You can drag bars to reorder before playing.');\n      highlightPseudo([]);\n    })();\n\n    // Resize handling to ensure labels remain readable\n    window.addEventListener('resize', () => {\n      // No special handling needed; bars are responsive.\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for the Bubble Sort interactive module, covering user controls (play/pause/step/reset), drag-and-drop reordering, speed adjustments, and algorithm visualization phases (pass start, comparing, swapping, no-swap, pass end, early exit, done).",
      "states": [
        {
          "name": "ready",
          "onEnter": "SET_READY_UI",
          "on": {
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "KEY_RANDOMIZE_R": "ready",
            "PLAY_CLICK": "playing",
            "SPACE_TOGGLE_PLAY": "playing",
            "STEP_CLICK": "pass_start",
            "KEY_STEP_N": "pass_start",
            "BAR_DRAG_START": "dragging",
            "SPEED_CHANGE": "ready"
          }
        },
        {
          "name": "playing",
          "onEnter": "SET_PLAYING_TRUE_UPDATE_BUTTONS_AND_STATUS",
          "onExit": "SET_PLAYING_FALSE_UPDATE_BUTTONS_ON_EXIT",
          "on": {
            "PAUSE_CLICK": "paused",
            "SPACE_TOGGLE_PAUSE": "paused",
            "PASS_START": "pass_start",
            "COMPARE": "comparing",
            "SWAP": "swapping",
            "NO_SWAP": "no_swap",
            "PASS_END": "pass_end",
            "EARLY_EXIT": "early_exit",
            "DONE": "done",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "BAR_DRAG_START": "dragging",
            "SPEED_CHANGE": "playing"
          }
        },
        {
          "name": "paused",
          "onEnter": "SET_PLAYING_FALSE_UPDATE_BUTTONS_AND_STATUS",
          "on": {
            "PLAY_CLICK": "playing",
            "SPACE_TOGGLE_PLAY": "playing",
            "PASS_START": "pass_start",
            "COMPARE": "comparing",
            "SWAP": "swapping",
            "NO_SWAP": "no_swap",
            "PASS_END": "pass_end",
            "EARLY_EXIT": "early_exit",
            "DONE": "done",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "BAR_DRAG_START": "dragging",
            "SPEED_CHANGE": "paused"
          }
        },
        {
          "name": "pass_start",
          "onEnter": "CLEAR_HIGHLIGHTS_MARK_SORTED_TAIL_START_AND_LOG",
          "on": {
            "COMPARE": "comparing",
            "EARLY_EXIT": "early_exit",
            "DONE": "done",
            "PAUSE_CLICK": "paused",
            "PLAY_CLICK": "playing",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "pass_start"
          }
        },
        {
          "name": "comparing",
          "onEnter": "HIGHLIGHT_COMPARE_AND_LOG",
          "on": {
            "SWAP": "swapping",
            "NO_SWAP": "no_swap",
            "DONE": "done",
            "PAUSE_CLICK": "paused",
            "PLAY_CLICK": "playing",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "comparing"
          }
        },
        {
          "name": "swapping",
          "onEnter": "HIGHLIGHT_SWAP_ANIMATE_AND_SET_BUSY",
          "onExit": "CLEAR_BUSY",
          "on": {
            "PASS_END": "pass_end",
            "COMPARE": "comparing",
            "DONE": "done",
            "EARLY_EXIT": "early_exit",
            "SWAP_ANIMATION_DONE": "playing",
            "PAUSE_CLICK": "paused",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "swapping"
          }
        },
        {
          "name": "no_swap",
          "onEnter": "LOG_NO_SWAP_SET_STATUS",
          "on": {
            "COMPARE": "comparing",
            "PASS_END": "pass_end",
            "DONE": "done",
            "PAUSE_CLICK": "paused",
            "PLAY_CLICK": "playing",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "no_swap"
          }
        },
        {
          "name": "pass_end",
          "onEnter": "CLEAR_HIGHLIGHTS_MARK_TAIL_AND_LOG",
          "on": {
            "PASS_START": "pass_start",
            "EARLY_EXIT": "early_exit",
            "DONE": "done",
            "PAUSE_CLICK": "paused",
            "PLAY_CLICK": "playing",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "pass_end"
          }
        },
        {
          "name": "early_exit",
          "onEnter": "CLEAR_HIGHLIGHTS_MARK_ALL_SORTED_AND_LOG",
          "on": {
            "DONE": "done",
            "PAUSE_CLICK": "paused",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "early_exit"
          }
        },
        {
          "name": "dragging",
          "onEnter": "DRAG_FEEDBACK_ON",
          "onExit": "DRAG_FEEDBACK_OFF",
          "on": {
            "BAR_DRAG_OVER": "dragging",
            "BAR_DRAG_LEAVE": "dragging",
            "BAR_DROP": "ready",
            "BAR_DRAG_END": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "SPEED_CHANGE": "dragging"
          }
        },
        {
          "name": "done",
          "onEnter": "CLEAR_HIGHLIGHTS_MARK_ALL_SORTED_LOG_DONE_STOP_PLAY",
          "on": {
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "PLAY_CLICK": "playing",
            "SPACE_TOGGLE_PLAY": "playing",
            "SPEED_CHANGE": "done"
          }
        }
      ],
      "events": [
        "APPLY_CLICK",
        "RANDOMIZE_CLICK",
        "RESET_CLICK",
        "PLAY_CLICK",
        "PAUSE_CLICK",
        "STEP_CLICK",
        "SPACE_TOGGLE_PLAY",
        "SPACE_TOGGLE_PAUSE",
        "KEY_STEP_N",
        "KEY_RANDOMIZE_R",
        "SPEED_CHANGE",
        "BAR_DRAG_START",
        "BAR_DRAG_OVER",
        "BAR_DRAG_LEAVE",
        "BAR_DROP",
        "BAR_DRAG_END",
        "PASS_START",
        "COMPARE",
        "SWAP",
        "NO_SWAP",
        "PASS_END",
        "EARLY_EXIT",
        "DONE",
        "SWAP_ANIMATION_DONE"
      ],
      "notes": "Modes: ready/playing/paused/done; Visualization phases: pass_start, comparing, swapping (with busy animation), no_swap, pass_end, early_exit. User actions: Apply List, Randomize, Reset reset to ready by calling resetState() (renders bars, clears highlights, marks sorted tail 0, sets status 'Ready.', logs array, and updates buttons). Play/Space (play) enters playing and runs runAuto() loop (enables Pause, disables Step, status 'Playing...'); Pause/Space (pause) enters paused (playing=false, Play enabled, Pause disabled, Step enabled, status 'Paused.'). Step (button or 'N') triggers doStep() once; that yields generator events (PASS_START, COMPARE, SWAP, NO_SWAP, PASS_END, EARLY_EXIT, DONE) which transition to corresponding visualization states. In swapping, busy=true is set and animateSwap(j) runs; upon completion (conceptual SWAP_ANIMATION_DONE), busy=false; subsequent generator events transition out to COMPARE or PASS_END. Dragging bars is available primarily when not auto-playing: BAR_DRAG_START enters dragging; BAR_DROP reorders state.arr, re-renders bars, clears explain, sets status 'Reordered by drag. Ready.' then transitions to ready. Speed slider input emits SPEED_CHANGE in any state and updates state.speed and status ('Speed: x.xx'), without changing state. Done: doStep sees next.done, clears highlights, marks entire array sorted, logs 'Done' and highlights pseudocode line 8, sets status 'Sorted!', playing=false. The runAuto loop then exits and buttons reflect paused state. Generator events are produced by doStep(), invoked either by runAuto() (auto ticks) or via Step; transitions here treat those yields as FSM events. Button enable/disable updates are captured in onEnter/onExit action names for playing/paused; visual feedback updates are captured in the onEnter action names for the algorithm phases."
    }
  },
  {
    "id": "7e6b73a0-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:04.233Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Heap (Min/Max)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Interactive Module</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f172a;          /* slate-900 */\n      --panel: #111827;       /* gray-900 */\n      --text: #e5e7eb;        /* gray-200 */\n      --muted: #9ca3af;       /* gray-400 */\n      --accent: #22c55e;      /* green-500 */\n      --accent-2: #06b6d4;    /* cyan-500 */\n      --warn: #f59e0b;        /* amber-500 */\n      --danger: #ef4444;      /* red-500 */\n      --focus: #93c5fd;       /* blue-300 */\n      --gap: 16px;\n      --safe: 24px;\n      --bar-base: #3b82f6;    /* blue-500 */\n      --bar-compare: #f97316; /* orange-500 */\n      --bar-sorted: #22c55e;  /* green-500 */\n      --bar-idle: #64748b;    /* slate-500 */\n    }\n\n    html, body {\n      margin: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.4;\n    }\n\n    .page {\n      padding: var(--safe);\n      max-width: 1100px;\n      margin: 0 auto;\n    }\n\n    h1, h2, h3 {\n      margin: 0 0 8px 0;\n      font-weight: 700;\n    }\n    h1 { font-size: 24px; }\n    h2 { font-size: 20px; }\n    h3 { font-size: 18px; }\n\n    p { margin: 0 0 8px 0; color: var(--muted); }\n\n    .section {\n      margin-bottom: 24px;\n    }\n\n    .panel {\n      background: var(--panel);\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      padding: 16px;\n    }\n\n    .controls-grid {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    @media (min-width: 860px) {\n      .layout {\n        display: grid;\n        grid-template-columns: 1.2fr 1fr;\n        gap: 24px;\n      }\n    }\n\n    .viz-wrap {\n      background: #0b1220;\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      padding: 16px;\n    }\n\n    .viz-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      gap: var(--gap);\n      margin-bottom: 16px;\n    }\n\n    .bar-area {\n      position: relative;\n      height: 300px;\n      border-radius: 8px;\n      background: linear-gradient(to bottom, #0e1a2f, #0b1220);\n      overflow: hidden;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      width: 48px; /* will be resized responsively */\n      background: var(--bar-base);\n      border-radius: 8px 8px 0 0;\n      transition: left var(--swap-ms, 450ms) ease, height 250ms ease, background-color 200ms ease, transform 200ms ease, opacity 200ms ease;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      padding-bottom: 6px;\n      color: #eaf2ff;\n      font-weight: 600;\n      box-shadow: 0 8px 20px rgba(0,0,0,0.35);\n    }\n\n    .bar.idle {\n      background: var(--bar-idle);\n    }\n    .bar.comparing {\n      background: var(--bar-compare);\n      outline: 3px solid rgba(249, 115, 22, 0.35);\n      transform: translateY(-4px);\n    }\n    .bar.sorted {\n      background: var(--bar-sorted);\n      outline: none;\n    }\n\n    .legend {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n      margin-top: 12px;\n    }\n    .chip {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 6px 10px;\n      border-radius: 999px;\n      background: #0a1426;\n      border: 1px solid #1f2937;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    .dot {\n      width: 12px;\n      height: 12px;\n      border-radius: 999px;\n      display: inline-block;\n    }\n\n    .btn-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n    }\n\n    button, .btn {\n      appearance: none;\n      border: 1px solid #253044;\n      background: #0b182f;\n      color: var(--text);\n      padding: 10px 14px;\n      border-radius: 10px;\n      cursor: pointer;\n      font-weight: 600;\n      transition: background-color 160ms ease, border-color 160ms ease, transform 80ms ease;\n    }\n    button:hover {\n      background: #0f2141;\n      border-color: #31415d;\n    }\n    button:active {\n      transform: translateY(1px);\n    }\n    button[disabled] {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .primary {\n      background: #0d2e1f;\n      border-color: #134e31;\n    }\n    .primary:hover {\n      background: #11402a;\n      border-color: #19613f;\n    }\n    .danger {\n      background: #2a0e0e;\n      border-color: #4a1a1a;\n    }\n    .danger:hover {\n      background: #3a1313;\n      border-color: #6a2626;\n    }\n\n    .control {\n      display: grid;\n      gap: 8px;\n    }\n    .control label {\n      font-size: 13px;\n      color: var(--muted);\n    }\n    input[type=\"text\"], input[type=\"number\"], input[type=\"range\"] {\n      width: 100%;\n      padding: 10px 12px;\n      border-radius: 10px;\n      border: 1px solid #253044;\n      background: #0b182f;\n      color: var(--text);\n      outline: none;\n    }\n    input[type=\"text\"]:focus,\n    input[type=\"number\"]:focus,\n    input[type=\"range\"]:focus {\n      border-color: var(--focus);\n      box-shadow: 0 0 0 3px rgba(147, 197, 253, 0.25);\n    }\n    input[type=\"range\"] {\n      padding: 6px 0;\n    }\n\n    .toggle {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      cursor: pointer;\n      user-select: none;\n    }\n    .toggle input {\n      width: 22px;\n      height: 22px;\n      cursor: pointer;\n    }\n\n    .status {\n      margin-top: 12px;\n      display: grid;\n      gap: 8px;\n    }\n    .status-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n    .badge {\n      padding: 6px 10px;\n      border-radius: 999px;\n      background: #0b182f;\n      border: 1px solid #253044;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .live {\n      min-height: 24px;\n      color: var(--text);\n    }\n\n    .notes {\n      margin-top: 24px;\n    }\n    .list {\n      margin: 8px 0 0 0;\n      padding-left: 18px;\n      color: var(--muted);\n    }\n    .list li { margin: 6px 0; }\n\n    /* Responsive bar width */\n    @media (max-width: 600px) {\n      .bar { width: 32px; }\n      .bar-area { height: 240px; }\n    }\n    @media (min-width: 601px) and (max-width: 880px) {\n      .bar { width: 40px; }\n    }\n\n    /* Focus visibility for keyboard users */\n    :focus-visible {\n      outline: 3px solid rgba(147, 197, 253, 0.45);\n      outline-offset: 2px;\n      border-radius: 8px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"section\">\n      <h1>Bubble Sort: Adjacent Comparisons and Swaps</h1>\n      <p>Learn how bubble sort repeatedly compares adjacent elements and “bubbles” the largest (or smallest) toward its correct end through successive passes.</p>\n    </div>\n\n    <div class=\"layout section\">\n      <div>\n        <div class=\"panel controls-grid\" role=\"group\" aria-label=\"Controls for data and sorting\">\n          <div class=\"control\">\n            <label for=\"customInput\">Custom values (comma-separated integers, 3–12 items, 1–99):</label>\n            <div class=\"btn-row\">\n              <input id=\"customInput\" type=\"text\" aria-label=\"Custom values input\" placeholder=\"e.g., 7, 3, 12, 4, 9\" />\n              <button id=\"applyCustomBtn\" class=\"primary\" aria-label=\"Apply custom values\">Apply</button>\n            </div>\n          </div>\n\n          <div class=\"btn-row\">\n            <div class=\"control\" style=\"min-width: 220px;\">\n              <label for=\"sizeRange\">Set size for random data:</label>\n              <input id=\"sizeRange\" type=\"range\" min=\"3\" max=\"12\" step=\"1\" value=\"7\" aria-label=\"Size of data set\" />\n              <div class=\"badge\">Size: <span id=\"sizeLabel\">7</span></div>\n            </div>\n            <button id=\"randomBtn\" aria-label=\"Generate random values\">Randomize</button>\n            <button id=\"resetBtn\" class=\"danger\" aria-label=\"Reset to original order\">Reset</button>\n          </div>\n\n          <div class=\"btn-row\">\n            <button id=\"playPauseBtn\" class=\"primary\" aria-label=\"Play or pause bubble sort animation\">Play</button>\n            <button id=\"stepBtn\" aria-label=\"Perform one bubble sort step\">Step</button>\n            <div class=\"control\" style=\"min-width: 220px;\">\n              <label for=\"speedRange\">Animation speed (0.5×–2×):</label>\n              <input id=\"speedRange\" type=\"range\" min=\"0.5\" max=\"2\" step=\"0.1\" value=\"1\" aria-label=\"Animation speed\" />\n              <div class=\"badge\">Speed: <span id=\"speedLabel\">1.0×</span></div>\n            </div>\n            <label class=\"toggle\" title=\"Stop early if a pass makes no swaps (still bubble sort)\">\n              <input id=\"optimizeToggle\" type=\"checkbox\" aria-label=\"Optimize with early exit\" />\n              Optimize pass (early exit)\n            </label>\n          </div>\n        </div>\n\n        <div class=\"notes panel\">\n          <h2>Learning Objective</h2>\n          <p>After interacting, you should be able to:</p>\n          <ul class=\"list\">\n            - Explain bubble sort as repeated adjacent comparisons and conditional swaps.\n            - Identify the boundary of the unsorted region shrinking each pass.\n            - Predict when a pass will perform no swaps and why that means the list is sorted.\n          </ul>\n\n          <h2>Interaction Design</h2>\n          <ul class=\"list\">\n            - Clicking Play animates the algorithm; the current adjacent pair is highlighted. If out of order, you see a swap animation; otherwise, it moves to the next pair.\n            - Clicking Step performs one compare (and swap if needed), letting you reason pair by pair.\n            - Typing custom values and clicking Apply rebuilds the bars to explore different inputs.\n            - The Optimize pass toggle demonstrates that bubble sort can stop early if a pass makes no swaps.\n            - Keyboard: Space toggles play/pause. Right Arrow steps once. R resets to the original order. Screen reader announcements describe each comparison and swap.\n          </ul>\n\n          <h2>Layout Description</h2>\n          <ul class=\"list\">\n            - A safe area of 24 px margins wraps the entire module for comfortable reading and touch targets.\n            - Controls are grouped above the visualization with at least 16 px spacing between interactive elements.\n            - The bar chart sits in a focused panel with high contrast and subtle outlines to keep attention on the current comparison.\n            - Status badges and a live narration area sit below the chart for immediate feedback without clutter.\n            - Responsive design: On narrow screens, controls stack vertically; bars shrink in width while remaining readable.\n            - Accessibility: Clear focus styles, keyboard shortcuts, ARIA labels, and a polite live region ensure inclusive interaction.\n          </ul>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"viz-wrap\" aria-label=\"Bubble sort visualization\">\n          <div class=\"viz-header\">\n            <div>\n              <h2>Visualization</h2>\n              <p>Adjacent pairs are highlighted; swaps animate. The unsorted boundary shrinks each pass.</p>\n            </div>\n            <div class=\"badge\">Pass: <span id=\"passLabel\">0</span> • Pair index: <span id=\"pairLabel\">0</span></div>\n          </div>\n\n          <div id=\"barArea\" class=\"bar-area\" role=\"img\" aria-label=\"Bars representing array values\"></div>\n\n          <div class=\"legend\" aria-label=\"Legend\">\n            <span class=\"chip\"><span class=\"dot\" style=\"background: var(--bar-base);\"></span> Unsorted</span>\n            <span class=\"chip\"><span class=\"dot\" style=\"background: var(--bar-compare);\"></span> Comparing</span>\n            <span class=\"chip\"><span class=\"dot\" style=\"background: var(--bar-sorted);\"></span> Sorted region</span>\n          </div>\n\n          <div class=\"status\">\n            <div class=\"status-row\">\n              <span class=\"badge\">Array length: <span id=\"lenLabel\">0</span></span>\n              <span class=\"badge\">Unsorted boundary (exclusive): <span id=\"boundaryLabel\">0</span></span>\n              <span class=\"badge\">Swaps this pass: <span id=\"swapCountLabel\">0</span></span>\n            </div>\n            <div id=\"announcer\" class=\"live\" aria-live=\"polite\">Ready.</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"section panel\">\n      <h2>Concept Title</h2>\n      <p>Bubble Sort: Step-by-step adjacent comparison and swap animation</p>\n    </div>\n  </div>\n\n  <script>\n    // Bubble Sort Interactive Module\n    (function() {\n      const barArea = document.getElementById('barArea');\n      const playPauseBtn = document.getElementById('playPauseBtn');\n      const stepBtn = document.getElementById('stepBtn');\n      const randomBtn = document.getElementById('randomBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const sizeRange = document.getElementById('sizeRange');\n      const sizeLabel = document.getElementById('sizeLabel');\n      const customInput = document.getElementById('customInput');\n      const applyCustomBtn = document.getElementById('applyCustomBtn');\n      const speedRange = document.getElementById('speedRange');\n      const speedLabel = document.getElementById('speedLabel');\n      const optimizeToggle = document.getElementById('optimizeToggle');\n\n      const passLabel = document.getElementById('passLabel');\n      const pairLabel = document.getElementById('pairLabel');\n      const lenLabel = document.getElementById('lenLabel');\n      const boundaryLabel = document.getElementById('boundaryLabel');\n      const swapCountLabel = document.getElementById('swapCountLabel');\n      const announcer = document.getElementById('announcer');\n\n      // State\n      let original = [];\n      let arr = [];\n      let pass = 0;     // Number of completed passes\n      let j = 0;        // Current pair index within a pass (compare j, j+1)\n      let swapsThisPass = 0;\n      let isPlaying = false;\n      let speedMultiplier = 1; // 0.5x to 2x\n      let barWidth = 48;       // Adjusted responsively\n      let compareInProgress = false;\n\n      // Utility: Random integer\n      function randi(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n      // Build initial data\n      function generateRandom(size) {\n        const values = [];\n        for (let i = 0; i < size; i++) {\n          values.push(randi(5, 95));\n        }\n        setData(values);\n      }\n\n      // Apply custom values\n      function applyCustom(valuesStr) {\n        const parts = valuesStr.split(',').map(s => s.trim()).filter(Boolean);\n        if (parts.length < 3 || parts.length > 12) {\n          say('Enter between 3 and 12 integers.');\n          return;\n        }\n        const vals = [];\n        for (const p of parts) {\n          const num = Number(p);\n          if (!Number.isInteger(num) || num < 1 || num > 99) {\n            say('All values must be integers from 1 to 99.');\n            return;\n          }\n          vals.push(num);\n        }\n        setData(vals);\n      }\n\n      // Set and render data\n      function setData(values) {\n        original = values.slice();\n        arr = values.map((v, idx) => ({ value: v, id: idx })); // id stable\n        pass = 0;\n        j = 0;\n        swapsThisPass = 0;\n        isPlaying = false;\n        playPauseBtn.textContent = 'Play';\n        playPauseBtn.setAttribute('aria-pressed', 'false');\n        sizeLabel.textContent = String(values.length);\n        lenLabel.textContent = String(values.length);\n        updateBoundaryLabel();\n        swapCountLabel.textContent = '0';\n        pairLabel.textContent = '0';\n        say('Ready.');\n        renderBars();\n      }\n\n      // Speak/announce status\n      function say(text) {\n        announcer.textContent = text;\n      }\n\n      // Render bars with positions based on current array order\n      function renderBars() {\n        barArea.innerHTML = '';\n        const n = arr.length;\n        adjustBarWidth(n);\n\n        arr.forEach((item, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar idle';\n          bar.setAttribute('data-id', item.id);\n          bar.setAttribute('data-index', String(idx));\n          bar.style.left = `${idx * (barWidth + 12)}px`; // 12px gutter\n          bar.style.height = `${Math.max(12, item.value) * 2.2}px`; // Map value to height\n          bar.textContent = item.value;\n          // Mark sorted region at the end (right side) based on pass\n          if (idx >= n - pass) {\n            bar.classList.remove('idle');\n            bar.classList.add('sorted');\n          }\n          barArea.appendChild(bar);\n        });\n\n        // Stretch area width to contain bars\n        const totalWidth = n * barWidth + (n - 1) * 12;\n        barArea.style.minWidth = totalWidth + 'px';\n\n        updateLabels();\n      }\n\n      function adjustBarWidth(n) {\n        // Responsive width depending on viewport and available width\n        const maxW = barArea.clientWidth || barArea.offsetWidth || 600;\n        const gutter = 12;\n        const target = Math.max(28, Math.min(56, Math.floor((maxW - (n - 1) * gutter) / n)));\n        barWidth = target;\n        // Expose swap duration to CSS via variable\n        const swapMs = Math.round(450 * speedMultiplier);\n        barArea.style.setProperty('--swap-ms', `${swapMs}ms`);\n      }\n\n      // Update positions and classes after a change\n      function updateBarPositions() {\n        const n = arr.length;\n        adjustBarWidth(n);\n        const bars = barArea.querySelectorAll('.bar');\n        bars.forEach((bar) => {\n          const idx = Number(bar.getAttribute('data-index'));\n          // Find current index of this bar's id in arr\n          const id = Number(bar.getAttribute('data-id'));\n          const currentIndex = arr.findIndex(it => it.id === id);\n          bar.setAttribute('data-index', String(currentIndex));\n          bar.style.left = `${currentIndex * (barWidth + 12)}px`;\n          // Update sorted marking\n          if (currentIndex >= n - pass) {\n            bar.classList.remove('idle');\n            bar.classList.remove('comparing');\n            bar.classList.add('sorted');\n          } else {\n            if (!bar.classList.contains('comparing')) {\n              bar.classList.remove('sorted');\n              bar.classList.add('idle');\n            }\n          }\n        });\n        updateLabels();\n      }\n\n      // Labels for pass/pair/boundary\n      function updateLabels() {\n        passLabel.textContent = String(pass);\n        pairLabel.textContent = String(j);\n        updateBoundaryLabel();\n      }\n\n      function updateBoundaryLabel() {\n        const boundaryExclusive = Math.max(0, arr.length - pass);\n        boundaryLabel.textContent = String(boundaryExclusive);\n      }\n\n      // Highlight current pair\n      function highlightPair(idx) {\n        clearComparing();\n        const a = barArea.querySelector(`.bar[data-index=\"${idx}\"]`);\n        const b = barArea.querySelector(`.bar[data-index=\"${idx+1}\"]`);\n        if (a) {\n          a.classList.remove('idle');\n          a.classList.add('comparing');\n        }\n        if (b) {\n          b.classList.remove('idle');\n          b.classList.add('comparing');\n        }\n      }\n\n      function clearComparing() {\n        const bars = barArea.querySelectorAll('.bar.comparing');\n        bars.forEach(b => {\n          b.classList.remove('comparing');\n          const idx = Number(b.getAttribute('data-index'));\n          if (idx < arr.length - pass) {\n            b.classList.add('idle');\n          } else {\n            b.classList.add('sorted');\n          }\n        });\n      }\n\n      // Perform one bubble sort compare (and swap if needed)\n      async function step() {\n        if (compareInProgress) return;\n        const n = arr.length;\n        if (pass >= n - 1) {\n          say('Sorted: all passes complete.');\n          isPlaying = false;\n          playPauseBtn.textContent = 'Play';\n          return;\n        }\n\n        compareInProgress = true;\n\n        // If j reaches boundary-1, finish pass\n        const boundaryExclusive = n - pass;\n        if (j >= boundaryExclusive - 1) {\n          // End of pass: apply optimization if enabled\n          if (optimizeToggle.checked && swapsThisPass === 0) {\n            pass = n - 1; // Jump to done\n            updateBarPositions();\n            say('No swaps this pass. Early exit: array is sorted.');\n            compareInProgress = false;\n            isPlaying = false;\n            playPauseBtn.textContent = 'Play';\n            return;\n          }\n          pass += 1;\n          swapsThisPass = 0;\n          j = 0;\n          updateBarPositions();\n          say(`Pass ${pass} begins. Unsorted boundary now at index ${n - pass}.`);\n          compareInProgress = false;\n          // Continue automatically if playing\n          if (isPlaying) step();\n          return;\n        }\n\n        // Highlight pair j, j+1\n        highlightPair(j);\n        const leftVal = arr[j].value;\n        const rightVal = arr[j+1].value;\n        say(`Compare ${leftVal} and ${rightVal}. ${leftVal > rightVal ? 'Out of order: swap.' : 'In order: no swap.'}`);\n        // Show compare highlight\n        await wait(300 * speedMultiplier);\n\n        // Swap if out of order\n        if (leftVal > rightVal) {\n          // Swap in data\n          const tmp = arr[j];\n          arr[j] = arr[j+1];\n          arr[j+1] = tmp;\n          swapsThisPass += 1;\n          swapCountLabel.textContent = String(swapsThisPass);\n          // Animate positions\n          updateBarPositions();\n          await wait(Math.max(350, 450 * speedMultiplier));\n        }\n\n        clearComparing();\n        j += 1;\n        updateLabels();\n\n        compareInProgress = false;\n\n        // Continue automatically if playing\n        if (isPlaying) step();\n      }\n\n      function wait(ms) {\n        return new Promise(res => setTimeout(res, ms));\n      }\n\n      // Controls\n      playPauseBtn.addEventListener('click', () => {\n        isPlaying = !isPlaying;\n        playPauseBtn.textContent = isPlaying ? 'Pause' : 'Play';\n        playPauseBtn.setAttribute('aria-pressed', isPlaying ? 'true' : 'false');\n        if (isPlaying) step();\n      });\n\n      stepBtn.addEventListener('click', () => {\n        step();\n      });\n\n      randomBtn.addEventListener('click', () => {\n        generateRandom(Number(sizeRange.value));\n      });\n\n      resetBtn.addEventListener('click', () => {\n        setData(original.slice());\n      });\n\n      sizeRange.addEventListener('input', () => {\n        sizeLabel.textContent = sizeRange.value;\n      });\n\n      applyCustomBtn.addEventListener('click', () => {\n        applyCustom(customInput.value);\n      });\n\n      customInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          applyCustom(customInput.value);\n        }\n      });\n\n      speedRange.addEventListener('input', () => {\n        speedMultiplier = Number(speedRange.value);\n        speedLabel.textContent = `${speedMultiplier.toFixed(1)}×`;\n        // Update CSS var for swap duration\n        barArea.style.setProperty('--swap-ms', `${Math.round(450 * speedMultiplier)}ms`);\n      });\n\n      // Keyboard shortcuts\n      document.addEventListener('keydown', (e) => {\n        if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA')) return;\n        if (e.code === 'Space') {\n          e.preventDefault();\n          playPauseBtn.click();\n        } else if (e.code === 'ArrowRight') {\n          e.preventDefault();\n          stepBtn.click();\n        } else if (e.key.toLowerCase() === 'r') {\n          e.preventDefault();\n          resetBtn.click();\n        }\n      });\n\n      // Initialize\n      function init() {\n        speedMultiplier = Number(speedRange.value);\n        speedLabel.textContent = `${speedMultiplier.toFixed(1)}×`;\n        generateRandom(Number(sizeRange.value));\n        window.addEventListener('resize', () => {\n          adjustBarWidth(arr.length);\n          updateBarPositions();\n        });\n      }\n\n      init();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Heap (Min/Max)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a bubble sort interactive module covering data setup (random/custom/reset), play/pause control, manual stepping, comparison and swap animations, per-pass transitions with optional early exit optimization, and sorted completion.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "initialize_module",
          "on": {
            "INIT_COMPLETE": "paused"
          }
        },
        {
          "name": "paused",
          "onEnter": "set_play_false_update_button",
          "on": {
            "PLAY_TOGGLE": "playing",
            "STEP_REQUEST": "comparing",
            "RANDOMIZE": "rebuilding_data",
            "RESET": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "APPLY_CUSTOM_INVALID": "input_error",
            "ALL_PASSES_DONE": "done"
          }
        },
        {
          "name": "playing",
          "onEnter": "set_play_true_update_button_start_autostep",
          "onExit": "set_play_false_update_button",
          "on": {
            "PLAY_TOGGLE": "paused",
            "STEP_REQUEST": "comparing",
            "RANDOMIZE": "rebuilding_data",
            "RESET": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "APPLY_CUSTOM_INVALID": "input_error",
            "AUTO_CONTINUE": "comparing",
            "ALL_PASSES_DONE": "done"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_pair_and_announce",
          "on": {
            "SWAP_NEEDED": "swapping",
            "NO_SWAP": "advancing_pair",
            "PLAY_TOGGLE": "paused",
            "RANDOMIZE": "rebuilding_data",
            "RESET": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "APPLY_CUSTOM_INVALID": "input_error"
          }
        },
        {
          "name": "swapping",
          "onEnter": "swap_elements_and_animate",
          "on": {
            "SWAP_ANIMATION_COMPLETE": "advancing_pair",
            "PLAY_TOGGLE": "paused",
            "RANDOMIZE": "rebuilding_data",
            "RESET": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "APPLY_CUSTOM_INVALID": "input_error"
          }
        },
        {
          "name": "advancing_pair",
          "onEnter": "clear_highlight_increment_j_update_labels",
          "on": {
            "PASS_END": "pass_transition",
            "AUTO_CONTINUE": "comparing",
            "MANUAL_STEP_DONE": "paused",
            "PLAY_TOGGLE": "paused",
            "RANDOMIZE": "rebuilding_data",
            "RESET": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "APPLY_CUSTOM_INVALID": "input_error"
          }
        },
        {
          "name": "pass_transition",
          "onEnter": "end_of_pass_update_or_early_exit_announce",
          "on": {
            "EARLY_EXIT": "done",
            "AUTO_CONTINUE": "comparing",
            "PAUSE": "paused",
            "RANDOMIZE": "rebuilding_data",
            "RESET": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "APPLY_CUSTOM_INVALID": "input_error"
          }
        },
        {
          "name": "rebuilding_data",
          "onEnter": "set_data_and_render_ready",
          "on": {
            "DATA_READY": "paused"
          }
        },
        {
          "name": "input_error",
          "onEnter": "announce_input_error",
          "on": {
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "RESET": "rebuilding_data",
            "RANDOMIZE": "rebuilding_data"
          }
        },
        {
          "name": "done",
          "onEnter": "announce_sorted_and_reset_play_button",
          "on": {
            "RESET": "rebuilding_data",
            "RANDOMIZE": "rebuilding_data",
            "APPLY_CUSTOM_VALID": "rebuilding_data",
            "PLAY_TOGGLE": "done",
            "STEP_REQUEST": "done"
          }
        }
      ],
      "events": [
        "INIT_COMPLETE",
        "PLAY_TOGGLE",
        "STEP_REQUEST",
        "RANDOMIZE",
        "RESET",
        "APPLY_CUSTOM_VALID",
        "APPLY_CUSTOM_INVALID",
        "AUTO_CONTINUE",
        "SWAP_NEEDED",
        "NO_SWAP",
        "SWAP_ANIMATION_COMPLETE",
        "PASS_END",
        "EARLY_EXIT",
        "DATA_READY",
        "ALL_PASSES_DONE",
        "MANUAL_STEP_DONE",
        "PAUSE",
        "SPEED_CHANGE",
        "SIZE_ADJUST",
        "OPTIMIZE_TOGGLE",
        "RESIZE"
      ],
      "notes": "Initialization sets speed from the slider and generates a random dataset based on sizeRange, then renders bars and announces 'Ready.' Keyboard shortcuts: Space emits PLAY_TOGGLE; ArrowRight emits STEP_REQUEST; 'R' emits RESET. Data rebuilding events (RANDOMIZE, RESET, APPLY_CUSTOM_VALID) all flow through rebuilding_data to reinitialize algorithm (pass=0, j=0, swapsThisPass=0, isPlaying=false), rerender bars, update labels, and set the play button to 'Play'. The comparing state highlights bars j and j+1 and announces the comparison; after a delay, it emits SWAP_NEEDED if arr[j].value > arr[j+1].value, else NO_SWAP. The swapping state swaps data elements, increments swapsThisPass, updates positions, and waits for the animation, then continues. The advancing_pair state clears compare highlight, increments j, and updates labels; it emits PASS_END when j reaches boundaryExclusive-1 (n-pass-1), otherwise emits AUTO_CONTINUE if isPlaying is true or MANUAL_STEP_DONE if not. The pass_transition state handles end-of-pass bookkeeping: if optimizeToggle is checked and swapsThisPass===0 it emits EARLY_EXIT to reach done; otherwise it increments pass, resets swapsThisPass and j, updates positions, announces the new pass, and then emits AUTO_CONTINUE to comparing if isPlaying, else PAUSE to paused. Completion occurs when pass >= n-1 (ALL_PASSES_DONE), or via EARLY_EXIT; on entering done, it announces completion and ensures play is off. PLAY_TOGGLE while comparing/swapping/advancing_pair takes effect after the current step finishes (compareInProgress guards reentry); the FSM models this by allowing PLAY_TOGGLE to target paused, with implementation deferring the transition until after the step. SPEED_CHANGE, SIZE_ADJUST, OPTIMIZE_TOGGLE, and RESIZE do not change state: SPEED_CHANGE updates speedMultiplier and CSS swap duration; SIZE_ADJUST updates the size label only; OPTIMIZE_TOGGLE flips a flag used in pass_transition; RESIZE triggers adjustBarWidth and updateBarPositions in-place. The announcer (ARIA live region) is updated on data setup, each comparison, swap outcome, pass start, early exit, and completion."
    }
  },
  {
    "id": "7bc077e0-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:04.581Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Array",
    "answer": {
      "role": "assistant",
      "content": "Below is a complete interactive module plan followed by a self-contained HTML/CSS/JS implementation you can save as a single .html file and open in any modern browser.\n\nConcept Title\n- Bubble Sort: Adjacent Comparisons and Swaps\n\nLearning Objective\n- After interacting with this module, users should be able to:\n  - Explain how bubble sort works through repeated adjacent comparisons and swaps.\n  - Observe passes, comparisons, and swaps, and identify when the array is fully sorted.\n  - Control the sorting process (play, pause, step) and experiment with different arrays, sizes, and speeds.\n\nInteraction Design\n- Users can:\n  - Enter a custom array (comma-separated numbers) and apply it.\n  - Shuffle to generate a random array; adjust array size with a slider; choose ascending or descending order.\n  - Control the sorting:\n    - Play/Pause: Start or stop the animated bubble sort.\n    - Step: Execute the next discrete action (compare, swap, or mark sorted).\n    - Reset: Return to the initial array configuration.\n  - Adjust speed with a slider.\n- Visual feedback and animations:\n  - Bars represent array values by height, with value labels for readability.\n  - During a comparison, the two bars are highlighted with distinct colors.\n  - On a swap, bars animate horizontally to exchange positions.\n  - After each pass, the last element in place is marked as “sorted” with a green tint.\n  - A live status area narrates each action and updates counts for comparisons and swaps.\n- Accessibility:\n  - All controls are keyboard-accessible and have clear focus styles.\n  - A live region announces each compare/swap/mark event.\n  - Numeric labels on bars aid color-blind users.\n  - Keyboard shortcuts: Space (Play/Pause), S (Step), R (Reset), H (Shuffle).\n\nLayout Description\n- Spatial organization:\n  - Safe area margins: 24 px padding on the main wrapper around the entire viewport.\n  - Top header contains the title and a short description of bubble sort behavior.\n  - Controls are placed below the header in a responsive row with at least 16 px gap between interactive elements.\n  - Visualization area centered beneath controls, respecting safe margins, with bars positioned on a single row. It scales with viewport width.\n  - A status and event log panel sits below the visualization to maintain clarity and progress feedback.\n- Minimum spacing:\n  - Controls use a 16 px gap consistently; buttons and inputs have 16+ px spacing between them.\n- Responsiveness:\n  - Controls wrap on narrow screens; visualization adapts bar width dynamically.\n  - Text sizes and hit areas remain readable on mobile.\n- Clarity, focus, balance:\n  - Limited number of controls in a single module.\n  - Color coding for compare/swap/sorted states; numeric labels remain visible.\n  - Live narration and counts remain close to the visualization.\n\n------------------------------------------\nSave the following as bubble-sort-module.html\n------------------------------------------\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Bubble Sort: Adjacent Comparisons and Swaps</title>\n<style>\n  :root {\n    --bg: #0f172a;           /* slate-900 */\n    --panel: #111827;        /* gray-900 */\n    --text: #e5e7eb;         /* gray-200 */\n    --muted: #9ca3af;        /* gray-400 */\n    --border: #1f2937;       /* gray-800 */\n\n    --bar: #3b82f6;          /* blue-500 */\n    --bar-label: #ffffff;\n    --compare-a: #06b6d4;    /* cyan-500 */\n    --compare-b: #a78bfa;    /* violet-400 */\n    --swap: #f59e0b;         /* amber-500 */\n    --sorted: #22c55e;       /* green-500 */\n    --accent: #10b981;       /* emerald-500 */\n\n    --focus: #f97316;        /* orange-500 */\n    --gap: 16px;\n    --safe: 24px;\n  }\n\n  html, body {\n    background: var(--bg);\n    color: var(--text);\n    margin: 0;\n    font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n  }\n\n  .wrapper {\n    padding: var(--safe);\n    box-sizing: border-box;\n    max-width: 1200px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    margin: 0 0 8px 0;\n    font-size: 24px;\n    line-height: 1.3;\n  }\n\n  .subtitle {\n    color: var(--muted);\n    font-size: 14px;\n    margin-bottom: 16px;\n  }\n\n  .controls {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--gap);\n    align-items: flex-end;\n    margin-bottom: 16px;\n  }\n\n  .group {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    min-width: 220px;\n  }\n\n  .group.inline {\n    flex-direction: row;\n    align-items: center;\n    gap: var(--gap);\n    min-width: auto;\n  }\n\n  label {\n    font-size: 13px;\n    color: var(--muted);\n  }\n\n  input[type=\"text\"],\n  input[type=\"number\"],\n  input[type=\"range\"],\n  select,\n  button {\n    background: var(--panel);\n    color: var(--text);\n    border: 1px solid var(--border);\n    border-radius: 8px;\n    padding: 10px 12px;\n    font-size: 14px;\n    box-sizing: border-box;\n    min-height: 40px;\n  }\n\n  input[type=\"range\"] {\n    padding: 6px 0;\n    height: 40px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n  button:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n  button:focus,\n  input:focus,\n  select:focus {\n    outline: 2px solid var(--focus);\n    outline-offset: 2px;\n  }\n\n  .vis-panel {\n    background: var(--panel);\n    border: 1px solid var(--border);\n    border-radius: 12px;\n    padding: 16px;\n  }\n\n  .vis-area {\n    position: relative;\n    height: 260px;\n    overflow: hidden;\n    border-radius: 8px;\n    background: linear-gradient(180deg, #0b1329 0%, #0b1329 80%, #0a1125 100%);\n  }\n\n  .bars {\n    position: relative;\n    height: 100%;\n  }\n\n  .bar {\n    position: absolute;\n    bottom: 0;\n    width: 40px; /* will be updated dynamically */\n    background: var(--bar);\n    border-radius: 8px 8px 0 0;\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    transition: left 300ms cubic-bezier(.2,.7,.3,1), height 250ms ease, background-color 150ms ease, transform 250ms ease;\n  }\n\n  .bar.compare-a {\n    background: var(--compare-a);\n    box-shadow: 0 0 0 2px rgba(6,182,212,0.35) inset;\n  }\n  .bar.compare-b {\n    background: var(--compare-b);\n    box-shadow: 0 0 0 2px rgba(167,139,250,0.35) inset;\n  }\n  .bar.swapping {\n    background: var(--swap);\n    transform: translateY(-6px);\n  }\n  .bar.sorted {\n    background: var(--sorted);\n  }\n\n  .bar .label {\n    color: var(--bar-label);\n    font-weight: 600;\n    font-size: 12px;\n    padding: 6px 0 8px;\n    user-select: none;\n    pointer-events: none;\n    text-shadow: 0 1px 2px rgba(0,0,0,0.4);\n  }\n\n  .legend {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 12px;\n    margin-top: 12px;\n    font-size: 12px;\n    color: var(--muted);\n  }\n  .legend .key {\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n  }\n  .legend .dot {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    display: inline-block;\n    border: 1px solid var(--border);\n  }\n  .legend .dot.compare-a { background: var(--compare-a); }\n  .legend .dot.compare-b { background: var(--compare-b); }\n  .legend .dot.swap { background: var(--swap); }\n  .legend .dot.sorted { background: var(--sorted); }\n  .legend .dot.base { background: var(--bar); }\n\n  .status {\n    margin-top: 16px;\n    display: grid;\n    gap: 8px;\n    grid-template-columns: repeat(3, minmax(180px, 1fr));\n  }\n  .stat {\n    background: var(--panel);\n    border: 1px solid var(--border);\n    border-radius: 8px;\n    padding: 10px 12px;\n    min-height: 40px;\n  }\n  .stat strong {\n    display: block;\n    font-size: 12px;\n    color: var(--muted);\n    margin-bottom: 4px;\n  }\n  .stat .value {\n    font-size: 16px;\n    font-weight: 600;\n    color: var(--text);\n  }\n\n  .announce {\n    margin-top: 16px;\n    background: var(--panel);\n    border: 1px solid var(--border);\n    border-radius: 8px;\n    padding: 12px;\n    font-size: 14px;\n    min-height: 48px;\n  }\n\n  .footer-note {\n    margin-top: 16px;\n    font-size: 12px;\n    color: var(--muted);\n  }\n\n  @media (max-width: 720px) {\n    .status {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n  @media (max-width: 480px) {\n    .status {\n      grid-template-columns: 1fr;\n    }\n    .group { min-width: 100%; }\n  }\n</style>\n</head>\n<body>\n  <div class=\"wrapper\">\n    <header>\n      <h1>Bubble Sort: Adjacent Comparisons and Swaps</h1>\n      <p class=\"subtitle\">Bubble sort repeatedly compares adjacent elements and swaps them when out of order. Each pass pushes the largest (or smallest) remaining element to its final position.</p>\n    </header>\n\n    <section class=\"controls\" aria-label=\"Controls\">\n      <div class=\"group\">\n        <label for=\"arrayInput\">Custom array (comma-separated numbers)</label>\n        <div style=\"display:flex; gap:16px;\">\n          <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 5, 3, 8, 2, 9\" aria-label=\"Custom array input\" />\n          <button id=\"applyArrayBtn\" aria-label=\"Apply custom array\">Apply</button>\n        </div>\n        <div id=\"arrayError\" style=\"color:#fca5a5; font-size:12px; min-height: 16px;\"></div>\n      </div>\n\n      <div class=\"group inline\">\n        <div>\n          <label for=\"sizeSlider\">Size</label>\n          <input id=\"sizeSlider\" type=\"range\" min=\"5\" max=\"20\" step=\"1\" value=\"10\" aria-label=\"Array size\" />\n        </div>\n        <div>\n          <label for=\"speedSlider\">Speed</label>\n          <input id=\"speedSlider\" type=\"range\" min=\"0.3\" max=\"3\" step=\"0.1\" value=\"1\" aria-label=\"Animation speed\" />\n        </div>\n        <div>\n          <label for=\"orderSelect\">Order</label>\n          <select id=\"orderSelect\" aria-label=\"Sort order\">\n            <option value=\"asc\">Ascending</option>\n            <option value=\"desc\">Descending</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"group inline\">\n        <button id=\"playPauseBtn\" aria-label=\"Play or pause sorting\">Play</button>\n        <button id=\"stepBtn\" aria-label=\"Step one action\">Step</button>\n        <button id=\"resetBtn\" aria-label=\"Reset to initial array\">Reset</button>\n        <button id=\"shuffleBtn\" aria-label=\"Shuffle new random array\">Shuffle</button>\n      </div>\n    </section>\n\n    <section class=\"vis-panel\" aria-label=\"Visualization\">\n      <div class=\"vis-area\">\n        <div id=\"bars\" class=\"bars\" role=\"img\" aria-label=\"Array bars visualization\"></div>\n      </div>\n      <div class=\"legend\" aria-hidden=\"false\">\n        <span class=\"key\"><span class=\"dot base\"></span> Base</span>\n        <span class=\"key\"><span class=\"dot compare-a\"></span> Compare A</span>\n        <span class=\"key\"><span class=\"dot compare-b\"></span> Compare B</span>\n        <span class=\"key\"><span class=\"dot swap\"></span> Swapping</span>\n        <span class=\"key\"><span class=\"dot sorted\"></span> Sorted</span>\n      </div>\n\n      <div class=\"status\">\n        <div class=\"stat\" aria-live=\"polite\">\n          <strong>Comparisons</strong>\n          <div id=\"compCount\" class=\"value\">0</div>\n        </div>\n        <div class=\"stat\" aria-live=\"polite\">\n          <strong>Swaps</strong>\n          <div id=\"swapCount\" class=\"value\">0</div>\n        </div>\n        <div class=\"stat\" aria-live=\"polite\">\n          <strong>Pass</strong>\n          <div id=\"passCount\" class=\"value\">0</div>\n        </div>\n      </div>\n\n      <div id=\"liveMsg\" class=\"announce\" aria-live=\"assertive\">Ready. Enter an array or press Shuffle to begin.</div>\n      <div class=\"footer-note\">\n        Keyboard shortcuts: Space = Play/Pause, S = Step, R = Reset, H = Shuffle.\n      </div>\n    </section>\n  </div>\n\n<script>\n(() => {\n  // State\n  const barsContainer = document.getElementById('bars');\n  const arrayInput = document.getElementById('arrayInput');\n  const applyArrayBtn = document.getElementById('applyArrayBtn');\n  const arrayError = document.getElementById('arrayError');\n  const sizeSlider = document.getElementById('sizeSlider');\n  const speedSlider = document.getElementById('speedSlider');\n  const orderSelect = document.getElementById('orderSelect');\n\n  const playPauseBtn = document.getElementById('playPauseBtn');\n  const stepBtn = document.getElementById('stepBtn');\n  const resetBtn = document.getElementById('resetBtn');\n  const shuffleBtn = document.getElementById('shuffleBtn');\n\n  const compCountEl = document.getElementById('compCount');\n  const swapCountEl = document.getElementById('swapCount');\n  const passCountEl = document.getElementById('passCount');\n  const liveMsg = document.getElementById('liveMsg');\n\n  const BASE_COMPARE_MS = 600;\n  const BASE_SWAP_MS = 420;\n  const BASE_MARK_MS = 300;\n\n  let initialArray = [];\n  let dataArray = [];\n  let bars = []; // [{el, value}]\n  let gen = null;\n  let running = false;\n  let comparisons = 0;\n  let swaps = 0;\n  let pass = 0;\n  let finished = false;\n\n  // Utilities\n  function randInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function parseArrayInput(str) {\n    const parts = str.split(',').map(s => s.trim()).filter(Boolean);\n    if (parts.length === 0) return null;\n    const nums = [];\n    for (const p of parts) {\n      if (!/^-?\\d+(\\.\\d+)?$/.test(p)) return null;\n      const n = parseInt(p, 10);\n      if (!Number.isFinite(n)) return null;\n      if (Math.abs(n) > 9999) return null;\n      nums.push(n);\n      if (nums.length > 30) return null;\n    }\n    return nums;\n  }\n\n  function announce(msg) {\n    liveMsg.textContent = msg;\n  }\n\n  function updateCounters() {\n    compCountEl.textContent = String(comparisons);\n    swapCountEl.textContent = String(swaps);\n    passCountEl.textContent = String(pass);\n  }\n\n  function createRandomArray(size) {\n    const arr = [];\n    for (let i = 0; i < size; i++) {\n      arr.push(randInt(1, 99));\n    }\n    return arr;\n  }\n\n  function maxValue(arr) {\n    return arr.reduce((m, v) => Math.max(m, Math.abs(v)), 1);\n  }\n\n  function clearBars() {\n    barsContainer.innerHTML = '';\n    bars = [];\n  }\n\n  function renderBars(arr) {\n    clearBars();\n    const n = arr.length;\n    // Compute dynamic sizes\n    const containerWidth = barsContainer.clientWidth || barsContainer.getBoundingClientRect().width;\n    const gap = 8;\n    const minBarWidth = 28;\n    const barWidth = Math.max(minBarWidth, Math.floor((containerWidth - gap * (n - 1)) / n));\n    const maxH = barsContainer.clientHeight || 260;\n    const maxVal = maxValue(arr);\n    for (let i = 0; i < n; i++) {\n      const value = arr[i];\n      const el = document.createElement('div');\n      el.className = 'bar';\n      el.setAttribute('role', 'img');\n      el.setAttribute('aria-label', `Value ${value}`);\n      el.style.width = barWidth + 'px';\n      const left = i * (barWidth + gap);\n      el.style.left = left + 'px';\n      const h = Math.max(40, Math.floor(40 + (Math.abs(value) / maxVal) * (maxH - 60)));\n      el.style.height = h + 'px';\n      const label = document.createElement('div');\n      label.className = 'label';\n      label.textContent = String(value);\n      el.appendChild(label);\n      barsContainer.appendChild(el);\n      bars.push({ el, value });\n    }\n  }\n\n  function updatePositions() {\n    // Reflow positions for all bars according to their index in the bars array\n    const n = bars.length;\n    const containerWidth = barsContainer.clientWidth || barsContainer.getBoundingClientRect().width;\n    const gap = 8;\n    const minBarWidth = 28;\n    const barWidth = Math.max(minBarWidth, Math.floor((containerWidth - gap * (n - 1)) / n));\n    for (let i = 0; i < n; i++) {\n      const left = i * (barWidth + gap);\n      const b = bars[i];\n      b.el.style.width = barWidth + 'px';\n      b.el.style.left = left + 'px';\n    }\n  }\n\n  function updateHeights() {\n    const maxH = barsContainer.clientHeight || 260;\n    const maxVal = maxValue(bars.map(b => b.value));\n    for (const b of bars) {\n      const h = Math.max(40, Math.floor(40 + (Math.abs(b.value) / maxVal) * (maxH - 60)));\n      b.el.style.height = h + 'px';\n      b.el.querySelector('.label').textContent = String(b.value);\n      b.el.setAttribute('aria-label', `Value ${b.value}`);\n    }\n  }\n\n  function clearStyles() {\n    for (const b of bars) {\n      b.el.classList.remove('compare-a', 'compare-b', 'swapping');\n    }\n  }\n\n  function markSortedIndex(idx) {\n    const b = bars[idx];\n    if (b) b.el.classList.add('sorted');\n  }\n\n  function clearSortedMarks() {\n    for (const b of bars) {\n      b.el.classList.remove('sorted');\n    }\n  }\n\n  function* bubbleSteps(array, asc = true) {\n    // Work on a copy to determine actions; visualization will apply swaps.\n    const arr = array.slice();\n    const n = arr.length;\n    let localPass = 0;\n    for (let pass = 0; pass < n - 1; pass++) {\n      let swappedThisPass = false;\n      localPass = pass + 1;\n      for (let j = 0; j < n - 1 - pass; j++) {\n        yield { type: 'compare', i: j, j: j + 1, pass: localPass, values: [arr[j], arr[j + 1]] };\n        const outOfOrder = asc ? arr[j] > arr[j + 1] : arr[j] < arr[j + 1];\n        if (outOfOrder) {\n          // perform swap in local copy so subsequent compares use updated values\n          const tmp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = tmp;\n          yield { type: 'swap', i: j, j: j + 1, pass: localPass, values: [arr[j], arr[j + 1]] };\n          swappedThisPass = true;\n        }\n      }\n      yield { type: 'markSorted', index: n - 1 - pass, pass: localPass };\n      if (!swappedThisPass) {\n        // Remaining head is already sorted\n        yield { type: 'finish', pass: localPass };\n        break;\n      }\n    }\n  }\n\n  function resetCounters() {\n    comparisons = 0;\n    swaps = 0;\n    pass = 0;\n    updateCounters();\n  }\n\n  function resetToInitial() {\n    running = false;\n    finished = false;\n    playPauseBtn.textContent = 'Play';\n    clearSortedMarks();\n    clearStyles();\n    dataArray = initialArray.slice();\n    renderBars(dataArray);\n    gen = bubbleSteps(dataArray, orderSelect.value === 'asc');\n    resetCounters();\n    announce('Reset. Ready to sort.');\n    enableControls(true);\n  }\n\n  function enableControls(enabled) {\n    stepBtn.disabled = !enabled;\n    resetBtn.disabled = false; // reset generally stays enabled\n    shuffleBtn.disabled = !enabled;\n    applyArrayBtn.disabled = !enabled;\n    sizeSlider.disabled = !enabled;\n    orderSelect.disabled = !enabled;\n    arrayInput.disabled = !enabled;\n  }\n\n  function setRunning(isRun) {\n    running = isRun;\n    playPauseBtn.textContent = isRun ? 'Pause' : 'Play';\n    stepBtn.disabled = isRun;\n    shuffleBtn.disabled = isRun;\n    applyArrayBtn.disabled = isRun;\n    sizeSlider.disabled = isRun;\n    orderSelect.disabled = isRun;\n    arrayInput.disabled = isRun;\n  }\n\n  function delay(ms) {\n    return new Promise(res => setTimeout(res, ms));\n  }\n\n  function getSpeedMultiplier() {\n    const s = parseFloat(speedSlider.value || '1');\n    return Math.max(0.3, Math.min(3, s));\n  }\n\n  async function processEvent(ev) {\n    const speed = getSpeedMultiplier();\n    if (ev.type === 'compare') {\n      comparisons++;\n      updateCounters();\n      clearStyles();\n      const a = bars[ev.i];\n      const b = bars[ev.j];\n      if (a && b) {\n        a.el.classList.add('compare-a');\n        b.el.classList.add('compare-b');\n        announce(`Pass ${ev.pass}: Compare indices ${ev.i} (${a.value}) and ${ev.j} (${b.value}).`);\n      }\n      await delay(Math.floor(BASE_COMPARE_MS / speed));\n    } else if (ev.type === 'swap') {\n      swaps++;\n      updateCounters();\n      const i = ev.i;\n      const j = ev.j;\n      const leftBar = bars[i];\n      const rightBar = bars[j];\n      clearStyles();\n      if (leftBar && rightBar) {\n        leftBar.el.classList.add('swapping');\n        rightBar.el.classList.add('swapping');\n        announce(`Swap: Move ${leftBar.value} and ${rightBar.value}.`);\n      }\n      // Perform swap in bars array\n      const tmp = bars[i];\n      bars[i] = bars[j];\n      bars[j] = tmp;\n      // Also swap their values in dataArray for consistency\n      const tval = dataArray[i];\n      dataArray[i] = dataArray[j];\n      dataArray[j] = tval;\n\n      updatePositions();\n      updateHeights();\n\n      await delay(Math.floor(BASE_SWAP_MS / speed));\n      clearStyles();\n    } else if (ev.type === 'markSorted') {\n      pass = ev.pass;\n      updateCounters();\n      markSortedIndex(ev.index);\n      announce(`End of pass ${ev.pass}: index ${ev.index} is in final position.`);\n      await delay(Math.floor(BASE_MARK_MS / speed));\n    } else if (ev.type === 'finish') {\n      pass = ev.pass;\n      updateCounters();\n      // Mark remaining as sorted if not already\n      for (let k = 0; k < bars.length; k++) {\n        bars[k].el.classList.add('sorted');\n      }\n      announce(`Array sorted after pass ${ev.pass}.`);\n      finished = true;\n      setRunning(false);\n      enableControls(true);\n    }\n  }\n\n  async function playLoop() {\n    setRunning(true);\n    while (running) {\n      const { value, done } = gen.next();\n      if (done) {\n        finished = true;\n        announce('Sorting complete.');\n        setRunning(false);\n        enableControls(true);\n        break;\n      }\n      await processEvent(value);\n      // Keep looping unless paused\n    }\n  }\n\n  function initWithRandom(size) {\n    initialArray = createRandomArray(size);\n    resetToInitial();\n  }\n\n  // Event bindings\n  applyArrayBtn.addEventListener('click', () => {\n    const val = arrayInput.value.trim();\n    arrayError.textContent = '';\n    const arr = parseArrayInput(val);\n    if (!arr) {\n      arrayError.textContent = 'Invalid input. Use comma-separated integers (up to 30 values, abs ≤ 9999).';\n      return;\n    }\n    initialArray = arr.slice();\n    finished = false;\n    resetToInitial();\n  });\n\n  sizeSlider.addEventListener('input', () => {\n    // Live regenerate on size change only if not running\n    if (running) return;\n    const size = parseInt(sizeSlider.value, 10);\n    initialArray = createRandomArray(size);\n    resetToInitial();\n  });\n\n  orderSelect.addEventListener('change', () => {\n    if (running) return;\n    gen = bubbleSteps(dataArray, orderSelect.value === 'asc');\n    clearSortedMarks();\n    announce(`Order set to ${orderSelect.value === 'asc' ? 'ascending' : 'descending'}. Ready.`);\n  });\n\n  playPauseBtn.addEventListener('click', async () => {\n    if (!running && finished) {\n      // If finished, reset generator to allow replay\n      gen = bubbleSteps(dataArray, orderSelect.value === 'asc');\n      finished = false;\n      clearSortedMarks();\n      resetCounters();\n    }\n    if (running) {\n      setRunning(false);\n      announce('Paused.');\n      return;\n    }\n    playLoop();\n  });\n\n  stepBtn.addEventListener('click', async () => {\n    if (running) return;\n    const { value, done } = gen.next();\n    if (done) {\n      finished = true;\n      announce('Sorting complete.');\n      return;\n    }\n    await processEvent(value);\n  });\n\n  resetBtn.addEventListener('click', () => {\n    resetToInitial();\n  });\n\n  shuffleBtn.addEventListener('click', () => {\n    if (running) return;\n    const size = parseInt(sizeSlider.value || '10', 10);\n    initialArray = createRandomArray(size);\n    resetToInitial();\n    announce('Shuffled a new random array.');\n  });\n\n  // Keyboard shortcuts\n  window.addEventListener('keydown', (e) => {\n    if (e.key === ' ') {\n      e.preventDefault();\n      playPauseBtn.click();\n    } else if (e.key.toLowerCase() === 's') {\n      e.preventDefault();\n      stepBtn.click();\n    } else if (e.key.toLowerCase() === 'r') {\n      e.preventDefault();\n      resetBtn.click();\n    } else if (e.key.toLowerCase() === 'h') {\n      e.preventDefault();\n      shuffleBtn.click();\n    }\n  });\n\n  // Handle resize for responsive bar positions\n  window.addEventListener('resize', () => {\n    updatePositions();\n  });\n\n  // Initialize\n  initWithRandom(parseInt(sizeSlider.value || '10', 10));\n  announce('Ready. Enter an array or press Shuffle to begin.');\n})();\n</script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Array"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for a bubble sort visualization with play/pause, step, reset, shuffle, order/size changes, and array input. It models user control states, animation/visual feedback states (compare, swap, mark sorted), and completion.",
      "states": [
        {
          "name": "ready",
          "onEnter": "renderBarsAndCreateGenerator",
          "on": {
            "PLAY": "playing",
            "STEP_COMPARE": "comparing",
            "STEP_SWAP": "swapping",
            "STEP_MARK_SORTED": "marking_sorted",
            "STEP_FINISH": "done",
            "APPLY_ARRAY_VALID": "resetting",
            "APPLY_ARRAY_INVALID": "input_error",
            "SIZE_CHANGE": "resetting",
            "ORDER_CHANGE": "ready",
            "RESET": "resetting",
            "SHUFFLE": "shuffling",
            "WINDOW_RESIZE": "ready"
          }
        },
        {
          "name": "input_error",
          "onEnter": "showArrayError",
          "onExit": "clearArrayError",
          "on": {
            "APPLY_ARRAY_VALID": "resetting",
            "APPLY_ARRAY_INVALID": "input_error",
            "RESET": "resetting",
            "SHUFFLE": "shuffling",
            "PLAY": "playing",
            "ORDER_CHANGE": "input_error",
            "WINDOW_RESIZE": "input_error"
          }
        },
        {
          "name": "resetting",
          "onEnter": "resetToInitial",
          "on": {
            "RESET_COMPLETE": "ready",
            "WINDOW_RESIZE": "resetting"
          }
        },
        {
          "name": "shuffling",
          "onEnter": "shuffleAndReset",
          "on": {
            "RESET_COMPLETE": "ready",
            "WINDOW_RESIZE": "shuffling"
          }
        },
        {
          "name": "playing",
          "onEnter": "setRunningTrue",
          "onExit": "setRunningFalse",
          "on": {
            "PAUSE": "paused",
            "COMPARE": "comparing",
            "SWAP": "swapping",
            "MARK_SORTED": "marking_sorted",
            "FINISH": "done",
            "RESET": "resetting",
            "ORDER_CHANGE": "playing",
            "SIZE_CHANGE": "playing",
            "WINDOW_RESIZE": "playing"
          }
        },
        {
          "name": "paused",
          "onEnter": "announcePaused",
          "on": {
            "PLAY": "playing",
            "STEP_COMPARE": "comparing",
            "STEP_SWAP": "swapping",
            "STEP_MARK_SORTED": "marking_sorted",
            "STEP_FINISH": "done",
            "RESET": "resetting",
            "SHUFFLE": "shuffling",
            "ORDER_CHANGE": "paused",
            "WINDOW_RESIZE": "paused"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlightCompare",
          "onExit": "clearStyles",
          "on": {
            "ANIMATION_COMPLETE_TO_PLAYING": "playing",
            "ANIMATION_COMPLETE_TO_READY": "ready",
            "ANIMATION_COMPLETE_TO_PAUSED": "paused",
            "PAUSE": "paused",
            "RESET": "resetting",
            "WINDOW_RESIZE": "comparing"
          }
        },
        {
          "name": "swapping",
          "onEnter": "performSwapVisual",
          "onExit": "clearStyles",
          "on": {
            "ANIMATION_COMPLETE_TO_PLAYING": "playing",
            "ANIMATION_COMPLETE_TO_READY": "ready",
            "ANIMATION_COMPLETE_TO_PAUSED": "paused",
            "PAUSE": "paused",
            "RESET": "resetting",
            "WINDOW_RESIZE": "swapping"
          }
        },
        {
          "name": "marking_sorted",
          "onEnter": "markSortedIndex",
          "on": {
            "ANIMATION_COMPLETE_TO_PLAYING": "playing",
            "ANIMATION_COMPLETE_TO_READY": "ready",
            "ANIMATION_COMPLETE_TO_PAUSED": "paused",
            "PAUSE": "paused",
            "RESET": "resetting",
            "WINDOW_RESIZE": "marking_sorted"
          }
        },
        {
          "name": "done",
          "onEnter": "markAllSorted",
          "on": {
            "PLAY": "playing",
            "RESET": "resetting",
            "ORDER_CHANGE": "ready",
            "SHUFFLE": "shuffling",
            "STEP": "done",
            "APPLY_ARRAY_VALID": "resetting",
            "WINDOW_RESIZE": "done"
          }
        }
      ],
      "events": [
        "PLAY",
        "PAUSE",
        "STEP",
        "STEP_COMPARE",
        "STEP_SWAP",
        "STEP_MARK_SORTED",
        "STEP_FINISH",
        "COMPARE",
        "SWAP",
        "MARK_SORTED",
        "FINISH",
        "RESET",
        "RESET_COMPLETE",
        "APPLY_ARRAY_VALID",
        "APPLY_ARRAY_INVALID",
        "SIZE_CHANGE",
        "ORDER_CHANGE",
        "SHUFFLE",
        "WINDOW_RESIZE",
        "ANIMATION_COMPLETE_TO_PLAYING",
        "ANIMATION_COMPLETE_TO_READY",
        "ANIMATION_COMPLETE_TO_PAUSED"
      ],
      "notes": "Implementation details and mapping to the code:\n- ready: Non-running baseline. After initialization or any reset/shuffle/valid apply, the app renders bars, creates a bubbleSteps generator for current array and order, resets counters, clears styling, and enables controls. The 'renderBarsAndCreateGenerator' bundles renderBars(dataArray), gen=bubbleSteps(...), resetCounters(), clearSortedMarks(), announce('Ready...'), enableControls(true).\n- input_error: Triggered when Apply is pressed with invalid text input; shows an error message (arrayError.textContent). Applying a valid array transitions to resetting.\n- resetting: Calls resetToInitial(), which sets running=false, finished=false, Play label to 'Play', clears styles and sorted marks, copies initialArray to dataArray, renders bars, recreates generator, resets counters, announces 'Reset. Ready to sort.', and enables controls. RESET_COMPLETE is an internal, immediate transition to ready once resetToInitial finishes.\n- shuffling: Creates a new random initialArray from the size slider and then calls resetToInitial(); announces 'Shuffled a new random array.' RESET_COMPLETE transitions to ready.\n- playing: Corresponds to running=true; controls (step, shuffle, apply, size, order, input) are disabled via setRunning(true). The play loop (playLoop) repeatedly pulls from gen.next() and dispatches visualization events COMPARE/SWAP/MARK_SORTED/FINISH. ORDER_CHANGE and SIZE_CHANGE while playing are ignored by handlers (early return), so state remains playing.\n- paused: running=false but not finished; Play resumes the loop; Step processes exactly one generator event without toggling running. ORDER_CHANGE while paused resets the generator to the current dataArray/order and clears sorted marks, staying paused.\n- comparing: Visual state during a comparison step. highlightCompare includes: increment comparisons, updateCounters(), clearStyles(), add 'compare-a'/'compare-b' classes to the two bars, announce(Compare...), and delay proportional to the speed slider. On exit, styles are cleared. After the delay, transition depends on context: ANIMATION_COMPLETE_TO_PLAYING (continuous play), ANIMATION_COMPLETE_TO_READY (single step from ready), or ANIMATION_COMPLETE_TO_PAUSED (single step from paused). Clicking Pause during the animation sets running=false; after the animation completes, the FSM should be in paused.\n- swapping: Visual state during a swap. performSwapVisual includes: increment swaps and updateCounters(), clearStyles(), add 'swapping' classes, announce(Swap...), swap bars and values in bars/dataArray, updatePositions(), updateHeights(), delay by speed, then clearStyles. Transition context mirrors 'comparing'.\n- marking_sorted: End-of-pass mark. markSortedIndex includes: set pass count, updateCounters(), mark the final index sorted, announce(End of pass...), and delay by speed. Transition context mirrors 'comparing'.\n- done: Finished sorting. markAllSorted includes: set pass count (if finishing event), mark all bars sorted, announce('Array sorted...'), set finished=true, setRunning(false), enableControls(true). From done, Play prepares replay by recreating the generator, clearing sorted marks, resetting counters, then enters playing. Step in done does nothing (stays done) per code. ORDER_CHANGE when done clears sorted marks and recreates the generator, moving to ready.\n- Keyboard shortcuts map to the same events: Space -> PLAY/PAUSE, S -> STEP (leading to STEP_* based on generator output), R -> RESET, H -> SHUFFLE.\n- WINDOW_RESIZE triggers updatePositions() and does not change state.\n- Guards: SIZE_CHANGE and ORDER_CHANGE are ignored during playing; Apply/Shuffle/Size/Order controls are disabled while playing by setRunning(true). When finished=true, clicking Play first reinitializes the generator and counters before starting playback.\n- Speed control affects delays in comparing, swapping, and marking_sorted via getSpeedMultiplier().\n- Generator events: COMPARE/SWAP/MARK_SORTED/FINISH originate from bubbleSteps() and drive visual states during playing; STEP_* variants represent the same transitions when a single step is requested while not running."
    }
  },
  {
    "id": "8df543f0-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:04.982Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Hash Table",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort: Adjacent Comparisons and Swaps</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #ffffff;\n      --text: #1f2937;\n      --muted: #4b5563;\n      --border: #e5e7eb;\n      --primary: #2563eb;\n      --primary-contrast: #ffffff;\n      --accent: #f59e0b;  /* comparing */\n      --danger: #d0021b;  /* swapping */\n      --success: #2da44e; /* sorted */\n      --focus: #22c55e;\n      --gap: 16px;\n      --safe: 24px;\n\n      --bar-default: #5b8def;\n      --bar-text: #0b1021;\n\n      --compare-duration: 500ms;\n      --swap-duration: 600ms;\n      --pass-delay: 400ms;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      margin: 0;\n      padding: 0;\n    }\n\n    main {\n      padding: var(--safe);\n      max-width: 1100px;\n      margin: 0 auto;\n    }\n\n    h1 {\n      margin: 0 0 12px 0;\n      font-size: 28px;\n      line-height: 1.2;\n    }\n\n    .subtitle {\n      color: var(--muted);\n      margin-bottom: 24px;\n    }\n\n    /* Info panel sections */\n    .info {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n      margin-bottom: 24px;\n    }\n\n    details.info-block {\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 12px 16px;\n      background: #fafafa;\n    }\n\n    details.info-block summary {\n      font-weight: 600;\n      cursor: pointer;\n      outline: none;\n    }\n\n    .info-content p, .info-content ul {\n      margin: 8px 0;\n    }\n\n    .info-content ul {\n      padding-left: 18px;\n    }\n\n    /* Layout */\n    .module {\n      display: grid;\n      grid-template-columns: minmax(280px, 340px) 1fr;\n      gap: 24px;\n    }\n\n    @media (max-width: 900px) {\n      .module {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    /* Controls panel */\n    .panel {\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n      background: #fff;\n    }\n\n    .panel h2 {\n      font-size: 18px;\n      margin: 0 0 12px 0;\n    }\n\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    label {\n      display: block;\n      font-size: 14px;\n      color: var(--muted);\n      margin-bottom: 6px;\n    }\n\n    .row {\n      display: flex;\n      align-items: center;\n      gap: var(--gap);\n      flex-wrap: wrap;\n    }\n\n    input[type=\"range\"] {\n      width: 100%;\n    }\n\n    input[type=\"text\"], input[type=\"number\"] {\n      width: 100%;\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      font-size: 14px;\n    }\n\n    input[type=\"text\"]:focus, input[type=\"number\"]:focus {\n      outline: 2px solid var(--focus);\n      outline-offset: 2px;\n    }\n\n    .btn-row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n    }\n\n    button {\n      padding: 10px 14px;\n      border: 1px solid var(--border);\n      background: #fff;\n      color: var(--text);\n      border-radius: 10px;\n      cursor: pointer;\n      font-size: 14px;\n      min-height: 44px;\n      min-width: 44px;\n    }\n\n    button.primary {\n      background: var(--primary);\n      color: var(--primary-contrast);\n      border-color: var(--primary);\n    }\n\n    button:focus-visible {\n      outline: 3px solid var(--focus);\n      outline-offset: 2px;\n    }\n\n    /* Visualization panel */\n    .viz {\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n      background: #fff;\n    }\n\n    .viz-header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: var(--gap);\n      margin-bottom: 12px;\n    }\n\n    .legend {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 10px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n\n    .legend-item {\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n    }\n    .legend-swatch {\n      width: 16px;\n      height: 16px;\n      border-radius: 3px;\n      border: 1px solid var(--border);\n    }\n    .swatch-default { background: var(--bar-default); }\n    .swatch-compare { background: var(--accent); }\n    .swatch-swap { background: var(--danger); }\n    .swatch-sorted { background: var(--success); }\n\n    .stats {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      font-size: 14px;\n      color: var(--muted);\n    }\n    .stat {\n      padding: 6px 8px;\n      border-radius: 8px;\n      background: #f7f7f7;\n      border: 1px solid var(--border);\n    }\n\n    .bar-container {\n      position: relative;\n      width: 100%;\n      height: 300px;\n      border: 1px dashed var(--border);\n      border-radius: 10px;\n      overflow: hidden;\n      background-image: linear-gradient(to bottom, rgba(0,0,0,0.03), rgba(0,0,0,0.01));\n      margin-bottom: 12px;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      width: var(--bar-width, 48px);\n      background: var(--bar-default);\n      border-radius: 8px 8px 0 0;\n      color: var(--bar-text);\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      transform: translateX(0);\n      transition:\n        transform var(--swap-duration) ease-in-out,\n        box-shadow var(--compare-duration) ease-in-out,\n        background-color 200ms ease-in-out;\n      user-select: none;\n      outline: none;\n    }\n\n    .bar:focus-visible {\n      box-shadow: 0 0 0 3px var(--focus);\n    }\n\n    .bar-label {\n      font-size: 13px;\n      font-weight: 600;\n      margin-bottom: 6px;\n      color: #0b1021;\n      text-shadow: 0 1px 0 rgba(255,255,255,0.6);\n    }\n\n    .bar.comparing {\n      background: var(--accent);\n      box-shadow: 0 6px 16px rgba(245, 158, 11, 0.35);\n    }\n\n    .bar.swapping {\n      background: var(--danger);\n      box-shadow: 0 6px 16px rgba(208, 2, 27, 0.35);\n    }\n\n    .bar.sorted {\n      background: var(--success);\n      box-shadow: none;\n      opacity: 0.9;\n    }\n\n    /* Pseudocode block */\n    .code {\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      background: #0b1021;\n      color: #e6edf3;\n      padding: 12px 16px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 14px;\n      line-height: 1.5;\n    }\n\n    .code .line {\n      padding: 2px 6px;\n      border-radius: 6px;\n    }\n\n    .code .line.hl {\n      background: rgba(37, 99, 235, 0.25);\n      outline: 1px solid rgba(37, 99, 235, 0.6);\n    }\n\n    .toggle-row {\n      display: flex;\n      align-items: center;\n      gap: var(--gap);\n      margin-top: 8px;\n    }\n\n    /* Accessibility helpers */\n    .sr-only {\n      position: absolute !important;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0,0,0,0);\n      white-space: nowrap;\n      border: 0;\n    }\n  </style>\n</head>\n<body>\n  <main>\n    <h1>Bubble Sort: Adjacent Comparisons and Swaps</h1>\n    <p class=\"subtitle\">Interactively explore how Bubble Sort repeatedly compares and swaps adjacent elements, “bubbling” larger values to the end each pass.</p>\n\n    <!-- Module sections required by the design plan -->\n    <section class=\"info\" aria-label=\"Module overview\">\n      <details class=\"info-block\" open>\n        <summary>Concept Title</summary>\n        <div class=\"info-content\">\n          <p>Bubble Sort: Neighbor comparisons with pass-by-pass settling of the largest elements.</p>\n        </div>\n      </details>\n      <details class=\"info-block\" open>\n        <summary>Learning Objective</summary>\n        <div class=\"info-content\">\n          <ul>\n            <li>See how Bubble Sort compares adjacent items and swaps them if out of order.</li>\n            <li>Observe that after each pass, the largest unsorted element settles at the end.</li>\n            <li>Experience the early-exit optimization: stop if a pass makes no swaps.</li>\n          </ul>\n        </div>\n      </details>\n      <details class=\"info-block\">\n        <summary>Interaction Design</summary>\n        <div class=\"info-content\">\n          <ul>\n            <li>Click Play/Pause to animate the algorithm. Bars being compared highlight in orange; swaps highlight in red and animate positions. The sorted tail turns green after each pass.</li>\n            <li>Step executes one algorithmic step at a time for fine-grained control.</li>\n            <li>Drag bars left/right or edit values to set your own array before sorting.</li>\n            <li>Adjust Array Size and Speed sliders; Randomize generates new data.</li>\n            <li>Toggle Pseudocode to see line-by-line highlights that match each action.</li>\n            <li>Visual counters track comparisons, swaps, and passes in real time.</li>\n          </ul>\n          <p>Keyboard shortcuts: Space = Play/Pause, Right Arrow = Step, R = Randomize, S = Reset.</p>\n        </div>\n      </details>\n      <details class=\"info-block\">\n        <summary>Layout Description</summary>\n        <div class=\"info-content\">\n          <ul>\n            <li>Safe area margins of 24 px around the viewport are maintained.</li>\n            <li>Controls sit in a left panel; the visualization sits to the right. On smaller screens, they stack vertically for readability.</li>\n            <li>Minimum spacing of 16 px is enforced between interactive elements to prevent misclicks.</li>\n            <li>Accessible labels, focus outlines, and ARIA live announcements support screen readers and keyboard-only users.</li>\n          </ul>\n        </div>\n      </details>\n    </section>\n\n    <section class=\"module\" aria-label=\"Interactive bubble sort module\">\n      <!-- Controls -->\n      <div class=\"panel\" aria-labelledby=\"controls-title\">\n        <h2 id=\"controls-title\">Controls</h2>\n        <div class=\"controls\">\n          <div>\n            <label for=\"size\">Array Size: <span id=\"sizeValue\">8</span></label>\n            <input id=\"size\" type=\"range\" min=\"5\" max=\"14\" value=\"8\" aria-valuemin=\"5\" aria-valuemax=\"14\" aria-valuenow=\"8\" aria-label=\"Array size slider\" />\n          </div>\n\n          <div class=\"btn-row\" role=\"group\" aria-label=\"Primary controls\">\n            <button id=\"randomize\" class=\"primary\" aria-label=\"Randomize array\">Randomize</button>\n            <button id=\"step\" aria-label=\"Step once\">Step</button>\n            <button id=\"play\" aria-label=\"Play or pause animation\">Play</button>\n            <button id=\"reset\" aria-label=\"Reset sorting state\">Reset</button>\n          </div>\n\n          <div>\n            <label for=\"speed\">Speed: <span id=\"speedValue\">1.0×</span></label>\n            <input id=\"speed\" type=\"range\" min=\"0.25\" max=\"3\" step=\"0.25\" value=\"1\" aria-valuemin=\"0.25\" aria-valuemax=\"3\" aria-valuenow=\"1\" aria-label=\"Animation speed slider\" />\n          </div>\n\n          <div>\n            <label for=\"editValues\">Edit Values (comma-separated)</label>\n            <input id=\"editValues\" type=\"text\" placeholder=\"e.g., 5, 1, 9, 3, 7\" aria-label=\"Edit array values as comma-separated numbers\" />\n            <div id=\"editHint\" class=\"sr-only\" aria-live=\"polite\"></div>\n          </div>\n\n          <div class=\"toggle-row\">\n            <label for=\"showCode\" style=\"margin:0;\">Show Pseudocode</label>\n            <input id=\"showCode\" type=\"checkbox\" aria-label=\"Toggle pseudocode visibility\" />\n          </div>\n        </div>\n      </div>\n\n      <!-- Visualization -->\n      <div class=\"viz\" aria-labelledby=\"viz-title\">\n        <div class=\"viz-header\">\n          <h2 id=\"viz-title\">Visualization</h2>\n          <div class=\"legend\" aria-hidden=\"true\">\n            <div class=\"legend-item\"><span class=\"legend-swatch swatch-default\"></span>Default</div>\n            <div class=\"legend-item\"><span class=\"legend-swatch swatch-compare\"></span>Comparing</div>\n            <div class=\"legend-item\"><span class=\"legend-swatch swatch-swap\"></span>Swapping</div>\n            <div class=\"legend-item\"><span class=\"legend-swatch swatch-sorted\"></span>Sorted tail</div>\n          </div>\n        </div>\n\n        <div class=\"stats\" aria-live=\"polite\">\n          <div class=\"stat\">Pass: <span id=\"passCount\">0</span></div>\n          <div class=\"stat\">Comparisons: <span id=\"cmpCount\">0</span></div>\n          <div class=\"stat\">Swaps: <span id=\"swapCount\">0</span></div>\n          <div class=\"stat\">Status: <span id=\"statusText\">Ready</span></div>\n        </div>\n\n        <div class=\"bar-container\" id=\"barContainer\" aria-label=\"Array bar chart\"></div>\n\n        <div id=\"liveAnnounce\" class=\"sr-only\" aria-live=\"polite\"></div>\n\n        <div id=\"codeBlock\" class=\"code\" style=\"display:none;\" aria-label=\"Bubble sort pseudocode\">\n          <div class=\"line\" data-line=\"1\">1. function bubbleSort(A):</div>\n          <div class=\"line\" data-line=\"2\">2.   for i from 0 to n − 2:</div>\n          <div class=\"line\" data-line=\"3\">3.     swapped = false</div>\n          <div class=\"line\" data-line=\"4\">4.     for j from 0 to n − i − 2:</div>\n          <div class=\"line\" data-line=\"5\">5.       if A[j] > A[j + 1]:</div>\n          <div class=\"line\" data-line=\"6\">6.         swap A[j], A[j + 1]</div>\n          <div class=\"line\" data-line=\"7\">7.         swapped = true</div>\n          <div class=\"line\" data-line=\"8\">8.     if swapped == false:</div>\n          <div class=\"line\" data-line=\"9\">9.       break</div>\n        </div>\n\n        <p class=\"subtitle\" style=\"margin-top:12px;\">Tip: Drag bars to reorder before sorting. Use Space, Right Arrow, R, S for quick controls.</p>\n      </div>\n    </section>\n  </main>\n\n  <script>\n    // State\n    const barContainer = document.getElementById('barContainer');\n    const sizeInput = document.getElementById('size');\n    const sizeValue = document.getElementById('sizeValue');\n    const randomizeBtn = document.getElementById('randomize');\n    const stepBtn = document.getElementById('step');\n    const playBtn = document.getElementById('play');\n    const resetBtn = document.getElementById('reset');\n    const speedInput = document.getElementById('speed');\n    const speedValue = document.getElementById('speedValue');\n    const editValuesInput = document.getElementById('editValues');\n    const editHint = document.getElementById('editHint');\n\n    const passCountEl = document.getElementById('passCount');\n    const cmpCountEl = document.getElementById('cmpCount');\n    const swapCountEl = document.getElementById('swapCount');\n    const statusText = document.getElementById('statusText');\n    const liveAnnounce = document.getElementById('liveAnnounce');\n\n    const codeBlock = document.getElementById('codeBlock');\n    const showCodeToggle = document.getElementById('showCode');\n\n    // Visual/logic arrays\n    let values = [];  // current values per bar id\n    let order = [];   // current visual order: index -> barId\n    let bars = [];    // DOM elements, index by barId\n\n    // Sorting state\n    let generator = null;\n    let isPlaying = false;\n    let pendingTimeout = null;\n    let comparisons = 0;\n    let swaps = 0;\n    let passes = 0;\n\n    // Speed control\n    let speedFactor = 1.0; // 0.25 .. 3\n\n    function announce(msg) {\n      liveAnnounce.textContent = msg;\n    }\n\n    function setStatus(msg) {\n      statusText.textContent = msg;\n    }\n\n    function clearTimeoutSafe() {\n      if (pendingTimeout !== null) {\n        clearTimeout(pendingTimeout);\n        pendingTimeout = null;\n      }\n    }\n\n    function resetCounters() {\n      comparisons = 0;\n      swaps = 0;\n      passes = 0;\n      passCountEl.textContent = '0';\n      cmpCountEl.textContent = '0';\n      swapCountEl.textContent = '0';\n    }\n\n    function updateCounters() {\n      passCountEl.textContent = String(passes);\n      cmpCountEl.textContent = String(comparisons);\n      swapCountEl.textContent = String(swaps);\n    }\n\n    function randInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function computeBarWidth(count) {\n      const containerWidth = barContainer.clientWidth || barContainer.offsetWidth;\n      const spacing = 12; // gap between bars\n      // estimate width to fit count bars + spacing\n      const totalSpacing = spacing * (count + 1);\n      let w = Math.floor((containerWidth - totalSpacing) / count);\n      w = Math.max(28, Math.min(w, 60));\n      return { width: w, gap: spacing };\n    }\n\n    function renderBars(newValues) {\n      // Clear previous animation timeouts\n      clearTimeoutSafe();\n      isPlaying = false;\n      playBtn.textContent = 'Play';\n      setStatus('Ready');\n\n      // Reset counters and classes\n      resetCounters();\n      clearCodeHL();\n\n      values = newValues.slice(); // copy\n      const n = values.length;\n      order = Array.from({ length: n }, (_, i) => i);\n\n      // Clear DOM\n      barContainer.innerHTML = '';\n      bars = [];\n\n      // Dimensions\n      const { width, gap } = computeBarWidth(n);\n      barContainer.style.setProperty('--bar-width', width + 'px');\n\n      // Determine max for height scaling\n      const maxVal = Math.max(...values, 1);\n      const containerHeight = barContainer.clientHeight || 300;\n\n      // Create bars\n      for (let id = 0; id < n; id++) {\n        const val = values[id];\n        const bar = document.createElement('div');\n        bar.className = 'bar';\n        bar.setAttribute('tabindex', '0');\n        bar.setAttribute('role', 'button');\n        bar.setAttribute('aria-label', `Value ${val}. Drag to reorder. Use arrow keys to move.`);\n        bar.draggable = true;\n\n        const h = Math.round((val / maxVal) * (containerHeight - 30)) + 30; // min height\n        bar.style.height = h + 'px';\n\n        const label = document.createElement('div');\n        label.className = 'bar-label';\n        label.textContent = String(val);\n\n        bar.appendChild(label);\n        barContainer.appendChild(bar);\n        bars.push(bar);\n\n        // Drag & drop events\n        bar.addEventListener('dragstart', (e) => {\n          e.dataTransfer.setData('text/plain', String(order.indexOf(id)));\n          bar.classList.add('comparing'); // subtle feedback\n        });\n        bar.addEventListener('dragend', () => {\n          bar.classList.remove('comparing');\n        });\n        bar.addEventListener('dragover', (e) => {\n          e.preventDefault();\n        });\n        bar.addEventListener('drop', (e) => {\n          e.preventDefault();\n          const fromIndex = parseInt(e.dataTransfer.getData('text/plain'), 10);\n          const toIndex = order.indexOf(id);\n          if (!Number.isNaN(fromIndex) && fromIndex !== toIndex) {\n            swapOrder(fromIndex, toIndex);\n            syncGeneratorReset();\n          }\n        });\n\n        // Keyboard reordering\n        bar.addEventListener('keydown', (e) => {\n          const idx = order.indexOf(id);\n          if (e.key === 'ArrowLeft' && idx > 0) {\n            e.preventDefault();\n            swapOrder(idx, idx - 1);\n            syncGeneratorReset();\n          } else if (e.key === 'ArrowRight' && idx < order.length - 1) {\n            e.preventDefault();\n            swapOrder(idx, idx + 1);\n            syncGeneratorReset();\n          }\n        });\n      }\n\n      // Position bars\n      updatePositions(gap);\n      // Update edit input to mirror values in current order\n      editValuesInput.value = order.map(i => values[i]).join(', ');\n    }\n\n    function updatePositions(gapOverride = null) {\n      const n = order.length;\n      const { width, gap } = computeBarWidth(n);\n      const g = gapOverride === null ? gap : gapOverride;\n\n      for (let i = 0; i < n; i++) {\n        const id = order[i];\n        const x = i * (width + g) + g;\n        bars[id].style.transform = `translateX(${x}px)`;\n      }\n    }\n\n    function swapOrder(idxA, idxB) {\n      // Swap order positions and animate\n      const tmp = order[idxA];\n      order[idxA] = order[idxB];\n      order[idxB] = tmp;\n      updatePositions();\n      // Keep input synced\n      editValuesInput.value = order.map(i => values[i]).join(', ');\n    }\n\n    function highlightBars(indices, className) {\n      indices.forEach(i => {\n        const id = order[i];\n        bars[id].classList.add(className);\n      });\n    }\n\n    function clearBarHighlights(indices, className) {\n      indices.forEach(i => {\n        const id = order[i];\n        bars[id].classList.remove(className);\n      });\n    }\n\n    function markSortedTail(lastIndex) {\n      for (let i = lastIndex; i < order.length; i++) {\n        const id = order[i];\n        bars[id].classList.add('sorted');\n      }\n    }\n\n    function clearSorted() {\n      bars.forEach(bar => bar.classList.remove('sorted'));\n    }\n\n    function highlightCode(line) {\n      clearCodeHL();\n      const el = codeBlock.querySelector(`.line[data-line=\"${line}\"]`);\n      if (el) el.classList.add('hl');\n    }\n\n    function clearCodeHL() {\n      codeBlock.querySelectorAll('.line').forEach(l => l.classList.remove('hl'));\n    }\n\n    function* bubbleSortGeneratorFromOrder() {\n      const n = order.length;\n      // We operate on a copy of values array reflecting the current order\n      const A = order.map(id => values[id]);\n      // Pseudocode lines highlighted during steps\n      highlightCode(2);\n\n      for (let i = 0; i < n - 1; i++) {\n        let swappedFlag = false;\n        passes = i + 1;\n        updateCounters();\n\n        highlightCode(3);\n        yield { type: 'passStart', pass: i };\n\n        highlightCode(4);\n        for (let j = 0; j < n - i - 1; j++) {\n          // Compare step\n          yield { type: 'compare', j, k: j + 1 };\n\n          if (A[j] > A[j + 1]) {\n            // Swap values in A (logical)\n            const tmp = A[j];\n            A[j] = A[j + 1];\n            A[j + 1] = tmp;\n            swappedFlag = true;\n\n            // Visual swap step\n            highlightCode(6);\n            yield { type: 'swap', j, k: j + 1 };\n          }\n        }\n\n        // After pass, mark sorted tail (last element fixed)\n        yield { type: 'passDone', sortedFrom: n - i - 1 };\n\n        // Early exit if no swaps this pass\n        highlightCode(8);\n        if (!swappedFlag) {\n          yield { type: 'earlyStop', pass: i };\n          break;\n        }\n        highlightCode(2); // next outer iteration\n      }\n\n      // Done\n      yield { type: 'done' };\n    }\n\n    function syncGeneratorReset() {\n      // Stop any ongoing play and reset generator/counters\n      clearTimeoutSafe();\n      isPlaying = false;\n      playBtn.textContent = 'Play';\n      setStatus('Ready');\n      resetCounters();\n      clearSorted();\n      clearCodeHL();\n      generator = null;\n    }\n\n    async function handleStepEvent(evt) {\n      switch (evt.type) {\n        case 'passStart': {\n          updateCounters();\n          setStatus(`Pass ${passes} starting`);\n          announce(`Pass ${passes} started`);\n          highlightCode(4);\n          await delayScaled('pass');\n          break;\n        }\n        case 'compare': {\n          comparisons++;\n          updateCounters();\n          setStatus(`Comparing positions ${evt.j} and ${evt.k}`);\n          announce(`Comparing positions ${evt.j} and ${evt.k}`);\n          highlightBars([evt.j, evt.k], 'comparing');\n          highlightCode(5);\n          await delayScaled('compare');\n          clearBarHighlights([evt.j, evt.k], 'comparing');\n          break;\n        }\n        case 'swap': {\n          swaps++;\n          updateCounters();\n          setStatus(`Swapping positions ${evt.j} and ${evt.k}`);\n          announce(`Swapped positions ${evt.j} and ${evt.k}`);\n          highlightBars([evt.j, evt.k], 'swapping');\n          // Perform visual swap by swapping order indices\n          const idxA = evt.j;\n          const idxB = evt.k;\n          const tmp = order[idxA];\n          order[idxA] = order[idxB];\n          order[idxB] = tmp;\n          updatePositions();\n          await delayScaled('swap');\n          clearBarHighlights([evt.j, evt.k], 'swapping');\n          break;\n        }\n        case 'passDone': {\n          setStatus(`Pass ${passes} done`);\n          // Mark sorted tail starting at sortedFrom index\n          markSortedTail(evt.sortedFrom);\n          announce(`End of pass ${passes}. Element at index ${evt.sortedFrom} is in final position.`);\n          await delayScaled('pass');\n          break;\n        }\n        case 'earlyStop': {\n          setStatus('Early stop: array is sorted');\n          announce('Early stop. No swaps in last pass; array is sorted.');\n          // Mark all as sorted\n          markSortedTail(0);\n          await delayScaled('pass');\n          break;\n        }\n        case 'done': {\n          setStatus('Done');\n          announce('Sorting complete.');\n          markSortedTail(0);\n          isPlaying = false;\n          playBtn.textContent = 'Play';\n          break;\n        }\n      }\n    }\n\n    function delayScaled(type) {\n      let base = 400;\n      if (type === 'compare') base = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--compare-duration')) || 500;\n      if (type === 'swap') base = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--swap-duration')) || 600;\n      if (type === 'pass') base = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--pass-delay')) || 400;\n      const ms = Math.max(120, Math.round(base * (1 / speedFactor)));\n      return new Promise(resolve => {\n        pendingTimeout = setTimeout(() => {\n          pendingTimeout = null;\n          resolve();\n        }, ms);\n      });\n    }\n\n    async function stepOnce() {\n      // Initialize generator if needed\n      if (!generator) {\n        generator = bubbleSortGeneratorFromOrder();\n      }\n      const { value: evt, done } = generator.next();\n      if (done || !evt) {\n        // Mark done\n        await handleStepEvent({ type: 'done' });\n        return;\n      }\n      await handleStepEvent(evt);\n    }\n\n    async function playLoop() {\n      if (isPlaying) return;\n      isPlaying = true;\n      playBtn.textContent = 'Pause';\n      setStatus('Playing');\n\n      // Initialize generator if needed\n      if (!generator) {\n        generator = bubbleSortGeneratorFromOrder();\n      }\n\n      const run = async () => {\n        if (!isPlaying) return;\n        const { value: evt, done } = generator.next();\n        if (done || !evt) {\n          await handleStepEvent({ type: 'done' });\n          return;\n        }\n        await handleStepEvent(evt);\n        if (isPlaying) {\n          pendingTimeout = setTimeout(run, 0);\n        }\n      };\n\n      run();\n    }\n\n    function pausePlay() {\n      isPlaying = false;\n      clearTimeoutSafe();\n      playBtn.textContent = 'Play';\n      setStatus('Paused');\n    }\n\n    function resetSorting() {\n      pausePlay();\n      clearSorted();\n      resetCounters();\n      generator = null;\n      setStatus('Ready');\n      announce('Reset.');\n      clearCodeHL();\n    }\n\n    function randomArray(n) {\n      const arr = Array.from({ length: n }, () => randInt(10, 99));\n      return arr;\n    }\n\n    function parseValuesInput(text) {\n      const parts = text.split(',').map(s => s.trim()).filter(s => s.length > 0);\n      const nums = parts.map(n => parseInt(n, 10)).filter(x => Number.isFinite(x));\n      return nums;\n    }\n\n    function applyValuesFromInput() {\n      const nums = parseValuesInput(editValuesInput.value);\n      if (nums.length < 5 || nums.length > 14) {\n        editHint.textContent = 'Enter 5 to 14 numbers.';\n        return;\n      }\n      sizeInput.value = String(nums.length);\n      sizeValue.textContent = String(nums.length);\n      // Update speed ARIA\n      sizeInput.setAttribute('aria-valuenow', String(nums.length));\n      renderBars(nums);\n      syncGeneratorReset();\n      setStatus('Values updated');\n      announce('Values updated from text input.');\n    }\n\n    // Events\n    sizeInput.addEventListener('input', () => {\n      const n = parseInt(sizeInput.value, 10);\n      sizeValue.textContent = String(n);\n      sizeInput.setAttribute('aria-valuenow', String(n));\n      renderBars(randomArray(n));\n      syncGeneratorReset();\n    });\n\n    randomizeBtn.addEventListener('click', () => {\n      const n = parseInt(sizeInput.value, 10);\n      renderBars(randomArray(n));\n      syncGeneratorReset();\n      setStatus('Randomized');\n      announce('Array randomized.');\n    });\n\n    stepBtn.addEventListener('click', () => {\n      stepOnce();\n    });\n\n    playBtn.addEventListener('click', () => {\n      if (isPlaying) {\n        pausePlay();\n      } else {\n        playLoop();\n      }\n    });\n\n    resetBtn.addEventListener('click', () => {\n      resetSorting();\n    });\n\n    speedInput.addEventListener('input', () => {\n      speedFactor = parseFloat(speedInput.value);\n      speedValue.textContent = speedFactor.toFixed(2).replace(/\\.00$/, '') + '×';\n      speedInput.setAttribute('aria-valuenow', String(speedFactor));\n    });\n\n    editValuesInput.addEventListener('change', applyValuesFromInput);\n\n    showCodeToggle.addEventListener('change', () => {\n      codeBlock.style.display = showCodeToggle.checked ? 'block' : 'none';\n    });\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA')) return;\n      if (e.code === 'Space') {\n        e.preventDefault();\n        if (isPlaying) pausePlay(); else playLoop();\n      } else if (e.code === 'ArrowRight') {\n        e.preventDefault();\n        stepOnce();\n      } else if (e.key.toLowerCase() === 'r') {\n        const n = parseInt(sizeInput.value, 10);\n        renderBars(randomArray(n));\n        syncGeneratorReset();\n      } else if (e.key.toLowerCase() === 's') {\n        resetSorting();\n      }\n    });\n\n    // Initial render\n    window.addEventListener('resize', () => {\n      // Recompute positions on resize for responsiveness\n      updatePositions();\n    });\n\n    (function init() {\n      speedFactor = parseFloat(speedInput.value);\n      const n = parseInt(sizeInput.value, 10);\n      renderBars(randomArray(n));\n      setStatus('Ready');\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Hash Table"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a bubble sort visualization with play/pause/step controls, drag-and-drop/keyboard reordering, counters, and visual feedback (comparing, swapping, sorted tail).",
      "states": [
        {
          "name": "initializing",
          "onEnter": "initRender",
          "on": {
            "RENDER_COMPLETE": "ready"
          }
        },
        {
          "name": "ready",
          "onEnter": "setReadyUI",
          "on": {
            "PLAY": "playing",
            "STEP": "stepping",
            "RESET": "ready",
            "RANDOMIZE": "rendering",
            "SIZE_CHANGE": "rendering",
            "EDIT_VALUES_APPLY": "rendering",
            "EDIT_VALUES_INVALID": "ready",
            "SPEED_CHANGE": "ready",
            "TOGGLE_CODE": "ready",
            "RESIZE": "ready",
            "DRAG_START": "dragging",
            "KEY_LEFT_MOVE": "ready",
            "KEY_RIGHT_MOVE": "ready"
          }
        },
        {
          "name": "rendering",
          "onEnter": "renderBarsUpdate",
          "on": {
            "RENDER_COMPLETE": "ready"
          }
        },
        {
          "name": "playing",
          "onEnter": "playLoopStart",
          "onExit": "clearTimeoutSafe",
          "on": {
            "PAUSE": "paused",
            "RESET": "ready",
            "RANDOMIZE": "rendering",
            "SIZE_CHANGE": "rendering",
            "EDIT_VALUES_APPLY": "rendering",
            "DRAG_START": "dragging",
            "NEXT_EVENT_PASS_START": "pass_starting",
            "NEXT_EVENT_COMPARE": "comparing",
            "NEXT_EVENT_SWAP": "swapping",
            "NEXT_EVENT_PASS_DONE": "pass_done",
            "NEXT_EVENT_EARLY_STOP": "early_stop",
            "NEXT_EVENT_DONE": "done"
          }
        },
        {
          "name": "paused",
          "onEnter": "pausePlay",
          "on": {
            "PLAY": "playing",
            "STEP": "stepping",
            "RESET": "ready",
            "RANDOMIZE": "rendering",
            "SIZE_CHANGE": "rendering",
            "EDIT_VALUES_APPLY": "rendering",
            "DRAG_START": "dragging",
            "SPEED_CHANGE": "paused",
            "TOGGLE_CODE": "paused"
          }
        },
        {
          "name": "stepping",
          "onEnter": "stepOnceExec",
          "on": {
            "NEXT_EVENT_PASS_START": "pass_starting",
            "NEXT_EVENT_COMPARE": "comparing",
            "NEXT_EVENT_SWAP": "swapping",
            "NEXT_EVENT_PASS_DONE": "pass_done",
            "NEXT_EVENT_EARLY_STOP": "early_stop",
            "NEXT_EVENT_DONE": "done",
            "RESET": "ready",
            "RANDOMIZE": "rendering",
            "SIZE_CHANGE": "rendering",
            "EDIT_VALUES_APPLY": "rendering"
          }
        },
        {
          "name": "pass_starting",
          "onEnter": "handlePassStart",
          "on": {
            "DELAY_COMPLETE_PLAYING": "playing",
            "DELAY_COMPLETE_STEPPING": "ready"
          }
        },
        {
          "name": "comparing",
          "onEnter": "handleCompare",
          "onExit": "clearCompareHighlight",
          "on": {
            "DELAY_COMPLETE_PLAYING": "playing",
            "DELAY_COMPLETE_STEPPING": "ready"
          }
        },
        {
          "name": "swapping",
          "onEnter": "handleSwap",
          "onExit": "clearSwapHighlight",
          "on": {
            "DELAY_COMPLETE_PLAYING": "playing",
            "DELAY_COMPLETE_STEPPING": "ready"
          }
        },
        {
          "name": "pass_done",
          "onEnter": "handlePassDone",
          "on": {
            "DELAY_COMPLETE_PLAYING": "playing",
            "DELAY_COMPLETE_STEPPING": "ready"
          }
        },
        {
          "name": "early_stop",
          "onEnter": "handleEarlyStop",
          "on": {
            "DELAY_COMPLETE_PLAYING": "playing",
            "DELAY_COMPLETE_STEPPING": "ready"
          }
        },
        {
          "name": "done",
          "onEnter": "handleDone",
          "on": {
            "PLAY": "playing",
            "RESET": "ready",
            "RANDOMIZE": "rendering",
            "SIZE_CHANGE": "rendering",
            "EDIT_VALUES_APPLY": "rendering"
          }
        },
        {
          "name": "dragging",
          "onEnter": "startDragFeedback",
          "onExit": "endDragFeedback",
          "on": {
            "DRAG_DROP": "ready",
            "DRAG_END": "ready",
            "RESET": "ready"
          }
        }
      ],
      "events": [
        "INIT",
        "RENDER_COMPLETE",
        "PLAY",
        "PAUSE",
        "STEP",
        "RESET",
        "RANDOMIZE",
        "SIZE_CHANGE",
        "EDIT_VALUES_APPLY",
        "EDIT_VALUES_INVALID",
        "SPEED_CHANGE",
        "TOGGLE_CODE",
        "RESIZE",
        "DRAG_START",
        "DRAG_END",
        "DRAG_DROP",
        "KEY_LEFT_MOVE",
        "KEY_RIGHT_MOVE",
        "NEXT_EVENT_PASS_START",
        "NEXT_EVENT_COMPARE",
        "NEXT_EVENT_SWAP",
        "NEXT_EVENT_PASS_DONE",
        "NEXT_EVENT_EARLY_STOP",
        "NEXT_EVENT_DONE",
        "DELAY_COMPLETE_PLAYING",
        "DELAY_COMPLETE_STEPPING"
      ],
      "notes": "Mapping to implementation: initRender = initial render of random array (IIFE init() calling renderBars(randomArray(n)) and setStatus('Ready')). setReadyUI sets Ready status and Play button text; renderBarsUpdate encapsulates renderBars(...) and syncGeneratorReset() side-effects (isPlaying=false, clear timeouts, reset counters, clear highlights, update positions/input). playLoopStart = playLoop() (sets isPlaying=true, schedules generator run and sets 'Playing' status). pausePlay = pausePlay() (sets isPlaying=false, clears timeouts, sets 'Paused'). stepOnceExec = stepOnce() (initializes generator if needed, advances one event and calls handleStepEvent). handlePassStart, handleCompare, handleSwap, handlePassDone, handleEarlyStop, handleDone mirror handleStepEvent branching: they update counters/status/ARIA announcements, highlight pseudocode lines, add/remove CSS classes, perform visual swaps and mark the sorted tail, and await delayScaled('pass'/'compare'/'swap'). clearCompareHighlight / clearSwapHighlight remove 'comparing'/'swapping' classes from the involved bars. startDragFeedback / endDragFeedback refer to dragstart/dragend bar class toggling ('comparing' added/removed); DRAG_DROP swaps order indices and triggers syncGeneratorReset() via drop event; KEY_LEFT_MOVE / KEY_RIGHT_MOVE reorder bars via swapOrder(...) and syncGeneratorReset(). NEXT_EVENT_* events correspond to bubbleSortGeneratorFromOrder() yields: passStart, compare, swap, passDone, earlyStop, done. DELAY_COMPLETE_* separates where to return after each visual delay: when in playing mode, return to 'playing' loop; when stepping, return to 'ready'. RANDOMIZE, SIZE_CHANGE, EDIT_VALUES_APPLY route to 'rendering' which returns to 'ready' after render completes; RESET calls resetSorting() and goes to 'ready' from any state. SPEED_CHANGE adjusts speedFactor only (no state change); TOGGLE_CODE toggles codeBlock visibility only (orthogonal to sorting states); RESIZE recomputes positions only (no state change). The 'done' state marks all bars as sorted, sets 'Done' status, and ensures playing is stopped. Dragging while playing is allowed; a drop effectively resets the generator and returns to 'ready'. This FSM models the core sorting/animation/editor interactions; UI toggles (speed/code visibility) are treated as events with no core state transitions."
    }
  },
  {
    "id": "80ed3c80-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:13.384Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Graph (Directed/Undirected)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort: Adjacent Swaps in Action</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root{\n      --bg: #0f1320;\n      --panel: #151a2b;\n      --panel-2: #10162a;\n      --text: #e7ecf3;\n      --muted: #a8b3c7;\n      --accent: #4cc9f0;\n      --accent-2: #f72585;\n      --good: #4ade80;\n      --warn: #fbbf24;\n      --bad: #ef4444;\n      --focus: #93c5fd;\n      --gap: 16px;\n      --safe: 24px;\n      --bar: #7c3aed;\n      --bar-muted: #5b21b6;\n      --bar-compare: #f59e0b;\n      --bar-sorted: #10b981;\n      --bar-locked: #0ea5e9;\n      --anim-ms: 420ms;\n    }\n    * { box-sizing: border-box; }\n    html, body { height: 100%; }\n    body{\n      margin: 0;\n      background: radial-gradient(1200px 800px at 20% -10%, #1a2037 0%, #0f1320 60%);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;\n      line-height: 1.45;\n    }\n    .page{\n      padding: var(--safe);\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    h1, h2, h3{\n      margin: 0 0 8px;\n      font-weight: 700;\n      letter-spacing: 0.2px;\n    }\n    p{ margin: 0 0 10px; color: var(--muted); }\n    .tag{\n      display: inline-block;\n      font-size: 12px;\n      padding: 4px 8px;\n      border-radius: 8px;\n      background: #1f2541;\n      color: var(--muted);\n      margin-right: 8px;\n    }\n    .grid{\n      display: grid;\n      grid-template-columns: 1.25fr 1fr;\n      gap: 24px;\n    }\n    @media (max-width: 900px){\n      .grid{ grid-template-columns: 1fr; }\n    }\n    .panel{\n      background: linear-gradient(180deg, rgba(255,255,255,0.03), transparent 60%) , var(--panel);\n      border: 1px solid rgba(255,255,255,0.06);\n      border-radius: 14px;\n      padding: 16px;\n      box-shadow: 0 10px 20px rgba(0,0,0,0.25);\n    }\n    .panel-title{\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 8px;\n    }\n    .viz-wrap{\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n    .viz{\n      position: relative;\n      height: 300px;\n      border-radius: 12px;\n      background: linear-gradient(0deg, rgba(255,255,255,0.02), rgba(255,255,255,0.02)), var(--panel-2);\n      border: 1px solid rgba(255,255,255,0.06);\n      overflow: hidden;\n    }\n    .axis{\n      position: absolute;\n      left: 0; right: 0; bottom: 32px;\n      height: 2px;\n      background: rgba(255,255,255,0.08);\n    }\n    .bar{\n      position: absolute;\n      bottom: 34px;\n      width: 40px;\n      background: linear-gradient(180deg, rgba(255,255,255,0.1), rgba(0,0,0,0.1)), var(--bar);\n      border: 1px solid rgba(255,255,255,0.1);\n      border-radius: 6px 6px 0 0;\n      box-shadow: 0 6px 16px rgba(0,0,0,0.35);\n      transition: left var(--anim-ms) ease, height var(--anim-ms) ease, background-color 200ms ease, transform 150ms ease;\n      outline: none;\n    }\n    .bar:focus-visible{\n      box-shadow: 0 0 0 3px var(--focus), 0 6px 16px rgba(0,0,0,0.35);\n    }\n    .bar .value{\n      position: absolute;\n      bottom: -28px;\n      left: 50%;\n      transform: translateX(-50%);\n      color: var(--text);\n      font-size: 12px;\n      background: rgba(0,0,0,0.35);\n      padding: 2px 6px;\n      border-radius: 999px;\n      border: 1px solid rgba(255,255,255,0.08);\n    }\n    .bar.compare{\n      background: linear-gradient(180deg, rgba(255,255,255,0.12), rgba(0,0,0,0.08)), var(--bar-compare);\n      outline: 2px dashed rgba(255,255,255,0.2);\n      outline-offset: -3px;\n    }\n    .bar.swap{\n      animation: pulse 420ms ease;\n    }\n    @keyframes pulse{\n      0% { transform: translateY(0) scale(1); }\n      50%{ transform: translateY(-6px) scale(1.02); }\n      100%{ transform: translateY(0) scale(1); }\n    }\n    .bar.locked{\n      background: linear-gradient(180deg, rgba(255,255,255,0.12), rgba(0,0,0,0.08)), var(--bar-locked);\n    }\n    .bar.sorted{\n      background: linear-gradient(180deg, rgba(255,255,255,0.12), rgba(0,0,0,0.08)), var(--bar-sorted);\n    }\n    .legend{\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      color: var(--muted);\n      font-size: 12px;\n    }\n    .legend .dot{\n      width: 12px; height: 12px; border-radius: 3px; display: inline-block; margin-right: 6px;\n    }\n    .stats{\n      display: grid;\n      grid-template-columns: repeat(5, minmax(0,1fr));\n      gap: 12px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    @media (max-width: 520px){\n      .stats { grid-template-columns: repeat(2, minmax(0,1fr)); }\n    }\n    .stat{\n      background: rgba(255,255,255,0.04);\n      border: 1px solid rgba(255,255,255,0.06);\n      padding: 8px 10px;\n      border-radius: 10px;\n    }\n    .controls{\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n    .row{\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n    .row.cols-2{ grid-template-columns: 1fr 1fr; }\n    .row.cols-3{ grid-template-columns: 1fr 1fr 1fr; }\n    .row.inline{\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n    }\n    label{ font-size: 13px; color: var(--muted); display: block; margin-bottom: 6px; }\n    input[type=\"range\"]{\n      width: 100%;\n      accent-color: var(--accent);\n    }\n    input[type=\"text\"], input[type=\"number\"]{\n      width: 100%;\n      padding: 10px 12px;\n      border-radius: 10px;\n      background: rgba(255,255,255,0.05);\n      border: 1px solid rgba(255,255,255,0.08);\n      color: var(--text);\n    }\n    fieldset{\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: 10px;\n      padding: 10px 12px;\n      min-width: 0;\n    }\n    fieldset legend{ font-size: 12px; color: var(--muted); padding: 0 6px; }\n    .opt{ display: flex; align-items: center; gap: 10px; }\n    .opt input{ accent-color: var(--accent); }\n    button{\n      background: linear-gradient(180deg, rgba(255,255,255,0.1), rgba(0,0,0,0.15));\n      color: var(--text);\n      border: 1px solid rgba(255,255,255,0.12);\n      padding: 10px 14px;\n      border-radius: 10px;\n      cursor: pointer;\n      transition: transform 80ms ease, background-color 120ms ease, border-color 120ms ease;\n    }\n    button:hover{ transform: translateY(-1px); }\n    button:active{ transform: translateY(0); }\n    button:disabled{ opacity: 0.5; cursor: not-allowed; }\n    .btn-primary{\n      background: linear-gradient(180deg, rgba(76,201,240,0.25), rgba(15,19,32,0.2));\n      border-color: rgba(76,201,240,0.5);\n    }\n    .btn-danger{\n      background: linear-gradient(180deg, rgba(247,37,133,0.25), rgba(15,19,32,0.2));\n      border-color: rgba(247,37,133,0.5);\n    }\n    .kbd{\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n      background: rgba(255,255,255,0.06);\n      padding: 2px 6px;\n      border-radius: 6px;\n      border: 1px solid rgba(255,255,255,0.08);\n      font-size: 12px;\n    }\n    .code{\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n      background: rgba(0,0,0,0.35);\n      padding: 10px 12px;\n      border-radius: 10px;\n      border: 1px solid rgba(255,255,255,0.08);\n      color: #e8f1ff;\n      font-size: 13px;\n    }\n    .pseudo{\n      list-style: decimal inside;\n      margin: 0; padding: 8px 12px;\n      display: grid;\n      gap: 6px;\n    }\n    .pseudo li{\n      padding: 6px 8px;\n      border-radius: 8px;\n    }\n    .pseudo li.active{\n      background: rgba(76,201,240,0.15);\n      border: 1px solid rgba(76,201,240,0.4);\n    }\n    .announce{\n      position: absolute;\n      left: -9999px;\n      width: 1px; height: 1px; overflow: hidden;\n    }\n    .note{ color: var(--muted); font-size: 12px; }\n    .section{\n      margin-top: 24px;\n      background: rgba(255,255,255,0.03);\n      border: 1px solid rgba(255,255,255,0.06);\n      border-radius: 12px;\n      padding: 16px;\n    }\n    details{ border-radius: 10px; }\n    details summary{\n      cursor: pointer;\n      padding: 8px 0;\n      color: var(--text);\n      font-weight: 600;\n    }\n    .sr-only{\n      position: absolute; width: 1px; height: 1px; padding:0; margin:-1px; overflow: hidden; clip: rect(0,0,0,0); border:0;\n    }\n    @media (prefers-reduced-motion: reduce){\n      .bar{ transition: none !important; }\n      .bar.swap{ animation: none !important; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"page\" aria-describedby=\"page-desc\">\n    <header style=\"margin-bottom: 16px;\">\n      <div class=\"tag\">Interactive Module</div>\n      <h1 id=\"concept-title\">Bubble Sort: Adjacent Swaps in Action</h1>\n      <p id=\"page-desc\">Experiment with Bubble Sort by comparing and swapping adjacent bars. Step through the algorithm, watch animated swaps, and observe early exit optimization.</p>\n    </header>\n\n    <div class=\"grid\">\n      <!-- Visualization + Stats -->\n      <section class=\"panel viz-wrap\" aria-labelledby=\"viz-title\">\n        <div class=\"panel-title\">\n          <h2 id=\"viz-title\">Array Visualization</h2>\n          <div class=\"legend\" aria-label=\"Legend\">\n            <span><span class=\"dot\" style=\"background: var(--bar);\"></span>unsorted</span>\n            <span><span class=\"dot\" style=\"background: var(--bar-compare);\"></span>comparing</span>\n            <span><span class=\"dot\" style=\"background: var(--bar-locked);\"></span>end-of-pass locked</span>\n            <span><span class=\"dot\" style=\"background: var(--bar-sorted);\"></span>fully sorted</span>\n          </div>\n        </div>\n        <div class=\"viz\" id=\"viz\" role=\"application\" aria-label=\"Bubble sort visualization\" tabindex=\"0\">\n          <div class=\"axis\"></div>\n          <div id=\"aria\" class=\"announce\" role=\"status\" aria-live=\"polite\"></div>\n        </div>\n        <div class=\"stats\" aria-label=\"Statistics\">\n          <div class=\"stat\"><strong>Pass</strong><div id=\"stat-pass\">0</div></div>\n          <div class=\"stat\"><strong>i</strong><div id=\"stat-i\">0</div></div>\n          <div class=\"stat\"><strong>j</strong><div id=\"stat-j\">0</div></div>\n          <div class=\"stat\"><strong>Comparisons</strong><div id=\"stat-comp\">0</div></div>\n          <div class=\"stat\"><strong>Swaps</strong><div id=\"stat-swaps\">0</div></div>\n        </div>\n        <div class=\"panel\" style=\"padding:12px;\">\n          <div class=\"panel-title\">\n            <h3 style=\"font-size: 16px;\">Pseudocode</h3>\n            <span class=\"note\">Highlighted line = current step</span>\n          </div>\n          <div class=\"code\">\n            <ol class=\"pseudo\" id=\"pseudo\">\n              <li data-line=\"1\">for i = 0 to n - 1:</li>\n              <li data-line=\"2\">  swapped = false</li>\n              <li data-line=\"3\">  for j = 0 to n - 2 - i:</li>\n              <li data-line=\"4\">    if needsSwap(a[j], a[j+1]):</li>\n              <li data-line=\"5\">      swap(a[j], a[j+1])</li>\n              <li data-line=\"6\">      swapped = true</li>\n              <li data-line=\"7\">  if earlyExit and swapped == false: break</li>\n            </ol>\n          </div>\n          <p id=\"explain\" style=\"margin-top:8px;\">Load an array and press Play or Step to begin.</p>\n        </div>\n      </section>\n\n      <!-- Controls -->\n      <aside class=\"panel controls\" aria-labelledby=\"controls-title\">\n        <h2 id=\"controls-title\" style=\"margin-bottom: 4px;\">Controls</h2>\n\n        <div class=\"row cols-2\" role=\"group\" aria-label=\"Dataset size\">\n          <div>\n            <label for=\"sizeRange\">Size: <span id=\"sizeLabel\">8</span></label>\n            <input id=\"sizeRange\" type=\"range\" min=\"3\" max=\"20\" step=\"1\" value=\"8\" aria-describedby=\"sizeHelp\" />\n            <div id=\"sizeHelp\" class=\"note\">Choose number of elements (3–20).</div>\n          </div>\n          <div class=\"row inline\" style=\"align-items: end;\">\n            <button id=\"btnRandom\" class=\"btn-primary\" title=\"Generate random dataset\">Random</button>\n            <button id=\"btnReverse\" title=\"Generate reversed dataset\">Reversed</button>\n            <button id=\"btnNearly\" title=\"Generate nearly sorted dataset\">Nearly Sorted</button>\n          </div>\n        </div>\n\n        <div class=\"row\" role=\"group\" aria-label=\"Custom values\">\n          <div>\n            <label for=\"valuesText\">Values (comma-separated 1–99)</label>\n            <input id=\"valuesText\" type=\"text\" placeholder=\"e.g., 5,2,9,1,5,6\" />\n          </div>\n          <div class=\"row inline\">\n            <button id=\"btnLoad\" title=\"Load provided values\">Load</button>\n            <button id=\"btnShuffle\" title=\"Shuffle current values\">Shuffle</button>\n            <button id=\"btnReset\" class=\"btn-danger\" title=\"Reset algorithm pointers\">Reset</button>\n          </div>\n        </div>\n\n        <div class=\"row cols-2\" role=\"group\" aria-label=\"Options\">\n          <fieldset>\n            <legend>Order</legend>\n            <label class=\"opt\"><input type=\"radio\" name=\"order\" id=\"ordAsc\" value=\"asc\" checked /> Ascending</label>\n            <label class=\"opt\"><input type=\"radio\" name=\"order\" id=\"ordDesc\" value=\"desc\" /> Descending</label>\n          </fieldset>\n          <fieldset>\n            <legend>Behavior</legend>\n            <label class=\"opt\"><input type=\"checkbox\" id=\"optEarly\" checked /> Early exit optimization</label>\n            <label class=\"opt\"><input type=\"checkbox\" id=\"optInstant\" /> Instant compare (no pause before swap)</label>\n          </fieldset>\n        </div>\n\n        <div class=\"row cols-2\" role=\"group\" aria-label=\"Playback and speed\">\n          <div>\n            <label for=\"speedRange\">Speed</label>\n            <input id=\"speedRange\" type=\"range\" min=\"0\" max=\"100\" value=\"50\" />\n            <div class=\"note\">Left = slower steps, Right = faster.</div>\n          </div>\n          <div class=\"row inline\" style=\"align-items: end;\">\n            <button id=\"btnPlay\" class=\"btn-primary\" title=\"Play or pause (Space)\">Play</button>\n            <button id=\"btnStep\" title=\"Step one comparison (S)\">Step</button>\n            <button id=\"btnPass\" title=\"Complete one full pass\">Step Pass</button>\n          </div>\n        </div>\n\n        <div class=\"panel\" style=\"padding:12px;\">\n          <h3 style=\"font-size: 16px; margin-bottom: 8px;\">Keyboard</h3>\n          <p class=\"note\">\n            <span class=\"kbd\">Space</span> Play/Pause\n            • <span class=\"kbd\">S</span> Step\n            • <span class=\"kbd\">R</span> Reset\n            • <span class=\"kbd\">G</span> Random\n            • <span class=\"kbd\">D</span> Toggle order\n            • <span class=\"kbd\">O</span> Toggle early exit\n          </p>\n        </div>\n\n      </aside>\n    </div>\n\n    <!-- Learning Objective -->\n    <section class=\"section\" aria-labelledby=\"obj-title\">\n      <h2 id=\"obj-title\">Learning Objective</h2>\n      <ul>\n        <li>See how Bubble Sort compares and swaps adjacent elements to move extremes toward the end of the array each pass.</li>\n        <li>Understand the role of the outer pass (i), inner index (j), and the early exit optimization when a pass makes no swaps.</li>\n        <li>Relate animated actions to pseudocode lines and key counters (comparisons, swaps).</li>\n      </ul>\n    </section>\n\n    <!-- Interaction Design -->\n    <section class=\"section\" aria-labelledby=\"interaction-title\">\n      <h2 id=\"interaction-title\">Interaction Design</h2>\n      <ul>\n        <li>Click Play to run automatically. Pause any time. Use Step to execute one comparison at a time. Step Pass completes the current pass.</li>\n        <li>Bars being compared highlight in amber; if they need swapping, they pulse and slide to new positions.</li>\n        <li>At the end of each pass, the last element becomes locked (blue) showing the sorted tail growing from the right. When fully sorted, all bars turn green.</li>\n        <li>Adjust speed, order (ascending/descending), and early exit optimization. Load custom values or generate random, reversed, or nearly sorted datasets.</li>\n        <li>Pseudocode highlights the current line so users can map actions to code.</li>\n      </ul>\n    </section>\n\n    <!-- Layout Description -->\n    <section class=\"section\" aria-labelledby=\"layout-title\">\n      <h2 id=\"layout-title\">Layout Description</h2>\n      <ul>\n        <li>Safe margins: 24 px around the viewport provided by the page container.</li>\n        <li>Two-column layout on wider screens: visualization and stats on the left, controls on the right. On narrow screens, sections stack vertically for focus and clarity.</li>\n        <li>Minimum spacing: at least 16 px between interactive elements via consistent grid gaps and inline gaps.</li>\n        <li>Accessibility: semantic headings; labeled controls; ARIA live region narrates steps; keyboard shortcuts; visible focus states; respects reduced motion preferences.</li>\n      </ul>\n    </section>\n  </div>\n\n  <script>\n    // State\n    const viz = document.getElementById('viz');\n    const aria = document.getElementById('aria');\n\n    // Stats\n    const statPass = document.getElementById('stat-pass');\n    const statI = document.getElementById('stat-i');\n    const statJ = document.getElementById('stat-j');\n    const statComp = document.getElementById('stat-comp');\n    const statSwaps = document.getElementById('stat-swaps');\n\n    // Controls\n    const sizeRange = document.getElementById('sizeRange');\n    const sizeLabel = document.getElementById('sizeLabel');\n    const btnRandom = document.getElementById('btnRandom');\n    const btnReverse = document.getElementById('btnReverse');\n    const btnNearly = document.getElementById('btnNearly');\n    const valuesText = document.getElementById('valuesText');\n    const btnLoad = document.getElementById('btnLoad');\n    const btnShuffle = document.getElementById('btnShuffle');\n    const btnReset = document.getElementById('btnReset');\n\n    const ordAsc = document.getElementById('ordAsc');\n    const ordDesc = document.getElementById('ordDesc');\n    const optEarly = document.getElementById('optEarly');\n    const optInstant = document.getElementById('optInstant');\n\n    const speedRange = document.getElementById('speedRange');\n\n    const btnPlay = document.getElementById('btnPlay');\n    const btnStep = document.getElementById('btnStep');\n    const btnPass = document.getElementById('btnPass');\n\n    const pseudo = document.getElementById('pseudo');\n    const explain = document.getElementById('explain');\n\n    // Data + algorithm pointers\n    let arr = []; // [{value, el}]\n    let iPass = 0, jIndex = 0, comparisons = 0, swaps = 0, passCount = 0;\n    let swappedThisPass = false;\n    let playing = false;\n    let busy = false;\n    let done = false;\n\n    // Layout metrics\n    function metrics(){\n      const n = arr.length;\n      const w = viz.clientWidth;\n      const insets = 16; // small inset from edges\n      const usable = Math.max(0, w - insets * 2);\n      const slot = usable / Math.max(1, n);\n      const barWidth = Math.max(18, Math.min(44, slot * 0.7));\n      const leftOffset = (w - (slot * n)) / 2; // center within viz\n      return { n, w, slot, barWidth, leftOffset, height: viz.clientHeight - 60 };\n    }\n\n    function computeLeftAt(idx){\n      const m = metrics();\n      return m.leftOffset + idx * m.slot + (m.slot - m.barWidth) / 2;\n    }\n\n    function updateBarPositions(animate = true){\n      const m = metrics();\n      if(!animate){\n        arr.forEach(b => b.el.style.transition = 'none');\n      }\n      arr.forEach((b, idx) => {\n        b.el.style.width = `${m.barWidth}px`;\n        b.el.style.left = `${computeLeftAt(idx)}px`;\n        const maxVal = Math.max(...arr.map(x => x.value), 1);\n        const h = Math.max(8, Math.round((b.value / maxVal) * m.height));\n        b.el.style.height = `${h}px`;\n        b.el.style.setProperty('--anim-ms', getAnimMS() + 'ms');\n      });\n      if(!animate){\n        requestAnimationFrame(() => {\n          arr.forEach(b => b.el.style.transition = '');\n        });\n      }\n    }\n\n    function clearBars(){\n      [...viz.querySelectorAll('.bar')].forEach(b => b.remove());\n    }\n\n    function createBars(values){\n      clearBars();\n      arr = values.map(v => {\n        const el = document.createElement('div');\n        el.className = 'bar';\n        el.tabIndex = 0;\n        el.setAttribute('role', 'button');\n        el.setAttribute('title', 'Click to edit value');\n        el.addEventListener('click', () => editValueInline(el));\n        const label = document.createElement('div');\n        label.className = 'value';\n        label.textContent = String(v);\n        el.appendChild(label);\n        viz.appendChild(el);\n        return { value: v, el };\n      });\n      updateBarPositions(false);\n      announce('Array loaded with ' + arr.length + ' elements.');\n    }\n\n    function editValueInline(el){\n      if(busy) return;\n      const idx = arr.findIndex(x => x.el === el);\n      if(idx < 0) return;\n      const curr = arr[idx].value;\n      const input = document.createElement('input');\n      input.type = 'number';\n      input.min = '1'; input.max = '99';\n      input.value = curr;\n      input.className = 'value';\n      input.style.background = '#0b1224';\n      input.style.color = 'white';\n      input.style.border = '1px solid rgba(255,255,255,0.2)';\n      input.style.width = '44px';\n      input.addEventListener('keydown', (e) => {\n        if(e.key === 'Enter'){ input.blur(); }\n        if(e.key === 'Escape'){ cancel(); }\n      });\n      input.addEventListener('blur', () => {\n        const v = parseInt(input.value, 10);\n        if(Number.isFinite(v) && v >= 1 && v <= 99){\n          arr[idx].value = v;\n          arr[idx].el.querySelector('.value').textContent = String(v);\n          updateBarPositions(true);\n        }\n        input.replaceWith(makeValueLabel(arr[idx].value));\n      });\n\n      function cancel(){\n        input.replaceWith(makeValueLabel(curr));\n      }\n      el.querySelector('.value').replaceWith(input);\n      input.focus();\n      input.select();\n    }\n\n    function makeValueLabel(v){\n      const label = document.createElement('div');\n      label.className = 'value';\n      label.textContent = String(v);\n      return label;\n    }\n\n    function resetAlgorithm(){\n      iPass = 0; jIndex = 0; swappedThisPass = false;\n      comparisons = 0; swaps = 0; passCount = 0; done = false;\n      arr.forEach(b => b.el.classList.remove('compare', 'swap', 'locked', 'sorted'));\n      updateStats();\n      setPseudo(1);\n      explain.textContent = 'Pointers reset. Press Play or Step to begin.';\n    }\n\n    function updateStats(){\n      statPass.textContent = String(passCount);\n      statI.textContent = String(iPass);\n      statJ.textContent = String(jIndex);\n      statComp.textContent = String(comparisons);\n      statSwaps.textContent = String(swaps);\n    }\n\n    function setPseudo(line){\n      [...pseudo.children].forEach(li => li.classList.toggle('active', li.getAttribute('data-line') == String(line)));\n    }\n\n    function comparator(a, b){\n      const desc = ordDesc.checked;\n      return desc ? (a < b) : (a > b);\n    }\n\n    function highlightCompare(j){\n      arr.forEach(b => b.el.classList.remove('compare'));\n      if(j >= 0 && j < arr.length - 1){\n        arr[j].el.classList.add('compare');\n        arr[j+1].el.classList.add('compare');\n      }\n    }\n\n    function clearCompare(){\n      arr.forEach(b => b.el.classList.remove('compare'));\n    }\n\n    function lockEndOfPass(){\n      // lock the last element of current pass\n      const idx = arr.length - 1 - iPass;\n      if(idx >= 0 && idx < arr.length){\n        arr[idx].el.classList.add('locked');\n      }\n    }\n\n    function finalizeSorted(){\n      arr.forEach(b => {\n        b.el.classList.remove('locked', 'compare');\n        b.el.classList.add('sorted');\n      });\n      announce('Array sorted.');\n    }\n\n    function getAnimMS(){\n      // Map speed slider (0..100) to ms per step (slower to faster)\n      const v = parseInt(speedRange.value, 10); // 0 slow .. 100 fast\n      const minMs = 120, maxMs = 900;\n      const ms = Math.round(maxMs - (v / 100) * (maxMs - minMs));\n      return ms;\n    }\n\n    function sleep(ms){ return new Promise(res => setTimeout(res, ms)); }\n\n    async function animateSwap(j){\n      // Mark swap visually, set left positions for all (only two will move)\n      arr[j].el.classList.add('swap');\n      arr[j+1].el.classList.add('swap');\n\n      // Swap logical\n      const tmp = arr[j];\n      arr[j] = arr[j+1];\n      arr[j+1] = tmp;\n\n      // Reposition\n      updateBarPositions(true);\n\n      // Wait for transition to complete\n      const ms = getAnimMS();\n      await sleep(ms + 20);\n\n      arr[j].el.classList.remove('swap');\n      arr[j+1].el.classList.remove('swap');\n    }\n\n    async function stepOnce(){\n      if(busy || done) return;\n      busy = true;\n\n      const n = arr.length;\n      if(n <= 1){\n        busy = false;\n        done = true;\n        return;\n      }\n      // Outer loop init lines\n      if(jIndex === 0){\n        if(iPass === 0 && passCount === 0){\n          setPseudo(1);\n          explain.textContent = 'Outer loop begins at i = 0.';\n        }\n        setPseudo(2);\n        swappedThisPass = false;\n        if(!optInstant.checked) await sleep(80);\n      }\n\n      if(jIndex <= n - 2 - iPass){\n        setPseudo(3);\n        updateStats();\n        await sleep(10);\n\n        // Compare a[j] and a[j+1]\n        setPseudo(4);\n        highlightCompare(jIndex);\n        comparisons++;\n        updateStats();\n        const a = arr[jIndex].value;\n        const b = arr[jIndex + 1].value;\n        const needsSwap = comparator(a, b);\n\n        explain.textContent = needsSwap\n          ? `Compare ${a} and ${b}: swap needed.`\n          : `Compare ${a} and ${b}: in correct order.`;\n        announce(`Compare positions ${jIndex} and ${jIndex+1}. ${needsSwap ? 'Swap' : 'No swap'}.`);\n\n        if(needsSwap){\n          // swap\n          setPseudo(5);\n          await animateSwap(jIndex);\n          swaps++;\n          swappedThisPass = true;\n          arr[jIndex].el.querySelector('.value').textContent = String(arr[jIndex].value);\n          arr[jIndex+1].el.querySelector('.value').textContent = String(arr[jIndex+1].value);\n          setPseudo(6);\n          updateStats();\n        }\n        // Move inner index forward\n        jIndex++;\n        statJ.textContent = String(jIndex);\n        clearCompare();\n\n        // End of inner loop?\n        if(jIndex > n - 2 - iPass){\n          passCount++;\n          lockEndOfPass();\n          updateStats();\n\n          // Early exit?\n          if(optEarly.checked && !swappedThisPass){\n            setPseudo(7);\n            explain.textContent = 'No swaps this pass; early exit. Array is sorted.';\n            done = true;\n            finalizeSorted();\n            busy = false;\n            return;\n          }\n          // Next pass\n          iPass++;\n          jIndex = 0;\n          explain.textContent = `Pass complete. Next pass i = ${iPass}.`;\n          updateStats();\n\n          if(iPass >= n - 1){\n            done = true;\n            finalizeSorted();\n            busy = false;\n            return;\n          }\n        }\n      } else {\n        // Should not normally hit here due to above handling\n        iPass++;\n        jIndex = 0;\n      }\n      busy = false;\n      setPseudo(jIndex === 0 ? 2 : 4);\n    }\n\n    async function playLoop(){\n      if(playing) return; // prevent double loops\n      playing = true;\n      btnPlay.textContent = 'Pause';\n      while(playing && !done){\n        await stepOnce();\n        if(done) break;\n        const ms = getAnimMS();\n        await sleep(Math.max(40, ms * (optInstant.checked ? 0.6 : 1)));\n      }\n      if(done){\n        btnPlay.textContent = 'Play';\n        playing = false;\n      }\n    }\n\n    function pause(){\n      playing = false;\n      btnPlay.textContent = 'Play';\n    }\n\n    async function stepPass(){\n      if(done) return;\n      pause();\n      const targetPass = passCount + 1;\n      while(!done && passCount < targetPass){\n        await stepOnce();\n      }\n    }\n\n    // Dataset helpers\n    function randomArray(n){\n      const a = Array.from({length: n}, () => Math.floor(1 + Math.random() * 99));\n      return a;\n    }\n    function reversedArray(n){\n      const a = Array.from({length: n}, (_, i) => n - i);\n      const scale = 99 / n;\n      return a.map(v => Math.max(1, Math.min(99, Math.round(v * scale))));\n    }\n    function nearlySortedArray(n){\n      const base = Array.from({length: n}, (_, i) => Math.round((i+1) * (99/n)));\n      // introduce a few random adjacent swaps\n      for(let k=0; k<Math.max(1, Math.floor(n/4)); k++){\n        const i = Math.floor(Math.random() * (n-1));\n        [base[i], base[i+1]] = [base[i+1], base[i]];\n      }\n      return base;\n    }\n    function shuffleInPlace(a){\n      for(let i=a.length-1;i>0;i--){\n        const j = Math.floor(Math.random()*(i+1));\n        [a[i], a[j]] = [a[j], a[i]];\n      }\n      return a;\n    }\n\n    function loadValuesFromInput(){\n      const raw = valuesText.value.trim();\n      if(!raw){\n        alert('Please enter comma-separated numbers between 1 and 99.');\n        return;\n      }\n      const parts = raw.split(',').map(s => s.trim()).filter(Boolean);\n      const vals = parts.map(x => parseInt(x, 10));\n      if(!vals.length || vals.some(v => !Number.isFinite(v) || v < 1 || v > 99)){\n        alert('All values must be integers between 1 and 99.');\n        return;\n      }\n      createBars(vals);\n      sizeRange.value = String(vals.length);\n      sizeLabel.textContent = String(vals.length);\n      resetAlgorithm();\n    }\n\n    // Announce to screen readers\n    function announce(msg){\n      aria.textContent = msg;\n    }\n\n    // Event wiring\n    sizeRange.addEventListener('input', () => {\n      sizeLabel.textContent = sizeRange.value;\n    });\n    sizeRange.addEventListener('change', () => {\n      const n = parseInt(sizeRange.value, 10);\n      createBars(randomArray(n));\n      resetAlgorithm();\n    });\n    btnRandom.addEventListener('click', () => {\n      createBars(randomArray(parseInt(sizeRange.value, 10)));\n      resetAlgorithm();\n    });\n    btnReverse.addEventListener('click', () => {\n      createBars(reversedArray(parseInt(sizeRange.value, 10)));\n      resetAlgorithm();\n    });\n    btnNearly.addEventListener('click', () => {\n      createBars(nearlySortedArray(parseInt(sizeRange.value, 10)));\n      resetAlgorithm();\n    });\n    btnLoad.addEventListener('click', loadValuesFromInput);\n    btnShuffle.addEventListener('click', () => {\n      const vals = arr.map(x => x.value);\n      shuffleInPlace(vals);\n      createBars(vals);\n      resetAlgorithm();\n    });\n    btnReset.addEventListener('click', () => {\n      pause();\n      resetAlgorithm();\n    });\n\n    btnPlay.addEventListener('click', () => {\n      if(playing) { pause(); }\n      else { playLoop(); }\n    });\n    btnStep.addEventListener('click', () => { pause(); stepOnce(); });\n    btnPass.addEventListener('click', () => { stepPass(); });\n\n    ordAsc.addEventListener('change', () => { resetAlgorithm(); });\n    ordDesc.addEventListener('change', () => { resetAlgorithm(); });\n    optEarly.addEventListener('change', () => {\n      announce('Early exit ' + (optEarly.checked ? 'enabled' : 'disabled'));\n    });\n    optInstant.addEventListener('change', () => {\n      announce('Instant compare ' + (optInstant.checked ? 'enabled' : 'disabled'));\n    });\n\n    speedRange.addEventListener('input', () => {\n      const ms = getAnimMS();\n      document.documentElement.style.setProperty('--anim-ms', ms + 'ms');\n    });\n\n    // Keyboard shortcuts\n    window.addEventListener('keydown', (e) => {\n      if(['INPUT', 'TEXTAREA'].includes(document.activeElement.tagName)) return;\n      if(e.key === ' '){\n        e.preventDefault();\n        if(playing) pause(); else playLoop();\n      } else if(e.key.toLowerCase() === 's'){\n        e.preventDefault();\n        pause(); stepOnce();\n      } else if(e.key.toLowerCase() === 'r'){\n        e.preventDefault();\n        pause(); resetAlgorithm();\n      } else if(e.key.toLowerCase() === 'g'){\n        e.preventDefault();\n        createBars(randomArray(parseInt(sizeRange.value, 10)));\n        resetAlgorithm();\n      } else if(e.key.toLowerCase() === 'd'){\n        e.preventDefault();\n        ordDesc.checked = !ordDesc.checked;\n        ordAsc.checked = !ordDesc.checked;\n        resetAlgorithm();\n      } else if(e.key.toLowerCase() === 'o'){\n        e.preventDefault();\n        optEarly.checked = !optEarly.checked;\n        announce('Early exit ' + (optEarly.checked ? 'enabled' : 'disabled'));\n      }\n    });\n\n    // Resize handling to keep positions correct\n    let resizeTimer;\n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimer);\n      resizeTimer = setTimeout(() => updateBarPositions(false), 50);\n    });\n\n    // Initialize\n    function init(){\n      const defaultN = parseInt(sizeRange.value, 10);\n      createBars(randomArray(defaultN));\n      resetAlgorithm();\n    }\n    init();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Graph (Directed/Undirected)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a bubble sort visualization app capturing dataset loading, playback (play/pause), single-step and pass-step execution, comparison/swap animations, pass locking, editing values, and completion.",
      "states": [
        {
          "name": "idle",
          "onEnter": "resetAlgorithm",
          "on": {
            "INIT": "idle",
            "CLICK_PLAY": "playing",
            "KEY_SPACE": "playing",
            "CLICK_STEP": "comparing",
            "KEY_S": "comparing",
            "CLICK_STEP_PASS": "stepping_pass",
            "CLICK_RESET": "resetting",
            "KEY_R": "resetting",
            "SIZE_CHANGE": "loading_dataset",
            "CLICK_RANDOM": "loading_dataset",
            "CLICK_REVERSE": "loading_dataset",
            "CLICK_NEARLY": "loading_dataset",
            "CLICK_LOAD_VALUES": "loading_dataset",
            "CLICK_SHUFFLE": "loading_dataset",
            "CHANGE_ORDER_ASC": "resetting",
            "CHANGE_ORDER_DESC": "resetting",
            "KEY_D_TOGGLE_ORDER": "resetting",
            "TOGGLE_EARLY_EXIT": "idle",
            "KEY_O_TOGGLE_EARLY_EXIT": "idle",
            "TOGGLE_INSTANT_COMPARE": "idle",
            "SPEED_CHANGE": "idle",
            "RESIZE": "idle",
            "CLICK_BAR_EDIT": "editing_value"
          }
        },
        {
          "name": "paused",
          "onEnter": "pause",
          "on": {
            "CLICK_PLAY": "playing",
            "KEY_SPACE": "playing",
            "CLICK_STEP": "comparing",
            "KEY_S": "comparing",
            "CLICK_STEP_PASS": "stepping_pass",
            "CLICK_RESET": "resetting",
            "KEY_R": "resetting",
            "SIZE_CHANGE": "loading_dataset",
            "CLICK_RANDOM": "loading_dataset",
            "CLICK_REVERSE": "loading_dataset",
            "CLICK_NEARLY": "loading_dataset",
            "CLICK_LOAD_VALUES": "loading_dataset",
            "CLICK_SHUFFLE": "loading_dataset",
            "CHANGE_ORDER_ASC": "resetting",
            "CHANGE_ORDER_DESC": "resetting",
            "KEY_D_TOGGLE_ORDER": "resetting",
            "TOGGLE_EARLY_EXIT": "paused",
            "KEY_O_TOGGLE_EARLY_EXIT": "paused",
            "TOGGLE_INSTANT_COMPARE": "paused",
            "SPEED_CHANGE": "paused",
            "RESIZE": "paused",
            "CLICK_BAR_EDIT": "editing_value"
          }
        },
        {
          "name": "playing",
          "onEnter": "playLoop",
          "onExit": "pause",
          "on": {
            "CLICK_PLAY": "paused",
            "KEY_SPACE": "paused",
            "CLICK_STEP": "comparing",
            "KEY_S": "comparing",
            "CLICK_STEP_PASS": "stepping_pass",
            "CLICK_RESET": "resetting",
            "KEY_R": "resetting",
            "SIZE_CHANGE": "loading_dataset",
            "CLICK_RANDOM": "loading_dataset",
            "CLICK_REVERSE": "loading_dataset",
            "CLICK_NEARLY": "loading_dataset",
            "CLICK_LOAD_VALUES": "loading_dataset",
            "CLICK_SHUFFLE": "loading_dataset",
            "CHANGE_ORDER_ASC": "resetting",
            "CHANGE_ORDER_DESC": "resetting",
            "KEY_D_TOGGLE_ORDER": "resetting",
            "TOGGLE_EARLY_EXIT": "playing",
            "KEY_O_TOGGLE_EARLY_EXIT": "playing",
            "TOGGLE_INSTANT_COMPARE": "playing",
            "SPEED_CHANGE": "playing",
            "RESIZE": "playing",
            "ALGORITHM_COMPLETE": "done",
            "CLICK_BAR_EDIT": "editing_value"
          }
        },
        {
          "name": "comparing",
          "onEnter": "setPseudo",
          "onExit": "clearCompare",
          "on": {
            "NEEDS_SWAP": "swapping",
            "NO_SWAP_AUTO_CONTINUE": "playing",
            "NO_SWAP_STEP_COMPLETE": "paused",
            "END_OF_PASS": "pass_locking"
          }
        },
        {
          "name": "swapping",
          "onEnter": "animateSwap",
          "on": {
            "SWAP_ANIMATION_DONE_AUTO": "playing",
            "SWAP_ANIMATION_DONE_STEP": "paused",
            "END_OF_PASS": "pass_locking"
          }
        },
        {
          "name": "pass_locking",
          "onEnter": "lockEndOfPass",
          "on": {
            "EARLY_EXIT_TRIGGERED": "done",
            "ALL_SORTED": "done",
            "NEXT_PASS": "next_pass"
          }
        },
        {
          "name": "next_pass",
          "onEnter": "updateStats",
          "on": {
            "AUTO_CONTINUE": "playing",
            "STEP_COMPLETE": "paused"
          }
        },
        {
          "name": "stepping_pass",
          "onEnter": "stepPass",
          "on": {
            "PASS_COMPLETED": "paused",
            "ALGORITHM_COMPLETE": "done"
          }
        },
        {
          "name": "loading_dataset",
          "onEnter": "createBars",
          "onExit": "resetAlgorithm",
          "on": {
            "LOAD_COMPLETE": "idle"
          }
        },
        {
          "name": "resetting",
          "onEnter": "resetAlgorithm",
          "on": {
            "RESET_DONE": "idle"
          }
        },
        {
          "name": "editing_value",
          "onEnter": "editValueInline",
          "onExit": "updateBarPositions",
          "on": {
            "EDIT_BLUR_COMMIT": "paused",
            "EDIT_ESCAPE_CANCEL": "paused"
          }
        },
        {
          "name": "done",
          "onEnter": "finalizeSorted",
          "on": {
            "CLICK_RESET": "resetting",
            "KEY_R": "resetting",
            "SIZE_CHANGE": "loading_dataset",
            "CLICK_RANDOM": "loading_dataset",
            "CLICK_REVERSE": "loading_dataset",
            "CLICK_NEARLY": "loading_dataset",
            "CLICK_LOAD_VALUES": "loading_dataset",
            "CLICK_SHUFFLE": "loading_dataset",
            "CHANGE_ORDER_ASC": "resetting",
            "CHANGE_ORDER_DESC": "resetting",
            "KEY_D_TOGGLE_ORDER": "resetting",
            "CLICK_PLAY": "done",
            "KEY_SPACE": "done",
            "CLICK_BAR_EDIT": "editing_value",
            "TOGGLE_EARLY_EXIT": "done",
            "KEY_O_TOGGLE_EARLY_EXIT": "done",
            "TOGGLE_INSTANT_COMPARE": "done",
            "SPEED_CHANGE": "done",
            "RESIZE": "done"
          }
        }
      ],
      "events": [
        "INIT",
        "CLICK_PLAY",
        "KEY_SPACE",
        "CLICK_STEP",
        "KEY_S",
        "CLICK_STEP_PASS",
        "CLICK_RESET",
        "KEY_R",
        "SIZE_CHANGE",
        "CLICK_RANDOM",
        "CLICK_REVERSE",
        "CLICK_NEARLY",
        "CLICK_LOAD_VALUES",
        "CLICK_SHUFFLE",
        "CHANGE_ORDER_ASC",
        "CHANGE_ORDER_DESC",
        "KEY_D_TOGGLE_ORDER",
        "TOGGLE_EARLY_EXIT",
        "KEY_O_TOGGLE_EARLY_EXIT",
        "TOGGLE_INSTANT_COMPARE",
        "SPEED_CHANGE",
        "RESIZE",
        "CLICK_BAR_EDIT",
        "EDIT_BLUR_COMMIT",
        "EDIT_ESCAPE_CANCEL",
        "NEEDS_SWAP",
        "NO_SWAP_AUTO_CONTINUE",
        "NO_SWAP_STEP_COMPLETE",
        "SWAP_ANIMATION_DONE_AUTO",
        "SWAP_ANIMATION_DONE_STEP",
        "END_OF_PASS",
        "EARLY_EXIT_TRIGGERED",
        "NEXT_PASS",
        "AUTO_CONTINUE",
        "STEP_COMPLETE",
        "PASS_COMPLETED",
        "ALGORITHM_COMPLETE",
        "LOAD_COMPLETE",
        "RESET_DONE"
      ],
      "notes": "Overview: The app initializes by creating a random dataset and resetting algorithm pointers. Playback flow is governed by flags playing (auto-run loop), busy (guards against concurrent step), and done (completion). States 'idle' and 'paused' are user-facing rest states where stepping and dataset/option changes can occur. 'playing' runs the playLoop which repeatedly calls stepOnce until paused or done. Algorithmic micro-states: 'comparing' highlights adjacent bars and updates counters (setPseudo(4), highlightCompare, announce). If comparator returns true, transition to 'swapping' (animateSwap pulse + reposition). After each inner step, jIndex advances and clearCompare runs on exit. When jIndex exceeds the bound (n - 2 - iPass), 'pass_locking' locks the last element (blue). If earlyExit is enabled and no swaps occurred in the pass, 'EARLY_EXIT_TRIGGERED' transitions to 'done' via finalizeSorted. Otherwise, 'next_pass' sets up the next outer loop iteration. 'stepping_pass' runs a full pass in a paused mode by looping stepOnce until passCount increases or the algorithm completes. 'loading_dataset' covers all dataset actions (random, reversed, nearly sorted, load custom, shuffle, size change) and immediately resets pointers; it returns to 'idle' when load is complete. 'resetting' wraps resetAlgorithm for reset and order toggling. 'editing_value' allows inline editing of a bar's value (blocked while busy); blur commits validate and update value + positions, Escape cancels. Completion: 'done' finalizes visuals (all bars green) and prevents meaningful play-loop continuation; play toggles will immediately return to 'done'. Visual cues: comparing adds 'compare' class; swapping adds 'swap' animation; pass locking adds 'locked'; final completion adds 'sorted'. Speed changes adjust '--anim-ms' via getAnimMS; optInstant reduces delays; optEarly toggles early exit logic without resetting. Many events self-loop (no state change) to reflect settings updates and resize. Conditions: From 'comparing' and 'swapping', transitions diverge into 'playing' vs 'paused' based on whether user initiated a single step or the auto-play loop triggered the comparison. The app uses asynchronous delays (sleep) based on speedRange and optInstant settings."
    }
  },
  {
    "id": "86433400-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:14.259Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Set",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Explorer — An Interactive, Single-Concept Module</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root{\n      --safe-pad: 24px;\n      --gap: 16px;\n      --bar-color: #4f7cff;\n      --bar-compare: #f6c453;\n      --bar-sorted: #2bb673;\n      --bar-idle: #9aa5b1;\n      --bg: #0f172a;\n      --panel: #111827;\n      --text: #e5e7eb;\n      --muted: #94a3b8;\n      --accent: #22d3ee;\n      --danger: #ef4444;\n      --ok: #22c55e;\n      --focus: #22d3ee;\n      --border: #1f2937;\n      --code-bg: #0b1220;\n      --easing: cubic-bezier(.2,.8,.2,1);\n      --swap-duration: 500ms;     /* adjusted by JS */\n      --compare-duration: 300ms;  /* adjusted by JS */\n    }\n    @media (prefers-color-scheme: light){\n      :root{\n        --bg: #f8fafc;\n        --panel: #ffffff;\n        --text: #0f172a;\n        --muted: #475569;\n        --border: #e2e8f0;\n        --code-bg: #f1f5f9;\n      }\n    }\n    @media (prefers-reduced-motion: reduce){\n      :root{\n        --swap-duration: 1ms;\n        --compare-duration: 1ms;\n      }\n    }\n    * { box-sizing: border-box; }\n    html, body {\n      margin: 0;\n      padding: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.45;\n    }\n    a { color: var(--accent); }\n    .container{\n      padding: var(--safe-pad);\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    h1, h2, h3 { margin: 0 0 12px; line-height: 1.2; }\n    p { margin: 0 0 12px; color: var(--muted); }\n    ul { margin: 8px 0 16px 20px; color: var(--muted); }\n    .module{\n      display: grid;\n      grid-template-columns: 1.2fr 1fr;\n      gap: 24px;\n    }\n    @media (max-width: 960px){\n      .module{ grid-template-columns: 1fr; }\n    }\n    .panel{\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n    }\n    .panel + .panel{ margin-top: 16px; }\n    .section{\n      margin-bottom: 16px;\n    }\n    .controls{\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n    .control-row{\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n    .control-row > * { min-height: 40px; }\n    fieldset{\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 12px;\n      min-width: 0;\n    }\n    legend{\n      padding: 0 8px;\n      color: var(--muted);\n      font-size: 14px;\n    }\n    label{\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      color: var(--text);\n    }\n    input[type=\"text\"]{\n      background: transparent;\n      border: 1px solid var(--border);\n      color: var(--text);\n      border-radius: 8px;\n      padding: 10px 12px;\n      min-width: 240px;\n    }\n    input[type=\"range\"]{\n      width: 220px;\n      accent-color: var(--accent);\n    }\n    .btn{\n      background: #1f2937;\n      border: 1px solid var(--border);\n      color: var(--text);\n      padding: 10px 14px;\n      border-radius: 10px;\n      cursor: pointer;\n      transition: transform .05s ease, background-color .2s var(--easing), border-color .2s var(--easing);\n      user-select: none;\n    }\n    .btn:hover{ background: #222b3a; }\n    .btn:active{ transform: translateY(1px); }\n    .btn.primary{\n      background: var(--bar-color);\n      border-color: transparent;\n      color: white;\n    }\n    .btn.warning{\n      background: #3a1f21;\n      border-color: #512224;\n      color: #ffd7d9;\n    }\n    .btn:focus-visible{\n      outline: 3px solid var(--focus);\n      outline-offset: 2px;\n    }\n    .viz{\n      position: relative;\n      height: 320px;\n      display: flex;\n      align-items: flex-end;\n      gap: 8px;\n      padding: 12px;\n      border-radius: 10px;\n      border: 1px dashed var(--border);\n      overflow: hidden;\n    }\n    @media (max-width: 480px){\n      .viz{ height: 240px; }\n    }\n    .bar{\n      flex: 1 1 0;\n      background: linear-gradient(180deg, #6fa0ff, #4f7cff);\n      border-radius: 6px 6px 0 0;\n      position: relative;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      height: 20px;\n      transition: transform var(--swap-duration) var(--easing), background-color var(--compare-duration) var(--easing), opacity .2s var(--easing);\n      will-change: transform;\n    }\n    .bar .value{\n      position: absolute;\n      bottom: -24px;\n      font-size: 12px;\n      color: var(--text);\n      background: transparent;\n      padding: 2px 4px;\n      border-radius: 4px;\n      opacity: 0.9;\n      user-select: none;\n    }\n    .bar.compare{\n      background: linear-gradient(180deg, #ffd67e, #f6c453);\n      outline: 2px solid #fcd34d;\n      outline-offset: 0;\n    }\n    .bar.sorted{\n      background: linear-gradient(180deg, #55d69d, #2bb673);\n    }\n    .index-row{\n      display: flex;\n      justify-content: space-between;\n      gap: 8px;\n      padding: 0 12px;\n      margin-top: 12px;\n      min-height: 22px;\n    }\n    .idx{\n      flex: 1 1 0;\n      text-align: center;\n      font-size: 11px;\n      color: var(--muted);\n      position: relative;\n      user-select: none;\n    }\n    .idx.active{\n      color: #fcd34d;\n      font-weight: 600;\n    }\n    .idx.active::after{\n      content: \"↑\";\n      position: absolute;\n      top: -14px;\n      left: 50%;\n      transform: translateX(-50%);\n      color: #fcd34d;\n      font-size: 12px;\n    }\n    .pseudocode{\n      background: var(--code-bg);\n      border-radius: 10px;\n      padding: 12px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      font-size: 14px;\n      overflow: auto;\n      border: 1px solid var(--border);\n    }\n    .pseudocode ol{\n      margin: 0;\n      padding-left: 24px;\n    }\n    .pseudocode li{\n      padding: 4px 6px;\n      border-radius: 6px;\n      color: var(--muted);\n      white-space: pre;\n    }\n    .pseudocode li.active{\n      background: rgba(34, 211, 238, 0.12);\n      color: var(--text);\n      outline: 1px dashed rgba(34,211,238,0.4);\n    }\n    .stats{\n      display: grid;\n      grid-template-columns: repeat(4, 1fr);\n      gap: 12px;\n    }\n    @media (max-width: 520px){\n      .stats{ grid-template-columns: repeat(2, 1fr); }\n    }\n    .stat{\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px;\n      text-align: center;\n    }\n    .stat .k{ font-size: 12px; color: var(--muted); }\n    .stat .v{ font-size: 18px; font-weight: 700; }\n    .narration{\n      min-height: 24px;\n      color: var(--muted);\n    }\n    .note{\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .error{\n      color: #fecaca;\n    }\n    .success{\n      color: var(--ok);\n    }\n    .footer{\n      margin-top: 12px;\n      color: var(--muted);\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <main class=\"container\">\n    <header class=\"section\">\n      <h1>Bubble Sort Explorer</h1>\n      <p>An interactive, single-concept module to learn how Bubble Sort works through step-by-step comparisons, swaps, and visual feedback.</p>\n    </header>\n\n    <section class=\"panel section\" aria-labelledby=\"concept-title\">\n      <h2 id=\"concept-title\">Concept Title</h2>\n      <p>Bubble Sort: Adjacent comparisons and swaps that repeatedly move larger elements toward the end (like bubbles rising).</p>\n\n      <h3>Learning Objective</h3>\n      <ul>\n        <li>Track how Bubble Sort compares adjacent pairs and swaps them when out of order.</li>\n        <li>Understand the notion of passes, early-exit optimization, and the stability of the algorithm.</li>\n        <li>Connect algorithm steps with visual states: compare, swap, end of pass, and completion.</li>\n      </ul>\n\n      <h3>Interaction Design</h3>\n      <ul>\n        <li>Type a list of numbers (comma-separated) or generate random data; press Apply or Randomize.</li>\n        <li>Use Play/Pause to run automatically or Next Step to advance comparison by comparison.</li>\n        <li>Toggle Early Exit to see how the algorithm can finish earlier when no swaps occur in a pass.</li>\n        <li>Adjust Speed to control animation pace; observe colored highlights: yellow for comparison, green for sorted tail.</li>\n        <li>Keyboard: Space = Play/Pause, → = Next Step, R = Reset. Narration announces each action for screen readers.</li>\n      </ul>\n\n      <h3>Layout Description</h3>\n      <ul>\n        <li>Safe area: 24 px margin padding around the entire module to avoid edge crowding.</li>\n        <li>Left: Controls and visualization stacked in panels; Right: Pseudocode with live line highlighting and a stats panel.</li>\n        <li>Controls use grouped fieldsets with at least 16 px gaps between interactive elements for comfortable targeting.</li>\n        <li>Responsive: On narrow screens, the right column stacks below the visualization. Focus styles and aria-live narration support accessibility.</li>\n      </ul>\n    </section>\n\n    <section class=\"module\" aria-label=\"Bubble Sort Interactive Module\">\n      <div>\n        <section class=\"panel\">\n          <div class=\"controls\" aria-label=\"Input and Controls\">\n            <fieldset>\n              <legend>Data</legend>\n              <div class=\"control-row\">\n                <label for=\"arrayInput\">Numbers (CSV)</label>\n                <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 8, 3, 5, 1, 9, 2\" aria-describedby=\"arrayHelp\" />\n                <button class=\"btn\" id=\"applyBtn\" aria-label=\"Apply custom numbers\">Apply</button>\n              </div>\n              <div id=\"arrayHelp\" class=\"note\">Enter 2–24 integers. Non-integers will be rounded. Extra spaces are okay.</div>\n              <div class=\"control-row\">\n                <label for=\"sizeRange\">Size <output id=\"sizeOut\">8</output></label>\n                <input id=\"sizeRange\" type=\"range\" min=\"2\" max=\"24\" value=\"8\" />\n                <button class=\"btn\" id=\"randomBtn\">Randomize</button>\n                <button class=\"btn\" id=\"nearlyBtn\">Nearly Sorted</button>\n                <button class=\"btn warning\" id=\"resetBtn\" title=\"Reset to starting order (unsorted)\">Reset</button>\n              </div>\n              <div id=\"msg\" class=\"note\" role=\"status\" aria-live=\"polite\"></div>\n            </fieldset>\n\n            <fieldset>\n              <legend>Algorithm</legend>\n              <div class=\"control-row\">\n                <label><input type=\"checkbox\" id=\"earlyExit\" checked /> Early exit when no swaps in a pass</label>\n                <label for=\"speedRange\">Speed <output id=\"speedOut\">1.0x</output></label>\n                <input id=\"speedRange\" type=\"range\" min=\"25\" max=\"200\" value=\"100\" />\n              </div>\n              <div class=\"control-row\">\n                <button class=\"btn primary\" id=\"playBtn\" aria-pressed=\"false\">▶ Play</button>\n                <button class=\"btn\" id=\"stepBtn\">Next Step</button>\n              </div>\n              <div class=\"narration\" aria-live=\"polite\" id=\"narration\">Ready.</div>\n            </fieldset>\n          </div>\n        </section>\n\n        <section class=\"panel\" aria-label=\"Visualization\">\n          <div class=\"viz\" id=\"viz\" role=\"img\" aria-label=\"Array bars visualization\"></div>\n          <div class=\"index-row\" id=\"indexRow\" aria-hidden=\"true\"></div>\n          <div class=\"footer note\">\n            Colors: Yellow = comparing, Green = settled (sorted tail). Bars show values; pointers mark compared indices.\n          </div>\n        </section>\n      </div>\n\n      <div>\n        <section class=\"panel\" aria-label=\"Pseudocode\">\n          <h3>Pseudocode</h3>\n          <div class=\"pseudocode\">\n            <ol id=\"code\">\n              <li data-line=\"1\">for i from 0 to n-1:</li>\n              <li data-line=\"2\">  swapped ← false</li>\n              <li data-line=\"3\">  for j from 0 to n-2-i:</li>\n              <li data-line=\"4\">    if a[j] > a[j+1]:</li>\n              <li data-line=\"5\">      swap(a[j], a[j+1]); swapped ← true</li>\n              <li data-line=\"6\">  if earlyExit and swapped is false: break</li>\n            </ol>\n          </div>\n        </section>\n\n        <section class=\"panel\" aria-label=\"Statistics\">\n          <h3>Stats</h3>\n          <div class=\"stats\">\n            <div class=\"stat\"><div class=\"k\">Pass</div><div class=\"v\" id=\"passStat\">0</div></div>\n            <div class=\"stat\"><div class=\"k\">Comparisons</div><div class=\"v\" id=\"compStat\">0</div></div>\n            <div class=\"stat\"><div class=\"k\">Swaps</div><div class=\"v\" id=\"swapStat\">0</div></div>\n            <div class=\"stat\"><div class=\"k\">Length</div><div class=\"v\" id=\"lenStat\">0</div></div>\n          </div>\n          <div class=\"footer\">\n            Bubble Sort is stable (equal items keep order) and has O(n²) worst-case time. Early exit makes best case O(n).\n          </div>\n        </section>\n      </div>\n    </section>\n  </main>\n\n  <script>\n    (function(){\n      'use strict';\n\n      // DOM\n      const viz = document.getElementById('viz');\n      const indexRow = document.getElementById('indexRow');\n      const code = document.getElementById('code');\n      const passStat = document.getElementById('passStat');\n      const compStat = document.getElementById('compStat');\n      const swapStat = document.getElementById('swapStat');\n      const lenStat  = document.getElementById('lenStat');\n      const arrayInput = document.getElementById('arrayInput');\n      const sizeRange = document.getElementById('sizeRange');\n      const sizeOut = document.getElementById('sizeOut');\n      const speedRange = document.getElementById('speedRange');\n      const speedOut = document.getElementById('speedOut');\n      const playBtn = document.getElementById('playBtn');\n      const stepBtn = document.getElementById('stepBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const applyBtn = document.getElementById('applyBtn');\n      const randomBtn = document.getElementById('randomBtn');\n      const nearlyBtn = document.getElementById('nearlyBtn');\n      const earlyExitCheckbox = document.getElementById('earlyExit');\n      const msg = document.getElementById('msg');\n      const narration = document.getElementById('narration');\n\n      // State\n      let initialArray = [];\n      let data = [];\n      let i = 0;       // current pass index\n      let j = 0;       // current inner index\n      let swapped = false;\n      let comparisons = 0;\n      let swaps = 0;\n      let running = false;\n      let done = false;\n      let n = 0;\n\n      // Timing\n      const baseSwap = 500;     // ms\n      const baseCompare = 300;  // ms\n\n      function speedFactor(){\n        // Map 25..200 -> 0.25..2\n        const v = Number(speedRange.value);\n        return (v / 100);\n      }\n      function updateDurations(){\n        const f = speedFactor();\n        const swapMs = Math.max(50, baseSwap / f);\n        const compareMs = Math.max(30, baseCompare / f);\n        document.documentElement.style.setProperty('--swap-duration', `${swapMs}ms`);\n        document.documentElement.style.setProperty('--compare-duration', `${compareMs}ms`);\n        speedOut.textContent = `${f.toFixed(2)}x`;\n      }\n\n      // Utilities\n      function randInt(min, max){ return Math.floor(Math.random() * (max - min + 1)) + min; }\n      function clone(arr){ return arr.slice(); }\n\n      function setMessage(text, type=''){\n        msg.textContent = text;\n        msg.className = 'note ' + (type === 'error' ? 'error' : type === 'success' ? 'success' : '');\n      }\n\n      function announce(text){\n        narration.textContent = text;\n      }\n\n      function resetState(toInitial = true){\n        running = false;\n        playBtn.textContent = '▶ Play';\n        playBtn.setAttribute('aria-pressed', 'false');\n        done = false;\n        i = 0; j = 0; swapped = false;\n        comparisons = 0; swaps = 0;\n        if (toInitial) data = clone(initialArray);\n        n = data.length;\n        updateStats();\n        renderBars();\n        highlightSortedTail();\n        clearCodeHighlight();\n        announce('Ready.');\n      }\n\n      function updateStats(){\n        passStat.textContent = i.toString();\n        compStat.textContent = comparisons.toString();\n        swapStat.textContent = swaps.toString();\n        lenStat.textContent  = n.toString();\n      }\n\n      function parseArrayFromInput(text){\n        const parts = text.split(',').map(s => s.trim()).filter(s => s.length > 0);\n        const values = parts.map(v => {\n          let num = Number(v);\n          if (!Number.isFinite(num)) num = 0;\n          return Math.round(num);\n        });\n        return values;\n      }\n\n      function randomArray(size){\n        const arr = Array.from({length: size}, () => randInt(1, 99));\n        return arr;\n      }\n\n      function nearlySortedArray(size){\n        const arr = Array.from({length: size}, (_, k) => k+1);\n        // swap two adjacent positions somewhere in the middle\n        if (size >= 4){\n          const pos = randInt(1, size - 2);\n          [arr[pos], arr[pos+1]] = [arr[pos+1], arr[pos]];\n        }\n        // scale roughly to 1..99\n        const scale = Math.max(1, Math.floor(99 / size));\n        return arr.map(v => v * scale);\n      }\n\n      function renderBars(){\n        viz.innerHTML = '';\n        indexRow.innerHTML = '';\n        if (data.length === 0) return;\n\n        const maxVal = Math.max(...data);\n        const minBarHeight = 12; // px\n        const scale = v => (Math.max(0, v) / Math.max(1, maxVal)) * (viz.clientHeight - 40) + minBarHeight;\n\n        data.forEach((v, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.style.height = `${scale(v)}px`;\n          bar.setAttribute('aria-label', `Value ${v} at index ${idx}`);\n          const val = document.createElement('span');\n          val.className = 'value';\n          val.textContent = String(v);\n          bar.appendChild(val);\n          viz.appendChild(bar);\n\n          const idxLabel = document.createElement('div');\n          idxLabel.className = 'idx';\n          idxLabel.textContent = String(idx);\n          indexRow.appendChild(idxLabel);\n        });\n      }\n\n      function getBars(){ return Array.from(viz.children); }\n      function getIndexLabels(){ return Array.from(indexRow.children); }\n\n      function clearCompareHighlight(){\n        getBars().forEach(b => b.classList.remove('compare'));\n        getIndexLabels().forEach(l => l.classList.remove('active'));\n      }\n\n      function highlightCompare(a, b){\n        const bars = getBars();\n        const labels = getIndexLabels();\n        bars[a]?.classList.add('compare');\n        bars[b]?.classList.add('compare');\n        labels[a]?.classList.add('active');\n        labels[b]?.classList.add('active');\n      }\n\n      function highlightSortedTail(){\n        // Mark last i elements as sorted (tail)\n        const bars = getBars();\n        bars.forEach(b => b.classList.remove('sorted'));\n        for (let t = n - 1; t >= n - i; t--){\n          if (t >= 0) bars[t]?.classList.add('sorted');\n        }\n      }\n\n      function clearCodeHighlight(){\n        code.querySelectorAll('li').forEach(li => li.classList.remove('active'));\n      }\n      function highlightLine(line){\n        clearCodeHighlight();\n        const li = code.querySelector(`li[data-line=\"${line}\"]`);\n        if (li) li.classList.add('active');\n      }\n\n      function swapInDOM(a, b){\n        // FLIP animation for swapping two adjacent bars (a and b are indices, expected b=a+1)\n        const barsBefore = getBars();\n        const A = barsBefore[a];\n        const B = barsBefore[b];\n        if (!A || !B) return;\n\n        const rectA = A.getBoundingClientRect();\n        const rectB = B.getBoundingClientRect();\n        // Swap nodes (place B before A)\n        if (B.nextSibling === A){\n          viz.insertBefore(A, B);\n        } else {\n          viz.insertBefore(B, A);\n        }\n        // After swap, measure new positions\n        const barsAfter = getBars();\n        const A2 = barsAfter[b]; // A moved to b\n        const B2 = barsAfter[a]; // B moved to a\n        const rectA2 = A2.getBoundingClientRect();\n        const rectB2 = B2.getBoundingClientRect();\n\n        const dxA = rectA.left - rectA2.left;\n        const dxB = rectB.left - rectB2.left;\n\n        // Apply inverse transform to start at old position\n        A2.style.transform = `translateX(${dxA}px)`;\n        B2.style.transform = `translateX(${dxB}px)`;\n\n        // Force reflow\n        A2.getBoundingClientRect();\n\n        // Animate to new position\n        A2.style.transform = '';\n        B2.style.transform = '';\n      }\n\n      function sleep(ms){\n        return new Promise(res => setTimeout(res, ms));\n      }\n\n      function isSorted(arr){\n        for (let k=0;k<arr.length-1;k++){\n          if (arr[k] > arr[k+1]) return false;\n        }\n        return true;\n      }\n\n      async function step(){\n        if (done) return;\n        updateStats();\n\n        // End of pass?\n        if (j >= n - 1 - i){\n          highlightLine(6);\n          if (earlyExitCheckbox.checked && swapped === false){\n            // All sorted\n            i = n - 1; // mark tail as sorted\n            highlightSortedTail();\n            done = true;\n            announce('No swaps in pass. Early exit — array is sorted.');\n            updateStats();\n            stopRunningUI();\n            return;\n          }\n          // Next pass\n          i++;\n          j = 0;\n          swapped = false;\n          highlightSortedTail();\n          updateStats();\n          if (i >= n - 1){\n            // Done\n            done = true;\n            highlightSortedTail();\n            announce('Completed all passes — array is sorted.');\n            stopRunningUI();\n            return;\n          }\n          highlightLine(2);\n          await sleep(Math.max(40, baseCompare / speedFactor()));\n          return;\n        }\n\n        // Compare a[j] and a[j+1]\n        highlightLine(4);\n        highlightCompare(j, j+1);\n        comparisons++;\n        updateStats();\n        announce(`Comparing index ${j} (${data[j]}) and ${j+1} (${data[j+1]}).`);\n        await sleep(Math.max(30, baseCompare / speedFactor()));\n\n        if (data[j] > data[j+1]){\n          // Swap with animation\n          highlightLine(5);\n          swaps++;\n          swapped = true;\n          // Update data first\n          [data[j], data[j+1]] = [data[j+1], data[j]];\n\n          // Swap DOM bars and also swap index labels to keep arrows aligned visually\n          swapInDOM(j, j+1);\n          // Swap index label placeholders for consistent width spacing (visual labels represent positions, not values)\n          // We don't swap labels' text; indices remain 0..n-1 positions.\n\n          await sleep(Math.max(50, baseSwap / speedFactor()));\n          announce(`Swapped ${data[j]} and ${data[j+1]} (now at indices ${j} and ${j+1}).`);\n        } else {\n          announce(`No swap needed: ${data[j]} ≤ ${data[j+1]}.`);\n        }\n\n        // Clear compare state and advance\n        clearCompareHighlight();\n        j++;\n      }\n\n      async function playLoop(){\n        if (done) return;\n        running = true;\n        playBtn.textContent = '⏸ Pause';\n        playBtn.setAttribute('aria-pressed', 'true');\n        stepBtn.disabled = true; // prevent double stepping during play\n        while (running && !done){\n          await step();\n          // small pacing delay to avoid too-fast bursts at high speed\n          await sleep(10);\n        }\n        stepBtn.disabled = false;\n      }\n\n      function stopRunningUI(){\n        running = false;\n        playBtn.textContent = '▶ Play';\n        playBtn.setAttribute('aria-pressed', 'false');\n        stepBtn.disabled = false;\n      }\n\n      // Event bindings\n      playBtn.addEventListener('click', async () => {\n        if (done){\n          announce('Already sorted. Reset or change the array to run again.');\n          return;\n        }\n        if (!running){\n          playLoop();\n        } else {\n          running = false;\n          stopRunningUI();\n          announce('Paused.');\n        }\n      });\n\n      stepBtn.addEventListener('click', async () => {\n        if (done){\n          announce('Already sorted. Reset or change the array to step again.');\n          return;\n        }\n        if (running) return;\n        await step();\n      });\n\n      resetBtn.addEventListener('click', () => {\n        resetState(true);\n        setMessage('Reset to starting order.', 'success');\n      });\n\n      randomBtn.addEventListener('click', () => {\n        const size = Number(sizeRange.value);\n        initialArray = randomArray(size);\n        arrayInput.value = initialArray.join(', ');\n        setMessage(`Randomized ${size} values.`, 'success');\n        resetState(true);\n      });\n\n      nearlyBtn.addEventListener('click', () => {\n        const size = Number(sizeRange.value);\n        initialArray = nearlySortedArray(size);\n        arrayInput.value = initialArray.join(', ');\n        setMessage(`Generated a nearly sorted array of ${size}.`, 'success');\n        resetState(true);\n      });\n\n      applyBtn.addEventListener('click', () => {\n        const values = parseArrayFromInput(arrayInput.value);\n        if (values.length < 2 || values.length > 24){\n          setMessage('Please enter 2–24 numbers.', 'error');\n          return;\n        }\n        initialArray = values;\n        sizeRange.value = String(values.length);\n        sizeOut.textContent = String(values.length);\n        setMessage(`Applied ${values.length} values.`, 'success');\n        resetState(true);\n      });\n\n      sizeRange.addEventListener('input', () => {\n        sizeOut.textContent = sizeRange.value;\n      });\n\n      sizeRange.addEventListener('change', () => {\n        // Regenerate random with new size but keep current input intact unless user clicks Randomize\n        setMessage(`Size set to ${sizeRange.value}. Click Randomize or Nearly Sorted, or edit the list and Apply.`);\n      });\n\n      speedRange.addEventListener('input', updateDurations);\n\n      // Keyboard shortcuts\n      document.addEventListener('keydown', async (e) => {\n        if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA')) return;\n        if (e.code === 'Space'){\n          e.preventDefault();\n          playBtn.click();\n        } else if (e.key === 'ArrowRight'){\n          e.preventDefault();\n          stepBtn.click();\n        } else if (e.key.toLowerCase() === 'r'){\n          e.preventDefault();\n          resetBtn.click();\n        }\n      });\n\n      // Initialize\n      function init(){\n        // Default values\n        const defaultSize = Number(sizeRange.value);\n        initialArray = randomArray(defaultSize);\n        arrayInput.value = initialArray.join(', ');\n        data = clone(initialArray);\n        n = data.length;\n        updateDurations();\n        renderBars();\n        highlightSortedTail();\n        resetState(false);\n        setMessage('Enter numbers and click Apply, or use Randomize/Nearly Sorted.', '');\n      }\n\n      init();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Set"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a Bubble Sort explorer that models user control modes (play/pause/step/reset/input), algorithm micro-states (compare, swap, pass transitions), visual feedback (highlights), and completion.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "init_module",
          "onExit": "none",
          "on": {
            "APP_LOADED": "ready"
          }
        },
        {
          "name": "ready",
          "onEnter": "reset_sort_state",
          "onExit": "none",
          "on": {
            "TOGGLE_PLAY": "playing",
            "NEXT_STEP": "check_pass_end",
            "APPLY_VALID": "ready",
            "APPLY_INVALID": "input_error",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "RESET": "ready",
            "SPEED_CHANGE": "ready",
            "SIZE_INPUT": "ready",
            "SIZE_CHANGE_NOTICE": "ready"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_play_loop",
          "onExit": "stop_running_ui",
          "on": {
            "PAUSE": "paused",
            "AUTO_STEP": "check_pass_end",
            "DONE_REACHED": "done",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "SPEED_CHANGE": "playing"
          }
        },
        {
          "name": "paused",
          "onEnter": "announce_paused",
          "onExit": "none",
          "on": {
            "TOGGLE_PLAY": "playing",
            "NEXT_STEP": "check_pass_end",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "SPEED_CHANGE": "paused"
          }
        },
        {
          "name": "check_pass_end",
          "onEnter": "highlight_line_6_and_evaluate",
          "onExit": "none",
          "on": {
            "PASS_CONTINUES": "comparing",
            "PASS_ADVANCE": "pass_advance",
            "EARLY_EXIT_DONE": "done",
            "ALL_PASSES_COMPLETE": "done",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "PAUSE": "paused"
          }
        },
        {
          "name": "pass_advance",
          "onEnter": "advance_pass_and_highlight",
          "onExit": "none",
          "on": {
            "NEXT_COMPARISON": "comparing",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "PAUSE": "paused"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_compare_and_announce",
          "onExit": "clear_compare_highlight",
          "on": {
            "NEEDS_SWAP": "swapping",
            "NO_SWAP": "advancing_index",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "PAUSE": "paused"
          }
        },
        {
          "name": "swapping",
          "onEnter": "perform_swap_and_announce",
          "onExit": "none",
          "on": {
            "SWAP_DONE": "advancing_index",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "PAUSE": "paused"
          }
        },
        {
          "name": "advancing_index",
          "onEnter": "increment_inner_index",
          "onExit": "none",
          "on": {
            "AUTO_STEP": "check_pass_end",
            "NEXT_STEP": "check_pass_end",
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "PAUSE": "paused"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_sorted_and_stop",
          "onExit": "none",
          "on": {
            "RESET": "ready",
            "APPLY_VALID": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready",
            "TOGGLE_PLAY": "done",
            "NEXT_STEP": "done"
          }
        },
        {
          "name": "input_error",
          "onEnter": "show_input_error",
          "onExit": "none",
          "on": {
            "FIX_INPUT": "ready",
            "APPLY_VALID": "ready",
            "RESET": "ready",
            "RANDOMIZE": "ready",
            "NEARLY_SORTED": "ready"
          }
        }
      ],
      "events": [
        "APP_LOADED",
        "TOGGLE_PLAY",
        "PAUSE",
        "NEXT_STEP",
        "AUTO_STEP",
        "RESET",
        "APPLY_VALID",
        "APPLY_INVALID",
        "RANDOMIZE",
        "NEARLY_SORTED",
        "SPEED_CHANGE",
        "SIZE_INPUT",
        "SIZE_CHANGE_NOTICE",
        "PASS_CONTINUES",
        "PASS_ADVANCE",
        "EARLY_EXIT_DONE",
        "ALL_PASSES_COMPLETE",
        "NEEDS_SWAP",
        "NO_SWAP",
        "SWAP_DONE",
        "DONE_REACHED",
        "FIX_INPUT"
      ],
      "notes": "Mapping to code: APP_LOADED occurs when init() runs on page load. 'ready' corresponds to resetState() with running=false, done=false, i=0, j=0; onEnter reset_sort_state should call updateStats(), renderBars(), highlightSortedTail(), clearCodeHighlight(), announce('Ready.'). TOGGLE_PLAY (button click or Space) calls playLoop(): 'playing' onEnter start_play_loop flips play button to Pause, sets running=true, disables stepBtn; 'AUTO_STEP' is the implicit loop tick that calls step(). PAUSE (click Play while running) stops the loop via stopRunningUI() and goes to 'paused' where narration announces 'Paused.'. NEXT_STEP (button or ArrowRight) invokes a single step from 'ready' or 'paused'. SPEED_CHANGE (speedRange input) invokes updateDurations() without changing the sorting state. SIZE_INPUT and SIZE_CHANGE_NOTICE occur on sizeRange input/change; they only update UI messages and outputs. APPLY_VALID, RANDOMIZE, NEARLY_SORTED all populate initialArray, update arrayInput, set a success message, and call resetState(true) -> 'ready'. APPLY_INVALID sets an error message without changing sort variables -> 'input_error'. Algorithm micro-states: 'check_pass_end' (step() pass-end block) highlights pseudocode line 6 and branches: EARLY_EXIT_DONE when earlyExitCheckbox.checked && swapped===false, which marks tail sorted, sets done=true, announces early exit, and calls stopRunningUI(); ALL_PASSES_COMPLETE when i>=n-1 after increment, marks sorted, announces completion, stops UI; PASS_ADVANCE when a new pass starts: i++ j=0 swapped=false, highlightSortedTail(), highlight pseudocode line 2, then NEXT_COMPARISON after a brief delay moves to 'comparing'. 'comparing' (line 4) highlights the compared bars/indices with yellow, increments comparisons, announces, waits compare duration, then either NEEDS_SWAP -> 'swapping' (line 5) where data and DOM are swapped via swapInDOM(), swaps++, swapped=true, waits swap duration, announces; or NO_SWAP -> 'advancing_index'. On exiting 'comparing' clearCompareHighlight() runs. 'advancing_index' clears compare state and j++ (modeled by increment_inner_index), then the next invocation (AUTO_STEP in play mode or NEXT_STEP in step mode) returns to 'check_pass_end'. 'done' sets done=true, highlights entire sorted tail, announces completion, and ensures UI is in Play state via stopRunningUI(); Play or Next while done leaves state unchanged but announces 'Already sorted...'. Keyboard shortcuts: Space -> TOGGLE_PLAY, ArrowRight -> NEXT_STEP, 'r' -> RESET. Visual states include sorted tail marking (highlightSortedTail) and code line highlighting (highlightLine). Animation timing is controlled via updateDurations() (speedRange) which sets CSS variables --swap-duration and --compare-duration."
    }
  },
  {
    "id": "88253a70-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:24.629Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Hash Map",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Bubble Sort — Interactive Tutor</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root{\n      --safe-margin:24px;\n      --gap:16px;\n      --bg:#0f172a;          /* slate-900 */\n      --panel:#111827;       /* gray-900 */\n      --panel-2:#0b1222;     /* deeper slate */\n      --txt:#e5e7eb;         /* gray-200 */\n      --muted:#cbd5e1;       /* slate-300 */\n      --accent:#60a5fa;      /* sky-400 */\n      --accent-2:#fbbf24;    /* amber-400 */\n      --danger:#f87171;      /* red-400 */\n      --success:#34d399;     /* emerald-400 */\n      --sorted:#22c55e;      /* green-500 */\n      --focus:#f59e0b;       /* amber-500 */\n      --border:#1f2937;      /* gray-800 */\n      --code-bg:#0a1020;\n      --shadow:0 10px 24px rgba(0,0,0,0.35);\n      --radius:12px;\n      --btn-radius:10px;\n      --bar-radius:6px;\n      --bar-gap:4px;\n      --bar-min-width:18px;\n      --bar-max-width:60px;\n      --bar-pad:8px;\n      --font: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      --mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      --transition-fast: 200ms ease;\n      --transition-med: 360ms cubic-bezier(.2,.8,.2,1);\n    }\n    *{box-sizing:border-box}\n    html, body{\n      height:100%;\n      background:linear-gradient(180deg, #0b1222 0%, #0f172a 100%);\n      color:var(--txt);\n      font-family:var(--font);\n      line-height:1.4;\n    }\n    main{\n      max-width:1200px;\n      margin:0 auto;\n      padding:var(--safe-margin);\n    }\n    h1{\n      margin:0 0 8px 0;\n      font-size:clamp(22px, 3.2vw, 34px);\n      letter-spacing:.2px;\n    }\n    p.lead{\n      margin:0 0 16px 0;\n      color:var(--muted);\n      font-size:clamp(14px, 2.2vw, 16px);\n    }\n\n    /* Panels and layout */\n    .panel{\n      background:linear-gradient(180deg, var(--panel) 0, var(--panel-2) 100%);\n      border:1px solid var(--border);\n      border-radius:var(--radius);\n      box-shadow:var(--shadow);\n    }\n    .controls{\n      display:grid;\n      gap:var(--gap);\n      grid-template-columns:1fr;\n      padding:16px;\n    }\n    @media (min-width: 860px){\n      .controls{\n        grid-template-columns: 1.1fr 1fr 1fr;\n        align-items:start;\n      }\n    }\n    fieldset{\n      border:none;\n      margin:0;\n      padding:0;\n      min-width:0;\n    }\n    legend{\n      font-weight:600;\n      margin-bottom:8px;\n    }\n    .row{\n      display:flex;\n      flex-wrap:wrap;\n      gap:var(--gap);\n      align-items:center;\n    }\n    label{\n      font-size:12px;\n      color:var(--muted);\n      display:block;\n      margin-bottom:6px;\n    }\n    input[type=\"text\"]{\n      width:100%;\n      padding:10px 12px;\n      background:#0a1020;\n      color:var(--txt);\n      border:1px solid var(--border);\n      border-radius:10px;\n      outline:none;\n      transition:border-color var(--transition-fast), box-shadow var(--transition-fast);\n    }\n    input[type=\"text\"]:focus{\n      border-color:var(--focus);\n      box-shadow:0 0 0 3px rgba(245, 158, 11, .2);\n    }\n    .btn{\n      appearance:none;\n      border:none;\n      padding:10px 14px;\n      border-radius:var(--btn-radius);\n      color:#0b1222;\n      background:var(--accent);\n      font-weight:600;\n      cursor:pointer;\n      transition:transform var(--transition-fast), box-shadow var(--transition-fast), filter var(--transition-fast);\n      box-shadow:0 8px 16px rgba(96,165,250,.25);\n    }\n    .btn.secondary{\n      background:#1f2937;\n      color:var(--txt);\n      box-shadow:none;\n      border:1px solid var(--border);\n    }\n    .btn.warn{\n      background:var(--danger);\n      color:#0b1222;\n      box-shadow:0 8px 16px rgba(248,113,113,.25);\n    }\n    .btn:disabled{\n      opacity:.6;\n      cursor:not-allowed;\n      transform:none !important;\n      box-shadow:none;\n    }\n    .btn:active{\n      transform:translateY(1px) scale(.99);\n      filter:brightness(.98);\n    }\n    .inline{\n      display:flex;\n      gap:var(--gap);\n      flex-wrap:wrap;\n    }\n    .stack{\n      display:flex;\n      flex-direction:column;\n      gap:8px;\n    }\n    .split{\n      display:grid;\n      gap:var(--gap);\n      margin-top:var(--gap);\n      grid-template-columns:1fr;\n    }\n    @media (min-width: 980px){\n      .split{\n        grid-template-columns:1.3fr .9fr;\n      }\n    }\n\n    /* Visualizer */\n    .viz{\n      padding:16px;\n    }\n    .viz-header{\n      display:flex;\n      justify-content:space-between;\n      align-items:center;\n      gap:var(--gap);\n      margin-bottom:12px;\n      flex-wrap:wrap;\n    }\n    .legend{\n      display:flex;\n      gap:12px;\n      flex-wrap:wrap;\n      font-size:12px;\n      color:var(--muted);\n    }\n    .legend .key{\n      display:inline-flex;\n      align-items:center;\n      gap:6px;\n    }\n    .swatch{\n      width:14px;height:14px;border-radius:4px;border:1px solid var(--border);\n    }\n    .swatch.compare{ background:var(--accent-2); }\n    .swatch.swap{ background:var(--danger); }\n    .swatch.sorted{ background:var(--sorted); }\n\n    .chart{\n      position:relative;\n      height:320px;\n      padding:var(--bar-pad);\n      border-radius:10px;\n      background:linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.00));\n      border:1px dashed #1e293b;\n      overflow:hidden;\n    }\n    .bar{\n      position:absolute;\n      bottom:0;\n      width:40px;\n      min-width:var(--bar-min-width);\n      max-width:var(--bar-max-width);\n      background:linear-gradient(180deg, #3b82f6, #1d4ed8);\n      border:1px solid rgba(255,255,255,.06);\n      border-radius:var(--bar-radius);\n      box-shadow:0 10px 18px rgba(29,78,216,.25);\n      transform:translateX(0);\n      transition:transform var(--transition-med), height var(--transition-med), filter var(--transition-fast);\n    }\n    .bar .label{\n      position:absolute;\n      top:-22px;\n      left:50%;\n      transform:translateX(-50%);\n      font-size:12px;\n      color:var(--muted);\n      background:#0a1020;\n      padding:2px 6px;\n      border-radius:8px;\n      border:1px solid var(--border);\n      box-shadow:0 6px 12px rgba(0,0,0,.2);\n      user-select:none;\n      pointer-events:none;\n    }\n    .bar.compare{\n      background:linear-gradient(180deg, #f59e0b, #b45309);\n      box-shadow:0 10px 18px rgba(245,158,11,.25);\n      z-index:2;\n    }\n    .bar.swap{\n      background:linear-gradient(180deg, #ef4444, #b91c1c);\n      box-shadow:0 10px 18px rgba(239,68,68,.28);\n      z-index:3;\n    }\n    .bar.sorted{\n      background:linear-gradient(180deg, #22c55e, #15803d);\n      box-shadow:0 10px 18px rgba(34,197,94,.25);\n      filter:saturate(1.15);\n    }\n    .tail-guide{\n      position:absolute;\n      right:0;\n      top:0;\n      bottom:0;\n      width:0;\n      background:repeating-linear-gradient(\n        45deg,\n        rgba(34,197,94,.12),\n        rgba(34,197,94,.12) 10px,\n        rgba(34,197,94,.18) 10px,\n        rgba(34,197,94,.18) 20px\n      );\n      border-left:1px dashed rgba(34,197,94,.35);\n      pointer-events:none;\n      transition:width var(--transition-med);\n    }\n\n    /* Pseudocode */\n    .code{\n      padding:16px;\n    }\n    pre{\n      margin:0;\n      background:var(--code-bg);\n      color:var(--txt);\n      border:1px solid var(--border);\n      border-radius:10px;\n      padding:12px;\n      font-family:var(--mono);\n      font-size:13px;\n      line-height:1.45;\n      overflow:auto;\n      max-height:360px;\n    }\n    .line{\n      display:block;\n      padding:3px 6px;\n      border-left:3px solid transparent;\n      border-radius:6px;\n      margin-left:0;\n    }\n    .line .num{\n      opacity:.5;\n      width:24px;\n      display:inline-block;\n      user-select:none;\n    }\n    .line.active{\n      background:rgba(96,165,250,.12);\n      border-left-color:var(--accent);\n    }\n    .note{\n      margin-top:10px;\n      font-size:13px;\n      color:var(--muted);\n    }\n\n    /* Status bar */\n    .status{\n      margin-top:var(--gap);\n      padding:12px 16px;\n      display:flex;\n      flex-wrap:wrap;\n      gap:16px;\n      align-items:center;\n      justify-content:space-between;\n    }\n    .metrics{\n      display:flex;\n      flex-wrap:wrap;\n      gap:16px;\n      font-size:14px;\n      color:var(--muted);\n    }\n    .metrics .chip{\n      background:#0a1020;\n      border:1px solid var(--border);\n      padding:6px 10px;\n      border-radius:999px;\n      color:var(--txt);\n      font-weight:600;\n    }\n    .aria-live{\n      position:absolute;\n      left:-9999px;\n      height:1px;width:1px;overflow:hidden;\n    }\n\n    /* Details sections for plan */\n    details{\n      margin-top:var(--gap);\n      border:1px solid var(--border);\n      border-radius:10px;\n      background:linear-gradient(180deg, #0b1328, #0a1020);\n    }\n    summary{\n      cursor:pointer;\n      padding:12px 14px;\n      outline:none;\n      list-style:none;\n      user-select:none;\n      font-weight:600;\n    }\n    details[open] summary{\n      border-bottom:1px solid var(--border);\n    }\n    details .content{\n      padding:12px 14px 16px 14px;\n      color:var(--muted);\n      font-size:14px;\n    }\n\n    /* Sliders and checkboxes */\n    .slider{\n      appearance:none;\n      width:100%;\n      height:8px;\n      border-radius:999px;\n      background:#1f2937;\n      outline:none;\n      border:1px solid var(--border);\n    }\n    .slider::-webkit-slider-thumb{\n      appearance:none;\n      width:18px;height:18px;border-radius:50%;\n      background:var(--accent);\n      border:2px solid #082541;\n      box-shadow:0 6px 12px rgba(96,165,250,.35);\n      cursor:pointer;\n    }\n    .check{\n      display:flex;align-items:center;gap:10px;\n    }\n    .check input[type=\"checkbox\"]{\n      width:18px;height:18px;accent-color:var(--accent);\n    }\n\n    /* Focus visibility */\n    .btn:focus-visible, input:focus-visible, .slider:focus-visible{\n      outline:2px solid var(--focus);\n      outline-offset:2px;\n    }\n\n    /* Responsive stack for controls rows */\n    .row > *{ flex:1 1 auto; min-width:150px; }\n  </style>\n</head>\n<body>\n  <main>\n    <!-- Concept Title -->\n    <h1>Bubble Sort — Interactive Tutor</h1>\n\n    <!-- Learning Objective -->\n    <p class=\"lead\">\n      Learning objective: Understand how Bubble Sort repeatedly compares adjacent elements, swaps when out of order,\n      and grows a sorted tail after each pass. Experience the algorithm step-by-step, visualize comparisons and swaps,\n      and see when early-exit optimization stops the process.\n    </p>\n\n    <!-- Controls -->\n    <section class=\"panel controls\" aria-label=\"Controls\">\n      <fieldset>\n        <legend>Data</legend>\n        <div class=\"stack\">\n          <div>\n            <label for=\"arrInput\">Array (comma-separated integers)</label>\n            <div class=\"row\">\n              <input id=\"arrInput\" type=\"text\" inputmode=\"numeric\" aria-label=\"Array input\" placeholder=\"e.g., 5, 2, 9, 1, 5, 6\" />\n              <button id=\"applyBtn\" class=\"btn secondary\" title=\"Apply typed array\" aria-label=\"Apply typed array\">Apply</button>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div style=\"min-width:200px;\">\n              <label for=\"sizeRange\">Size: <span id=\"sizeLabel\">8</span></label>\n              <input id=\"sizeRange\" class=\"slider\" type=\"range\" min=\"5\" max=\"20\" value=\"8\" aria-label=\"Array size\" />\n            </div>\n            <button id=\"shuffleBtn\" class=\"btn secondary\" title=\"Shuffle array\" aria-label=\"Shuffle array\">Shuffle</button>\n            <button id=\"resetBtn\" class=\"btn secondary\" title=\"Reset to initial\" aria-label=\"Reset\">Reset</button>\n          </div>\n        </div>\n      </fieldset>\n\n      <fieldset>\n        <legend>Execution</legend>\n        <div class=\"stack\">\n          <div class=\"inline\">\n            <button id=\"playBtn\" class=\"btn\" aria-label=\"Play\">Play</button>\n            <button id=\"pauseBtn\" class=\"btn secondary\" aria-label=\"Pause\">Pause</button>\n            <button id=\"stepBtn\" class=\"btn\" aria-label=\"Step one operation\">Step</button>\n            <button id=\"passBtn\" class=\"btn\" aria-label=\"Run one full pass\">Run 1 Pass</button>\n          </div>\n          <div>\n            <label for=\"speedRange\">Speed: <span id=\"speedLabel\">1.0×</span></label>\n            <input id=\"speedRange\" class=\"slider\" type=\"range\" min=\"0.25\" max=\"2\" step=\"0.25\" value=\"1\" aria-label=\"Animation speed\" />\n          </div>\n        </div>\n      </fieldset>\n\n      <fieldset>\n        <legend>Options</legend>\n        <div class=\"stack\">\n          <div class=\"check\">\n            <input id=\"explainChk\" type=\"checkbox\" checked />\n            <label for=\"explainChk\">Show explanations</label>\n          </div>\n          <div class=\"check\">\n            <input id=\"reducedChk\" type=\"checkbox\" />\n            <label for=\"reducedChk\">Reduce motion (no animation)</label>\n          </div>\n          <div class=\"check\">\n            <input id=\"earlyExitChk\" type=\"checkbox\" checked />\n            <label for=\"earlyExitChk\">Early exit if no swaps in a pass</label>\n          </div>\n        </div>\n      </fieldset>\n    </section>\n\n    <!-- Visual + Code Split -->\n    <section class=\"split\">\n      <!-- Visualizer -->\n      <div class=\"panel viz\" aria-label=\"Bubble sort visualizer\">\n        <div class=\"viz-header\">\n          <div class=\"legend\" aria-hidden=\"true\">\n            <span class=\"key\"><span class=\"swatch compare\"></span> Comparing</span>\n            <span class=\"key\"><span class=\"swatch swap\"></span> Swapping</span>\n            <span class=\"key\"><span class=\"swatch sorted\"></span> Sorted tail</span>\n          </div>\n          <div id=\"explain\" class=\"note\" role=\"status\" aria-live=\"polite\"></div>\n        </div>\n        <div class=\"chart\" id=\"chart\" aria-label=\"Bar chart of array values\">\n          <div class=\"tail-guide\" id=\"tailGuide\" aria-hidden=\"true\"></div>\n        </div>\n      </div>\n\n      <!-- Pseudocode -->\n      <div class=\"panel code\" aria-label=\"Pseudocode\">\n        <pre aria-label=\"Bubble sort pseudocode\">\n<span id=\"L1\" class=\"line\"><span class=\"num\">1</span> function bubbleSort(a):</span>\n<span id=\"L2\" class=\"line\"><span class=\"num\">2</span>   n = length(a)</span>\n<span id=\"L3\" class=\"line\"><span class=\"num\">3</span>   for i = 0 to n - 1:</span>\n<span id=\"L4\" class=\"line\"><span class=\"num\">4</span>     swapped = false</span>\n<span id=\"L5\" class=\"line\"><span class=\"num\">5</span>     for j = 0 to n - 2 - i:</span>\n<span id=\"L6\" class=\"line\"><span class=\"num\">6</span>       if a[j] > a[j+1]:</span>\n<span id=\"L7\" class=\"line\"><span class=\"num\">7</span>         swap(a[j], a[j+1])</span>\n<span id=\"L8\" class=\"line\"><span class=\"num\">8</span>         swapped = true</span>\n<span id=\"L9\" class=\"line\"><span class=\"num\">9</span>     if not swapped: break</span>\n<span id=\"L10\" class=\"line\"><span class=\"num\">10</span>  return a</span>\n        </pre>\n        <div class=\"note\">\n          Highlight shows the current step. The green shaded area in the chart marks the sorted tail after each pass.\n        </div>\n      </div>\n    </section>\n\n    <!-- Status -->\n    <section class=\"panel status\" aria-label=\"Status\">\n      <div class=\"metrics\" role=\"group\" aria-label=\"Metrics\">\n        <div class=\"chip\">Pass: <span id=\"passCount\">0</span></div>\n        <div class=\"chip\">Comparison: <span id=\"compCount\">0</span></div>\n        <div class=\"chip\">Swap: <span id=\"swapCount\">0</span></div>\n      </div>\n      <div class=\"note\">Tip: Use Step to observe a single comparison (and swap if needed).</div>\n    </section>\n\n    <!-- Interaction Design -->\n    <details>\n      <summary>Interaction Design</summary>\n      <div class=\"content\">\n        - Input: Type a comma-separated array, change its size, or shuffle. Press Apply to load your custom data.\n        - Controls: Play runs comparisons continuously; Pause stops; Step performs one comparison (with swap if needed); Run 1 Pass advances until the end of the current outer pass.\n        - Visual feedback: Bars being compared turn amber; when swapping, they turn red and slide to new positions. The rightmost green region is the sorted tail that grows each pass. Pseudocode highlights the current line, and the explanation text describes what is happening.\n        - Speed and motion: Adjust speed from 0.25× to 2×. Reduce motion disables animation for accessibility.\n        - Early exit: When enabled, the algorithm stops as soon as a pass completes with no swaps (array already sorted), illustrating the optimization.\n      </div>\n    </details>\n\n    <!-- Layout Description -->\n    <details>\n      <summary>Layout Description</summary>\n      <div class=\"content\">\n        - Safe margins: 24 px padding around the main container. All panels use internal padding with a minimum 16 px gap between interactive elements and sections.\n        - Structure: Title and learning objective at the top. Below, a three-column control panel (stacks to one column on small screens). The main area splits into the visualizer (left) and pseudocode (right), stacking vertically on narrow viewports. A status bar sits below with counters and a brief tip.\n        - Clarity: The chart area is large and central to maintain focus. Pseudocode highlighting mirrors visual actions. Controls group data, execution, and options to reduce cognitive load.\n        - Accessibility: Buttons have labels and focus styles; colors are high-contrast and paired with position/outline cues. Live region updates explanations. The reduced motion option respects user preferences. All components are keyboard navigable.\n      </div>\n    </details>\n\n    <div class=\"aria-live\" aria-live=\"polite\" id=\"live\"></div>\n  </main>\n\n  <script>\n    (function(){\n      // Utility\n      const $ = (sel, el = document) => el.querySelector(sel);\n      const $$ = (sel, el = document) => Array.from(el.querySelectorAll(sel));\n\n      // Elements\n      const chart = $('#chart');\n      const explain = $('#explain');\n      const tailGuide = $('#tailGuide');\n      const arrInput = $('#arrInput');\n      const applyBtn = $('#applyBtn');\n      const sizeRange = $('#sizeRange');\n      const sizeLabel = $('#sizeLabel');\n      const shuffleBtn = $('#shuffleBtn');\n      const resetBtn = $('#resetBtn');\n      const playBtn = $('#playBtn');\n      const pauseBtn = $('#pauseBtn');\n      const stepBtn = $('#stepBtn');\n      const passBtn = $('#passBtn');\n      const speedRange = $('#speedRange');\n      const speedLabel = $('#speedLabel');\n      const reducedChk = $('#reducedChk');\n      const explainChk = $('#explainChk');\n      const earlyExitChk = $('#earlyExitChk');\n      const passCountEl = $('#passCount');\n      const compCountEl = $('#compCount');\n      const swapCountEl = $('#swapCount');\n      const live = $('#live');\n\n      const codeLines = {\n        1: $('#L1'), 2: $('#L2'), 3: $('#L3'), 4: $('#L4'), 5: $('#L5'),\n        6: $('#L6'), 7: $('#L7'), 8: $('#L8'), 9: $('#L9'), 10: $('#L10')\n      };\n\n      // State\n      let initialArray = [];\n      let items = []; // [{id, value, el}]\n      let maxValue = 100;\n\n      // Algorithm state\n      let iPass = 0;\n      let jIdx = 0;\n      let swappedThisPass = false;\n      let running = false;\n      let runPassMode = false;\n      let comparisons = 0;\n      let swaps = 0;\n      let speed = parseFloat(speedRange.value); // multiplier\n      let reducedMotion = false;\n      let earlyExit = true;\n      let animationMsBase = 700; // base duration in ms\n      let stepTimer = null;\n\n      // Initialize\n      function init(){\n        // Seed array\n        const size = parseInt(sizeRange.value, 10);\n        initialArray = makeRandomArray(size);\n        loadArray(initialArray, true);\n        bindEvents();\n        updateSpeed();\n        updateExplain('Ready. Enter your own array or press Play.');\n      }\n\n      function bindEvents(){\n        window.addEventListener('resize', layoutBars);\n\n        applyBtn.addEventListener('click', onApply);\n        shuffleBtn.addEventListener('click', onShuffle);\n        resetBtn.addEventListener('click', onReset);\n\n        sizeRange.addEventListener('input', () => {\n          sizeLabel.textContent = sizeRange.value;\n        });\n        sizeRange.addEventListener('change', onSizeChange);\n\n        playBtn.addEventListener('click', play);\n        pauseBtn.addEventListener('click', pause);\n        stepBtn.addEventListener('click', step);\n        passBtn.addEventListener('click', runOnePass);\n\n        speedRange.addEventListener('input', updateSpeed);\n        reducedChk.addEventListener('change', () => {\n          reducedMotion = reducedChk.checked;\n          layoutBars(true);\n        });\n        explainChk.addEventListener('change', () => {});\n        earlyExitChk.addEventListener('change', () => {\n          earlyExit = earlyExitChk.checked;\n        });\n      }\n\n      // Array helpers\n      function makeRandomArray(n){\n        const arr = [];\n        for(let i=0;i<n;i++){\n          arr.push(randInt(5, maxValue));\n        }\n        return arr;\n      }\n      function randInt(min, max){\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n      function onSizeChange(){\n        const n = parseInt(sizeRange.value, 10);\n        const arr = makeRandomArray(n);\n        initialArray = arr.slice();\n        loadArray(arr, true);\n        announce(`Array size set to ${n}. New random values generated.`);\n      }\n\n      function onShuffle(){\n        if(running) return;\n        const arr = items.map(it => it.value);\n        arr.sort(() => Math.random() - 0.5);\n        loadArray(arr, false);\n        announce('Array shuffled.');\n      }\n\n      function onReset(){\n        if(running) return;\n        loadArray(initialArray.slice(), true);\n        announce('Reset to initial array.');\n      }\n\n      function onApply(){\n        if(running) return;\n        const arr = parseArray(arrInput.value);\n        if(!arr || arr.length < 1){\n          updateExplain('Please enter integers separated by commas. Example: 5, 2, 9, 1');\n          return;\n        }\n        if(arr.length > 60){\n          updateExplain('For clarity, please enter 60 values or fewer.');\n          return;\n        }\n        // Update size slider display but do not trigger change event\n        sizeRange.value = String(arr.length);\n        sizeLabel.textContent = String(arr.length);\n        initialArray = arr.slice();\n        loadArray(arr, true);\n        announce('Applied custom array.');\n      }\n\n      function parseArray(text){\n        if(!text) return null;\n        const parts = text.split(/[,\\s]+/).filter(Boolean);\n        const nums = parts.map(p => Number(p));\n        if(nums.some(n => !Number.isFinite(n))) return null;\n        return nums.map(n => Math.floor(n));\n      }\n\n      // Rendering\n      function loadArray(values, resetState){\n        // Stop any running\n        pause();\n\n        // Clear chart\n        chart.querySelectorAll('.bar').forEach(b => b.remove());\n        items = values.map((v, idx) => {\n          const el = document.createElement('div');\n          el.className = 'bar';\n          el.setAttribute('role', 'img');\n          el.setAttribute('aria-label', `Value ${v}`);\n          const lab = document.createElement('div');\n          lab.className = 'label';\n          lab.textContent = String(v);\n          el.appendChild(lab);\n          chart.appendChild(el);\n          return { id: idx + '-' + Date.now(), value: v, el };\n        });\n\n        maxValue = Math.max(1, ...values);\n\n        if(resetState){\n          iPass = 0;\n          jIdx = 0;\n          swappedThisPass = false;\n          comparisons = 0;\n          swaps = 0;\n        }\n\n        updateCounters();\n        clearBarStates();\n        layoutBars(true);\n        updateTailGuide();\n        // Prefill input\n        arrInput.value = values.join(', ');\n        // Code highlight reset\n        setActiveLines([1,2,3,4]);\n        if(resetState){\n          updateExplain('Array loaded. Press Step to see the first comparison, or Play to run.');\n        }\n        enableDataEditing(true);\n      }\n\n      function enableDataEditing(enable){\n        // Guard: disable inputs while running\n        arrInput.disabled = !enable;\n        applyBtn.disabled = !enable;\n        shuffleBtn.disabled = !enable;\n        resetBtn.disabled = !enable;\n        sizeRange.disabled = !enable;\n      }\n\n      function layoutBars(skipAnim){\n        const n = items.length;\n        const pad = 8;\n        const chartWidth = chart.clientWidth - pad * 2;\n        const step = chartWidth / Math.max(1, n);\n        const barWidth = Math.max(Math.min(step - varPx('--bar-gap', 4), parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-max-width')) || 60), parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-min-width')) || 18);\n        const startX = (chart.clientWidth - (barWidth * n)) / 2;\n\n        items.forEach((it, idx) => {\n          const h = Math.max(8, Math.round((it.value / maxValue) * (chart.clientHeight - 60))); // padding for labels\n          it.el.style.height = `${h}px`;\n          it.el.style.width = `${barWidth}px`;\n          it.el.style.transform = `translateX(${Math.round(startX + idx * barWidth)}px)`;\n          if(reducedMotion || skipAnim){\n            it.el.style.transitionDuration = '0ms';\n          } else {\n            const dur = Math.round(animationMsBase / speed);\n            it.el.style.transitionDuration = `${dur}ms`;\n          }\n        });\n      }\n\n      function varPx(name, fallback=0){\n        const v = getComputedStyle(document.documentElement).getPropertyValue(name).trim();\n        return v.endsWith('px') ? parseFloat(v) : fallback;\n      }\n\n      function clearBarStates(){\n        items.forEach(it => it.el.classList.remove('compare','swap','sorted'));\n      }\n\n      function markSortedTail(){\n        const n = items.length;\n        const tail = iPass; // after i passes, last i are sorted\n        items.forEach((it, idx) => {\n          if(idx >= n - tail) it.el.classList.add('sorted');\n          else it.el.classList.remove('sorted');\n        });\n      }\n\n      function updateTailGuide(){\n        const n = items.length;\n        const tail = iPass;\n        const w = chart.clientWidth;\n        const widthPx = Math.max(0, Math.round((tail / Math.max(1, n)) * w));\n        tailGuide.style.width = `${widthPx}px`;\n      }\n\n      function setActiveLines(nums){\n        // Reset\n        Object.values(codeLines).forEach(el => el.classList.remove('active'));\n        nums.forEach(n => codeLines[n]?.classList.add('active'));\n      }\n\n      function updateCounters(){\n        passCountEl.textContent = String(iPass);\n        compCountEl.textContent = String(comparisons);\n        swapCountEl.textContent = String(swaps);\n      }\n\n      function updateExplain(text){\n        if(!explainChk.checked) { explain.textContent = ''; return; }\n        explain.textContent = text;\n        live.textContent = text;\n      }\n\n      function announce(text){\n        live.textContent = text;\n      }\n\n      // Execution\n      function canCompare(){\n        const n = items.length;\n        return iPass < n && jIdx <= n - 2 - iPass;\n      }\n\n      function play(){\n        if(running) return;\n        running = true;\n        runPassMode = false;\n        enableDataEditing(false);\n        loop();\n        updateExplain('Running. Press Pause to stop.');\n      }\n\n      function pause(){\n        running = false;\n        runPassMode = false;\n        if(stepTimer) { clearTimeout(stepTimer); stepTimer = null; }\n        enableDataEditing(true);\n        updateExplain('Paused.');\n      }\n\n      function runOnePass(){\n        if(running) return;\n        running = true;\n        runPassMode = true;\n        enableDataEditing(false);\n        loop();\n        updateExplain('Running one full pass...');\n      }\n\n      function step(){\n        if(running) return;\n        executeOneStep();\n      }\n\n      function loop(){\n        if(!running) return;\n        const stepDur = reducedMotion ? 0 : Math.max(120, Math.round(animationMsBase / speed));\n        executeOneStep();\n        stepTimer = setTimeout(loop, stepDur + 80);\n      }\n\n      function executeOneStep(){\n        const n = items.length;\n\n        // If pass or array complete\n        if(iPass >= n - 1){\n          finalizeSorted();\n          return;\n        }\n\n        // If j beyond range, end pass\n        if(jIdx > n - 2 - iPass){\n          // End pass\n          iPass += 1;\n          markSortedTail();\n          updateTailGuide();\n          updateCounters();\n          setActiveLines([9]); // if not swapped -> break (conceptually deciding to continue or break)\n          if(earlyExit && !swappedThisPass){\n            finalizeSorted(true);\n            return;\n          }\n          // Prepare next pass\n          swappedThisPass = false;\n          jIdx = 0;\n          setActiveLines([3,4,5]); // next pass begins\n          updateExplain(`Pass ${iPass} complete. Sorted tail length is now ${iPass}.`);\n          if(runPassMode){\n            // If only one pass requested, stop running here\n            running = false;\n            runPassMode = false;\n            enableDataEditing(true);\n            updateExplain(`Completed 1 pass. ${iPass} element(s) fixed at the end.`);\n          }\n          return;\n        }\n\n        // Compare j and j+1\n        const a = items[jIdx];\n        const b = items[jIdx + 1];\n        highlightCompare(jIdx);\n        comparisons += 1;\n        updateCounters();\n        setActiveLines([5,6]);\n\n        const needSwap = a.value > b.value;\n        const msg = needSwap\n          ? `Compare indices ${jIdx} and ${jIdx+1}: ${a.value} > ${b.value} ⇒ swap.`\n          : `Compare indices ${jIdx} and ${jIdx+1}: ${a.value} ≤ ${b.value} ⇒ keep order.`;\n        updateExplain(msg);\n\n        if(needSwap){\n          // Swap visuals\n          a.el.classList.add('swap');\n          b.el.classList.add('swap');\n          performSwap(jIdx, jIdx + 1);\n          swaps += 1;\n          swappedThisPass = true;\n          updateCounters();\n          setActiveLines([7,8]);\n          // After swap, advance j\n          jIdx += 1;\n        } else {\n          // No swap, just advance\n          jIdx += 1;\n        }\n      }\n\n      function highlightCompare(idx){\n        clearBarStates();\n        const a = items[idx];\n        const b = items[idx+1];\n        a.el.classList.add('compare');\n        b.el.classList.add('compare');\n        markSortedTail();\n      }\n\n      function performSwap(i, j){\n        // Swap items in array\n        const tmp = items[i];\n        items[i] = items[j];\n        items[j] = tmp;\n        // Re-layout to animate to new positions\n        layoutBars(false);\n        // Clear swap markers after animation\n        const dur = reducedMotion ? 0 : Math.max(120, Math.round(animationMsBase / speed));\n        setTimeout(() => {\n          items[i]?.el.classList.remove('swap');\n          items[j]?.el.classList.remove('swap');\n        }, dur + 30);\n      }\n\n      function finalizeSorted(early=false){\n        running = false;\n        enableDataEditing(true);\n        iPass = items.length - 1;\n        markSortedTail();\n        updateTailGuide();\n        clearBarStates();\n        items.forEach(it => it.el.classList.add('sorted'));\n        setActiveLines([10]);\n        if(early){\n          updateExplain(`No swaps in last pass — array is already sorted. Finished early after ${comparisons} comparisons.`);\n        } else {\n          updateExplain(`Finished sorting after ${iPass} passes, ${comparisons} comparisons, ${swaps} swaps.`);\n        }\n        announce('Sorting complete.');\n      }\n\n      function updateSpeed(){\n        speed = parseFloat(speedRange.value);\n        speedLabel.textContent = `${speed.toFixed(2).replace(/\\.00$/,'')}×`.replace('.00','');\n        layoutBars(true);\n      }\n\n      // Start\n      init();\n\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Hash Map"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for a Bubble Sort interactive tutor. It models data loading, playback modes (play, pause, run one pass, step), algorithm micro-states (comparing, swapping, pass completion), visual feedback, and completion.",
      "states": [
        {
          "name": "initializing",
          "onEnter": "init_app",
          "onExit": "none",
          "on": {
            "INIT_COMPLETE": "idle"
          }
        },
        {
          "name": "idle",
          "onEnter": "enable_editing_and_show_ready",
          "onExit": "none",
          "on": {
            "APPLY_CLICK": "loading_array",
            "SHUFFLE_CLICK": "loading_array",
            "RESET_CLICK": "loading_array",
            "SIZE_CHANGE": "loading_array",
            "PLAY_CLICK": "playing",
            "PASS_CLICK": "pass_running",
            "STEP_CLICK": "comparing",
            "SPEED_INPUT": "idle",
            "REDUCED_MOTION_TOGGLE": "idle",
            "EXPLAIN_TOGGLE": "idle",
            "WINDOW_RESIZE": "idle",
            "ARRAY_COMPLETE": "done"
          }
        },
        {
          "name": "loading_array",
          "onEnter": "load_array",
          "onExit": "none",
          "on": {
            "LOAD_COMPLETE": "idle"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_auto_run",
          "onExit": "stop_auto_run_and_enable_editing",
          "on": {
            "STEP_TIMER_TICK": "comparing",
            "PAUSE_CLICK": "paused",
            "WINDOW_RESIZE": "playing",
            "SPEED_INPUT": "playing",
            "REDUCED_MOTION_TOGGLE": "playing",
            "ARRAY_COMPLETE": "done",
            "EARLY_EXIT_COMPLETE": "done"
          }
        },
        {
          "name": "pass_running",
          "onEnter": "start_auto_run_one_pass",
          "onExit": "stop_auto_run_and_enable_editing",
          "on": {
            "STEP_TIMER_TICK": "comparing",
            "PAUSE_CLICK": "paused",
            "ARRAY_COMPLETE": "done",
            "EARLY_EXIT_COMPLETE": "done",
            "PASS_COMPLETE": "idle"
          }
        },
        {
          "name": "paused",
          "onEnter": "pause_execution",
          "onExit": "none",
          "on": {
            "PLAY_CLICK": "playing",
            "PASS_CLICK": "pass_running",
            "STEP_CLICK": "comparing",
            "APPLY_CLICK": "loading_array",
            "SHUFFLE_CLICK": "loading_array",
            "RESET_CLICK": "loading_array",
            "SIZE_CHANGE": "loading_array"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_compare",
          "onExit": "none",
          "on": {
            "SWAP_NEEDED": "swapping",
            "NO_SWAP": "advance_index",
            "PASS_BOUNDARY": "pass_complete",
            "ARRAY_COMPLETE": "done",
            "ADVANCE_INDEX_AUTO": "playing",
            "ADVANCE_INDEX_STEP": "idle"
          }
        },
        {
          "name": "swapping",
          "onEnter": "perform_swap",
          "onExit": "none",
          "on": {
            "SWAP_ANIMATION_COMPLETE_AUTO": "playing",
            "SWAP_ANIMATION_COMPLETE_STEP": "idle",
            "PASS_BOUNDARY": "pass_complete",
            "ARRAY_COMPLETE": "done"
          }
        },
        {
          "name": "pass_complete",
          "onEnter": "complete_pass",
          "onExit": "none",
          "on": {
            "EARLY_EXIT_COMPLETE": "done",
            "CONTINUE_AUTOPLAY": "playing",
            "STOP_AFTER_ONE_PASS": "idle"
          }
        },
        {
          "name": "advance_index",
          "onEnter": "advance_inner_index",
          "onExit": "none",
          "on": {
            "PASS_BOUNDARY": "pass_complete",
            "ARRAY_COMPLETE": "done",
            "ADVANCE_INDEX_AUTO": "playing",
            "ADVANCE_INDEX_STEP": "idle"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_sorted",
          "onExit": "none",
          "on": {
            "APPLY_CLICK": "loading_array",
            "SHUFFLE_CLICK": "loading_array",
            "RESET_CLICK": "loading_array",
            "SIZE_CHANGE": "loading_array",
            "PLAY_CLICK": "playing"
          }
        }
      ],
      "events": [
        "INIT_COMPLETE",
        "APPLY_CLICK",
        "SHUFFLE_CLICK",
        "RESET_CLICK",
        "SIZE_INPUT",
        "SIZE_CHANGE",
        "PLAY_CLICK",
        "PAUSE_CLICK",
        "STEP_CLICK",
        "PASS_CLICK",
        "SPEED_INPUT",
        "REDUCED_MOTION_TOGGLE",
        "EXPLAIN_TOGGLE",
        "EARLY_EXIT_TOGGLE",
        "WINDOW_RESIZE",
        "LOAD_COMPLETE",
        "STEP_TIMER_TICK",
        "SWAP_NEEDED",
        "NO_SWAP",
        "ADVANCE_INDEX",
        "ADVANCE_INDEX_AUTO",
        "ADVANCE_INDEX_STEP",
        "SWAP_ANIMATION_COMPLETE_AUTO",
        "SWAP_ANIMATION_COMPLETE_STEP",
        "PASS_BOUNDARY",
        "PASS_COMPLETE",
        "CONTINUE_AUTOPLAY",
        "STOP_AFTER_ONE_PASS",
        "ARRAY_COMPLETE",
        "EARLY_EXIT_COMPLETE"
      ],
      "notes": "Mapping to code: init_app corresponds to init(), which seeds a random array, binds events, sets speed, and explains 'Ready'. load_array calls pause(), rebuilds bars for the provided values, optionally resets algorithm indices/counters (resetState=true for Apply/Reset/Size change; false for Shuffle), clears visual states, lays out bars, updates tail guide, highlights pseudocode lines [1,2,3,4], and enables data editing. start_auto_run and start_auto_run_one_pass correspond to play() and runOnePass(), respectively: they set running=true, disable data editing, set runPassMode accordingly, and start loop() which schedules STEP_TIMER_TICKs based on speed and reduced motion. pause_execution corresponds to pause(): running=false, runPassMode=false, step timer cleared, editing enabled, and explanation 'Paused'. comparing state mirrors highlightCompare(): clearBarStates, add 'compare' class to two bars, markSortedTail, setActiveLines([5,6]), increment comparisons and update counters, and explanation of comparison. perform_swap mirrors performSwap(): swap items, layoutBars(false) to animate, add 'swap' class to both bars, increment swaps, set swappedThisPass=true, setActiveLines([7,8]); a timer clears swap classes after animation duration, which emits SWAP_ANIMATION_COMPLETE_* depending on mode. advance_inner_index increments jIdx; in auto modes (playing/pass_running) the next STEP_TIMER_TICK will re-enter comparing; in step mode, control returns to idle immediately (ADVANCE_INDEX_STEP). pass_complete mirrors end-of-pass logic in executeOneStep(): iPass+=1, markSortedTail, updateTailGuide, updateCounters, setActiveLines([9]), and explanation 'Pass complete'. If earlyExitChk is on and swappedThisPass==false, EARLY_EXIT_COMPLETE triggers finalize_sorted(true). Otherwise, swap flag resets and jIdx=0; if runPassMode is true, STOP_AFTER_ONE_PASS returns to idle; else CONTINUE_AUTOPLAY stays in playing. finalize_sorted corresponds to finalizeSorted(early?): running=false, editing enabled, iPass set to n-1, markSortedTail, updateTailGuide, clearBarStates, add 'sorted' to all bars, setActiveLines([10]), explanation of completion (early or full), and announce 'Sorting complete.' Guards/dispatch: The app uses running and runPassMode booleans to decide whether to continue automatically or stop after one pass. Events ADVANCE_INDEX_AUTO vs ADVANCE_INDEX_STEP and SWAP_ANIMATION_COMPLETE_AUTO vs SWAP_ANIMATION_COMPLETE_STEP should be dispatched based on these flags. PASS_BOUNDARY is when jIdx exceeds n-2-iPass, checked at the start of executeOneStep; ARRAY_COMPLETE is when iPass >= n-1. Settings changes (SPEED_INPUT, REDUCED_MOTION_TOGGLE, EXPLAIN_TOGGLE, EARLY_EXIT_TOGGLE, WINDOW_RESIZE) do not change execution state; they update speed/reducedMotion/explain/earlyExit and trigger layout or message updates as self-loops on the current state. Data-editing actions are disabled during playing/pass_running via enableDataEditing(false). Visual feedback states (compare/swap/sorted) are controlled via CSS classes .compare, .swap, .sorted. The tail guide width updates each pass to reflect sorted tail length."
    }
  },
  {
    "id": "920a2ff0-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:37.672Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Deque",
    "answer": {
      "role": "assistant",
      "content": "Below is a complete, self-contained interactive HTML module that teaches bubble sort. It includes the requested sections (Concept Title, Learning Objective, Interaction Design, Layout Description) as part of the page content, and provides hands-on controls with animated visual feedback.\n\nConcept Title:\n- Bubble Sort: Adjacent comparisons and swaps that “bubble” the largest element to the end each pass.\n\nLearning Objective:\n- After interacting, users will be able to:\n  - Identify how bubble sort repeatedly compares adjacent elements and swaps them if out of order.\n  - Observe the “bubble” effect: the largest unsorted value moves to the end of the array during each pass.\n  - Understand the role of passes, the inner index j, and the early-exit optimization when a pass makes no swaps.\n\nInteraction Design:\n- Users can:\n  - Shuffle or enter a custom array (comma-separated).\n  - Step through the algorithm one comparison at a time.\n  - Play/Pause the algorithm with adjustable speed.\n  - Toggle early-exit optimization.\n- Visual feedback:\n  - Bars highlight when being compared.\n  - Swaps animate by sliding bars to new positions.\n  - The sorted boundary is marked so users see which portion is complete.\n  - Live counters for passes, comparisons, and swaps update as the algorithm runs.\n- Accessibility and input:\n  - Keyboard shortcuts: Space = Play/Pause, N = Step, R = Reset, H = Shuffle.\n  - Buttons and controls have accessible labels and focus outlines.\n\nLayout Description:\n- Safe area: 24 px padding around the viewport.\n- Spatial organization:\n  - Header: Title and a concise learning objective at the top.\n  - Visualization: Central bar chart with clear labels and high contrast.\n  - Controls: Grouped beneath the visualization with at least 16 px spacing between elements.\n  - Status: Live algorithm state below controls (pass, j index, counters).\n  - Module notes: Collapsible section describing Interaction Design and Layout for learners.\n- Responsiveness: The visualization and controls adapt to different screen widths; positions recompute on resize.\n- Accessibility: Keyboard support, ARIA labels, visible focus, color choices with good contrast; respects “prefers-reduced-motion”.\n\n-----------------------------------------\nHTML (copy everything below into a single .html file)\n-----------------------------------------\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Visual Lab</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f172a;          /* slate-900 */\n      --panel: #111827;       /* gray-900 */\n      --text: #e5e7eb;        /* gray-200 */\n      --muted: #9ca3af;       /* gray-400 */\n      --accent: #22c55e;      /* green-500 */\n      --accent-2: #06b6d4;    /* cyan-500 */\n      --warn: #f59e0b;        /* amber-500 */\n      --danger: #ef4444;      /* red-500 */\n      --border: #374151;      /* gray-700 */\n      --gap: 16px;            /* min spacing between interactive elements */\n      --safe: 24px;           /* safe-area margin */\n      --bar-gap: 12px;\n      --bar-min-width: 28px;\n      --bar-max-width: 64px;\n      --vis-height: 280px;\n      --transition: 320ms cubic-bezier(.2,.7,.2,1);\n    }\n\n    @media (prefers-reduced-motion: reduce) {\n      :root {\n        --transition: 0ms linear;\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      margin: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.5;\n    }\n\n    .safe {\n      padding: var(--safe);\n      display: flex;\n      flex-direction: column;\n      gap: 24px;\n      min-height: 100vh;\n    }\n\n    header h1 {\n      margin: 0 0 8px 0;\n      font-size: clamp(20px, 2.5vw, 28px);\n      letter-spacing: 0.2px;\n    }\n\n    .objective {\n      margin: 0;\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n\n    .panel {\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n    }\n\n    .vis-wrap {\n      display: flex;\n      flex-direction: column;\n      gap: var(--gap);\n    }\n\n    /* Visualization container with absolute bars */\n    .vis {\n      position: relative;\n      height: var(--vis-height);\n      background: #0b1220;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      overflow: hidden;\n    }\n\n    .bar {\n      position: absolute;\n      bottom: 0;\n      width: 40px; /* will be updated responsively */\n      height: 40px;\n      background: #334155;  /* slate-700 */\n      border-radius: 8px 8px 0 0;\n      border: 1px solid #475569; /* slate-600 */\n      transition: left var(--transition), height var(--transition), background var(--transition), transform var(--transition), border-color var(--transition);\n    }\n\n    .bar .label {\n      position: absolute;\n      top: -24px;\n      left: 50%;\n      transform: translateX(-50%);\n      color: var(--muted);\n      font-size: 12px;\n      user-select: none;\n      pointer-events: none;\n    }\n\n    .bar.comparing {\n      background: #3b82f6; /* blue-500 */\n      border-color: #60a5fa;\n    }\n\n    .bar.swapping {\n      background: var(--danger);\n      border-color: #fca5a5;\n    }\n\n    .bar.fixed {\n      background: var(--accent);\n      border-color: #86efac;\n    }\n\n    .vis-guides {\n      position: absolute;\n      right: 8px;\n      bottom: 8px;\n      color: var(--muted);\n      font-size: 12px;\n      background: rgba(255,255,255,0.04);\n      padding: 6px 8px;\n      border-radius: 8px;\n      border: 1px solid var(--border);\n    }\n\n    .controls {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n\n    .controls .group {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: center;\n    }\n\n    button, input, label, select {\n      font: inherit;\n    }\n\n    button {\n      background: #1f2937; /* gray-800 */\n      color: var(--text);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px 14px;\n      cursor: pointer;\n    }\n\n    button:hover {\n      background: #243042;\n    }\n\n    button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .primary {\n      background: #0ea5e9; /* sky-500 */\n      border-color: #0284c7;\n      color: #0b1322;\n      font-weight: 600;\n    }\n\n    .primary:hover {\n      background: #38bdf8;\n    }\n\n    .toggle {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 10px 14px;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      background: #1f2937;\n      cursor: pointer;\n      user-select: none;\n    }\n\n    .toggle input {\n      transform: translateY(1px);\n    }\n\n    .field {\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n      min-width: 260px;\n      max-width: 560px;\n      flex: 1;\n    }\n\n    .field input[type=\"text\"] {\n      background: #0b1322;\n      color: var(--text);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px 12px;\n    }\n\n    .hint {\n      font-size: 12px;\n      color: var(--muted);\n    }\n\n    .speed {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n\n    .speed input[type=\"range\"] {\n      width: 200px;\n    }\n\n    .status {\n      display: grid;\n      grid-template-columns: repeat(3, minmax(120px, 1fr));\n      gap: var(--gap);\n      margin-top: 8px;\n    }\n\n    .status .card {\n      background: #0b1220;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px 12px;\n    }\n\n    .status .label {\n      color: var(--muted);\n      font-size: 12px;\n      margin-bottom: 4px;\n    }\n\n    .status .value {\n      font-weight: 600;\n      font-size: 16px;\n    }\n\n    details.module-notes {\n      background: #0b1220;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 12px 14px;\n    }\n\n    details.module-notes summary {\n      cursor: pointer;\n      font-weight: 600;\n    }\n\n    .notes-list {\n      margin: 8px 0 0 0;\n      padding-left: 18px;\n      color: var(--muted);\n    }\n\n    /* focus visibility */\n    :focus-visible {\n      outline: 3px solid #38bdf8;\n      outline-offset: 2px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"safe\" role=\"main\">\n    <header>\n      <h1>Bubble Sort Visual Lab</h1>\n      <p class=\"objective\">Explore how adjacent comparisons and swaps bubble the largest element to the end on each pass.</p>\n    </header>\n\n    <!-- Visualization Panel -->\n    <section class=\"panel vis-wrap\" aria-label=\"Bubble sort interactive visualization\">\n      <div id=\"vis\" class=\"vis\" role=\"img\" aria-label=\"Bar chart representing array values\">\n        <div class=\"vis-guides\" aria-hidden=\"true\">\n          Comparing: blue · Swapping: red · Sorted: green\n        </div>\n      </div>\n\n      <!-- Controls -->\n      <div class=\"controls\" aria-label=\"Controls\">\n        <div class=\"group\" aria-label=\"Playback controls\">\n          <button id=\"playPauseBtn\" class=\"primary\" aria-label=\"Play or pause\">Play</button>\n          <button id=\"stepBtn\" aria-label=\"Step one comparison\">Step</button>\n          <button id=\"resetBtn\" aria-label=\"Reset to start state\">Reset</button>\n          <button id=\"shuffleBtn\" aria-label=\"Shuffle array\">Shuffle</button>\n        </div>\n\n        <div class=\"group speed\" aria-label=\"Speed and options\">\n          <label for=\"speedRange\">Speed</label>\n          <input id=\"speedRange\" type=\"range\" min=\"0\" max=\"100\" value=\"55\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"55\" />\n          <span id=\"speedVal\" class=\"hint\">1.0x</span>\n\n          <label class=\"toggle\" aria-label=\"Toggle early-exit optimization\">\n            <input id=\"optToggle\" type=\"checkbox\" checked />\n            Early exit (stop when no swaps)\n          </label>\n\n          <label class=\"toggle\" aria-label=\"Toggle reduced motion\">\n            <input id=\"motionToggle\" type=\"checkbox\" />\n            Reduce motion\n          </label>\n        </div>\n\n        <div class=\"field\" aria-label=\"Custom array input\">\n          <label for=\"arrayInput\">Custom array (comma-separated integers)</label>\n          <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 7, 3, 11, 2, 9\" />\n          <div class=\"hint\">Press Enter to apply. Between 3 and 14 numbers recommended.</div>\n        </div>\n      </div>\n\n      <!-- Status -->\n      <div class=\"status\" aria-live=\"polite\">\n        <div class=\"card\">\n          <div class=\"label\">Pass (i)</div>\n          <div id=\"passVal\" class=\"value\">0</div>\n        </div>\n        <div class=\"card\">\n          <div class=\"label\">Inner index (j)</div>\n          <div id=\"jVal\" class=\"value\">0</div>\n        </div>\n        <div class=\"card\">\n          <div class=\"label\">Comparisons / Swaps</div>\n          <div id=\"csVal\" class=\"value\">0 / 0</div>\n        </div>\n      </div>\n    </section>\n\n    <!-- Module Notes: includes required sections -->\n    <details class=\"module-notes\">\n      <summary>Module Notes: Concept, Objectives, Interaction, Layout</summary>\n      <ul class=\"notes-list\">\n        <li><strong>Concept Title</strong>: Bubble Sort — adjacent comparisons and swaps that bubble the largest value to the end each pass.</li>\n        <li><strong>Learning Objective</strong>: Observe how pairwise comparisons drive swaps, see the “bubble” effect per pass, and understand early-exit optimization when no swaps occur.</li>\n        <li><strong>Interaction Design</strong>: Shuffle or enter an array; Step through comparisons; Play/Pause with speed control; Toggle early-exit; bars highlight when compared and animate when swapped; sorted boundary turns green.</li>\n        <li><strong>Layout Description</strong>: Safe area padding 24 px; clear central visualization; controls below with 16 px spacing; live status; responsive sizing; keyboard and screen-reader friendly.</li>\n      </ul>\n    </details>\n\n    <footer class=\"hint\">\n      Shortcuts: Space = Play/Pause · N = Step · R = Reset · H = Shuffle\n    </footer>\n  </div>\n\n  <script>\n    (function () {\n      // State\n      let arr = [];\n      let bars = [];\n      let playing = false;\n      let i = 0;\n      let j = 0;\n      let comparisons = 0;\n      let swaps = 0;\n      let swappedInPass = false;\n      let earlyExit = true;\n      let reduceMotion = false;\n\n      // Elements\n      const vis = document.getElementById('vis');\n      const playPauseBtn = document.getElementById('playPauseBtn');\n      const stepBtn = document.getElementById('stepBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const shuffleBtn = document.getElementById('shuffleBtn');\n      const speedRange = document.getElementById('speedRange');\n      const speedVal = document.getElementById('speedVal');\n      const optToggle = document.getElementById('optToggle');\n      const motionToggle = document.getElementById('motionToggle');\n      const arrayInput = document.getElementById('arrayInput');\n\n      const passVal = document.getElementById('passVal');\n      const jVal = document.getElementById('jVal');\n      const csVal = document.getElementById('csVal');\n\n      // Animation control\n      let baseDurationMs = 600; // default base swap animation duration\n      let compareHoldMs = 360;  // time to keep comparison highlight\n      let isAnimating = false;\n\n      function lerp(min, max, t) {\n        return min + (max - min) * t;\n      }\n\n      function updateSpeedFromRange() {\n        const t = Number(speedRange.value) / 100;\n        // Map slider to duration scaling: faster at high values\n        const duration = lerp(900, 220, t);\n        baseDurationMs = Math.max(60, duration);\n        compareHoldMs = Math.max(40, Math.floor(baseDurationMs * 0.6));\n        const speedFactor = Math.round((900 / baseDurationMs) * 10) / 10;\n        speedVal.textContent = speedFactor.toFixed(1) + 'x';\n      }\n\n      function applyMotionPreference() {\n        reduceMotion = motionToggle.checked || window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n        document.documentElement.style.setProperty('--transition', reduceMotion ? '0ms linear' : '320ms cubic-bezier(.2,.7,.2,1)');\n      }\n\n      // Layout calculations\n      function computeBarMetrics(count) {\n        const pad = 12;\n        const gap = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-gap'), 10) || 12;\n        const visWidth = vis.clientWidth - pad * 2;\n        const minW = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-min-width'), 10) || 28;\n        const maxW = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-max-width'), 10) || 64;\n        const rawW = (visWidth - gap * (count - 1)) / count;\n        const width = Math.max(minW, Math.min(maxW, Math.floor(rawW)));\n        const lefts = [];\n        let x = Math.floor((vis.clientWidth - ((width * count) + gap * (count - 1))) / 2);\n        for (let k = 0; k < count; k++) {\n          lefts.push(x);\n          x += width + gap;\n        }\n        return { width, lefts };\n      }\n\n      function createBars() {\n        vis.innerHTML = '<div class=\"vis-guides\" aria-hidden=\"true\">Comparing: blue · Swapping: red · Sorted: green</div>';\n        bars = [];\n        const { width, lefts } = computeBarMetrics(arr.length);\n        const max = Math.max(...arr, 1);\n        for (let idx = 0; idx < arr.length; idx++) {\n          const val = arr[idx];\n          const h = Math.max(24, Math.round((val / max) * (parseInt(getComputedStyle(document.documentElement).getPropertyValue('--vis-height'), 10) - 36)));\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.style.left = lefts[idx] + 'px';\n          bar.style.width = width + 'px';\n          bar.style.height = h + 'px';\n          bar.setAttribute('role', 'img');\n          bar.setAttribute('aria-label', `Value ${val} at position ${idx + 1}`);\n          bar.dataset.index = String(idx);\n          bar.dataset.value = String(val);\n          const label = document.createElement('div');\n          label.className = 'label';\n          label.textContent = String(val);\n          bar.appendChild(label);\n          vis.appendChild(bar);\n          bars.push(bar);\n        }\n        updateSortedBoundaryVisuals();\n      }\n\n      function updateBarsPositions() {\n        const { width, lefts } = computeBarMetrics(arr.length);\n        const max = Math.max(...arr, 1);\n        for (let idx = 0; idx < arr.length; idx++) {\n          const bar = bars[idx];\n          const val = arr[idx];\n          const h = Math.max(24, Math.round((val / max) * (parseInt(getComputedStyle(document.documentElement).getPropertyValue('--vis-height'), 10) - 36)));\n          bar.style.width = width + 'px';\n          bar.style.left = lefts[idx] + 'px';\n          bar.style.height = h + 'px';\n          bar.dataset.index = String(idx);\n          bar.dataset.value = String(val);\n          bar.setAttribute('aria-label', `Value ${val} at position ${idx + 1}`);\n          bar.querySelector('.label').textContent = String(val);\n        }\n        updateSortedBoundaryVisuals();\n      }\n\n      function markComparing(jIdx, on) {\n        clearHighlights();\n        if (jIdx < 0 || jIdx + 1 >= bars.length) return;\n        bars[jIdx].classList.toggle('comparing', on);\n        bars[jIdx + 1].classList.toggle('comparing', on);\n      }\n\n      function clearHighlights() {\n        bars.forEach(b => {\n          b.classList.remove('comparing', 'swapping');\n        });\n      }\n\n      function updateSortedBoundaryVisuals() {\n        // Mark the last i elements as fixed (sorted boundary from the end)\n        const boundary = arr.length - i;\n        bars.forEach((b, idx) => {\n          const fixed = idx >= boundary;\n          b.classList.toggle('fixed', fixed);\n        });\n      }\n\n      function setStatus() {\n        passVal.textContent = String(i);\n        jVal.textContent = String(j);\n        csVal.textContent = `${comparisons} / ${swaps}`;\n      }\n\n      function finished() {\n        return i >= arr.length - 1;\n      }\n\n      function resetState(keepArray = true) {\n        playing = false;\n        playPauseBtn.textContent = 'Play';\n        i = 0;\n        j = 0;\n        comparisons = 0;\n        swaps = 0;\n        swappedInPass = false;\n        if (!keepArray) {\n          // Shuffle new array\n          arr = genRandomArray();\n        }\n        createBars();\n        setStatus();\n      }\n\n      function genRandomArray() {\n        const len = Math.floor(lerp(7, 12, Math.random()));\n        const a = [];\n        for (let k = 0; k < len; k++) {\n          a.push(Math.floor(lerp(5, 99, Math.random())));\n        }\n        return a;\n      }\n\n      // Parsing custom input\n      function parseArrayInput(text) {\n        const parts = text.split(/[,\\s]+/).filter(Boolean);\n        if (parts.length < 3 || parts.length > 14) return null;\n        const nums = parts.map(p => Number(p));\n        if (nums.some(n => !Number.isFinite(n))) return null;\n        // Clamp values for sensible bar heights\n        const clamped = nums.map(n => Math.max(1, Math.min(999, Math.round(n))));\n        return clamped;\n      }\n\n      // Core bubble sort step: one comparison (+ possible swap)\n      async function bubbleStep() {\n        if (finished()) return false;\n\n        const boundary = arr.length - i - 1;\n        if (j > boundary - 1) {\n          // end of pass\n          if (!swappedInPass && earlyExit) {\n            i = arr.length - 1; // mark finished\n            updateSortedBoundaryVisuals();\n            setStatus();\n            return false;\n          }\n          i++;\n          j = 0;\n          swappedInPass = false;\n          updateSortedBoundaryVisuals();\n          setStatus();\n          if (finished()) return false;\n        }\n\n        // Compare arr[j] and arr[j+1]\n        markComparing(j, true);\n        comparisons++;\n        setStatus();\n\n        await wait(compareHoldMs);\n\n        const needSwap = arr[j] > arr[j + 1];\n        if (needSwap) {\n          await animateSwap(j, j + 1);\n          swaps++;\n          swappedInPass = true;\n          setStatus();\n        } else {\n          clearHighlights();\n        }\n\n        j++;\n        setStatus();\n\n        return true;\n      }\n\n      function wait(ms) {\n        return new Promise(res => setTimeout(res, reduceMotion ? 0 : ms));\n      }\n\n      function animateSwap(aIdx, bIdx) {\n        return new Promise((resolve) => {\n          if (isAnimating) return resolve(); // guard\n          isAnimating = true;\n\n          const barA = bars[aIdx];\n          const barB = bars[bIdx];\n          barA.classList.remove('comparing');\n          barB.classList.remove('comparing');\n          barA.classList.add('swapping');\n          barB.classList.add('swapping');\n\n          // Compute current positions\n          const { left: leftA } = barA.getBoundingClientRect();\n          const { left: leftB } = barB.getBoundingClientRect();\n          const delta = leftB - leftA;\n\n          // Animate by swapping their \"left\" styles\n          const styleLeftA = parseFloat(barA.style.left || '0');\n          const styleLeftB = parseFloat(barB.style.left || '0');\n\n          barA.style.left = styleLeftB + 'px';\n          barB.style.left = styleLeftA + 'px';\n\n          const duration = reduceMotion ? 0 : baseDurationMs;\n          const doneA = new Promise(r => {\n            barA.addEventListener('transitionend', r, { once: true });\n            if (duration === 0) setTimeout(r, 0);\n          });\n          const doneB = new Promise(r => {\n            barB.addEventListener('transitionend', r, { once: true });\n            if (duration === 0) setTimeout(r, 0);\n          });\n\n          Promise.all([doneA, doneB]).then(() => {\n            // Update array order and bars array\n            const tmp = arr[aIdx];\n            arr[aIdx] = arr[bIdx];\n            arr[bIdx] = tmp;\n\n            const tmpBar = bars[aIdx];\n            bars[aIdx] = bars[bIdx];\n            bars[bIdx] = tmpBar;\n\n            // Recompute positions to match new indices\n            updateBarsPositions();\n            clearHighlights();\n\n            isAnimating = false;\n            resolve();\n          });\n        });\n      }\n\n      async function playLoop() {\n        if (playing) return;\n        playing = true;\n        playPauseBtn.textContent = 'Pause';\n        while (playing) {\n          const ok = await bubbleStep();\n          if (!ok) {\n            playing = false;\n            playPauseBtn.textContent = 'Play';\n            break;\n          }\n          // pacing between steps\n          await wait(Math.max(80, Math.floor(baseDurationMs * 0.25)));\n        }\n      }\n\n      // Event bindings\n      playPauseBtn.addEventListener('click', () => {\n        if (playing) {\n          playing = false;\n          playPauseBtn.textContent = 'Play';\n        } else {\n          playLoop();\n        }\n      });\n\n      stepBtn.addEventListener('click', async () => {\n        if (isAnimating) return;\n        const ok = await bubbleStep();\n        if (!ok) {\n          playing = false;\n          playPauseBtn.textContent = 'Play';\n        }\n      });\n\n      resetBtn.addEventListener('click', () => {\n        resetState(true);\n      });\n\n      shuffleBtn.addEventListener('click', () => {\n        arr = genRandomArray();\n        resetState(true);\n      });\n\n      speedRange.addEventListener('input', () => {\n        updateSpeedFromRange();\n      });\n\n      optToggle.addEventListener('change', () => {\n        earlyExit = optToggle.checked;\n      });\n\n      motionToggle.addEventListener('change', () => {\n        applyMotionPreference();\n      });\n\n      arrayInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          const parsed = parseArrayInput(arrayInput.value);\n          if (parsed) {\n            arr = parsed;\n            resetState(true);\n          } else {\n            arrayInput.setAttribute('aria-invalid', 'true');\n            arrayInput.style.borderColor = '#ef4444';\n            setTimeout(() => {\n              arrayInput.removeAttribute('aria-invalid');\n              arrayInput.style.borderColor = '';\n            }, 1200);\n          }\n        }\n      });\n\n      // Keyboard shortcuts\n      window.addEventListener('keydown', (e) => {\n        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;\n        if (e.code === 'Space') {\n          e.preventDefault();\n          playPauseBtn.click();\n        } else if (e.key.toLowerCase() === 'n') {\n          stepBtn.click();\n        } else if (e.key.toLowerCase() === 'r') {\n          resetBtn.click();\n        } else if (e.key.toLowerCase() === 'h') {\n          shuffleBtn.click();\n        }\n      });\n\n      // Resize handling\n      window.addEventListener('resize', () => {\n        updateBarsPositions();\n      });\n\n      // Initialize\n      function init() {\n        arr = genRandomArray();\n        updateSpeedFromRange();\n        applyMotionPreference();\n        resetState(true);\n      }\n\n      init();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Deque"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for a Bubble Sort visualizer with play/pause, step, reset/shuffle, speed, motion and early-exit options. It models user-control states and visual/animation phases of each sort step (comparing, swapping) and completion.",
      "states": [
        {
          "name": "idle",
          "onEnter": "setPlayingFalseUI",
          "on": {
            "CLICK_PLAY": "playing",
            "CLICK_STEP": "comparing",
            "CLICK_RESET": "idle",
            "CLICK_SHUFFLE": "idle",
            "ENTER_VALID_ARRAY": "idle",
            "ENTER_INVALID_ARRAY": "input_error_feedback"
          }
        },
        {
          "name": "playing",
          "onEnter": "setPlayingTrueUI",
          "onExit": "setPlayingFalseUI",
          "on": {
            "CLICK_PAUSE": "idle",
            "NEXT_STEP_TICK": "comparing",
            "PASS_COMPLETED_EARLY_EXIT": "done",
            "FINISHED_NATURAL": "done"
          }
        },
        {
          "name": "comparing",
          "onEnter": "markComparingAndHold",
          "on": {
            "COMPARE_HOLD_DONE_NEED_SWAP_AUTO": "swapping",
            "COMPARE_HOLD_DONE_NO_SWAP_AUTO": "playing",
            "COMPARE_HOLD_DONE_NEED_SWAP_STEP": "swapping",
            "COMPARE_HOLD_DONE_NO_SWAP_STEP": "idle"
          }
        },
        {
          "name": "swapping",
          "onEnter": "animateSwap",
          "on": {
            "SWAP_ANIM_END_AUTO": "playing",
            "SWAP_ANIM_END_STEP": "idle"
          }
        },
        {
          "name": "done",
          "onEnter": "markAllSortedAndPauseUI",
          "on": {
            "CLICK_RESET": "idle",
            "CLICK_SHUFFLE": "idle",
            "ENTER_VALID_ARRAY": "idle",
            "CLICK_PLAY": "done"
          }
        },
        {
          "name": "input_error_feedback",
          "onEnter": "flashInvalidInput",
          "on": {
            "ERROR_TIMEOUT": "idle"
          }
        }
      ],
      "events": [
        "CLICK_PLAY",
        "CLICK_PAUSE",
        "CLICK_STEP",
        "CLICK_RESET",
        "CLICK_SHUFFLE",
        "ENTER_VALID_ARRAY",
        "ENTER_INVALID_ARRAY",
        "ERROR_TIMEOUT",
        "NEXT_STEP_TICK",
        "COMPARE_HOLD_DONE_NEED_SWAP_AUTO",
        "COMPARE_HOLD_DONE_NO_SWAP_AUTO",
        "COMPARE_HOLD_DONE_NEED_SWAP_STEP",
        "COMPARE_HOLD_DONE_NO_SWAP_STEP",
        "SWAP_ANIM_END_AUTO",
        "SWAP_ANIM_END_STEP",
        "PASS_COMPLETED_EARLY_EXIT",
        "FINISHED_NATURAL"
      ],
      "notes": "State semantics and code mapping:\n- idle: Paused/not auto-playing. UI shows Play on the button. In code, this corresponds to playing=false and playPauseBtn.textContent='Play'. Reset/Shuffle/Custom array events transition here with side-effects described below.\n- playing: Auto loop driven by playLoop(). On entering, playing=true and Play/Pause button shows 'Pause'. While in this state, the loop schedules NEXT_STEP_TICK (immediately at start and after each pacing delay) which triggers comparing. Clicking Pause triggers CLICK_PAUSE -> idle. If bubbleStep detects completion (i >= arr.length-1) or early-exit (no swaps in pass and earlyExit enabled), emit FINISHED_NATURAL or PASS_COMPLETED_EARLY_EXIT -> done.\n- comparing: Visual highlight of bars j and j+1 (markComparing(j,true)), comparisons++ and a timed hold (compareHoldMs). After hold, the branch is decided by data: needSwap = arr[j] > arr[j+1]. For auto mode, use COMPARE_HOLD_DONE_NEED_SWAP_AUTO -> swapping; COMPARE_HOLD_DONE_NO_SWAP_AUTO -> playing (the loop will schedule the next NEXT_STEP_TICK after pacing). For a single-step (CLICK_STEP from idle), use COMPARE_HOLD_DONE_NEED_SWAP_STEP -> swapping; COMPARE_HOLD_DONE_NO_SWAP_STEP -> idle.\n- swapping: Animate the swap of bars j and j+1 (animateSwap) with transitionend sync; after animation, swaps++, swappedInPass=true and visuals are cleared. For auto mode, SWAP_ANIM_END_AUTO -> playing; for step mode, SWAP_ANIM_END_STEP -> idle.\n- done: All elements marked fixed/green (i set so boundary marks all bars; updateSortedBoundaryVisuals()). Ensure playing=false and Play button reads 'Play'. Reset-related events leave done -> idle.\n- input_error_feedback: Brief visual feedback for invalid custom array input (aria-invalid, red border) lasting ~1200ms. After ERROR_TIMEOUT, return to idle without changing algorithm state.\n\nEnd-of-pass and completion logic:\n- At the start of each bubbleStep (invoked by NEXT_STEP_TICK in playing, or by CLICK_STEP), a pass boundary check runs. If j > arr.length - i - 2, the pass ends: if earlyExit is enabled and no swap occurred during the pass (swappedInPass=false), i is set to arr.length-1, visuals updated and the step returns false -> PASS_COMPLETED_EARLY_EXIT -> done. Otherwise, i++ and j=0 (updateSortedBoundaryVisuals and setStatus), then proceed if not finished.\n- FINISHED_NATURAL occurs when i >= arr.length - 1 after increments.\n\nSide-effects attached to events (not explicit in onEnter due to schema constraints):\n- CLICK_RESET: calls resetState(true) (keep current array, reset indices/counters, rebuild bars, clear highlights, update status), target state: idle.\n- CLICK_SHUFFLE: sets arr = genRandomArray(), then resetState(true), target state: idle.\n- ENTER_VALID_ARRAY: when user presses Enter with valid parsed numbers, sets arr to parsed, then resetState(true), target state: idle.\n- ENTER_INVALID_ARRAY: triggers input_error_feedback (aria-invalid + red border), then ERROR_TIMEOUT -> idle.\n\nPacing and animation timing:\n- In playing, after each successful bubbleStep returns true, playLoop waits a pacing delay (~max(80ms, baseDurationMs*0.25)) and then emits NEXT_STEP_TICK.\n- compareHoldMs is derived from speed slider and reduced-motion preference and governs the stay in comparing.\n- animateSwap duration uses baseDurationMs (or 0 when reduce motion).\n\nControls that do not change FSM state:\n- SPEED_CHANGE (speedRange input) updates baseDurationMs/compareHoldMs and UI speedVal; remains in current state.\n- TOGGLE_EARLY_EXIT updates earlyExit flag; remains in current state.\n- TOGGLE_REDUCED_MOTION updates CSS --transition and reduceMotion; remains in current state.\n- RESIZE recomputes and applies bar layout (updateBarsPositions); remains in current state.\n\nKeyboard shortcuts:\n- Space -> CLICK_PLAY/CLICK_PAUSE; N -> CLICK_STEP; R -> CLICK_RESET; H -> CLICK_SHUFFLE. These are equivalent to their respective button click events.\n\nAction name mapping to code:\n- setPlayingTrueUI: playing=true; playPauseBtn.textContent='Pause'.\n- setPlayingFalseUI: playing=false; playPauseBtn.textContent='Play'.\n- markComparingAndHold: markComparing(j,true); comparisons++; setStatus(); await wait(compareHoldMs).\n- animateSwap: perform swap animation of bars j and j+1; upon transitionend, update arr and bars order, swaps++, clear highlights, update positions/status.\n- markAllSortedAndPauseUI: ensure all bars marked .fixed via updateSortedBoundaryVisuals (i == arr.length-1), setStatus(), setPlayingFalseUI.\n- flashInvalidInput: set aria-invalid and red border on arrayInput for ~1200ms, then clear."
    }
  },
  {
    "id": "7787d740-b406-11f0-b2cf-31de200d1aa8",
    "timestamp": "2025-10-28T14:03:40.557Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Linked List",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort — Adjacent Comparisons and Swaps</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --safe-margin: 24px;\n      --gap: 16px;\n      --bg: #0f172a;           /* slate-900 */\n      --panel: #111827;        /* gray-900 */\n      --text: #e5e7eb;         /* gray-200 */\n      --muted: #9ca3af;        /* gray-400 */\n      --accent: #22c55e;       /* green-500 */\n      --accent-2: #60a5fa;     /* blue-400 */\n      --warn: #f97316;         /* orange-500 */\n      --danger: #ef4444;       /* red-500 */\n      --focus: #a78bfa;        /* violet-400 */\n      --node: #1f2937;         /* gray-800 */\n      --node-border: #374151;  /* gray-700 */\n      --highlight: rgba(96, 165, 250, 0.25);\n    }\n\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.5;\n    }\n\n    main {\n      padding: var(--safe-margin);\n      box-sizing: border-box;\n      max-width: 1100px;\n      margin: 0 auto;\n    }\n\n    h1, h2 {\n      margin: 0 0 8px 0;\n      line-height: 1.2;\n    }\n\n    h1 {\n      font-size: 1.75rem;\n    }\n\n    h2 {\n      font-size: 1.25rem;\n    }\n\n    p {\n      margin: 0 0 12px 0;\n      color: var(--muted);\n    }\n\n    .section {\n      background: var(--panel);\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      padding: 16px;\n      margin-bottom: 16px;\n    }\n\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n\n    @media (min-width: 800px) {\n      .controls {\n        grid-template-columns: 2fr 1.5fr 1fr;\n      }\n    }\n\n    .control-group {\n      display: flex;\n      flex-wrap: wrap;\n      gap: var(--gap);\n      align-items: flex-end;\n    }\n\n    label {\n      display: block;\n      font-weight: 600;\n      font-size: 0.9rem;\n      margin-bottom: 6px;\n    }\n\n    input[type=\"text\"], input[type=\"number\"], select {\n      width: 100%;\n      padding: 10px 12px;\n      background: #0b1220;\n      border: 1px solid #1f2937;\n      border-radius: 8px;\n      color: var(--text);\n      outline: none;\n    }\n\n    input[type=\"text\"]:focus, input[type=\"number\"]:focus, select:focus {\n      border-color: var(--focus);\n      box-shadow: 0 0 0 3px rgba(167, 139, 250, 0.2);\n    }\n\n    .inline {\n      display: flex;\n      gap: var(--gap);\n      flex-wrap: wrap;\n    }\n\n    .btn {\n      padding: 10px 14px;\n      border-radius: 10px;\n      border: 1px solid #1f2937;\n      background: #0b1220;\n      color: var(--text);\n      cursor: pointer;\n      transition: transform 120ms ease, background 120ms ease, border-color 120ms ease;\n    }\n    .btn:hover {\n      transform: translateY(-1px);\n      background: #0d1528;\n    }\n    .btn:focus-visible {\n      outline: none;\n      border-color: var(--focus);\n      box-shadow: 0 0 0 3px rgba(167, 139, 250, 0.35);\n    }\n    .btn.primary {\n      background: #0d1528;\n      border-color: #253152;\n    }\n    .btn.success { border-color: var(--accent); color: var(--accent); }\n    .btn.warn { border-color: var(--warn); color: var(--warn); }\n    .btn.danger { border-color: var(--danger); color: var(--danger); }\n\n    .switch {\n      display: inline-flex;\n      align-items: center;\n      gap: 10px;\n    }\n    .switch input {\n      width: 44px;\n      height: 24px;\n      appearance: none;\n      background: #111827;\n      border: 1px solid #374151;\n      border-radius: 12px;\n      position: relative;\n      cursor: pointer;\n      outline: none;\n      transition: background 160ms ease, border-color 160ms ease;\n    }\n    .switch input::after {\n      content: \"\";\n      width: 18px;\n      height: 18px;\n      background: #e5e7eb;\n      border-radius: 50%;\n      position: absolute;\n      top: 2px;\n      left: 2px;\n      transition: transform 160ms ease, background 160ms ease;\n    }\n    .switch input:checked {\n      background: #153254;\n      border-color: var(--accent-2);\n    }\n    .switch input:checked::after {\n      background: var(--accent-2);\n      transform: translateX(20px);\n    }\n\n    .visual {\n      position: relative;\n      overflow: hidden;\n      padding: 20px;\n      border-radius: 12px;\n      background: radial-gradient(1200px 400px at 20% 0%, #0b1220 0%, #0a101b 40%, #091018 100%);\n      border: 1px solid #1f2937;\n    }\n\n    .timeline {\n      display: flex;\n      gap: 12px;\n      align-items: center;\n      margin-bottom: 12px;\n    }\n\n    .timeline .badge {\n      font-size: 0.85rem;\n      padding: 6px 10px;\n      border-radius: 999px;\n      border: 1px solid #1f2937;\n      background: #0d1528;\n      color: var(--muted);\n    }\n\n    /* List display area */\n    .list-area {\n      position: relative;\n      min-height: 140px;\n      border-radius: 12px;\n      background: #0c1423;\n      border: 1px dashed #233045;\n      padding: 16px;\n    }\n\n    /* Bars representation */\n    .bars {\n      display: flex;\n      align-items: flex-end;\n      gap: 12px;\n      height: 100%;\n      min-height: 120px;\n    }\n    .bar {\n      flex: 1 1 auto;\n      min-width: 28px;\n      background: linear-gradient(180deg, #1e293b, #0f172a);\n      border: 1px solid #334155;\n      border-radius: 6px;\n      position: relative;\n      transform-origin: bottom center;\n      transition: background 160ms ease, border-color 160ms ease;\n    }\n    .bar.highlight {\n      box-shadow: 0 0 0 6px var(--highlight);\n      border-color: var(--accent-2);\n      background: linear-gradient(180deg, #1f2d3f, #12203a);\n    }\n    .bar span {\n      position: absolute;\n      bottom: -26px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 0.85rem;\n      color: var(--muted);\n    }\n\n    /* Linked nodes representation */\n    .nodes-wrap {\n      position: relative;\n      min-height: 120px;\n    }\n    .nodes {\n      display: flex;\n      align-items: center;\n      gap: 24px;\n      position: relative;\n      z-index: 2;\n    }\n    .node {\n      width: 60px;\n      height: 60px;\n      background: var(--node);\n      border: 1px solid var(--node-border);\n      border-radius: 12px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: relative;\n      transition: background 160ms ease, border-color 160ms ease;\n    }\n    .node.highlight {\n      box-shadow: 0 0 0 6px var(--highlight);\n      border-color: var(--accent-2);\n      background: #1b2435;\n    }\n    .node span {\n      font-weight: 600;\n    }\n    .links {\n      position: absolute;\n      inset: 0;\n      z-index: 1;\n      pointer-events: none;\n    }\n    .links line {\n      stroke: #334155;\n      stroke-width: 2;\n      marker-end: url(#arrow);\n    }\n\n    /* Explanation box */\n    .explain {\n      margin-top: 12px;\n      padding: 12px;\n      border-radius: 10px;\n      background: #0b1220;\n      border: 1px solid #1f2937;\n      color: var(--text);\n    }\n    .explain strong { color: var(--accent-2); }\n    .explain .ok { color: var(--accent); }\n    .explain .warn { color: var(--warn); }\n    .explain .danger { color: var(--danger); }\n\n    /* Footer sections */\n    .meta {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: var(--gap);\n    }\n    @media (min-width: 900px) {\n      .meta {\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n    details {\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      background: #0b1220;\n      padding: 12px;\n    }\n    summary {\n      cursor: pointer;\n      font-weight: 600;\n      margin-bottom: 8px;\n      outline: none;\n    }\n\n    /* Utility and spacing */\n    .sr-only {\n      position: absolute;\n      width: 1px; height: 1px;\n      padding: 0; margin: -1px;\n      overflow: hidden; clip: rect(0,0,0,0);\n      white-space: nowrap; border: 0;\n    }\n    .spacer { height: 8px; }\n\n    /* Keyboard hint chips */\n    .chip {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 6px 10px;\n      border-radius: 999px;\n      border: 1px solid #263146;\n      background: #0d1528;\n      color: var(--muted);\n      font-size: 0.85rem;\n    }\n    kbd {\n      display: inline-block;\n      padding: 2px 6px;\n      border-radius: 6px;\n      border: 1px solid #334155;\n      background: #0c1423;\n      color: var(--text);\n      font-size: 0.8rem;\n    }\n\n    /* Playhead/step indicator */\n    .status-line {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      align-items: center;\n    }\n    .status-pill {\n      padding: 6px 10px;\n      border-radius: 999px;\n      border: 1px solid #263146;\n      background: #0d1528;\n      color: var(--muted);\n      font-size: 0.85rem;\n    }\n\n    /* Spacing between interactive elements guarantee */\n    .controls .btn,\n    .controls input,\n    .controls select,\n    .switch,\n    .inline > * {\n      margin-right: 0; /* rely on gap */\n    }\n  </style>\n</head>\n<body>\n  <main>\n    <section class=\"section\" aria-labelledby=\"title\">\n      <h1 id=\"title\">Bubble Sort — Adjacent Comparisons and Swaps</h1>\n      <p>Interactively explore how bubble sort walks through adjacent pairs, swaps out-of-order neighbors, and completes passes until the list is sorted. Visualize the list as bars or as linked nodes; drive each comparison yourself or watch the algorithm run.</p>\n    </section>\n\n    <section class=\"section\" aria-labelledby=\"objective\">\n      <h2 id=\"objective\">Learning Objective</h2>\n      <ul>\n        <li>Understand that bubble sort repeatedly compares adjacent items and swaps when the left item is greater than the right.</li>\n        <li>See how the largest elements \"bubble\" to the end after each pass and how the unsorted range shrinks.</li>\n        <li>Experience the early exit optimization: if a pass makes no swaps, the list is already sorted.</li>\n        <li>Practice making swap/no-swap decisions to reinforce the comparison rule.</li>\n      </ul>\n    </section>\n\n    <section class=\"section controls\" aria-label=\"Controls\">\n      <div class=\"control-group\" aria-label=\"List Builder\">\n        <div style=\"flex: 2 1 260px;\">\n          <label for=\"numbers\">Numbers (comma-separated)</label>\n          <input id=\"numbers\" type=\"text\" value=\"7,3,9,2,5,8\" aria-describedby=\"numbers-help\" />\n          <div id=\"numbers-help\" class=\"sr-only\">Enter integers separated by commas, e.g., 5,3,8,2.</div>\n        </div>\n        <div style=\"flex: 1 1 160px;\">\n          <label for=\"length\">Random length</label>\n          <input id=\"length\" type=\"number\" min=\"3\" max=\"20\" value=\"8\" />\n        </div>\n        <div class=\"inline\" role=\"group\" aria-label=\"List actions\" style=\"flex: 1 1 200px;\">\n          <button class=\"btn primary\" id=\"apply\">Apply</button>\n          <button class=\"btn\" id=\"random\">Randomize</button>\n          <button class=\"btn danger\" id=\"reset\">Reset</button>\n        </div>\n      </div>\n\n      <div class=\"control-group\" aria-label=\"Sorting Controls\">\n        <div style=\"flex: 1 1 180px;\">\n          <label for=\"representation\">Representation</label>\n          <select id=\"representation\" aria-label=\"Representation style\">\n            <option value=\"bars\">Bars (heights)</option>\n            <option value=\"linked\">Linked nodes</option>\n          </select>\n        </div>\n        <div style=\"flex: 1 1 180px;\">\n          <label for=\"speed\">Animation speed</label>\n          <input id=\"speed\" type=\"range\" min=\"0.25\" max=\"2\" step=\"0.05\" value=\"1\" aria-label=\"Animation speed\" />\n          <div aria-hidden=\"true\" id=\"speedLabel\" class=\"muted\">1.0x</div>\n        </div>\n        <div class=\"inline\" role=\"group\" aria-label=\"Run control buttons\" style=\"flex: 1 1 300px;\">\n          <button class=\"btn success\" id=\"play\">Play</button>\n          <button class=\"btn warn\" id=\"step\">Step</button>\n          <button class=\"btn\" id=\"pause\">Pause</button>\n        </div>\n      </div>\n\n      <div class=\"control-group\" aria-label=\"Modes and options\">\n        <div class=\"switch\" aria-label=\"Practice mode\">\n          <input id=\"practice\" type=\"checkbox\" role=\"switch\" aria-checked=\"false\" />\n          <label for=\"practice\">Practice mode (you decide swap vs no-swap)</label>\n        </div>\n        <div class=\"switch\" aria-label=\"Early exit optimization\">\n          <input id=\"earlyExit\" type=\"checkbox\" role=\"switch\" aria-checked=\"true\" checked />\n          <label for=\"earlyExit\">Early exit when a pass has no swaps</label>\n        </div>\n        <div class=\"inline\" role=\"group\" aria-label=\"Practice decisions\" style=\"flex: 1 1 320px;\">\n          <button class=\"btn success\" id=\"decideSwap\" disabled>Swap</button>\n          <button class=\"btn\" id=\"decideKeep\" disabled>No Swap</button>\n        </div>\n        <div class=\"inline\" role=\"group\" aria-label=\"Keyboard hints\">\n          <div class=\"chip\"><kbd>Space</kbd> Play/Pause</div>\n          <div class=\"chip\"><kbd>→</kbd> Step</div>\n          <div class=\"chip\"><kbd>S</kbd> Swap</div>\n          <div class=\"chip\"><kbd>N</kbd> No Swap</div>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"section visual\" aria-labelledby=\"visual\">\n      <div class=\"timeline\" aria-live=\"polite\">\n        <div class=\"badge\">Pass: <span id=\"passBadge\">1</span></div>\n        <div class=\"badge\">Comparison: <span id=\"compBadge\">1</span></div>\n        <div class=\"badge\">Unsorted range ends at index <span id=\"unsortedEnd\">last</span></div>\n      </div>\n\n      <div class=\"list-area\" id=\"listArea\" aria-label=\"Sortable list visual\">\n        <div id=\"barsWrap\" class=\"bars\" hidden></div>\n        <div id=\"nodesWrap\" class=\"nodes-wrap\" hidden>\n          <svg class=\"links\" id=\"linksSvg\" aria-hidden=\"true\"></svg>\n          <div id=\"nodes\" class=\"nodes\"></div>\n          <svg width=\"0\" height=\"0\" aria-hidden=\"true\">\n            <defs>\n              <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"userSpaceOnUse\">\n                <path d=\"M0,0 L6,3 L0,6\" fill=\"#334155\" />\n              </marker>\n            </defs>\n          </svg>\n        </div>\n      </div>\n\n      <div class=\"status-line\" style=\"margin-top: 12px;\">\n        <div class=\"status-pill\">Swapped this pass: <strong id=\"swappedFlag\">No</strong></div>\n        <div class=\"status-pill\">State: <strong id=\"stateLabel\">Ready</strong></div>\n      </div>\n\n      <div class=\"explain\" id=\"explain\" aria-live=\"polite\">\n        Ready. Click Step to highlight the next adjacent pair. If the left value is greater, bubble sort swaps them.\n      </div>\n    </section>\n\n    <section class=\"section meta\" aria-label=\"Module descriptions\">\n      <div>\n        <h2>Interaction Design</h2>\n        <ul>\n          <li>Click Play to watch bubble sort run; Pause to stop; Step to advance one comparison at a time.</li>\n          <li>Toggle Practice mode to make the decision for each highlighted pair: click Swap or No Swap. Immediate feedback shows whether your choice matches the rule.</li>\n          <li>Switch between Bars (height proportional to value) and Linked nodes (boxes connected with arrows) to see the same process in two views.</li>\n          <li>Adjust Animation speed to slow down or speed up comparisons and swaps.</li>\n          <li>Early exit optimization ends the algorithm when a pass makes no swaps, reinforcing that the list is already sorted.</li>\n          <li>Keyboard: Space toggles Play/Pause, Right Arrow performs Step, S triggers Swap, N triggers No Swap.</li>\n        </ul>\n      </div>\n      <div>\n        <h2>Layout Description</h2>\n        <ul>\n          <li>Safe area margins are 24 px on all sides. Controls are grouped into three responsive rows with at least 16 px spacing between inputs and buttons.</li>\n          <li>The visual occupies a dedicated panel with the current pass and comparison indicators above the list area. Bars or nodes render in a single row with clear highlights for the active pair.</li>\n          <li>An explanation box below the visual narrates each action, and status pills summarize the algorithm state and pass swap flag.</li>\n          <li>The page is accessible: all controls use labels, the explanation and timeline use aria-live for updates, and contrast meets readability standards. The layout adapts to small screens by stacking control groups.</li>\n        </ul>\n      </div>\n    </section>\n  </main>\n\n  <script>\n    // Bubble Sort Interactive Module (vanilla JS)\n\n    // State model for bubble sort\n    const state = {\n      arr: [],\n      pass: 0,          // zero-based pass index\n      i: 0,             // current comparison index (compare i and i+1)\n      swappedInPass: false,\n      unsortedEnd: null, // last index included in comparisons for current pass\n      done: false,\n      practiceMode: false,\n      awaitingDecision: false,\n      autoTimer: null,\n      speed: 1,\n      history: []\n    };\n\n    // Elements\n    const numbersInput = document.getElementById('numbers');\n    const lengthInput = document.getElementById('length');\n    const applyBtn = document.getElementById('apply');\n    const randomBtn = document.getElementById('random');\n    const resetBtn = document.getElementById('reset');\n\n    const representationSelect = document.getElementById('representation');\n    const speedRange = document.getElementById('speed');\n    const speedLabel = document.getElementById('speedLabel');\n    const playBtn = document.getElementById('play');\n    const stepBtn = document.getElementById('step');\n    const pauseBtn = document.getElementById('pause');\n\n    const practiceSwitch = document.getElementById('practice');\n    const earlyExitSwitch = document.getElementById('earlyExit');\n    const decideSwapBtn = document.getElementById('decideSwap');\n    const decideKeepBtn = document.getElementById('decideKeep');\n\n    const passBadge = document.getElementById('passBadge');\n    const compBadge = document.getElementById('compBadge');\n    const unsortedEndBadge = document.getElementById('unsortedEnd');\n    const swappedFlag = document.getElementById('swappedFlag');\n    const stateLabel = document.getElementById('stateLabel');\n    const explainBox = document.getElementById('explain');\n\n    const barsWrap = document.getElementById('barsWrap');\n    const nodesWrap = document.getElementById('nodesWrap');\n    const nodesContainer = document.getElementById('nodes');\n    const linksSvg = document.getElementById('linksSvg');\n\n    const clamp = (min, val, max) => Math.max(min, Math.min(max, val));\n\n    function parseNumbers(str) {\n      const parts = str.split(/[, ]+/).filter(Boolean);\n      const arr = parts.map(p => parseInt(p, 10)).filter(n => Number.isFinite(n));\n      return arr.slice(0, 20); // cap length for clarity\n    }\n\n    function randomArray(len) {\n      const L = clamp(3, len, 20);\n      const arr = [];\n      for (let i = 0; i < L; i++) {\n        arr.push(Math.floor(Math.random() * 99) + 1);\n      }\n      return arr;\n    }\n\n    function resetState(arr) {\n      state.arr = arr.slice();\n      state.pass = 0;\n      state.i = 0;\n      state.swappedInPass = false;\n      state.unsortedEnd = arr.length - 1;\n      state.done = false;\n      state.practiceMode = practiceSwitch.checked;\n      state.awaitingDecision = false;\n      state.history = [];\n      clearTimer();\n      updateUI();\n      renderList(true);\n      narrate(\"Ready. Click Step to highlight the next adjacent pair. If the left value is greater, bubble sort swaps them.\");\n    }\n\n    function updateUI() {\n      passBadge.textContent = (state.pass + 1);\n      compBadge.textContent = state.i + 1;\n      unsortedEndBadge.textContent = state.unsortedEnd;\n      swappedFlag.textContent = state.swappedInPass ? \"Yes\" : \"No\";\n      stateLabel.textContent = state.done ? \"Sorted\" : (state.awaitingDecision ? \"Awaiting decision\" : \"Running/Ready\");\n\n      // Enable/disable practice decision buttons\n      decideSwapBtn.disabled = !(state.practiceMode && state.awaitingDecision && !state.done);\n      decideKeepBtn.disabled = !(state.practiceMode && state.awaitingDecision && !state.done);\n\n      // View toggle\n      const view = representationSelect.value;\n      if (view === 'bars') {\n        barsWrap.hidden = false;\n        nodesWrap.hidden = true;\n      } else {\n        barsWrap.hidden = true;\n        nodesWrap.hidden = false;\n      }\n\n      // Play/Pause buttons accessible labels\n      playBtn.setAttribute('aria-disabled', state.autoTimer ? 'true' : 'false');\n      pauseBtn.setAttribute('aria-disabled', state.autoTimer ? 'false' : 'true');\n    }\n\n    function clearTimer() {\n      if (state.autoTimer) {\n        clearInterval(state.autoTimer);\n        state.autoTimer = null;\n      }\n    }\n\n    function setSpeed(mult) {\n      state.speed = mult;\n      speedLabel.textContent = `${mult.toFixed(2)}x`;\n      // If playing, adjust timer by restarting\n      if (state.autoTimer) {\n        clearTimer();\n        play();\n      }\n    }\n\n    // FLIP animation: animate reordering smoothly\n    function flipAnimate(container, itemsBefore, itemsAfter, durationMs) {\n      // Measure initial rects\n      const firstRects = new Map();\n      itemsBefore.forEach(el => {\n        firstRects.set(el.dataset.key, el.getBoundingClientRect());\n      });\n\n      // Apply new order already present in DOM (itemsAfter)\n      const lastRects = new Map();\n      itemsAfter.forEach(el => {\n        lastRects.set(el.dataset.key, el.getBoundingClientRect());\n      });\n\n      itemsAfter.forEach(el => {\n        const key = el.dataset.key;\n        const first = firstRects.get(key);\n        const last = lastRects.get(key);\n        if (!first || !last) return;\n        const dx = first.left - last.left;\n        const dy = first.top - last.top;\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.transition = 'none';\n      });\n\n      requestAnimationFrame(() => {\n        itemsAfter.forEach(el => {\n          el.style.transition = `transform ${durationMs}ms ease`;\n          el.style.transform = 'translate(0, 0)';\n        });\n      });\n\n      // Cleanup after transition\n      setTimeout(() => {\n        itemsAfter.forEach(el => {\n          el.style.transition = '';\n          el.style.transform = '';\n        });\n        // Update links if in nodes view\n        if (representationSelect.value === 'linked') {\n          drawLinks();\n        }\n      }, durationMs + 20);\n    }\n\n    function renderList(initial = false) {\n      const view = representationSelect.value;\n      const len = state.arr.length;\n\n      if (view === 'bars') {\n        barsWrap.innerHTML = '';\n        const maxVal = Math.max(...state.arr);\n        const beforeItems = initial ? [] : Array.from(barsWrap.children);\n        state.arr.forEach((val, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.dataset.key = `k${idx}-${val}-${Math.random().toString(36).slice(2,7)}`;\n          const height = Math.max(20, Math.floor((val / maxVal) * 100) + 20);\n          bar.style.height = `${height}px`;\n          if (idx === state.i || idx === state.i + 1) {\n            bar.classList.add('highlight');\n          }\n          const label = document.createElement('span');\n          label.textContent = val;\n          bar.appendChild(label);\n          barsWrap.appendChild(bar);\n        });\n        if (!initial) {\n          const afterItems = Array.from(barsWrap.children);\n          const duration = Math.floor(240 / state.speed);\n          flipAnimate(barsWrap, beforeItems, afterItems, duration);\n        }\n      } else {\n        nodesContainer.innerHTML = '';\n        const beforeItems = initial ? [] : Array.from(nodesContainer.children);\n        state.arr.forEach((val, idx) => {\n          const node = document.createElement('div');\n          node.className = 'node';\n          node.dataset.key = `k${idx}-${val}-${Math.random().toString(36).slice(2,7)}`;\n          if (idx === state.i || idx === state.i + 1) {\n            node.classList.add('highlight');\n          }\n          const span = document.createElement('span');\n          span.textContent = val;\n          node.appendChild(span);\n          nodesContainer.appendChild(node);\n        });\n        if (!initial) {\n          const afterItems = Array.from(nodesContainer.children);\n          const duration = Math.floor(260 / state.speed);\n          flipAnimate(nodesContainer, beforeItems, afterItems, duration);\n        } else {\n          drawLinks();\n        }\n        // Always redraw links after initial or when not animating\n        if (initial) drawLinks();\n      }\n    }\n\n    function drawLinks() {\n      // Draw arrows between centers of nodes in order\n      linksSvg.innerHTML = '';\n      const nodes = Array.from(nodesContainer.children);\n      const rectParent = nodesContainer.getBoundingClientRect();\n      linksSvg.setAttribute('width', rectParent.width);\n      linksSvg.setAttribute('height', rectParent.height);\n      for (let i = 0; i < nodes.length - 1; i++) {\n        const a = nodes[i].getBoundingClientRect();\n        const b = nodes[i + 1].getBoundingClientRect();\n        const ax = a.left - rectParent.left + a.width / 2;\n        const ay = a.top - rectParent.top + a.height / 2;\n        const bx = b.left - rectParent.left + b.width / 2;\n        const by = b.top - rectParent.top + b.height / 2;\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        line.setAttribute('x1', ax + 30); // start near right edge of first node\n        line.setAttribute('y1', ay);\n        line.setAttribute('x2', bx - 30); // end near left edge of next node\n        line.setAttribute('y2', by);\n        linksSvg.appendChild(line);\n      }\n    }\n\n    function narrate(msg) {\n      explainBox.innerHTML = msg;\n    }\n\n    function stepComparison(auto = false) {\n      if (state.done) {\n        narrate('<strong>Completed!</strong> The list is sorted. Press Reset or Randomize to try again.');\n        clearTimer();\n        updateUI();\n        return;\n      }\n\n      // If starting a new pass and reached unsortedEnd previously\n      if (state.i >= state.unsortedEnd) {\n        if (state.swappedInPass) {\n          state.pass += 1;\n          state.unsortedEnd -= 1;\n          state.i = 0;\n          state.swappedInPass = false;\n          narrate(`Pass <strong>${state.pass}</strong> complete; largest value bubbled to index ${state.unsortedEnd + 1}. Starting next pass; comparisons go up to index ${state.unsortedEnd}.`);\n          updateUI();\n          renderList();\n          return;\n        } else {\n          // Early exit or completion\n          if (earlyExitSwitch.checked) {\n            state.done = true;\n            narrate('<span class=\"ok\">No swaps in the last pass.</span> Early exit: the list is sorted.');\n            updateUI();\n            renderList();\n            clearTimer();\n            return;\n          } else {\n            // proceed to next pass anyway until pass reaches end\n            state.pass += 1;\n            state.unsortedEnd -= 1;\n            state.i = 0;\n            state.swappedInPass = false;\n            if (state.unsortedEnd < 0) {\n              state.done = true;\n              narrate('<strong>Completed!</strong> The list is sorted.');\n              updateUI();\n              renderList();\n              clearTimer();\n              return;\n            }\n            narrate(`Starting pass <strong>${state.pass + 1}</strong>; comparisons up to index ${state.unsortedEnd}.`);\n            updateUI();\n            renderList();\n            return;\n          }\n        }\n      }\n\n      // Highlight current pair\n      updateUI();\n      renderList();\n\n      const left = state.arr[state.i];\n      const right = state.arr[state.i + 1];\n      const ruleHolds = left > right;\n\n      if (state.practiceMode && !auto) {\n        state.awaitingDecision = true;\n        updateUI();\n        narrate(`Compare adjacent: <strong>${left}</strong> and <strong>${right}</strong>. Should we swap? Rule: swap if left &gt; right.`);\n        return; // wait for user decision\n      } else {\n        // auto or normal step: perform rule-based action\n        if (ruleHolds) {\n          // Swap\n          const before = state.arr.slice();\n          [state.arr[state.i], state.arr[state.i + 1]] = [state.arr[state.i + 1], state.arr[state.i]];\n          const after = state.arr.slice();\n          state.swappedInPass = true;\n          narrate(`Left ${left} &gt; right ${right} → <span class=\"ok\">swap</span>. The larger value moves right.`);\n          state.i += 1;\n          updateUI();\n          renderList();\n        } else {\n          // No swap\n          narrate(`Left ${left} ≤ right ${right} → <span class=\"warn\">no swap</span>. Move to the next pair.`);\n          state.i += 1;\n          updateUI();\n          renderList();\n        }\n      }\n    }\n\n    function decideSwapKeep(doSwap) {\n      if (!state.awaitingDecision || state.done) return;\n      const left = state.arr[state.i];\n      const right = state.arr[state.i + 1];\n      const shouldSwap = left > right;\n\n      if (doSwap && shouldSwap) {\n        [state.arr[state.i], state.arr[state.i + 1]] = [state.arr[state.i + 1], state.arr[state.i]];\n        state.swappedInPass = true;\n        narrate(`Correct: ${left} &gt; ${right}. <span class=\"ok\">Swapped.</span>`);\n      } else if (!doSwap && !shouldSwap) {\n        narrate(`Correct: ${left} ≤ ${right}. <span class=\"ok\">No swap.</span>`);\n      } else if (doSwap && !shouldSwap) {\n        narrate(`Not needed: ${left} ≤ ${right}. <span class=\"danger\">Swapping would be incorrect.</span>`);\n      } else {\n        narrate(`Missed: ${left} &gt; ${right}. <span class=\"danger\">We should have swapped.</span>`);\n      }\n      state.i += 1;\n      state.awaitingDecision = false;\n      updateUI();\n      renderList();\n    }\n\n    function play() {\n      if (state.done) return;\n      clearTimer();\n      const interval = clamp(100, Math.floor(600 / state.speed), 2000);\n      state.autoTimer = setInterval(() => {\n        if (state.practiceMode) {\n          // In practice mode, still auto-step highlighting + waiting for decision\n          if (!state.awaitingDecision) {\n            stepComparison(true);\n          }\n        } else {\n          stepComparison(true);\n        }\n      }, interval);\n      stateLabel.textContent = 'Running';\n      playBtn.disabled = true;\n      pauseBtn.disabled = false;\n    }\n\n    function pause() {\n      clearTimer();\n      stateLabel.textContent = 'Paused';\n      playBtn.disabled = false;\n      pauseBtn.disabled = true;\n    }\n\n    // Event bindings\n    applyBtn.addEventListener('click', () => {\n      const arr = parseNumbers(numbersInput.value);\n      if (arr.length < 3) {\n        narrate('Please enter at least 3 numbers (e.g., 7,3,9,2,5).');\n        return;\n      }\n      resetState(arr);\n    });\n\n    randomBtn.addEventListener('click', () => {\n      const arr = randomArray(parseInt(lengthInput.value, 10));\n      numbersInput.value = arr.join(',');\n      resetState(arr);\n    });\n\n    resetBtn.addEventListener('click', () => {\n      const arr = parseNumbers(numbersInput.value);\n      if (arr.length < 3) {\n        const def = [7,3,9,2,5,8];\n        numbersInput.value = def.join(',');\n        resetState(def);\n      } else {\n        resetState(arr);\n      }\n    });\n\n    representationSelect.addEventListener('change', () => {\n      updateUI();\n      renderList(true);\n      narrate(`View switched to ${representationSelect.value === 'bars' ? 'Bars' : 'Linked nodes'}. The bubble sort process remains the same.`);\n    });\n\n    speedRange.addEventListener('input', () => {\n      setSpeed(parseFloat(speedRange.value));\n    });\n\n    playBtn.addEventListener('click', play);\n    pauseBtn.addEventListener('click', pause);\n    stepBtn.addEventListener('click', () => stepComparison(false));\n\n    practiceSwitch.addEventListener('change', () => {\n      state.practiceMode = practiceSwitch.checked;\n      state.awaitingDecision = false;\n      updateUI();\n      narrate(state.practiceMode\n        ? 'Practice mode ON. For each highlighted pair, choose Swap or No Swap.'\n        : 'Practice mode OFF. Click Step or Play to watch bubble sort make decisions automatically.'\n      );\n    });\n\n    decideSwapBtn.addEventListener('click', () => decideSwapKeep(true));\n    decideKeepBtn.addEventListener('click', () => decideSwapKeep(false));\n\n    earlyExitSwitch.addEventListener('change', () => {\n      narrate(earlyExitSwitch.checked\n        ? 'Early exit enabled: if a pass makes no swaps, the algorithm stops.'\n        : 'Early exit disabled: bubble sort will complete all passes even if no swaps occur.'\n      );\n    });\n\n    // Keyboard shortcuts\n    window.addEventListener('keydown', (e) => {\n      if (e.target && ['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) return; // ignore when typing\n      if (e.code === 'Space') {\n        e.preventDefault();\n        if (state.autoTimer) pause(); else play();\n      } else if (e.code === 'ArrowRight') {\n        e.preventDefault();\n        stepComparison(false);\n      } else if (e.key.toLowerCase() === 's') {\n        e.preventDefault();\n        decideSwapKeep(true);\n      } else if (e.key.toLowerCase() === 'n') {\n        e.preventDefault();\n        decideSwapKeep(false);\n      }\n    });\n\n    // Initial setup\n    (function init() {\n      const arr = parseNumbers(numbersInput.value);\n      resetState(arr.length >= 3 ? arr : [7,3,9,2,5,8]);\n      setSpeed(parseFloat(speedRange.value));\n      updateUI();\n    })();\n\n    // Responsive links redraw on resize\n    window.addEventListener('resize', () => {\n      if (representationSelect.value === 'linked') drawLinks();\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort\n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Linked List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": true,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for an interactive bubble sort visualization with manual stepping, auto-run, practice decisions, animations, and view/speed controls.",
      "states": [
        {
          "name": "ready",
          "onEnter": "initialize_ready",
          "on": {
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "STEP_CLICK": "comparing",
            "KEY_RIGHT": "comparing",
            "PLAY_CLICK": "playing",
            "KEY_SPACE": "playing",
            "PRACTICE_TOGGLE_ON": "ready",
            "PRACTICE_TOGGLE_OFF": "ready",
            "REPRESENTATION_CHANGE": "ready",
            "SPEED_CHANGE": "ready",
            "EARLY_EXIT_ENABLE": "ready",
            "EARLY_EXIT_DISABLE": "ready",
            "RESIZE": "ready"
          }
        },
        {
          "name": "playing",
          "onEnter": "start_auto_timer",
          "onExit": "clear_timer",
          "on": {
            "AUTO_TICK": "comparing",
            "PAUSE_CLICK": "paused",
            "KEY_SPACE": "paused",
            "STEP_CLICK": "comparing",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "RESET_CLICK": "ready",
            "PRACTICE_TOGGLE_ON": "playing",
            "PRACTICE_TOGGLE_OFF": "playing",
            "SPEED_CHANGE": "playing",
            "REPRESENTATION_CHANGE": "playing",
            "EARLY_EXIT_ENABLE": "playing",
            "EARLY_EXIT_DISABLE": "playing",
            "RESIZE": "playing",
            "SORT_COMPLETE": "done",
            "EARLY_EXIT_TRIGGERED": "done"
          }
        },
        {
          "name": "paused",
          "onEnter": "pause_and_label",
          "on": {
            "PLAY_CLICK": "playing",
            "KEY_SPACE": "playing",
            "STEP_CLICK": "comparing",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "paused",
            "SPEED_CHANGE": "paused",
            "RESIZE": "paused"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlight_pair_and_render",
          "on": {
            "DECISION_REQUIRED": "awaiting_decision",
            "RULE_SWAP": "swapping",
            "RULE_NO_SWAP": "no_swap",
            "PASS_BOUNDARY_REACHED": "pass_check",
            "PAUSE_CLICK": "paused",
            "REPRESENTATION_CHANGE": "comparing",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready"
          }
        },
        {
          "name": "awaiting_decision",
          "onEnter": "prompt_user_decision",
          "on": {
            "DECIDE_SWAP_CLICK": "swapping",
            "KEY_S": "swapping",
            "DECIDE_KEEP_CLICK": "no_swap",
            "KEY_N": "no_swap",
            "PRACTICE_TOGGLE_OFF": "ready",
            "PAUSE_CLICK": "paused",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "awaiting_decision"
          }
        },
        {
          "name": "swapping",
          "onEnter": "apply_swap_and_render",
          "on": {
            "ANIMATION_DONE": "playing",
            "PAUSE_CLICK": "paused",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "swapping"
          }
        },
        {
          "name": "no_swap",
          "onEnter": "render_no_swap_feedback",
          "on": {
            "ANIMATION_DONE": "playing",
            "PAUSE_CLICK": "paused",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "no_swap"
          }
        },
        {
          "name": "pass_check",
          "onEnter": "evaluate_pass_end",
          "on": {
            "PASS_HAS_SWAPS": "pass_started",
            "PASS_NO_SWAPS": "pass_started",
            "EARLY_EXIT_TRIGGERED": "done",
            "SORT_COMPLETE": "done",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "pass_check"
          }
        },
        {
          "name": "pass_started",
          "onEnter": "initialize_next_pass",
          "on": {
            "AUTO_TICK": "comparing",
            "STEP_CLICK": "comparing",
            "PAUSE_CLICK": "paused",
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "pass_started"
          }
        },
        {
          "name": "done",
          "onEnter": "finalize_sorted",
          "on": {
            "RESET_CLICK": "ready",
            "APPLY_CLICK": "ready",
            "RANDOMIZE_CLICK": "ready",
            "REPRESENTATION_CHANGE": "done",
            "PLAY_CLICK": "done",
            "STEP_CLICK": "done"
          }
        }
      ],
      "events": [
        "APPLY_CLICK",
        "RANDOMIZE_CLICK",
        "RESET_CLICK",
        "REPRESENTATION_CHANGE",
        "SPEED_CHANGE",
        "PLAY_CLICK",
        "PAUSE_CLICK",
        "STEP_CLICK",
        "PRACTICE_TOGGLE_ON",
        "PRACTICE_TOGGLE_OFF",
        "DECIDE_SWAP_CLICK",
        "DECIDE_KEEP_CLICK",
        "KEY_SPACE",
        "KEY_RIGHT",
        "KEY_S",
        "KEY_N",
        "AUTO_TICK",
        "DECISION_REQUIRED",
        "RULE_SWAP",
        "RULE_NO_SWAP",
        "ANIMATION_DONE",
        "PASS_BOUNDARY_REACHED",
        "PASS_HAS_SWAPS",
        "PASS_NO_SWAPS",
        "EARLY_EXIT_TRIGGERED",
        "SORT_COMPLETE",
        "RESIZE"
      ],
      "notes": "Operational overview: ready initializes the list, UI, and narration. From ready, users can Step (highlight a pair), Play (auto-run), toggle practice mode, change representation (bars/linked), or adjust speed. playing starts an interval timer (autoTimer) and on each AUTO_TICK performs one stepComparison. In practice mode, AUTO_TICK will highlight a pair and raise DECISION_REQUIRED, holding further ticks until a decision (Swap/No Swap) is made; pause clears the timer. comparing highlights the current adjacent pair and renders the view. If practice mode and manual step (or auto in practice), DECISION_REQUIRED transitions to awaiting_decision where Swap/No Swap inputs (buttons or keys S/N) are accepted with immediate feedback. Otherwise, the rule is evaluated: RULE_SWAP goes to swapping (perform swap, set swappedInPass = true, narrate; FLIP animation runs), RULE_NO_SWAP goes to no_swap (narrate; render). After animations complete (conceptual ANIMATION_DONE), control returns to playing if auto-run is active; in manual mode, control effectively returns to ready awaiting the next Step (this branching is implicitly handled by autoTimer presence, not explicitly modeled; mapping uses ANIMATION_DONE -> playing). pass_check is raised when a step occurs at or beyond unsortedEnd. If the pass had any swaps (PASS_HAS_SWAPS), initialize_next_pass increments pass, decrements unsortedEnd, resets i and swappedInPass, narrates, and returns to comparing on next Step or AUTO_TICK. If no swaps (PASS_NO_SWAPS) and early exit is enabled, EARLY_EXIT_TRIGGERED transitions to done; if early exit is disabled, the pass still advances (pass_started), and once unsortedEnd < 0, SORT_COMPLETE transitions to done. done narrates completion, clears any timers, and waits for Reset/Randomize/Apply to reinitialize. Representation changes and resize events re-render the current view but do not alter algorithmic state (mapped as self-transitions). Speed changes update speedLabel and, if playing, restart the timer. Keyboard shortcuts mirror button events: Space toggles Play/Pause; Right Arrow performs Step; S and N trigger Swap/No Swap decisions when in awaiting_decision. The FLIP animation is asynchronous; the FSM's ANIMATION_DONE event is conceptual to indicate when the animation finishes and control returns to the appropriate mode."
    }
  }
]