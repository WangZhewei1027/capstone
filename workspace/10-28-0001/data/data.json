[
  {
    "id": "45a42250-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:12.693Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Set",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple HTML Page</title>\n</head>\n<body>\n    <header>\n        <h1>Welcome to My Simple HTML Page</h1>\n    </header>\n    <main>\n        <p>This is a simple HTML page created as a demonstration.</p>\n        <p>Feel free to modify and use it as you wish!</p>\n    </main>\n    <footer>\n        <p>&copy; 2023 Simple HTML Page</p>\n    </footer>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Set"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "45b22c10-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:12.785Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Queue",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Queue Example</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        .queue {\n            list-style-type: none;\n            padding: 0;\n        }\n        .queue li {\n            background: #fff;\n            margin: 5px 0;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Queue Example</h1>\n    <ul class=\"queue\">\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n        <li>Item 4</li>\n        <li>Item 5</li>\n    </ul>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "45db8600-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:13.056Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Array",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple HTML Page</title>\n</head>\n<body>\n    <h1>Welcome to My Simple HTML Page</h1>\n    <p>This is a basic HTML page designed to demonstrate a simple structure.</p>\n    \n    <h2>What is an Array?</h2>\n    <p>An array is a data structure that can hold a fixed number of values of the same data type. In programming, arrays are often used to store collections of related data.</p>\n\n    <h3>Example of an Array in JavaScript:</h3>\n    <pre>\n        <code>\n            let fruits = ['Apple', 'Banana', 'Cherry'];\n        </code>\n    </pre>\n\n    <h2>Features of Arrays:</h2>\n    <ul>\n        <li>Fixed size</li>\n        <li>Indexed access</li>\n        <li>Can hold multiple values</li>\n    </ul>\n\n    <h2>Contact</h2>\n    <p>If you have any questions, feel free to <a href=\"mailto:example@example.com\">email me</a>.</p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Array"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "462f2440-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:13.604Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Stack",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple HTML Page</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            color: #555;\n        }\n        footer {\n            margin-top: 20px;\n            font-size: 0.8em;\n            color: #aaa;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to My Simple HTML Page</h1>\n    <p>This is a basic HTML page structure. You can add more content as needed.</p>\n    <footer>\n        &copy; 2023 Simple HTML Page\n    </footer>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Stack"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "467ca800-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:14.112Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Hash Map",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hash Map Example</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .hash-map {\n            border: 1px solid #ccc;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hash Map Example</h1>\n    <div class=\"hash-map\">\n        <h2>Key-Value Pairs</h2>\n        <ul>\n            <li>Key: Name - Value: John Doe</li>\n            <li>Key: Age - Value: 30</li>\n            <li>Key: City - Value: New York</li>\n            <li>Key: Occupation - Value: Developer</li>\n        </ul>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Hash Map"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "479c96f0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:15.999Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Tree",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Binary Tree</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 50px;\n        }\n        h1 {\n            text-align: center;\n        }\n        .tree {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n        }\n        .node {\n            background-color: #4CAF50;\n            color: white;\n            padding: 15px;\n            margin: 10px;\n            border-radius: 5px;\n            text-align: center;\n        }\n        .connector {\n            border-left: 2px solid #000;\n            height: 50px;\n            position: relative;\n            left: 50%;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Binary Tree Visualization</h1>\n    <div class=\"tree\">\n        <div class=\"node\">1</div>\n        <div class=\"connector\"></div>\n        <div style=\"display: flex; justify-content: center;\">\n            <div class=\"node\">2</div>\n            <div class=\"connector\"></div>\n            <div class=\"node\">3</div>\n        </div>\n        <div class=\"connector\"></div>\n        <div style=\"display: flex; justify-content: center;\">\n            <div class=\"node\">4</div>\n            <div class=\"connector\"></div>\n            <div class=\"node\">5</div>\n        </div>\n    </div>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Binary Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "47a60cd0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:16.061Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Linked List",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linked List</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f9f9f9;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            color: #666;\n        }\n        code {\n            background-color: #eef;\n            padding: 2px 4px;\n            border-radius: 3px;\n        }\n        pre {\n            background-color: #eef;\n            padding: 10px;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Understanding Linked Lists</h1>\n    <p>A linked list is a linear data structure that consists of a sequence of elements, where each element points to the next one.</p>\n    \n    <h2>Structure of a Linked List</h2>\n    <pre>\n    class Node {\n        int data;\n        Node next;\n    }\n    \n    class LinkedList {\n        Node head;\n    }\n    </pre>\n\n    <h2>Benefits of Linked Lists</h2>\n    <ul>\n        <li>Dynamic size</li>\n        <li>Efficient insertions/deletions</li>\n        <li>Memory is allocated as needed</li>\n    </ul>\n\n    <h2>Drawbacks of Linked Lists</h2>\n    <ul>\n        <li>More memory usage due to pointers</li>\n        <li>No random access of elements</li>\n        <li>Complexity in implementation</li>\n    </ul>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Linked List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "47c83ad0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:16.285Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Graph (Directed/Undirected)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Graph Representation</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .graph-type {\n            margin: 20px 0;\n            padding: 15px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Graph Representation</h1>\n\n    <div class=\"graph-type\">\n        <h2>Directed Graph</h2>\n        <p>A directed graph (digraph) is a graph where the edges have a direction. \n           Each edge is represented as an ordered pair of vertices.</p>\n        <p>Example: A -> B, B -> C</p>\n    </div>\n\n    <div class=\"graph-type\">\n        <h2>Undirected Graph</h2>\n        <p>An undirected graph is a graph where the edges have no direction. \n           The edges are represented as sets of vertices.</p>\n        <p>Example: A - B, B - C</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Graph (Directed/Undirected)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "47fd5490-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:16.633Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Deque",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Deque Example</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            color: #555;\n        }\n        code {\n            background-color: #eaeaea;\n            padding: 5px;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Understanding Deque</h1>\n    <p>A <strong>deque</strong> (double-ended queue) is a data structure that allows insertion and removal of elements from both ends.</p>\n    <h2>Common Operations:</h2>\n    <ul>\n        <li>Insert at front</li>\n        <li>Insert at rear</li>\n        <li>Delete from front</li>\n        <li>Delete from rear</li>\n        <li>Get front element</li>\n        <li>Get rear element</li>\n    </ul>\n    <h2>Example in JavaScript:</h2>\n    <pre><code>\nclass Deque {\n    constructor() {\n        this.items = [];\n    }\n    addFront(element) {\n        this.items.unshift(element);\n    }\n    addRear(element) {\n        this.items.push(element);\n    }\n    removeFront() {\n        return this.items.shift();\n    }\n    removeRear() {\n        return this.items.pop();\n    }\n    getFront() {\n        return this.items[0];\n    }\n    getRear() {\n        return this.items[this.items.length - 1];\n    }\n}\n    </code></pre>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Deque"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "48e347c0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:18.140Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Search Tree (BST)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Binary Search Tree (BST)</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            color: #666;\n        }\n        code {\n            background-color: #e7e7e7;\n            padding: 2px 4px;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Binary Search Tree (BST)</h1>\n    <p>A Binary Search Tree (BST) is a data structure that maintains sorted order, allowing for efficient search, insert, and delete operations.</p>\n    \n    <h2>Key Properties</h2>\n    <ul>\n        <li>Each node has at most two children.</li>\n        <li>The left child of a node contains only nodes with keys less than the node's key.</li>\n        <li>The right child of a node contains only nodes with keys greater than the node's key.</li>\n        <li>The left and right subtree each must also be a binary search tree.</li>\n    </ul>\n\n    <h2>Basic Operations</h2>\n    <h3>Search</h3>\n    <p>To search for a value <code>v</code>, start at the root and recursively or iteratively check left or right subtrees based on the value of <code>v</code>.</p>\n\n    <h3>Insertion</h3>\n    <p>To insert a value <code>v</code>, follow the search path, inserting it as a leaf in the appropriate position.</p>\n\n    <h3>Deletion</h3>\n    <p>Deleting a node involves three cases:\n        <ol>\n            <li>The node is a leaf - simply remove it.</li>\n            <li>The node has one child - remove the node and replace it with its child.</li>\n            <li>The node has two children - find the node's in-order predecessor or successor, swap values, and delete the predecessor or successor.</li>\n        </ol>\n    </p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Binary Search Tree (BST)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "48fc9c20-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:18.306Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Hash Table",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hash Table Explanation</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f2f2f2;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        h2 {\n            color: #555;\n        }\n        p {\n            line-height: 1.6;\n        }\n        pre {\n            background-color: #eaeaea;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hash Table</h1>\n    <h2>What is a Hash Table?</h2>\n    <p>A hash table is a data structure that implements an associative array, a structure that can map keys to values. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.</p>\n    \n    <h2>Key Features</h2>\n    <ul>\n        <li>Fast access time: O(1) on average for search, insert, and delete operations.</li>\n        <li>Key-value pair storage.</li>\n        <li>Handles collisions using chaining or open addressing.</li>\n    </ul>\n\n    <h2>Basic Operations</h2>\n    <pre>\n    // Pseudo code for basic hash table operations\n    function insert(key, value):\n        index = hashFunction(key)\n        if table[index] is null:\n            table[index] = new List()\n        table[index].add(key, value)\n\n    function search(key):\n        index = hashFunction(key)\n        if table[index] is not null:\n            return table[index].find(key)\n\n    function delete(key):\n        index = hashFunction(key)\n        if table[index] is not null:\n            table[index].remove(key)\n    </pre>\n\n    <h2>Applications of Hash Tables</h2>\n    <p>Hash tables are widely used in various applications such as:</p>\n    <ul>\n        <li>Caching data</li>\n        <li>Database indexing</li>\n        <li>Counting occurrences of elements</li>\n        <li>Implementing sets and maps</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Hash Table"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "491972f0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:18.495Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Weighted Graph",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Weighted Graph</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            text-align: center;\n            color: #333;\n        }\n        .graph {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin-top: 20px;\n        }\n        .node {\n            background-color: #ffffff;\n            border: 2px solid #007bff;\n            border-radius: 50%;\n            width: 50px;\n            height: 50px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            position: relative;\n            margin: 20px;\n        }\n        .edge {\n            position: absolute;\n            background-color: #007bff;\n            height: 2px;\n        }\n        .node-label {\n            position: absolute;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Weighted Graph Representation</h1>\n    <div class=\"graph\">\n        <div class=\"node\" style=\"position: relative;\">\n            <span class=\"node-label\">A</span>\n        </div>\n        <div class=\"edge\" style=\"left: 25px; top: 65px; width: 100px;\"></div>\n        <div class=\"node\" style=\"position: relative;\">\n            <span class=\"node-label\">B</span>\n        </div>\n        <div class=\"edge\" style=\"left: 25px; top: 65px; width: 100px;\"></div>\n        <div class=\"node\" style=\"position: relative;\">\n            <span class=\"node-label\">C</span>\n        </div>\n    </div>\n\n    <p>Weights: \n        <br> (A-B: 5) \n        <br> (A-C: 10)\n        <br> (B-C: 3)</p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Weighted Graph"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "492559d0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:18.573Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Adjacency List",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Adjacency List Example</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n        li {\n            margin: 5px 0;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Graph Adjacency List</h1>\n    <p>The following is an example of a graph represented as an adjacency list:</p>\n    \n    <ul>\n        <li> A: <ul>\n                <li>B</li>\n                <li>C</li>\n            </ul>\n        </li>\n        <li> B: <ul>\n                <li>A</li>\n                <li>D</li>\n            </ul>\n        </li>\n        <li> C: <ul>\n                <li>A</li>\n                <li>D</li>\n            </ul>\n        </li>\n        <li> D: <ul>\n                <li>B</li>\n                <li>C</li>\n            </ul>\n        </li>\n    </ul>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Adjacency List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4954ce40-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:18.884Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Union-Find (Disjoint Set)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Union-Find (Disjoint Set)</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        .description {\n            margin-bottom: 20px;\n            line-height: 1.5;\n        }\n        code {\n            background-color: #eaeaea;\n            padding: 2px 4px;\n            border-radius: 4px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Union-Find (Disjoint Set)</h1>\n    <div class=\"description\">\n        <p>The Union-Find data structure, also known as Disjoint Set Union (DSU), is a data structure that keeps track of elements partitioned into a number of disjoint (non-overlapping) sets.</p>\n        <p>It supports two primary operations:</p>\n        <ul>\n            <li><code>find(x)</code>: Determines the set in which the element x is located.</li>\n            <li><code>union(x, y)</code>: Merges the sets that contain elements x and y.</li>\n        </ul>\n    </div>\n    <h2>Applications</h2>\n    <p>Union-Find is commonly used in:</p>\n    <ul>\n        <li>Network connectivity</li>\n        <li>Percolation</li>\n        <li>Kruskal's algorithm for Minimum Spanning Trees</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Union-Find (Disjoint Set)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "49bda230-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:19.571Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Adjacency Matrix",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Adjacency Matrix</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n    <h1>Adjacency Matrix</h1>\n    <table>\n        <tr>\n            <th></th>\n            <th>A</th>\n            <th>B</th>\n            <th>C</th>\n        </tr>\n        <tr>\n            <th>A</th>\n            <td>0</td>\n            <td>1</td>\n            <td>0</td>\n        </tr>\n        <tr>\n            <th>B</th>\n            <td>1</td>\n            <td>0</td>\n            <td>1</td>\n        </tr>\n        <tr>\n            <th>C</th>\n            <td>0</td>\n            <td>1</td>\n            <td>0</td>\n        </tr>\n    </table>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Adjacency Matrix"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4a3bd2e0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:20.398Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Red-Black Tree",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Red-Black Tree</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f9f9f9;\n        }\n        h1 {\n            color: #c0392b;\n        }\n        .tree {\n            margin-top: 20px;\n            border: 1px solid #bdc3c7;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #ecf0f1;\n        }\n        p {\n            line-height: 1.6;\n        }\n    </style>\n</head>\n<body>\n    <h1>Red-Black Tree</h1>\n    <div class=\"tree\">\n        <h2>Definition</h2>\n        <p>A Red-Black Tree is a type of self-balancing binary search tree where each node contains an extra bit for determining the color of the node, either red or black. This structure helps maintain balance during insertions and deletions.</p>\n        \n        <h2>Properties</h2>\n        <ul>\n            <li>Each node is either red or black.</li>\n            <li>The root is always black.</li>\n            <li>All leaves (NIL nodes) are black.</li>\n            <li>If a node is red, both its children must be black (no two red nodes in a row).</li>\n            <li>Every path from a given node to any of its descendant NIL nodes must have the same number of black nodes.</li>\n        </ul>\n        \n        <h2>Applications</h2>\n        <p>Red-Black Trees are used in various applications such as:</p>\n        <ul>\n            <li>Maintaining a sorted collection of data.</li>\n            <li>Implementing associative arrays (like maps in C++ STL).</li>\n            <li>Using in the Linux kernel for process scheduling.</li>\n        </ul>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Red-Black Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4a3d3270-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:20.407Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Priority Queue",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Priority Queue</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .content {\n            background: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .description {\n            margin-bottom: 15px;\n        }\n        .example {\n            background-color: #e8e8e8;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"content\">\n        <h1>Priority Queue</h1>\n        <p class=\"description\">A priority queue is an abstract data type similar to a regular queue or stack data structure in which each element has a \"priority\" assigned to it.</p>\n        <p>Elements with higher priority are served before elements with lower priority. If two elements have the same priority, they are served according to their order in the queue.</p>\n        \n        <h2>Example</h2>\n        <p class=\"example\">Priority Queue: [(Task 1, Priority 3), (Task 2, Priority 1), (Task 3, Priority 2)]</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Priority Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4accef50-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:21.350Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Heap (Min/Max)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Heap (Min/Max) Overview</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        h2 {\n            color: #666;\n        }\n        p {\n            line-height: 1.6;\n        }\n        ul {\n            margin: 10px 0;\n            padding: 10px;\n            background: #fff;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n    </style>\n</head>\n<body>\n    <h1>Heap (Min/Max) Overview</h1>\n    \n    <h2>What is a Heap?</h2>\n    <p>A Heap is a special tree-based data structure that satisfies the heap property. In a Min Heap, for any given node, the value of the node is less than or equal to the values of its children. In a Max Heap, the value of the node is greater than or equal to the values of its children.</p>\n    \n    <h2>Types of Heaps</h2>\n    <ul>\n        <li><strong>Min Heap</strong>: The smallest key is at the root, and each parent node is less than its children.</li>\n        <li><strong>Max Heap</strong>: The largest key is at the root, and each parent node is greater than its children.</li>\n    </ul>\n    \n    <h2>Applications of Heaps</h2>\n    <ul>\n        <li>Heap Sort algorithm</li>\n        <li>Priority Queue implementation</li>\n        <li>Graph algorithms like Dijkstra's and Prim's</li>\n    </ul>\n    \n    <h2>Basic Operations</h2>\n    <ul>\n        <li><strong>Insert</strong>: Add a new element to the heap.</li>\n        <li><strong>Delete</strong>: Remove the root element from the heap.</li>\n        <li><strong>Peek</strong>: Retrieve the root element without removing it.</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Heap (Min/Max)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4b6b7940-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:22.388Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Bubble Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort</title>\n</head>\n<body>\n    <h1>Bubble Sort Algorithm</h1>\n    <p>Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.</p>\n    \n    <h2>How It Works</h2>\n    <ol>\n        <li>Start at the beginning of the array.</li>\n        <li>Compare the first two elements. If the first is greater than the second, swap them.</li>\n        <li>Move to the next pair of adjacent elements and repeat the process until the end of the array is reached.</li>\n        <li>Repeat the entire process for the length of the array minus one times.</li>\n    </ol>\n\n    <h2>Example</h2>\n    <pre>\nInput: [5, 3, 8, 4, 2]\n\nPass 1: [3, 5, 4, 2, 8]\nPass 2: [3, 4, 2, 5, 8]\nPass 3: [3, 2, 4, 5, 8]\nPass 4: [2, 3, 4, 5, 8]\n\nSorted Output: [2, 3, 4, 5, 8]\n    </pre>\n\n    <h2>Code Example (JavaScript)</h2>\n    <pre>\nfunction bubbleSort(arr) {\n    let n = arr.length;\n    let swapped;\n\n    do {\n        swapped = false;\n        for (let i = 0; i &lt; n - 1; i++) {\n            if (arr[i] &gt; arr[i + 1]) {\n                // Swap arr[i] and arr[i + 1]\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                swapped = true;\n            }\n        }\n        n--;\n    } while (swapped);\n    \n    return arr;\n}\n\n// Example usage\nconsole.log(bubbleSort([5, 3, 8, 4, 2])); // Output: [2, 3, 4, 5, 8]\n    </pre>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Bubble Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4bfce3d0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:23.341Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Heap Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Heap Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f9f9f9;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            font-size: 1.2em;\n        }\n        code {\n            background-color: #eaeaea;\n            padding: 2px 4px;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #eaeaea;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Heap Sort</h1>\n    <p>Heap Sort is a comparison-based sorting algorithm that uses a data structure called a heap. It operates in two main phases: building a heap and then sorting the heap.</p>\n    \n    <h2>Algorithm Steps:</h2>\n    <ol>\n        <li>Build a max heap from the input data.</li>\n        <li>Repeat the following steps until the heap is empty:\n            <ol>\n                <li>Replace the root of the heap with the last element of the heap.</li>\n                <li>Reduce the size of the heap by one.</li>\n                <li>Heapify the root of the heap.</li>\n            </ol>\n        </li>\n    </ol>\n\n    <h2>Pseudocode:</h2>\n    <pre>\nfunction heapSort(arr):\n    n = length(arr)\n\n    // Build max heap\n    for i from n/2 - 1 to 0:\n        heapify(arr, n, i)\n\n    // One by one extract elements from heap\n    for i from n-1 to 0:\n        swap(arr[0], arr[i])\n        heapify(arr, i, 0)\n\nfunction heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        swap(arr[i], arr[largest])\n        heapify(arr, n, largest)\n    </pre>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Heap Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4c054840-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:23.396Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Merge Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Merge Sort Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        code {\n            background-color: #f4f4f4;\n            padding: 5px;\n            border-radius: 5px;\n            font-family: 'Courier New', Courier, monospace;\n        }\n    </style>\n</head>\n<body>\n    <h1>Merge Sort Algorithm</h1>\n    <p>Merge Sort is a divide-and-conquer algorithm that sorts an array by recursively dividing it into two halves, sorting each half, and then merging the sorted halves back together.</p>\n    \n    <h2>How Merge Sort Works</h2>\n    <ol>\n        <li>If the array has one or fewer elements, it is already sorted.</li>\n        <li>Otherwise, divide the array into two halves.</li>\n        <li>Recursively sort each half.</li>\n        <li>Merge the two sorted halves into a single sorted array.</li>\n    </ol>\n\n    <h2>Merge Sort Example</h2>\n    <p>Consider the array: <code>[38, 27, 43, 3, 9, 82, 10]</code></p>\n    <p>The sorted array will be: <code>[3, 9, 10, 27, 38, 43, 82]</code></p>\n\n    <h2>Merge Sort Implementation in JavaScript</h2>\n    <pre><code>\nfunction mergeSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = mergeSort(arr.slice(0, mid));\n    const right = mergeSort(arr.slice(mid));\n    return merge(left, right);\n}\n\nfunction merge(left, right) {\n    let result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n        if (left[leftIndex] < right[rightIndex]) {\n            result.push(left[leftIndex]);\n            leftIndex++;\n        } else {\n            result.push(right[rightIndex]);\n            rightIndex++;\n        }\n    }\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}\n\n// Example usage\nconst array = [38, 27, 43, 3, 9, 82, 10];\nconsole.log(mergeSort(array));\n    </code></pre>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Merge Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4c26b2f0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:23.615Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Quick Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quick Sort Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        pre {\n            background-color: #fff;\n            border: 1px solid #ddd;\n            padding: 10px;\n            overflow-x: auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Quick Sort Algorithm</h1>\n    <p>Quick sort is a divide-and-conquer algorithm that sorts an array or list by selecting a 'pivot' element and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot.</p>\n    \n    <h2>How it Works:</h2>\n    <pre>\n1. Choose a pivot element from the array.\n2. Partition the array into two halves:\n   - Elements less than the pivot.\n   - Elements greater than the pivot.\n3. Recursively apply the above steps to the sub-arrays.\n4. Combine the results.\n    </pre>\n\n    <h2>Example in JavaScript:</h2>\n    <pre>\nfunction quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[arr.length - 1];\n    const left = [];\n    const right = [];\n    \n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    \n    return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\nconst array = [3, 6, 8, 10, 1, 2, 1];\nconsole.log(quickSort(array)); // Output: [1, 1, 2, 3, 6, 8, 10]\n    </pre>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Quick Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4c39ecd0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:23.741Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Insertion Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Insertion Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f9f9f9;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        pre {\n            background-color: #e9e9e9;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Insertion Sort Algorithm</h1>\n    <p>Insertion Sort is a simple sorting algorithm that builds a sorted array one element at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.</p>\n    \n    <h2>How Insertion Sort Works:</h2>\n    <ol>\n        <li>Start from the second element. Assume the first element is sorted.</li>\n        <li>Take the current element and compare it with the elements in the sorted part.</li>\n        <li>Shift all elements that are greater than the current element one position to the right.</li>\n        <li>Insert the current element into its correct position.</li>\n        <li>Repeat until the entire array is sorted.</li>\n    </ol>\n\n    <h2>Code Example:</h2>\n    <pre>\nfunction insertionSort(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        let key = arr[i];\n        let j = i - 1;\n        \n        // Move elements of arr[0..i-1], that are greater than key,\n        // to one position ahead of their current position\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n    return arr;\n}\n    </pre>\n\n    <h2>Complexity:</h2>\n    <ul>\n        <li>Best Case: O(n) - when the array is already sorted.</li>\n        <li>Average Case: O(n²)</li>\n        <li>Worst Case: O(n²)</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Insertion Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4c53dd70-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:23.911Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Selection Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Selection Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        .code {\n            background-color: #eee;\n            padding: 10px;\n            border-radius: 5px;\n            font-family: monospace;\n            overflow-x: auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Selection Sort Algorithm</h1>\n    <p>Selection sort is a simple comparison-based sorting algorithm. It works by dividing the input list into two parts: a sorted section and an unsorted section. Initially, the sorted section is empty, and the unsorted section contains all the elements. The algorithm repeatedly selects the smallest (or largest, depending on order) element from the unsorted section and moves it to the end of the sorted section.</p>\n    <h2>Steps:</h2>\n    <ol>\n        <li>Start with the first element as the minimum.</li>\n        <li>Compare the minimum with the other elements.</li>\n        <li>If a smaller element is found, update the minimum.</li>\n        <li>After completing the comparisons, swap the minimum element with the first unsorted element.</li>\n        <li>Move the boundary between sorted and unsorted sections one element to the right.</li>\n    </ol>\n    <h2>Example Code (JavaScript):</h2>\n    <div class=\"code\">\n        <pre>\nfunction selectionSort(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < n; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        // Swap the found minimum element with the first element\n        if (minIndex !== i) {\n            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n        }\n    }\n    return arr;\n}\n\n// Example usage\nlet array = [64, 25, 12, 22, 11];\nconsole.log(selectionSort(array));  // Output: [11, 12, 22, 25, 64]\n        </pre>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Selection Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4ca09de0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:24.414Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Linear Search",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linear Search</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            line-height: 1.6;\n        }\n        pre {\n            background-color: #eaeaea;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Linear Search</h1>\n    <p>Linear search is a simple search algorithm that checks every element in a list until the desired element is found or the list ends.</p>\n    \n    <h2>Algorithm Steps:</h2>\n    <ol>\n        <li>Start at the beginning of the list.</li>\n        <li>Compare the current element with the target value.</li>\n        <li>If the current element matches the target value, return its index.</li>\n        <li>If the current element does not match, move to the next element.</li>\n        <li>Repeat steps 2-4 until the target is found or the end of the list is reached.</li>\n    </ol>\n    \n    <h2>Example:</h2>\n    <pre>\nfunction linearSearch(arr, target) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === target) {\n            return i; // Return index\n        }\n    }\n    return -1; // Return -1 if not found\n}\n    </pre>\n    \n    <h2>Complexity:</h2>\n    <p>Time Complexity: O(n)</p>\n    <p>Space Complexity: O(1)</p>\n    \n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Linear Search"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4d55e420-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:25.602Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Counting Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Counting Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 20px;\n        }\n        h1 {\n            text-align: center;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n        pre {\n            background: #eee;\n            padding: 10px;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Counting Sort Algorithm</h1>\n        <p>Counting sort is a non-comparison based sorting algorithm that counts the occurrences of each unique value in the input array, and uses this information to determine the position of each element in the sorted output.</p>\n        <h2>Algorithm Steps:</h2>\n        <ol>\n            <li>Find the range of input values (min and max).</li>\n            <li>Create a count array to store the count of each unique value.</li>\n            <li>Store the count of each value in the count array.</li>\n            <li>Modify the count array by adding the count of the previous element.</li>\n            <li>Create an output array to build the sorted array.</li>\n            <li>Populate the output array based on the count array.</li>\n            <li>Copy the sorted values back to the original array.</li>\n        </ol>\n        <h2>Example Code:</h2>\n        <pre>\nfunction countingSort(arr) {\n    const n = arr.length;\n    const output = new Array(n);\n    const count = new Array(Math.max(...arr) + 1).fill(0);\n\n    // Step 1: Store count of each number\n    for (let i = 0; i < n; i++) {\n        count[arr[i]]++;\n    }\n\n    // Step 2: Modify count array\n    for (let i = 1; i <= Math.max(...arr); i++) {\n        count[i] += count[i - 1];\n    }\n\n    // Step 3: Build the output array\n    for (let i = n - 1; i >= 0; i--) {\n        output[count[arr[i]] - 1] = arr[i];\n        count[arr[i]]--;\n    }\n\n    // Step 4: Copy the output to original array\n    for (let i = 0; i < n; i++) {\n        arr[i] = output[i];\n    }\n}\n        </pre>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Counting Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4da00c80-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:26.088Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Search",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Binary Search</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            font-size: 16px;\n            line-height: 1.5;\n        }\n        code {\n            background-color: #e7e7e7;\n            padding: 2px 4px;\n            border-radius: 4px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Binary Search</h1>\n    <p>Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the potential locations to just one.</p>\n    \n    <h2>How It Works</h2>\n    <p>\n        1. Begin with the middle element of the sorted array.<br>\n        2. If the value of the middle element is less than the target value, narrow your search to the upper half of the array.<br>\n        3. If the value of the middle element is greater than the target value, narrow your search to the lower half of the array.<br>\n        4. Repeat the process until the target value is found or the subarray size becomes zero.\n    </p>\n    \n    <h2>Pseudocode</h2>\n    <pre>\nfunction binarySearch(array, target):\n    left = 0\n    right = length(array) - 1\n\n    while left <= right:\n        mid = left + (right - left) / 2\n        if array[mid] == target:\n            return mid\n        else if array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n    </pre>\n    \n    <h2>Time Complexity</h2>\n    <p>The time complexity of binary search is <code>O(log n)</code>, making it much more efficient than a linear search, especially for large datasets.</p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Binary Search"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4e018d70-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:26.727Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Radix Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radix Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        pre {\n            background-color: #e7e7e7;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Radix Sort</h1>\n    <p>Radix Sort is an efficient, non-comparative sorting algorithm. It works by sorting numbers digit by digit from the least significant digit to the most significant digit. Below is a basic explanation of how it works:</p>\n    \n    <h2>How Radix Sort Works</h2>\n    <ol>\n        <li>Find the maximum number to know the number of digits.</li>\n        <li>Start sorting from the least significant digit (LSD) to the most significant digit (MSD).</li>\n        <li>Use a stable sorting algorithm (like counting sort) to sort the numbers based on the current digit.</li>\n        <li>Repeat for each digit until all digits have been processed.</li>\n    </ol>\n    \n    <h2>Example</h2>\n    <pre>\n    Input: [170, 45, 75, 90, 802, 24, 2, 66]\n    Output: [2, 24, 45, 66, 75, 90, 170, 802]\n    </pre>\n\n    <h2>Time Complexity</h2>\n    <p>The time complexity of Radix Sort is O(n * k), where n is the number of elements and k is the number of digits in the largest number.</p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Radix Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4eed9b20-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:28.274Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Dijkstra’s Algorithm",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dijkstra's Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .content {\n            background: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n        }\n        pre {\n            background: #eaeaea;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"content\">\n        <h1>Dijkstra's Algorithm</h1>\n        <p>Dijkstra's Algorithm is a graph search algorithm that solves the single-source shortest path problem for a graph with non-negative edge weights, producing a shortest path tree. It is often used in routing and as a subroutine in other graph algorithms.</p>\n        \n        <h2>How It Works</h2>\n        <ol>\n            <li>Mark all nodes as unvisited. Create a set of all the unvisited nodes called the unvisited set.</li>\n            <li>Assign a tentative distance value to every node: set it to zero for the initial node and to infinity for all other nodes.</li>\n            <li>While there are unvisited nodes:</li>\n            <ul>\n                <li>For the current node, consider all of its unvisited neighbors and calculate their tentative distances through the current node.</li>\n                <li>Compare the newly calculated tentative distance to the current assigned value and assign the smaller one.</li>\n                <li>After considering all neighbors, mark the current node as visited.</li>\n                <li>Once all nodes have been visited, the algorithm is complete.</li>\n            </ul>\n        </ol>\n\n        <h2>Example Pseudocode</h2>\n        <pre>\nfunction dijkstra(graph, source):\n    dist[source] ← 0\n    for each vertex v in graph:\n        if v ≠ source:\n            dist[v] ← infinity\n        add v to unvisited set\n    while unvisited set is not empty:\n        u ← vertex in unvisited set with smallest dist[]\n        remove u from unvisited set\n        for each neighbor v of u:\n            alt ← dist[u] + length(u, v)\n            if alt < dist[v]:\n                dist[v] ← alt\n        return dist\n        </pre>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Dijkstra’s Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4fc7f590-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:29.705Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Breadth-First Search (BFS)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Breadth-First Search (BFS)</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            color: #555;\n        }\n        .code {\n            background-color: #eaeaea;\n            border-left: 4px solid #007BFF;\n            padding: 10px;\n            margin: 20px 0;\n            font-family: monospace;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Breadth-First Search (BFS)</h1>\n    <p>Breadth-First Search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the root (or an arbitrary node in the case of a graph) and explores the neighbor nodes at the present depth prior to moving on to nodes at the next depth level.</p>\n    \n    <h2>Algorithm Steps:</h2>\n    <ol>\n        <li>Initialize a queue and enqueue the starting node.</li>\n        <li>Mark the starting node as visited.</li>\n        <li>While the queue is not empty:</li>\n        <ul>\n            <li>Dequeue a node from the queue.</li>\n            <li>Process the node (e.g., print it).</li>\n            <li>Enqueue all unvisited neighbors of the node, marking them as visited.</li>\n        </ul>\n    </ol>\n\n    <h2>Example (Python Code):</h2>\n    <div class=\"code\">\n        def bfs(graph, start):<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;visited = set()<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;queue = [start]<br><br>\n        &nbsp;&nbsp;&nbsp;&nbsp;while queue:<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertex = queue.pop(0)<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if vertex not in visited:<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visited.add(vertex)<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.extend(graph[vertex] - visited)<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(vertex)\n    </div>\n\n    <h2>Applications:</h2>\n    <ul>\n        <li>Finding the shortest path in an unweighted graph.</li>\n        <li>Peer-to-peer networks.</li>\n        <li>Web crawling.</li>\n    </ul>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Breadth-First Search (BFS)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "5059d550-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:30.661Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Depth-First Search (DFS)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Depth-First Search (DFS)</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            line-height: 1.6;\n        }\n        pre {\n            background: #eee;\n            padding: 10px;\n            border-left: 4px solid #007BFF;\n        }\n    </style>\n</head>\n<body>\n    <h1>Depth-First Search (DFS)</h1>\n    <p>Depth-First Search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root (or an arbitrary node for a graph) and explores as far as possible along each branch before backtracking.</p>\n    \n    <h2>Algorithm Steps:</h2>\n    <ol>\n        <li>Start at the root node (or an arbitrary node in a graph).</li>\n        <li>Mark the node as visited.</li>\n        <li>Recursively visit each unvisited adjacent node.</li>\n        <li>Backtrack to previous nodes as needed until all nodes are visited.</li>\n    </ol>\n\n    <h2>Example of DFS using JavaScript:</h2>\n    <pre>\nfunction depthFirstSearch(graph, node, visited = new Set()) {\n    if (!node) return;\n\n    visited.add(node);\n    console.log(node);\n\n    graph[node].forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n            depthFirstSearch(graph, neighbor, visited);\n        }\n    });\n}\n\n// Sample graph represented as an adjacency list\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: [],\n    F: []\n};\n\ndepthFirstSearch(graph, 'A'); // Output: A B D E C F\n    </pre>\n\n    <h2>Applications of DFS:</h2>\n    <ul>\n        <li>Pathfinding in mazes.</li>\n        <li>Topological sorting of graphs.</li>\n        <li>Finding connected components in a graph.</li>\n        <li>Solving puzzles with only one solution, such as the eight queens puzzle.</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Depth-First Search (DFS)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "50829300-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:30.928Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Fibonacci Sequence",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Fibonacci Sequence</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            font-size: 18px;\n            line-height: 1.6;\n        }\n        .sequence {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            display: inline-block;\n        }\n    </style>\n</head>\n<body>\n    <h1>Fibonacci Sequence</h1>\n    <p>The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1.</p>\n    <div class=\"sequence\">\n        <h2>First 10 Fibonacci Numbers:</h2>\n        <p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Fibonacci Sequence"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "5095f3f0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:31.055Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Prim’s Algorithm",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Prim's Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            color: #555;\n        }\n        ul {\n            line-height: 1.6;\n        }\n        footer {\n            margin-top: 20px;\n            font-size: small;\n            color: #777;\n        }\n    </style>\n</head>\n<body>\n    <h1>Prim's Algorithm</h1>\n    <p>Prim's Algorithm is a greedy algorithm that finds the minimum spanning tree for a weighted undirected graph. The algorithm operates by building a tree from an arbitrary starting vertex and adding edges that connect the tree to vertices not yet included.</p>\n    \n    <h2>How it Works</h2>\n    <ul>\n        <li>Initialize a tree with a single vertex.</li>\n        <li>While there are vertices not yet included in the tree:</li>\n        <ul>\n            <li>Select the edge with the smallest weight that connects the tree to a vertex not yet in the tree.</li>\n            <li>Add the selected edge and the vertex to the tree.</li>\n        </ul>\n    </ul>\n\n    <h2>Applications</h2>\n    <ul>\n        <li>Network design</li>\n        <li>Telecommunications</li>\n        <li>Circuit design</li>\n    </ul>\n\n    <footer>\n        <p>&copy; 2023 Prim's Algorithm Overview</p>\n    </footer>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Prim’s Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "50c58f70-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:31.368Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Bellman-Ford Algorithm",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bellman-Ford Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        .algorithm-description {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        code {\n            background-color: #e8e8e8;\n            padding: 2px 4px;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bellman-Ford Algorithm</h1>\n    <div class=\"algorithm-description\">\n        <p>The <strong>Bellman-Ford algorithm</strong> is a graph algorithm that finds the shortest path from a single source vertex to all other vertices in a weighted graph. It is capable of handling graphs with negative weight edges.</p>\n        <h2>Steps of the Algorithm:</h2>\n        <ol>\n            <li>Initialize distances from the source to all vertices as infinite, except for the source itself, which is set to zero.</li>\n            <li>For each edge in the graph, update the distances if the distance to the destination vertex can be shortened by taking the edge.</li>\n            <li>Repeat the previous step for a total of <code>V-1</code> times, where <code>V</code> is the number of vertices in the graph.</li>\n            <li>Check for negative weight cycles. If you can still relax an edge after <code>V-1</code> iterations, then a negative weight cycle exists.</li>\n        </ol>\n        <h2>Time Complexity:</h2>\n        <p>The time complexity of the Bellman-Ford algorithm is <code>O(V * E)</code>, where <code>V</code> is the number of vertices and <code>E</code> is the number of edges in the graph.</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Bellman-Ford Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "5156abe0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:32.318Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Kruskal’s Algorithm",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Kruskal's Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        h1 {\n            color: #0056b3;\n        }\n        h2 {\n            color: #007bff;\n        }\n        p {\n            line-height: 1.5;\n        }\n        ul {\n            list-style-type: square;\n        }\n    </style>\n</head>\n<body>\n    <h1>Kruskal's Algorithm</h1>\n    <h2>Overview</h2>\n    <p>Kruskal's Algorithm is a greedy algorithm that finds the minimum spanning tree for a connected weighted graph. It aims to connect all the vertices with the least possible total edge weight.</p>\n\n    <h2>Steps of Kruskal's Algorithm</h2>\n    <ol>\n        <li>Sort all the edges in non-decreasing order of their weights.</li>\n        <li>Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If not, include it in the tree.</li>\n        <li>Repeat step 2 until there are (V-1) edges in the spanning tree, where V is the number of vertices.</li>\n    </ol>\n\n    <h2>Applications</h2>\n    <ul>\n        <li>Network design (like laying out cables or roads).</li>\n        <li>Finding the least-cost network connecting several points.</li>\n    </ul>\n\n    <h2>Example</h2>\n    <p>Given the following graph:</p>\n    <pre>\n        A --- 1 --- B\n        |         / |\n        4      2   | 3\n        |   /       |\n        C --- 5 --- D\n    </pre>\n    <p>The edges would be sorted and added by weight: A-B (1), B-D (2), B-C (3), A-C (4), C-D (5). The resulting minimum spanning tree will include A-B, B-D, and B-C.</p>\n\n    <footer>\n        <p>Learn more about algorithms at <a href=\"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\" target=\"_blank\">Wikipedia</a>.</p>\n    </footer>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Kruskal’s Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "51707570-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:32.487Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Floyd-Warshall Algorithm",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Floyd-Warshall Algorithm</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        h2 {\n            color: #555;\n        }\n        pre {\n            background-color: #eee;\n            padding: 10px;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Floyd-Warshall Algorithm</h1>\n    <h2>Description</h2>\n    <p>The Floyd-Warshall algorithm is a dynamic programming technique used to find the shortest paths between all pairs of nodes in a weighted graph. It is applicable to both directed and undirected graphs.</p>\n\n    <h2>Algorithm Steps</h2>\n    <ol>\n        <li>Initialize the distance matrix. Set the distance from each vertex to itself as zero and the distance between two vertices as the weight of the edge connecting them (if it exists).</li>\n        <li>For each vertex k, update the distance matrix. For each pair of vertices (i, j), check if the path from i to j through k is shorter than the direct path from i to j.</li>\n        <li>Repeat the process for each vertex k.</li>\n    </ol>\n\n    <h2>Example Code (Python)</h2>\n    <pre>\ndef floyd_warshall(graph):\n    num_vertices = len(graph)\n    \n    # Initialize distance matrix\n    dist = [[float('inf')] * num_vertices for _ in range(num_vertices)]\n    for i in range(num_vertices):\n        for j in range(num_vertices):\n            dist[i][j] = graph[i][j]\n    \n    # Update distances\n    for k in range(num_vertices):\n        for i in range(num_vertices):\n            for j in range(num_vertices):\n                if dist[i][j] > dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n    \n    return dist\n    </pre>\n\n    <h2>Complexity</h2>\n    <p>The time complexity of the Floyd-Warshall algorithm is O(V^3), where V is the number of vertices in the graph.</p>\n\n    <h2>Use Cases</h2>\n    <ul>\n        <li>Network routing protocols</li>\n        <li>Finding shortest paths in weighted graphs</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Floyd-Warshall Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "517668e0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:32.526Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Topological Sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Topological Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            line-height: 1.6;\n        }\n        code {\n            background-color: #eaeaea;\n            padding: 5px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Topological Sort</h1>\n    <p>\n        Topological Sort is an algorithm used to order the vertices of a directed graph so that for every directed edge <code>U -> V</code>, vertex <code>U</code> comes before vertex <code>V</code>.\n    </p>\n    <h2>Applications</h2>\n    <ul>\n        <li>Scheduling tasks in a way that prerequisites are satisfied.</li>\n        <li>Determining the order of compilation tasks in programming.</li>\n        <li>Representing dependencies in various scenarios like build systems or project management.</li>\n    </ul>\n    <h2>Algorithm</h2>\n    <ol>\n        <li>Compute the in-degree (number of incoming edges) for each vertex.</li>\n        <li>Add all vertices with in-degree 0 to a queue.</li>\n        <li>While the queue is not empty, do the following:</li>\n        <ul>\n            <li>Remove a vertex from the queue and append it to the topological order.</li>\n            <li>For each of its neighbors, decrease their in-degree by 1. If a neighbor's in-degree becomes 0, add it to the queue.</li>\n        </ul>\n        <li>If the topological order does not contain all vertices, then there is a cycle in the graph.</li>\n    </ol>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Topological Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "51b03d90-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:32.905Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Longest Common Subsequence",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Longest Common Subsequence</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f5f5f5;\n            color: #333;\n        }\n        h1 {\n            color: #007BFF;\n        }\n        p {\n            line-height: 1.6;\n        }\n        code {\n            background-color: #e9ecef;\n            padding: 2px 4px;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #e9ecef;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Longest Common Subsequence</h1>\n    <p>The Longest Common Subsequence (LCS) problem is a classic computer science problem that finds the longest subsequence common to two sequences. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.</p>\n    \n    <h2>Example:</h2>\n    <p>Consider the following two sequences:</p>\n    <pre>\n        Sequence 1: AGGTAB\n        Sequence 2: GXTXAYB\n    </pre>\n    <p>The longest common subsequence is <code>GTAB</code>, with a length of 4.</p>\n    \n    <h2>Applications:</h2>\n    <ul>\n        <li>Bioinformatics (e.g., DNA sequencing)</li>\n        <li>Version control systems (e.g., finding changes in files)</li>\n        <li>Text comparison tools</li>\n    </ul>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Longest Common Subsequence"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "52a991b0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:34.539Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Knapsack Problem",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Knapsack Problem</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        .problem-description {\n            background-color: #fff;\n            padding: 15px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        .example {\n            margin-top: 20px;\n            background-color: #e2e2e2;\n            padding: 10px;\n            border-radius: 3px;\n        }\n        footer {\n            margin-top: 30px;\n            text-align: center;\n            font-size: small;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Knapsack Problem</h1>\n    <div class=\"problem-description\">\n        <p>The Knapsack Problem is a combinatorial optimization problem. In the problem, one has to select a subset of items, each with a weight and a value, such that the total weight does not exceed a given limit (the capacity of the knapsack), and the total value is maximized.</p>\n    </div>\n    \n    <div class=\"example\">\n        <h2>Example</h2>\n        <p>Given the following items:</p>\n        <ul>\n            <li>Item 1: Weight = 2, Value = 3</li>\n            <li>Item 2: Weight = 3, Value = 4</li>\n            <li>Item 3: Weight = 4, Value = 5</li>\n            <li>Item 4: Weight = 5, Value = 8</li>\n        </ul>\n        <p>And a knapsack capacity of 5, the maximum value that can be carried is 7, by taking Item 1 and Item 2.</p>\n    </div>\n\n    <footer>\n        <p>&copy; 2023 Knapsack Problem Overview</p>\n    </footer>\n    \n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Knapsack Problem"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "52d6bc30-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:34.835Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Divide and Conquer",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Divide and Conquer</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            line-height: 1.6;\n            color: #666;\n        }\n        .container {\n            max-width: 800px;\n            margin: auto;\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Divide and Conquer</h1>\n        <p>Divide and Conquer is an algorithm design paradigm that works by recursively breaking down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.</p>\n        <p>This strategy is used in various algorithms, including sorting algorithms like Merge Sort and Quick Sort.</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Divide and Conquer"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "53263bc0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:35.356Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Sliding Window",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sliding Window</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: auto;\n            padding: 20px;\n            background: white;\n            border-radius: 5px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n            text-align: center;\n            color: #333;\n        }\n        p {\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Sliding Window Algorithm</h1>\n        <p>The sliding window is a technique used in programming to create a subset of data from a larger dataset in a sequential manner.</p>\n        <p>This technique is particularly useful for problems that require finding a contiguous segment of data, such as calculating sums, averages, or performing searches.</p>\n        <h2>Example Usage</h2>\n        <p>For instance, to find the maximum sum of any contiguous subarray of size k in an array, you can use the sliding window approach to maintain a window of size k, moving it across the array while updating the sum efficiently.</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Sliding Window"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "532b92f0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:35.391Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Recursion",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Recursion</title>\n</head>\n<body>\n    <h1>Understanding Recursion</h1>\n    <p>Recursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem.</p>\n    \n    <h2>Example of a Recursion</h2>\n    <p>Factorial of a number <code>n</code> can be defined recursively as:</p>\n    <ul>\n        <li><code>factorial(n) = n * factorial(n - 1)</code> for <code>n > 0</code></li>\n        <li><code>factorial(0) = 1</code></li>\n    </ul>\n\n    <h2>Benefits of Recursion</h2>\n    <ul>\n        <li>Simplifies code.</li>\n        <li>Facilitates solving complex problems.</li>\n        <li>Enables elegant solutions.</li>\n    </ul>\n\n    <h2>Common Issues with Recursion</h2>\n    <ul>\n        <li>Stack overflow for deep recursions.</li>\n        <li>Performance issues with high recursion depth.</li>\n    </ul>\n\n    <h2>Conclusion</h2>\n    <p>Recursion is a powerful tool in programming but should be used judiciously.</p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Recursion"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "53a752a0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:36.202Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Two Pointers",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Two Pointers Technique</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            line-height: 1.6;\n        }\n        .example {\n            background-color: #e2e2e2;\n            padding: 10px;\n            border-left: 5px solid #333;\n            margin: 20px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Understanding the Two Pointers Technique</h1>\n    <p>The Two Pointers technique is a common pattern in programming used for solving various problems efficiently.</p>\n    \n    <h2>How It Works</h2>\n    <p>This technique involves using two pointers to iterate through a data structure, such as an array or a string.</p>\n    \n    <div class=\"example\">\n        <h3>Example Usage</h3>\n        <p>For instance, to find pairs in an array that sum up to a specific target, we can sort the array and then use one pointer at the start and the other at the end, moving them towards each other based on the sum.</p>\n    </div>\n    \n    <h2>Common Problems</h2>\n    <ul>\n        <li>Finding a pair with a given sum in a sorted array</li>\n        <li>Removing duplicates from a sorted array</li>\n        <li>Reversing a string using two pointers</li>\n    </ul>\n\n    <p>By using the Two Pointers technique, many problems that could be solved in O(n^2) time can be optimized to O(n) or O(n log n).</p>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Two Pointers"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "545d3520-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:37.394Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Huffman Coding",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Huffman Coding</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .content {\n            background: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        code {\n            background: #efefef;\n            padding: 5px;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"content\">\n        <h1>Huffman Coding</h1>\n        <p>\n            <strong>Huffman Coding</strong> is a popular method of data compression. It works by assigning variable-length codes to input characters, \n            with shorter codes assigned to more frequent characters. The result is a prefix code that allows for efficient data storage and transmission.\n        </p>\n        <h2>How it Works</h2>\n        <ol>\n            <li>Create a frequency table of the characters in the input.</li>\n            <li>Build a binary tree using the frequencies.</li>\n            <li>Assign binary codes to each character based on their position in the tree.</li>\n        </ol>\n        <h2>Example</h2>\n        <p>\n            For example, consider the input string <code>\"ABRACADABRA\"</code>.\n            The frequency of characters might look like this:\n        </p>\n        <ul>\n            <li>A: 5</li>\n            <li>B: 2</li>\n            <li>C: 1</li>\n            <li>D: 1</li>\n            <li>R: 2</li>\n        </ul>\n        <p>\n            The resulting Huffman codes might be:\n        </p>\n        <ul>\n            <li>A: 0</li>\n            <li>B: 101</li>\n            <li>C: 1110</li>\n            <li>D: 1111</li>\n            <li>R: 100</li>\n        </ul>\n        <p>\n            The compressed output for <code>\"ABRACADABRA\"</code> using Huffman coding might look like:\n            <code>\"01010011100101001010100\"</code>.\n        </p>\n    </div>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Huffman Coding"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "55365710-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:38.818Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Linear Regression",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linear Regression</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            font-size: 16px;\n            line-height: 1.5;\n        }\n        code {\n            background-color: #e7e7e7;\n            padding: 2px 4px;\n            border-radius: 4px;\n        }\n        .example {\n            background-color: #fff;\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin: 10px 0;\n            border-radius: 4px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Introduction to Linear Regression</h1>\n    <p>Linear regression is a statistical method used to create a linear relationship between a dependent variable and one or more independent variables. It is commonly used for predictive analysis.</p>\n    \n    <h2>Equation of Linear Regression</h2>\n    <p>The linear regression equation can be expressed as:</p>\n    <div class=\"example\">\n        <code>Y = a + bX</code>\n    </div>\n    <p>Where:</p>\n    <ul>\n        <li><code>Y</code> = dependent variable</li>\n        <li><code>X</code> = independent variable</li>\n        <li><code>a</code> = intercept</li>\n        <li><code>b</code> = slope of the line</li>\n    </ul>\n\n    <h2>Applications</h2>\n    <p>Linear regression is widely used in various fields including:</p>\n    <ul>\n        <li>Finance for stock price prediction</li>\n        <li>Marketing for sales forecasting</li>\n        <li>Healthcare for estimating disease risk based on multiple factors</li>\n    </ul>\n\n    <h2>Conclusion</h2>\n    <p>Understanding linear regression is essential for data analysis and modeling as it provides a foundation for more complex statistical techniques.</p>\n\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Linear Regression"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "55e079c0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:39.932Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "K-Means Clustering",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>K-Means Clustering</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            color: #333;\n            margin: 0;\n            padding: 20px;\n        }\n        h1 {\n            color: #0056b3;\n        }\n        .content {\n            background-color: white;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        footer {\n            margin-top: 20px;\n            text-align: center;\n            font-size: 0.9em;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"content\">\n        <h1>K-Means Clustering</h1>\n        <p>K-Means Clustering is a popular unsupervised learning algorithm used for partitioning data into distinct groups based on their features.</p>\n        <h2>How it Works:</h2>\n        <ol>\n            <li>Choose the number of clusters (K).</li>\n            <li>Randomly initialize K centroids.</li>\n            <li>Assign each data point to the nearest centroid.</li>\n            <li>Update centroid positions by calculating the mean of assigned points.</li>\n            <li>Repeat steps 3 and 4 until convergence (no change in centroids).</li>\n        </ol>\n        <h2>Applications:</h2>\n        <ul>\n            <li>Market segmentation</li>\n            <li>Image compression</li>\n            <li>Document clustering</li>\n            <li>Anomaly detection</li>\n        </ul>\n    </div>\n    <footer>\n        <p>&copy; 2023 K-Means Clustering Tutorial</p>\n    </footer>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "K-Means Clustering"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "55ef46d0-b3c1-11f0-9577-1b326fe6059a",
    "timestamp": "2025-10-28T05:45:40.029Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "K-Nearest Neighbors (KNN)",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>K-Nearest Neighbors (KNN)</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            color: #333;\n        }\n        p {\n            line-height: 1.6;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>K-Nearest Neighbors (KNN)</h1>\n        <p>The K-Nearest Neighbors (KNN) algorithm is a simple, yet powerful, supervised machine learning algorithm used for both classification and regression tasks. The idea behind KNN is to find the 'k' number of closest training examples in the feature space to a given query point, and then make predictions based on the labels or values of those neighbors.</p>\n        <h2>How It Works:</h2>\n        <ol>\n            <li>Choose the number of neighbors 'k'.</li>\n            <li>Calculate the distance between the query point and all training points.</li>\n            <li>Sort the distances and determine the nearest 'k' points.</li>\n            <li>For classification, take a majority vote among the neighbors. For regression, compute the average of the neighbors' values.</li>\n        </ol>\n        <h2>When to Use KNN:</h2>\n        <p>KNN is useful when you have a small dataset and want to make quick predictions. However, it can become inefficient with large datasets, as it requires distance calculations for every query.</p>\n    </div>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "K-Nearest Neighbors (KNN)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]