[
  {
    "id": "75bdabf0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:33.392Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Set",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple HTML Page</title>\n  <style>\n    :root { color-scheme: light dark; }\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; line-height: 1.6; margin: 0; padding: 2rem; }\n    main { max-width: 60ch; margin: 0 auto; }\n    h1 { margin-top: 0; }\n  </style>\n</head>\n<body>\n  <main>\n    <h1>Hello!</h1>\n    <p>This is a simple HTML page. You can edit the content to get started.</p>\n  </main>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Set"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "7a5a8ca0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:41.130Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Array",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Array Demo</title>\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; line-height: 1.5; margin: 2rem; color: #222; }\n    h1 { font-size: 1.5rem; margin-bottom: 0.5rem; }\n    p { margin-top: 0; color: #444; }\n    button { padding: 0.5rem 0.8rem; border: 1px solid #ccc; background: #f8f8f8; border-radius: 6px; cursor: pointer; }\n    button:hover { background: #f0f0f0; }\n    pre { background: #f6f8fa; padding: 1rem; border-radius: 6px; overflow: auto; border: 1px solid #e5e7eb; }\n    .controls { display: flex; gap: 0.5rem; margin: 1rem 0; flex-wrap: wrap; }\n    .input-row { display: flex; gap: 0.5rem; align-items: center; flex-wrap: wrap; }\n    input[type=\"text\"] { padding: 0.45rem; border: 1px solid #ccc; border-radius: 6px; min-width: 12rem; }\n    small { color: #666; }\n  </style>\n</head>\n<body>\n  <h1>Array</h1>\n  <p>This simple page shows a few basic JavaScript array operations.</p>\n\n  <div class=\"input-row\">\n    <label for=\"arrayInput\"><strong>Start array</strong></label>\n    <input id=\"arrayInput\" type=\"text\" value=\"1,2,3,4,5\" aria-label=\"Initial array values (comma separated)\" />\n    <small>Enter comma-separated values, then run the demo.</small>\n  </div>\n\n  <div class=\"controls\">\n    <button id=\"runBtn\">Run Demo</button>\n    <button id=\"clearBtn\">Clear Output</button>\n  </div>\n\n  <pre id=\"output\" aria-live=\"polite\"></pre>\n\n  <script>\n    const outputEl = document.getElementById('output');\n    const inputEl = document.getElementById('arrayInput');\n    const runBtn = document.getElementById('runBtn');\n    const clearBtn = document.getElementById('clearBtn');\n\n    function log(title, value) {\n      const line = `${title}: ${format(value)}`;\n      outputEl.textContent += line + '\\n';\n    }\n\n    function format(v) {\n      try {\n        return typeof v === 'string' ? `\"${v}\"` : JSON.stringify(v);\n      } catch {\n        return String(v);\n      }\n    }\n\n    function parseInput(str) {\n      // Split by comma, trim spaces, try to coerce numbers when possible\n      return str\n        .split(',')\n        .map(s => s.trim())\n        .filter(s => s.length > 0)\n        .map(s => {\n          const n = Number(s);\n          return Number.isFinite(n) && s !== '' && !/\\s/.test(s) ? n : s;\n        });\n    }\n\n    function runDemo() {\n      outputEl.textContent = '';\n      const arr = parseInput(inputEl.value);\n      log('Initial', arr);\n\n      // Non-mutating examples\n      const mapped = arr.map(x => (typeof x === 'number' ? x * 2 : x));\n      log('map(x => x*2)', mapped);\n\n      const filtered = arr.filter(x => typeof x === 'number' ? x % 2 === 0 : false);\n      log('filter(even numbers)', filtered);\n\n      const sum = arr.reduce((acc, x) => acc + (typeof x === 'number' ? x : 0), 0);\n      log('reduce(sum of numbers)', sum);\n\n      const includesThree = arr.includes(3);\n      log('includes(3)', includesThree);\n\n      const foundGtThree = arr.find(x => typeof x === 'number' && x > 3);\n      log('find(x > 3)', foundGtThree === undefined ? 'not found' : foundGtThree);\n\n      // Mutating examples on a copy\n      const copy = arr.slice();\n      copy.push('new');\n      log('push(\"new\")', copy);\n\n      const popped = copy.pop();\n      log('pop() -> removed', popped);\n      log('After pop', copy);\n\n      // Sorting numbers sensibly (non-mutating by copying first)\n      const numericSorted = arr\n        .filter(x => typeof x === 'number')\n        .slice()\n        .sort((a, b) => a - b);\n      log('sorted numbers (asc)', numericSorted);\n\n      log('Length', arr.length);\n    }\n\n    runBtn.addEventListener('click', runDemo);\n    clearBtn.addEventListener('click', () => { outputEl.textContent = ''; });\n\n    // Auto-run once on load for convenience\n    runDemo();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Array"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "7e23c9a0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:47.482Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Queue",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Queue</title>\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, sans-serif;\n      margin: 0;\n      padding: 2rem;\n      line-height: 1.6;\n    }\n    main {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      margin: 0 0 0.5rem 0;\n    }\n    .card {\n      border: 1px solid rgba(0,0,0,0.15);\n      border-radius: 8px;\n      padding: 1rem;\n      margin: 1rem 0;\n    }\n    .controls {\n      display: flex;\n      gap: 0.5rem;\n      flex-wrap: wrap;\n      align-items: center;\n      margin-bottom: 0.75rem;\n    }\n    .controls input[type=\"text\"] {\n      flex: 1;\n      min-width: 140px;\n      padding: 0.5rem;\n      border: 1px solid rgba(0,0,0,0.2);\n      border-radius: 6px;\n    }\n    button {\n      padding: 0.5rem 0.75rem;\n      border: 1px solid rgba(0,0,0,0.2);\n      border-radius: 6px;\n      background: #f4f4f4;\n      cursor: pointer;\n    }\n    button:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    .queue {\n      display: flex;\n      gap: 0.5rem;\n      flex-wrap: wrap;\n      min-height: 48px;\n      padding: 0.5rem;\n      border: 1px dashed rgba(0,0,0,0.2);\n      border-radius: 8px;\n    }\n    .item {\n      padding: 0.5rem 0.75rem;\n      background: #e9f2ff;\n      border: 1px solid #bcd4ff;\n      border-radius: 6px;\n      font-weight: 500;\n    }\n    .labels {\n      display: flex;\n      justify-content: space-between;\n      font-size: 0.9rem;\n      color: #555;\n      margin-top: 0.25rem;\n    }\n    .status {\n      font-size: 0.95rem;\n      color: #333;\n      margin-top: 0.5rem;\n    }\n    code {\n      background: rgba(0,0,0,0.05);\n      padding: 0.15rem 0.35rem;\n      border-radius: 4px;\n    }\n    .small {\n      font-size: 0.9rem;\n      color: #666;\n    }\n  </style>\n</head>\n<body>\n  <main>\n    <h1>Queue</h1>\n    <p>A queue is a simple data structure that stores items in First-In, First-Out (FIFO) order. The first item added is the first one removed.</p>\n\n    <div class=\"card\">\n      <h2>Core operations</h2>\n      <ul>\n        <li><strong>Enqueue</strong>: Add an item to the back of the queue.</li>\n        <li><strong>Dequeue</strong>: Remove the item from the front of the queue.</li>\n        <li><strong>Peek</strong>: Look at the front item without removing it.</li>\n        <li><strong>Size / Empty</strong>: Check how many items are in the queue or whether it is empty.</li>\n      </ul>\n    </div>\n\n    <div class=\"card\" aria-live=\"polite\">\n      <h2>Try it</h2>\n      <div class=\"controls\">\n        <input id=\"input\" type=\"text\" placeholder=\"Enter a value to enqueue\" aria-label=\"Value to enqueue\">\n        <button id=\"enqueue\">Enqueue</button>\n        <button id=\"dequeue\">Dequeue</button>\n        <button id=\"peek\">Peek</button>\n        <button id=\"clear\">Clear</button>\n      </div>\n      <div class=\"queue\" id=\"queue\" aria-label=\"Queue visualization\"></div>\n      <div class=\"labels\">\n        <span>Front</span>\n        <span>Back</span>\n      </div>\n      <div class=\"status\" id=\"status\">Queue is empty.</div>\n      <p class=\"small\">Tip: Enqueue adds to the back; Dequeue removes from the front.</p>\n      <noscript>Enable JavaScript to use this interactive demo.</noscript>\n    </div>\n\n    <div class=\"card\">\n      <h2>Example</h2>\n      <p>Sequence of operations:</p>\n      <ol>\n        <li>Enqueue A, Enqueue B, Enqueue C → Queue is [A, B, C]</li>\n        <li>Dequeue → returns A, Queue becomes [B, C]</li>\n        <li>Peek → returns B (front), Queue stays [B, C]</li>\n      </ol>\n      <p>Use cases: task scheduling, printer jobs, breadth-first search, buffering streams.</p>\n    </div>\n  </main>\n\n  <script>\n    (function () {\n      const input = document.getElementById('input');\n      const queueEl = document.getElementById('queue');\n      const statusEl = document.getElementById('status');\n      const btnEnq = document.getElementById('enqueue');\n      const btnDeq = document.getElementById('dequeue');\n      const btnPeek = document.getElementById('peek');\n      const btnClear = document.getElementById('clear');\n\n      const queue = [];\n\n      function render() {\n        queueEl.innerHTML = '';\n        queue.forEach((val) => {\n          const div = document.createElement('div');\n          div.className = 'item';\n          div.textContent = String(val);\n          queueEl.appendChild(div);\n        });\n\n        const size = queue.length;\n        const front = size ? queue[0] : 'None';\n        const back = size ? queue[size - 1] : 'None';\n\n        statusEl.textContent = `Size: ${size} | Front: ${front} | Back: ${back}`;\n        btnDeq.disabled = size === 0;\n        btnPeek.disabled = size === 0;\n        btnClear.disabled = size === 0;\n      }\n\n      function enqueue() {\n        const val = input.value.trim();\n        if (!val) {\n          statusEl.textContent = 'Please enter a value to enqueue.';\n          return;\n        }\n        queue.push(val);\n        input.value = '';\n        render();\n      }\n\n      function dequeue() {\n        if (queue.length === 0) return;\n        const removed = queue.shift();\n        render();\n        statusEl.textContent = `Dequeued: ${removed} | Size: ${queue.length} | Front: ${queue[0] ?? 'None'} | Back: ${queue[queue.length - 1] ?? 'None'}`;\n      }\n\n      function peek() {\n        if (queue.length === 0) return;\n        statusEl.textContent = `Peek: ${queue[0]} (front) | Size: ${queue.length}`;\n      }\n\n      function clear() {\n        queue.length = 0;\n        render();\n        statusEl.textContent = 'Queue cleared. Queue is empty.';\n      }\n\n      btnEnq.addEventListener('click', (e) => { e.preventDefault(); enqueue(); });\n      btnDeq.addEventListener('click', (e) => { e.preventDefault(); dequeue(); });\n      btnPeek.addEventListener('click', (e) => { e.preventDefault(); peek(); });\n      btnClear.addEventListener('click', (e) => { e.preventDefault(); clear(); });\n\n      input.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          enqueue();\n        }\n      });\n\n      render();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "805130f0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:51.135Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Linked List",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Linked List</title>\n  <style>\n    :root {\n      --bg: #f8fafc;\n      --fg: #0f172a;\n      --muted: #475569;\n      --accent: #2563eb;\n      --accent-weak: #93c5fd;\n      --border: #cbd5e1;\n      --node-bg: #ffffff;\n      --danger: #ef4444;\n      --success: #16a34a;\n    }\n    * { box-sizing: border-box }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.6;\n      color: var(--fg);\n      background: var(--bg);\n    }\n    header {\n      background: #0ea5e9;\n      color: white;\n      padding: 1.25rem 1rem;\n    }\n    header h1 {\n      margin: 0 auto;\n      max-width: 900px;\n      font-size: 1.75rem;\n      letter-spacing: 0.2px;\n    }\n    main {\n      max-width: 900px;\n      margin: 0 auto;\n      padding: 1.25rem 1rem 2rem;\n    }\n    section + section { margin-top: 1.5rem }\n    h2 { margin: 0 0 0.5rem }\n    p { margin: 0.5rem 0 }\n    ul { margin: 0.5rem 0 0.25rem 1.25rem }\n    .note {\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n\n    /* Visualizer */\n    .viz {\n      margin-top: 1rem;\n      padding: 0.75rem;\n      background: #f1f5f9;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n      gap: 0.5rem;\n      margin-bottom: 0.75rem;\n    }\n    .controls input[type=\"text\"] {\n      grid-column: span 2;\n      padding: 0.5rem;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      background: white;\n    }\n    .controls button {\n      padding: 0.5rem 0.6rem;\n      border: 1px solid var(--border);\n      background: white;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: background 0.15s;\n      font-weight: 600;\n      color: #0f172a;\n    }\n    .controls button:hover { background: #e2e8f0 }\n    .controls button.primary {\n      border-color: var(--accent-weak);\n      background: #eaf2ff;\n      color: #0b3bb1;\n    }\n    .list {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      flex-wrap: wrap;\n      min-height: 60px;\n    }\n    .node {\n      display: inline-flex;\n      align-items: center;\n      gap: 0.5rem;\n      min-width: 60px;\n      padding: 0.5rem 0.75rem;\n      background: var(--node-bg);\n      border: 2px solid var(--border);\n      border-radius: 10px;\n      position: relative;\n      box-shadow: 0 1px 0 rgba(0,0,0,0.03);\n      font-weight: 600;\n    }\n    .node::after {\n      content: \"next\";\n      position: absolute;\n      bottom: -1.15rem;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 0.7rem;\n      color: var(--muted);\n    }\n    .arrow {\n      font-size: 1.25rem;\n      color: var(--muted);\n      user-select: none;\n    }\n    .null {\n      padding: 0.4rem 0.6rem;\n      border: 2px dashed #94a3b8;\n      border-radius: 8px;\n      color: #475569;\n      background: #f8fafc;\n      font-weight: 600;\n    }\n    .highlight {\n      outline: 3px solid #fde68a;\n      background: #fffbeb;\n    }\n    .found {\n      outline: 3px solid #86efac;\n      background: #f0fdf4;\n    }\n    .removed {\n      outline: 3px solid #fecaca;\n      background: #fff1f2;\n    }\n    .ops {\n      font-size: 0.95rem;\n      color: var(--muted);\n      margin-top: 0.5rem;\n    }\n    @media (max-width: 640px) {\n      .controls { grid-template-columns: 1fr 1fr; }\n      .controls input[type=\"text\"] { grid-column: span 2; }\n    }\n    code {\n      background: #e2e8f0;\n      padding: 0.1rem 0.3rem;\n      border-radius: 6px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Linked List</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Overview</h2>\n      <p>A linked list is a linear data structure made up of nodes. Each node stores a value and a reference (the “next” pointer) to the next node. Unlike arrays, linked lists do not require contiguous memory; elements can be scattered, and the links connect them.</p>\n      <ul>\n        <li>Singly linked list: each node has a single pointer to the next node.</li>\n        <li>Doubly linked list: nodes have pointers to both next and previous nodes.</li>\n        <li>Circular linked list: the last node points back to the first node.</li>\n      </ul>\n      <p class=\"note\">Because elements are linked by pointers, inserting or deleting at the head can be O(1), while random access like “give me index 42” is O(n).</p>\n    </section>\n\n    <section>\n      <h2>Core Operations</h2>\n      <ul>\n        <li>Insert at head: add a new node that points to the current head; update head to the new node.</li>\n        <li>Insert at tail: traverse to the end and link the new node there (or keep a tail pointer).</li>\n        <li>Search: traverse nodes until the value is found.</li>\n        <li>Delete: find the node (and its predecessor) and relink predecessor to skip the deleted node.</li>\n      </ul>\n      <p class=\"note\">Typical time complexities: insert/delete at head O(1), insert/delete at tail O(n) without tail pointer, search O(n).</p>\n    </section>\n\n    <section class=\"viz\" aria-label=\"Linked list visualizer\">\n      <div class=\"controls\">\n        <input id=\"valInput\" type=\"text\" placeholder=\"Value (e.g., 42)\" aria-label=\"Node value\" />\n        <button id=\"headBtn\" class=\"primary\" type=\"button\" aria-label=\"Insert at head\">Insert Head</button>\n        <button id=\"tailBtn\" type=\"button\" aria-label=\"Insert at tail\">Insert Tail</button>\n        <button id=\"searchBtn\" type=\"button\" aria-label=\"Search value\">Search</button>\n        <button id=\"delBtn\" type=\"button\" aria-label=\"Delete value\">Delete</button>\n      </div>\n      <div id=\"list\" class=\"list\" role=\"list\" aria-live=\"polite\"></div>\n      <div id=\"opsMsg\" class=\"ops\" aria-live=\"polite\"></div>\n    </section>\n\n    <section>\n      <h2>Advantages</h2>\n      <ul>\n        <li>Efficient insertions/deletions at known positions (especially head).</li>\n        <li>Dynamic size; no need to pre-allocate contiguous memory.</li>\n      </ul>\n      <h2>Disadvantages</h2>\n      <ul>\n        <li>No constant-time random access; must traverse.</li>\n        <li>Extra memory for pointers; potential cache inefficiency.</li>\n      </ul>\n    </section>\n  </main>\n\n  <script>\n    (function () {\n      const listEl = document.getElementById('list');\n      const opsMsg = document.getElementById('opsMsg');\n      const input = document.getElementById('valInput');\n      const headBtn = document.getElementById('headBtn');\n      const tailBtn = document.getElementById('tailBtn');\n      const searchBtn = document.getElementById('searchBtn');\n      const delBtn = document.getElementById('delBtn');\n\n      // We simulate a singly linked list with an array for visualization purposes.\n      /** @type {string[]} */\n      let list = [];\n\n      function escapeHTML(str) {\n        return String(str).replace(/[&<>\"']/g, s => ({\n          '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#39;'\n        }[s]));\n      }\n\n      function render(opts = {}) {\n        const { highlightIndex = null, foundIndex = null, removedIndex = null } = opts;\n        // Build the visualization with nodes and arrows, ending at null\n        let html = '';\n        if (list.length === 0) {\n          html = '<div class=\"null\">null</div>';\n        } else {\n          list.forEach((val, idx) => {\n            const classes = ['node'];\n            if (highlightIndex === idx) classes.push('highlight');\n            if (foundIndex === idx) classes.push('found');\n            if (removedIndex === idx) classes.push('removed');\n            html += `<div role=\"listitem\" class=\"${classes.join(' ')}\">${escapeHTML(val)}</div>`;\n            html += idx === list.length - 1\n              ? '<div class=\"arrow\" aria-hidden=\"true\">→</div><div class=\"null\">null</div>'\n              : '<div class=\"arrow\" aria-hidden=\"true\">→</div>';\n          });\n        }\n        listEl.innerHTML = html;\n      }\n\n      function setMsg(text) {\n        opsMsg.textContent = text;\n      }\n\n      function valOrHint() {\n        const v = input.value.trim();\n        if (!v) {\n          setMsg('Enter a value in the input first.');\n          input.focus();\n          return null;\n        }\n        return v;\n      }\n\n      headBtn.addEventListener('click', () => {\n        const v = valOrHint();\n        if (v == null) return;\n        list.unshift(v);\n        render({ highlightIndex: 0 });\n        setMsg(`Inserted \"${v}\" at head.`);\n        input.select();\n      });\n\n      tailBtn.addEventListener('click', () => {\n        const v = valOrHint();\n        if (v == null) return;\n        list.push(v);\n        render({ highlightIndex: list.length - 1 });\n        setMsg(`Inserted \"${v}\" at tail.`);\n        input.select();\n      });\n\n      searchBtn.addEventListener('click', () => {\n        const v = valOrHint();\n        if (v == null) return;\n        const idx = list.indexOf(v);\n        if (idx === -1) {\n          render();\n          setMsg(`Value \"${v}\" not found (O(n) traversal).`);\n        } else {\n          render({ foundIndex: idx });\n          setMsg(`Found \"${v}\" at position ${idx} (0-based).`);\n        }\n        input.select();\n      });\n\n      delBtn.addEventListener('click', () => {\n        const v = valOrHint();\n        if (v == null) return;\n        const idx = list.indexOf(v);\n        if (idx === -1) {\n          render();\n          setMsg(`Cannot delete: \"${v}\" not found.`);\n        } else {\n          // Simulate deletion by removing the element and relinking\n          list.splice(idx, 1);\n          render({ removedIndex: idx });\n          setMsg(`Deleted \"${v}\" and relinked list.`);\n        }\n        input.select();\n      });\n\n      // Initial render\n      render();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Linked List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8067c630-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:51.283Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Merge Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Merge Sort</title>\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      margin: 0;\n      padding: 2rem;\n      line-height: 1.6;\n      background: #f7f7fb;\n      color: #222;\n    }\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      background: #fff;\n      border: 1px solid #e5e7eb;\n      border-radius: 12px;\n      padding: 1.5rem;\n      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.06);\n    }\n    h1 {\n      margin: 0 0 0.75rem;\n      font-size: 1.75rem;\n    }\n    .subtitle {\n      margin-top: 0;\n      color: #555;\n      font-size: 0.95rem;\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 1rem;\n    }\n    @media (min-width: 700px) {\n      .grid {\n        grid-template-columns: 1.2fr 1fr;\n      }\n    }\n    label {\n      display: block;\n      font-weight: 600;\n      margin-bottom: 0.35rem;\n    }\n    input[type=\"text\"] {\n      width: 100%;\n      padding: 0.6rem 0.75rem;\n      border: 1px solid #d1d5db;\n      border-radius: 8px;\n      font-size: 1rem;\n      outline: none;\n      transition: border-color 0.2s ease;\n      background: #fff;\n    }\n    input[type=\"text\"]:focus {\n      border-color: #4f46e5;\n      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.12);\n    }\n    .btns {\n      display: flex;\n      gap: 0.5rem;\n      flex-wrap: wrap;\n      margin-top: 0.5rem;\n    }\n    button {\n      appearance: none;\n      border: none;\n      border-radius: 8px;\n      padding: 0.6rem 0.9rem;\n      font-weight: 600;\n      cursor: pointer;\n      background: #4f46e5;\n      color: #fff;\n      transition: transform 0.05s ease, box-shadow 0.2s ease, background 0.2s ease;\n    }\n    button.secondary {\n      background: #0ea5e9;\n    }\n    button:active {\n      transform: translateY(1px);\n    }\n    .out {\n      background: #f9fafb;\n      border: 1px solid #e5e7eb;\n      border-radius: 8px;\n      padding: 0.75rem;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 0.95rem;\n      white-space: pre-wrap;\n      word-break: break-word;\n    }\n    .note {\n      color: #6b7280;\n      font-size: 0.9rem;\n    }\n    .error {\n      color: #b91c1c;\n      background: #fef2f2;\n      border: 1px solid #fecaca;\n      padding: 0.6rem 0.75rem;\n      border-radius: 8px;\n      display: none;\n    }\n    ul {\n      margin: 0.4rem 0 0.8rem;\n      padding-left: 1.1rem;\n    }\n    code, pre code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    }\n    pre {\n      background: #0f172a;\n      color: #e2e8f0;\n      border-radius: 8px;\n      padding: 0.9rem;\n      overflow: auto;\n    }\n    .tag {\n      display: inline-block;\n      font-size: 0.8rem;\n      background: #eef2ff;\n      color: #3730a3;\n      border: 1px solid #c7d2fe;\n      border-radius: 999px;\n      padding: 0.2rem 0.6rem;\n      margin-right: 0.4rem;\n    }\n    footer {\n      margin-top: 1rem;\n      color: #6b7280;\n      font-size: 0.9rem;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Merge Sort</h1>\n    <p class=\"subtitle\">A stable, divide-and-conquer sorting algorithm with O(n log n) time complexity.</p>\n\n    <div class=\"grid\">\n      <section>\n        <label for=\"numbers\">Enter numbers (comma or space separated):</label>\n        <input id=\"numbers\" type=\"text\" placeholder=\"e.g. 38, 27, 43, 3, 9, 82, 10\" value=\"38, 27, 43, 3, 9, 82, 10\"/>\n        <div class=\"btns\">\n          <button id=\"sortBtn\">Sort (ascending)</button>\n          <button class=\"secondary\" id=\"randomBtn\">Randomize</button>\n        </div>\n\n        <div id=\"errorBox\" class=\"error\" aria-live=\"polite\"></div>\n\n        <h3>Result</h3>\n        <div id=\"resultBox\" class=\"out\">Sorted: [ ]</div>\n\n        <p class=\"note\">Tip: You can paste numbers separated by commas or spaces. Non-numeric entries are ignored and reported.</p>\n      </section>\n\n      <section>\n        <h3>How it works</h3>\n        <ul>\n          <li>Divide: Split the array into two halves until you reach arrays of size 1.</li>\n          <li>Conquer: Recursively sort each half.</li>\n          <li>Combine: Merge the two sorted halves into one sorted array.</li>\n        </ul>\n\n        <span class=\"tag\">Stable</span>\n        <span class=\"tag\">Comparison-based</span>\n\n        <h4>Complexity</h4>\n        <ul>\n          <li>Time: O(n log n) in best, average, and worst cases.</li>\n          <li>Space: O(n) extra space for merging.</li>\n        </ul>\n      </section>\n    </div>\n\n    <h3>Reference implementation (JavaScript)</h3>\n    <pre><code>// Stable Merge Sort (ascending)\nfunction mergeSort(arr) {\n  if (arr.length &lt;= 1) return arr.slice(); // Return a copy\n  const mid = Math.floor(arr.length / 2);\n  const left = mergeSort(arr.slice(0, mid));\n  const right = mergeSort(arr.slice(mid));\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n  const result = [];\n  let i = 0, j = 0;\n\n  while (i &lt; left.length &amp;&amp; j &lt; right.length) {\n    if (left[i] &lt;= right[j]) {\n      result.push(left[i++]); // &lt;= keeps it stable\n    } else {\n      result.push(right[j++]);\n    }\n  }\n  while (i &lt; left.length) result.push(left[i++]);\n  while (j &lt; right.length) result.push(right[j++]);\n  return result;\n}</code></pre>\n\n    <footer>\n      Built for clarity: try different inputs and see how merge sort behaves.\n    </footer>\n  </div>\n\n  <script>\n    function parseNumbers(input) {\n      // Split on commas or whitespace, trim, and parse\n      const tokens = input.split(/,|\\s+/).map(t => t.trim()).filter(t => t.length > 0);\n      const nums = [];\n      const invalid = [];\n      for (const t of tokens) {\n        const n = Number(t);\n        if (Number.isFinite(n)) nums.push(n);\n        else invalid.push(t);\n      }\n      return { nums, invalid };\n    }\n\n    function mergeSort(arr) {\n      if (arr.length <= 1) return arr.slice();\n      const mid = Math.floor(arr.length / 2);\n      const left = mergeSort(arr.slice(0, mid));\n      const right = mergeSort(arr.slice(mid));\n      return merge(left, right);\n    }\n\n    function merge(left, right) {\n      const result = [];\n      let i = 0, j = 0;\n      while (i < left.length && j < right.length) {\n        if (left[i] <= right[j]) {\n          result.push(left[i++]); // <= keeps sort stable\n        } else {\n          result.push(right[j++]);\n        }\n      }\n      while (i < left.length) result.push(left[i++]);\n      while (j < right.length) result.push(right[j++]);\n      return result;\n    }\n\n    function renderArray(arr) {\n      return `[ ${arr.join(', ')} ]`;\n    }\n\n    function handleSort() {\n      const inputEl = document.getElementById('numbers');\n      const resultBox = document.getElementById('resultBox');\n      const errorBox = document.getElementById('errorBox');\n\n      const { nums, invalid } = parseNumbers(inputEl.value);\n\n      if (invalid.length > 0) {\n        errorBox.style.display = 'block';\n        errorBox.textContent = `Ignored non-numeric entries: ${invalid.join(', ')}`;\n      } else {\n        errorBox.style.display = 'none';\n        errorBox.textContent = '';\n      }\n\n      if (nums.length === 0) {\n        resultBox.textContent = 'Sorted: [ ] (no valid numbers)';\n        return;\n      }\n\n      const sorted = mergeSort(nums);\n      resultBox.textContent = `Sorted: ${renderArray(sorted)}`;\n    }\n\n    function randomize() {\n      const inputEl = document.getElementById('numbers');\n      const n = Math.floor(Math.random() * 8) + 7; // 7..14 elements\n      const arr = Array.from({ length: n }, () => Math.floor(Math.random() * 100));\n      inputEl.value = arr.join(', ');\n      document.getElementById('errorBox').style.display = 'none';\n      document.getElementById('errorBox').textContent = '';\n      document.getElementById('resultBox').textContent = 'Sorted: [ ]';\n    }\n\n    document.getElementById('sortBtn').addEventListener('click', handleSort);\n    document.getElementById('randomBtn').addEventListener('click', randomize);\n\n    // Auto-run once on load with the default value\n    window.addEventListener('DOMContentLoaded', handleSort);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Merge Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "80f44ec0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:52.204Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Adjacency List",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Adjacency List</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root { color-scheme: light dark; }\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 2rem; line-height: 1.5; }\n    h1 { margin: 0 0 0.5rem 0; font-size: 1.6rem; }\n    p { margin: 0.5rem 0 1rem 0; max-width: 70ch; }\n    .panel { display: grid; gap: 0.75rem; max-width: 800px; }\n    textarea { width: 100%; min-height: 160px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; padding: 0.5rem; resize: vertical; }\n    .controls { display: flex; flex-wrap: wrap; gap: 0.5rem 1rem; align-items: center; }\n    button { cursor: pointer; padding: 0.5rem 0.8rem; border: 1px solid #888; border-radius: 6px; background: transparent; }\n    label { display: inline-flex; align-items: center; gap: 0.5rem; user-select: none; }\n    .output { display: grid; gap: 0.5rem; margin-top: 1rem; }\n    .box { border: 1px solid #ccc; border-radius: 8px; padding: 0.75rem; overflow: auto; }\n    .subtitle { font-weight: 600; margin: 0.25rem 0 0.5rem; }\n    ul { padding-left: 1.25rem; }\n    code, pre { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n    .small { font-size: 0.9rem; color: #666; }\n  </style>\n</head>\n<body>\n  <h1>Adjacency List</h1>\n  <p>\n    An adjacency list represents a graph by listing each node and the set of nodes it connects to.\n    Enter edges below (one per line) and build the adjacency list. Use formats like\n    “A B”, “A,B”, or “A-&gt;B”.\n  </p>\n\n  <div class=\"panel\">\n    <textarea id=\"edges\" placeholder=\"Example (one edge per line):\nA B\nA C\nB D\nC D\"></textarea>\n\n    <div class=\"controls\">\n      <label><input type=\"checkbox\" id=\"directed\"> Directed graph</label>\n      <button id=\"exampleBtn\" type=\"button\">Load example</button>\n      <button id=\"buildBtn\" type=\"button\">Build adjacency list</button>\n      <button id=\"clearBtn\" type=\"button\">Clear</button>\n    </div>\n\n    <div class=\"output\" id=\"output\" hidden>\n      <div class=\"box\">\n        <div class=\"subtitle\">Text view</div>\n        <div id=\"textView\"></div>\n      </div>\n      <div class=\"box\">\n        <div class=\"subtitle\">JSON</div>\n        <pre id=\"jsonView\"></pre>\n      </div>\n      <div class=\"small\">Tip: Sorts nodes alphabetically and removes duplicate edges automatically.</div>\n    </div>\n  </div>\n\n  <script>\n    const edgesEl = document.getElementById('edges');\n    const directedEl = document.getElementById('directed');\n    const buildBtn = document.getElementById('buildBtn');\n    const exampleBtn = document.getElementById('exampleBtn');\n    const clearBtn = document.getElementById('clearBtn');\n    const outputEl = document.getElementById('output');\n    const textViewEl = document.getElementById('textView');\n    const jsonViewEl = document.getElementById('jsonView');\n\n    function normalizeToken(s) {\n      return s.trim();\n    }\n\n    function parseEdges(text) {\n      const edges = [];\n      const lines = text.split(/\\r?\\n/);\n      for (let raw of lines) {\n        let line = raw.trim();\n        if (!line) continue;\n\n        // Normalize separators: spaces, commas, arrows, hyphens\n        line = line.replace(/[,]|->|—|–|-/g, ' ');\n        const parts = line.split(/\\s+/).filter(Boolean);\n\n        if (parts.length >= 2) {\n          const u = normalizeToken(parts[0]);\n          const v = normalizeToken(parts[1]);\n          if (u && v) edges.push([u, v]);\n        }\n      }\n      return edges;\n    }\n\n    function buildAdjacencyList(edges, directed = false) {\n      const adj = new Map();\n\n      function addNode(n) {\n        if (!adj.has(n)) adj.set(n, new Set());\n      }\n\n      for (const [u, v] of edges) {\n        addNode(u);\n        addNode(v);\n        adj.get(u).add(v);\n        if (!directed) {\n          adj.get(v).add(u);\n        }\n      }\n\n      // Convert to sorted arrays\n      const obj = {};\n      const nodes = Array.from(adj.keys()).sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));\n      for (const n of nodes) {\n        obj[n] = Array.from(adj.get(n)).sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));\n      }\n      return obj;\n    }\n\n    function renderTextView(adjObj) {\n      const container = document.createElement('div');\n      const ul = document.createElement('ul');\n      for (const node of Object.keys(adjObj)) {\n        const li = document.createElement('li');\n        const neighbors = adjObj[node];\n        li.textContent = `${node}: ${neighbors.join(', ')}`;\n        ul.appendChild(li);\n      }\n      container.appendChild(ul);\n      return container;\n    }\n\n    function renderJSON(adjObj) {\n      return JSON.stringify(adjObj, null, 2);\n    }\n\n    function build() {\n      const edges = parseEdges(edgesEl.value);\n      const directed = directedEl.checked;\n      const adj = buildAdjacencyList(edges, directed);\n\n      textViewEl.innerHTML = '';\n      textViewEl.appendChild(renderTextView(adj));\n      jsonViewEl.textContent = renderJSON(adj);\n\n      outputEl.hidden = false;\n    }\n\n    function loadExample() {\n      edgesEl.value = [\n        'A B',\n        'A C',\n        'B D',\n        'C D',\n        'C E',\n        'D F',\n        'E F',\n        'F G'\n      ].join('\\n');\n      directedEl.checked = false;\n      build();\n    }\n\n    function clearAll() {\n      edgesEl.value = '';\n      directedEl.checked = false;\n      outputEl.hidden = true;\n      textViewEl.innerHTML = '';\n      jsonViewEl.textContent = '';\n    }\n\n    buildBtn.addEventListener('click', build);\n    exampleBtn.addEventListener('click', loadExample);\n    clearBtn.addEventListener('click', clearAll);\n\n    // Initialize with a small example for convenience\n    loadExample();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Adjacency List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "834bfa60-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:56.134Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Counting Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Counting Sort</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 20px; line-height: 1.5; }\n    h1 { font-size: 1.6rem; margin-bottom: 0.5rem; }\n    .container { max-width: 800px; margin: 0 auto; }\n    .controls { display: flex; gap: 8px; flex-wrap: wrap; margin: 12px 0; }\n    input[type=\"text\"] { flex: 1 1 400px; padding: 8px; font-size: 1rem; }\n    button { padding: 8px 12px; font-size: 0.95rem; cursor: pointer; }\n    label { display: inline-flex; align-items: center; gap: 6px; font-size: 0.95rem; }\n    .note { color: #444; font-size: 0.95rem; }\n    .error { color: #b00020; font-weight: 600; }\n    .section { margin-top: 14px; }\n    .pill { display: inline-block; background: #f3f4f6; padding: 6px 10px; border-radius: 999px; margin: 4px 4px 0 0; }\n    .muted { color: #666; }\n    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); gap: 6px; }\n    .card { border: 1px solid #e5e7eb; border-radius: 8px; padding: 8px; }\n    .small { font-size: 0.9rem; }\n    .footer { margin-top: 24px; color: #555; font-size: 0.9rem; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Counting Sort</h1>\n    <p class=\"note\">\n      Counting sort is a stable, linear-time sorting algorithm for integers when the range of values is not too large.\n      It counts occurrences of each value, builds cumulative counts, then places elements into the result.\n      Time: O(n + k), Space: O(n + k), where n is number of elements and k is the value range size.\n    </p>\n\n    <div class=\"controls\">\n      <input id=\"numbersInput\" type=\"text\" placeholder=\"Enter integers separated by commas (e.g., 4, 2, 7, 3, 3, 0, -1)\" />\n      <button id=\"sortBtn\">Sort (Counting Sort)</button>\n      <button id=\"randomBtn\">Random</button>\n      <label><input id=\"showSteps\" type=\"checkbox\" /> Show steps</label>\n    </div>\n    <div id=\"error\" class=\"error\" role=\"alert\" aria-live=\"polite\"></div>\n\n    <div class=\"section\">\n      <div><strong>Original array:</strong></div>\n      <div id=\"original\" aria-live=\"polite\"></div>\n    </div>\n\n    <div class=\"section\">\n      <div><strong>Sorted array:</strong></div>\n      <div id=\"sorted\" aria-live=\"polite\"></div>\n    </div>\n\n    <div id=\"stepsContainer\" class=\"section\" style=\"display:none;\">\n      <div class=\"grid\">\n        <div class=\"card\">\n          <div><strong>Range</strong></div>\n          <div id=\"range\" class=\"small muted\"></div>\n        </div>\n        <div class=\"card\">\n          <div><strong>Counts (frequency)</strong></div>\n          <div id=\"counts\"></div>\n        </div>\n        <div class=\"card\">\n          <div><strong>Cumulative counts</strong></div>\n          <div id=\"cumulative\"></div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"footer\">\n      Tip: Counting sort can handle negative numbers by offsetting indices using the minimum value.\n    </div>\n  </div>\n\n  <script>\n    const inputEl = document.getElementById('numbersInput');\n    const sortBtn = document.getElementById('sortBtn');\n    const randomBtn = document.getElementById('randomBtn');\n    const showStepsEl = document.getElementById('showSteps');\n    const errorEl = document.getElementById('error');\n    const originalEl = document.getElementById('original');\n    const sortedEl = document.getElementById('sorted');\n    const stepsContainerEl = document.getElementById('stepsContainer');\n    const rangeEl = document.getElementById('range');\n    const countsEl = document.getElementById('counts');\n    const cumulativeEl = document.getElementById('cumulative');\n\n    // Initialize with a demo array\n    inputEl.value = \"4, 2, 7, 3, 3, 0, -1, 2, 7\";\n\n    function parseNumbers(str) {\n      const parts = str.split(/[\\s,]+/).filter(Boolean);\n      if (parts.length === 0) return [];\n      const arr = [];\n      for (const p of parts) {\n        if (!/^[-+]?\\d+$/.test(p)) {\n          throw new Error(`Invalid integer: \"${p}\"`);\n        }\n        arr.push(Number(p));\n      }\n      return arr;\n    }\n\n    function countingSort(arr) {\n      const n = arr.length;\n      if (n === 0) {\n        return { result: [], min: 0, max: 0, counts: [], cumulative: [] };\n      }\n\n      let min = arr[0], max = arr[0];\n      for (let i = 1; i < n; i++) {\n        const v = arr[i];\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n\n      const range = max - min + 1;\n      const counts = new Array(range).fill(0);\n      for (let i = 0; i < n; i++) {\n        counts[arr[i] - min]++;\n      }\n\n      const cumulative = counts.slice();\n      for (let i = 1; i < cumulative.length; i++) {\n        cumulative[i] += cumulative[i - 1];\n      }\n\n      const result = new Array(n);\n      // Stable placement: iterate from end to start\n      for (let i = n - 1; i >= 0; i--) {\n        const idx = arr[i] - min;\n        cumulative[idx]--;\n        const pos = cumulative[idx];\n        result[pos] = arr[i];\n      }\n\n      return { result, min, max, counts, cumulative };\n    }\n\n    function renderArray(el, arr) {\n      if (!arr || arr.length === 0) {\n        el.innerHTML = '<span class=\"muted\">[empty]</span>';\n        return;\n      }\n      el.innerHTML = arr.map(v => `<span class=\"pill\">${v}</span>`).join(' ');\n    }\n\n    function renderCounts(el, counts, min) {\n      if (!counts || counts.length === 0) {\n        el.innerHTML = '<span class=\"muted small\">n/a</span>';\n        return;\n      }\n      el.innerHTML = counts.map((c, i) => {\n        const val = i + min;\n        return `<div class=\"small pill\">${val}: ${c}</div>`;\n      }).join(' ');\n    }\n\n    function handleSort() {\n      errorEl.textContent = '';\n      stepsContainerEl.style.display = showStepsEl.checked ? 'block' : 'none';\n\n      let arr;\n      try {\n        arr = parseNumbers(inputEl.value);\n      } catch (e) {\n        errorEl.textContent = e.message;\n        renderArray(originalEl, []);\n        renderArray(sortedEl, []);\n        rangeEl.textContent = '';\n        countsEl.innerHTML = '';\n        cumulativeEl.innerHTML = '';\n        return;\n      }\n\n      renderArray(originalEl, arr);\n\n      const { result, min, max, counts, cumulative } = countingSort(arr);\n      renderArray(sortedEl, result);\n\n      if (showStepsEl.checked && arr.length > 0) {\n        rangeEl.textContent = `min = ${min}, max = ${max}, size = ${max - min + 1}`;\n        renderCounts(countsEl, counts, min);\n        renderCounts(cumulativeEl, cumulative, min);\n        // Simple advisory if range is large\n        const rangeSize = max - min + 1;\n        if (rangeSize > 50000) {\n          rangeEl.textContent += \" — Warning: large range may be memory-intensive.\";\n        }\n      }\n    }\n\n    function handleRandom() {\n      errorEl.textContent = '';\n      const len = Math.floor(Math.random() * 8) + 8; // 8..15\n      const min = Math.floor(Math.random() * 21) - 10; // -10..10\n      const max = min + Math.floor(Math.random() * 11) + 5; // ensure modest range\n      const arr = [];\n      for (let i = 0; i < len; i++) {\n        arr.push(Math.floor(Math.random() * (max - min + 1)) + min);\n      }\n      inputEl.value = arr.join(', ');\n      handleSort();\n    }\n\n    sortBtn.addEventListener('click', handleSort);\n    randomBtn.addEventListener('click', handleRandom);\n    showStepsEl.addEventListener('change', () => {\n      // Re-render steps if already sorted\n      if (sortedEl.innerHTML.trim()) handleSort();\n    });\n\n    // Auto-run once\n    handleSort();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Counting Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "834c4880-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:56.136Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Heap Sort",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Heap Sort</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root { color-scheme: light dark; }\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; line-height: 1.5; margin: 0; padding: 24px; }\n    .container { max-width: 760px; margin: 0 auto; }\n    h1 { font-size: 1.8rem; margin: 0 0 12px; }\n    p { margin: 8px 0; }\n    ul { padding-left: 18px; }\n    .panel { border: 1px solid rgba(127,127,127,0.35); border-radius: 8px; padding: 16px; margin-top: 16px; }\n    .controls { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 8px; }\n    input[type=\"text\"] { flex: 1 1 340px; padding: 8px 10px; border: 1px solid rgba(127,127,127,0.35); border-radius: 6px; font-size: 1rem; }\n    button { padding: 8px 12px; border: 1px solid rgba(127,127,127,0.35); background: #f3f3f3; border-radius: 6px; cursor: pointer; font-size: 1rem; }\n    button:hover { background: #e9e9e9; }\n    .output { margin-top: 12px; white-space: pre-wrap; word-break: break-word; }\n    code, pre { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace; }\n    pre { background: rgba(127,127,127,0.1); padding: 12px; border-radius: 8px; overflow: auto; }\n    .note { font-size: 0.95rem; color: #555; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Heap Sort</h1>\n    <p>Heap Sort is a comparison-based sorting algorithm that builds a binary heap and repeatedly extracts the maximum (or minimum) element to produce a sorted array. It is in-place and has consistent O(n log n) time complexity.</p>\n\n    <div class=\"panel\">\n      <strong>How it works</strong>\n      <ul>\n        <li>Build a max-heap from the input array.</li>\n        <li>Swap the root (largest element) with the last element in the heap.</li>\n        <li>Reduce the heap size by one and heapify the root to restore the heap property.</li>\n        <li>Repeat until the heap size is 1.</li>\n      </ul>\n      <p class=\"note\">Properties: in-place, not stable, time complexity O(n log n) in best/average/worst cases, space complexity O(1) auxiliary.</p>\n    </div>\n\n    <div class=\"panel\">\n      <strong>Try it</strong>\n      <div class=\"controls\">\n        <input id=\"arrayInput\" type=\"text\" placeholder=\"Enter numbers (e.g., 5, 3, 8, 1, 2)\">\n        <button id=\"sortBtn\">Sort</button>\n        <button id=\"randomBtn\" title=\"Fill with a random array\">Randomize</button>\n        <button id=\"clearBtn\">Clear</button>\n      </div>\n      <div class=\"output\" id=\"output\"></div>\n    </div>\n\n    <div class=\"panel\">\n      <strong>JavaScript implementation</strong>\n      <pre><code>// In-place Heap Sort (max-heap)\nfunction heapSort(arr) {\n  const n = arr.length;\n\n  // Build max-heap\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i);\n  }\n\n  // Extract elements from heap one by one\n  for (let end = n - 1; end > 0; end--) {\n    [arr[0], arr[end]] = [arr[end], arr[0]]; // move current max to end\n    heapify(arr, end, 0); // restore heap for reduced size\n  }\n  return arr;\n}\n\n// Iterative heapify for performance and to avoid recursion limits\nfunction heapify(arr, heapSize, i) {\n  while (true) {\n    let largest = i;\n    const l = 2 * i + 1;\n    const r = 2 * i + 2;\n\n    if (l &lt; heapSize && arr[l] > arr[largest]) largest = l;\n    if (r &lt; heapSize && arr[r] > arr[largest]) largest = r;\n\n    if (largest !== i) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      i = largest; // continue sifting down\n    } else {\n      break;\n    }\n  }\n}</code></pre>\n    </div>\n  </div>\n\n  <script>\n    function parseInput(input) {\n      const parts = input.split(/[\\s,]+/).filter(s => s.length);\n      if (parts.length === 0) return { ok: true, arr: [] };\n      const arr = [];\n      for (const p of parts) {\n        const num = Number(p);\n        if (!Number.isFinite(num)) {\n          return { ok: false, error: `Invalid number: \"${p}\"` };\n        }\n        arr.push(num);\n      }\n      return { ok: true, arr };\n    }\n\n    function heapSort(arr) {\n      const n = arr.length;\n      for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n      }\n      for (let end = n - 1; end > 0; end--) {\n        const tmp = arr[0]; arr[0] = arr[end]; arr[end] = tmp;\n        heapify(arr, end, 0);\n      }\n      return arr;\n    }\n\n    function heapify(arr, heapSize, i) {\n      while (true) {\n        let largest = i;\n        const l = 2 * i + 1;\n        const r = 2 * i + 2;\n        if (l < heapSize && arr[l] > arr[largest]) largest = l;\n        if (r < heapSize && arr[r] > arr[largest]) largest = r;\n        if (largest !== i) {\n          const tmp = arr[i]; arr[i] = arr[largest]; arr[largest] = tmp;\n          i = largest;\n        } else {\n          break;\n        }\n      }\n    }\n\n    function showOutput(original, sorted) {\n      const out = document.getElementById('output');\n      const origStr = original.length ? original.join(', ') : '(empty array)';\n      const sortedStr = sorted.length ? sorted.join(', ') : '(empty array)';\n      out.textContent =\n        'Original: [' + origStr + ']\\n' +\n        'Sorted:   [' + sortedStr + ']';\n    }\n\n    function randomArray(len = 10) {\n      const arr = [];\n      for (let i = 0; i < len; i++) {\n        // Random integers between -99 and 99\n        arr.push(Math.floor(Math.random() * 199) - 99);\n      }\n      return arr;\n    }\n\n    document.getElementById('sortBtn').addEventListener('click', () => {\n      const inputEl = document.getElementById('arrayInput');\n      const parsed = parseInput(inputEl.value);\n      const out = document.getElementById('output');\n      if (!parsed.ok) {\n        out.textContent = parsed.error;\n        return;\n      }\n      const original = parsed.arr;\n      const sorted = heapSort([...original]);\n      showOutput(original, sorted);\n    });\n\n    document.getElementById('randomBtn').addEventListener('click', () => {\n      const arr = randomArray(10);\n      document.getElementById('arrayInput').value = arr.join(', ');\n      showOutput(arr, heapSort([...arr]));\n    });\n\n    document.getElementById('clearBtn').addEventListener('click', () => {\n      document.getElementById('arrayInput').value = '';\n      document.getElementById('output').textContent = '';\n    });\n\n    document.getElementById('arrayInput').addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        document.getElementById('sortBtn').click();\n      }\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Heap Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "835c4e10-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:56.242Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Stack",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Stack</title>\n  <style>\n    :root {\n      --bg: #f8fafc;\n      --fg: #0f172a;\n      --muted: #64748b;\n      --card: #ffffff;\n      --border: #e2e8f0;\n      --accent: #2563eb;\n      --accent-2: #1d4ed8;\n      --chip: #e0e7ff;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.6;\n      color: var(--fg);\n      background: var(--bg);\n    }\n    main { max-width: 900px; margin: 0 auto; padding: 2rem 1.25rem; }\n    h1 { margin: 0 0 0.75rem; font-size: 2rem; }\n    p { margin: 0.5rem 0 1rem; }\n    .card {\n      background: var(--card);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 1rem 1.25rem;\n      box-shadow: 0 1px 2px rgba(0,0,0,0.04);\n      margin: 1rem 0;\n    }\n    ul { padding-left: 1.25rem; }\n    code, pre {\n      background: #0b1021;\n      color: #e2e8f0;\n      border-radius: 8px;\n      padding: 0.75rem;\n      overflow: auto;\n    }\n    pre { margin: 0.5rem 0 0; }\n    .row { display: flex; gap: 0.5rem; flex-wrap: wrap; align-items: center; }\n    input[type=\"text\"] {\n      flex: 1 1 220px;\n      padding: 0.6rem 0.7rem;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      outline: none;\n    }\n    input[type=\"text\"]:focus { border-color: var(--accent); box-shadow: 0 0 0 3px rgba(37,99,235,0.15); }\n    button {\n      appearance: none;\n      border: 1px solid var(--border);\n      background: #f1f5f9;\n      color: #0f172a;\n      border-radius: 8px;\n      padding: 0.55rem 0.8rem;\n      cursor: pointer;\n    }\n    button.primary {\n      background: var(--accent);\n      color: white;\n      border-color: var(--accent);\n    }\n    button.primary:hover { background: var(--accent-2); }\n    button:disabled { opacity: 0.6; cursor: not-allowed; }\n    .hint { color: var(--muted); font-size: 0.95rem; }\n    .mini { font-size: 0.9rem; color: var(--muted); }\n    .stack-visual {\n      display: grid;\n      gap: 6px;\n      max-width: 360px;\n      margin-top: 0.75rem;\n    }\n    .slot {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0.55rem 0.7rem;\n      background: #f1f5f9;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n    }\n    .slot .tag {\n      font-size: 0.75rem;\n      padding: 0.15rem 0.4rem;\n      border-radius: 999px;\n      background: var(--chip);\n      color: #3730a3;\n      border: 1px solid #c7d2fe;\n    }\n    .empty {\n      font-style: italic;\n      color: var(--muted);\n      padding: 0.35rem 0;\n    }\n    footer { text-align: center; padding: 2rem 0 0.5rem; color: var(--muted); font-size: 0.9rem; }\n  </style>\n</head>\n<body>\n  <main>\n    <h1>Stack</h1>\n    <p>A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. The most recently added item is the first one to be removed, like a stack of plates.</p>\n\n    <div class=\"card\">\n      <h2 style=\"margin:0 0 0.5rem;\">Core operations</h2>\n      <ul>\n        <li><strong>push(x)</strong>: add item x to the top</li>\n        <li><strong>pop()</strong>: remove and return the top item</li>\n        <li><strong>peek()</strong> or <strong>top()</strong>: view the top item without removing it</li>\n        <li><strong>isEmpty()</strong>: check if the stack has no items</li>\n        <li><strong>size()</strong>: number of items in the stack</li>\n      </ul>\n      <div class=\"hint\">Common uses: undo/redo, browser history, expression evaluation, DFS traversal, function call stack.</div>\n    </div>\n\n    <div class=\"card\">\n      <h2 style=\"margin:0 0 0.5rem;\">Walkthrough example</h2>\n      <div><strong>Steps:</strong> push(3), push(7), push(9), pop(), push(4)</div>\n      <pre>\nStart: []\npush(3) -> [3]\npush(7) -> [3, 7]\npush(9) -> [3, 7, 9]\npop()   -> returns 9, stack: [3, 7]\npush(4) -> [3, 7, 4]   (top = 4)</pre>\n    </div>\n\n    <div class=\"card\" aria-labelledby=\"demo-title\">\n      <h2 id=\"demo-title\" style=\"margin:0 0 0.5rem;\">Try it</h2>\n      <div class=\"row\" role=\"group\" aria-label=\"Stack controls\">\n        <input id=\"valueInput\" type=\"text\" placeholder=\"Value to push (e.g., apple)\" aria-label=\"Value to push\">\n        <button id=\"pushBtn\" class=\"primary\" type=\"button\">Push</button>\n        <button id=\"popBtn\" type=\"button\">Pop</button>\n        <button id=\"peekBtn\" type=\"button\">Peek</button>\n        <button id=\"clearBtn\" type=\"button\" title=\"Remove all items\">Clear</button>\n      </div>\n      <div class=\"mini\" id=\"status\" role=\"status\" aria-live=\"polite\" style=\"margin-top:0.5rem;\"></div>\n\n      <div style=\"margin-top:0.75rem;\">\n        <strong>Top</strong>\n        <div id=\"stackVis\" class=\"stack-visual\" aria-live=\"polite\"></div>\n        <strong>Bottom</strong>\n        <div class=\"mini\" id=\"meta\" style=\"margin-top:0.5rem;\"></div>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <h2 style=\"margin:0 0 0.5rem;\">Pseudocode</h2>\n      <pre>\nstack = []\npush(x): stack.append(x)\npop():\n  if stack is empty: error\n  return stack.removeLast()\npeek():\n  if stack is empty: error\n  return stack.last()</pre>\n    </div>\n\n    <footer>Stack (LIFO) — a simple, powerful abstraction for managing order.</footer>\n  </main>\n\n  <script>\n    (function () {\n      const stack = [];\n      const vis = document.getElementById('stackVis');\n      const status = document.getElementById('status');\n      const meta = document.getElementById('meta');\n      const input = document.getElementById('valueInput');\n      const pushBtn = document.getElementById('pushBtn');\n      const popBtn = document.getElementById('popBtn');\n      const peekBtn = document.getElementById('peekBtn');\n      const clearBtn = document.getElementById('clearBtn');\n\n      function render() {\n        if (stack.length === 0) {\n          vis.innerHTML = '<div class=\"empty\">(empty)</div>';\n        } else {\n          // Show top at the top visually\n          const items = stack.slice().reverse();\n          vis.innerHTML = items.map((v, i) => `\n            <div class=\"slot\">\n              <span>${escapeHTML(String(v))}</span>\n              <span class=\"tag\">${i === 0 ? 'top' : (i === items.length - 1 ? 'bottom' : '')}</span>\n            </div>\n          `).join('');\n        }\n        meta.textContent = `Size: ${stack.length} ${stack.length ? ' • Top: ' + stack[stack.length - 1] : ''}`;\n        popBtn.disabled = stack.length === 0;\n        peekBtn.disabled = stack.length === 0;\n        clearBtn.disabled = stack.length === 0;\n      }\n\n      function setStatus(msg) {\n        status.textContent = msg;\n      }\n\n      function escapeHTML(s) {\n        return s.replace(/[&<>\"']/g, ch => ({\n          '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#39;'\n        }[ch]));\n      }\n\n      pushBtn.addEventListener('click', () => {\n        const val = input.value.trim();\n        if (!val) {\n          setStatus('Enter a value to push.');\n          input.focus();\n          return;\n        }\n        stack.push(val);\n        setStatus(`Pushed \"${val}\".`);\n        input.value = '';\n        input.focus();\n        render();\n      });\n\n      popBtn.addEventListener('click', () => {\n        if (!stack.length) return;\n        const v = stack.pop();\n        setStatus(`Popped \"${v}\".`);\n        render();\n      });\n\n      peekBtn.addEventListener('click', () => {\n        if (!stack.length) return;\n        const v = stack[stack.length - 1];\n        setStatus(`Peek: \"${v}\".`);\n      });\n\n      clearBtn.addEventListener('click', () => {\n        stack.length = 0;\n        setStatus('Cleared stack.');\n        render();\n      });\n\n      // Allow pressing Enter to push\n      input.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          pushBtn.click();\n        }\n      });\n\n      render();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Stack"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8422f970-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:57.543Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Hash Map",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hash Map</title>\n  <style>\n    :root {\n      --bg: #f7f9fc;\n      --card: #ffffff;\n      --text: #222;\n      --muted: #555;\n      --border: #e1e5ea;\n      --accent: #276ef1;\n      --accent-ghost: #e9f0ff;\n      --good: #1a7f37;\n      --bad: #c62828;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      background: var(--bg);\n      color: var(--text);\n      line-height: 1.5;\n    }\n    header {\n      padding: 24px 16px 8px;\n      text-align: center;\n    }\n    h1 {\n      margin: 0 0 8px;\n      font-size: 28px;\n    }\n    p.subtitle {\n      margin: 0 auto;\n      max-width: 720px;\n      color: var(--muted);\n      font-size: 15px;\n    }\n    main {\n      max-width: 880px;\n      margin: 16px auto 40px;\n      padding: 0 16px;\n    }\n    .card {\n      background: var(--card);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 16px;\n      box-shadow: 0 1px 2px rgba(0,0,0,0.04);\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n      gap: 12px;\n      margin-top: 12px;\n    }\n    label {\n      display: block;\n      font-weight: 600;\n      margin-bottom: 6px;\n      font-size: 13px;\n    }\n    input[type=\"text\"], select {\n      width: 100%;\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      font-size: 14px;\n      background: #fff;\n    }\n    .row {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      align-items: center;\n    }\n    button {\n      appearance: none;\n      border: none;\n      border-radius: 8px;\n      padding: 10px 14px;\n      font-size: 14px;\n      cursor: pointer;\n      background: var(--accent);\n      color: #fff;\n    }\n    button.secondary {\n      background: #fff;\n      color: var(--text);\n      border: 1px solid var(--border);\n    }\n    button.danger {\n      background: var(--bad);\n    }\n    .status {\n      margin-top: 10px;\n      font-size: 14px;\n      padding: 10px;\n      border-radius: 8px;\n      background: var(--accent-ghost);\n      border: 1px solid #cfe0ff;\n    }\n    .status.good { background: #e9f6ee; border-color: #b8e0c8; color: var(--good); }\n    .status.bad { background: #fdeaea; border-color: #f6c7c7; color: var(--bad); }\n    .metrics {\n      display: flex;\n      gap: 14px;\n      flex-wrap: wrap;\n      margin-top: 8px;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    .buckets {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n      gap: 10px;\n      margin-top: 14px;\n    }\n    .bucket {\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 10px;\n      background: #fff;\n    }\n    .bucket h4 {\n      margin: 0 0 6px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .pair {\n      display: flex;\n      justify-content: space-between;\n      gap: 8px;\n      font-size: 13px;\n      padding: 6px 8px;\n      border-radius: 6px;\n      background: #f6f8fb;\n    }\n    .pair + .pair { margin-top: 6px; }\n    .empty {\n      font-size: 12px;\n      color: var(--muted);\n    }\n    footer {\n      text-align: center;\n      color: var(--muted);\n      font-size: 12px;\n      padding: 18px;\n    }\n    code {\n      background: #f1f4f8;\n      border: 1px solid var(--border);\n      border-radius: 6px;\n      padding: 2px 6px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Hash Map</h1>\n    <p class=\"subtitle\">\n      A hash map stores key–value pairs and uses a hash function to map keys to indices (buckets).\n      Average-time operations put/get/remove are near O(1). Collisions are handled here with simple separate chaining.\n    </p>\n  </header>\n\n  <main>\n    <section class=\"card\">\n      <div class=\"grid\">\n        <div>\n          <label for=\"bucketSize\">Bucket count</label>\n          <div class=\"row\">\n            <select id=\"bucketSize\">\n              <option value=\"13\">13 (default)</option>\n              <option value=\"17\">17</option>\n              <option value=\"23\">23</option>\n              <option value=\"31\">31</option>\n              <option value=\"53\">53</option>\n            </select>\n            <button class=\"secondary\" id=\"rebuildBtn\" title=\"Recreate empty map with chosen size\">Rebuild</button>\n          </div>\n          <div class=\"metrics\" id=\"metrics\"></div>\n        </div>\n\n        <div>\n          <label>Try it</label>\n          <div class=\"row\">\n            <input id=\"keyInput\" type=\"text\" placeholder=\"Key (e.g., user:42)\">\n            <input id=\"valInput\" type=\"text\" placeholder=\"Value (e.g., Alice)\">\n          </div>\n          <div class=\"row\" style=\"margin-top:8px\">\n            <button id=\"putBtn\">Put</button>\n            <button class=\"secondary\" id=\"getBtn\">Get</button>\n            <button class=\"danger\" id=\"delBtn\">Remove</button>\n            <button class=\"secondary\" id=\"clearBtn\">Clear</button>\n          </div>\n          <div id=\"status\" class=\"status\" style=\"display:none\"></div>\n        </div>\n      </div>\n\n      <div class=\"metrics\" style=\"margin-top:12px\">\n        Hash function: <code>djb2</code> • Collision strategy: <code>separate chaining</code>\n      </div>\n\n      <div id=\"bucketsView\" class=\"buckets\"></div>\n    </section>\n\n    <section class=\"card\" style=\"margin-top:16px\">\n      <h3 style=\"margin:0 0 8px\">What is a hash map?</h3>\n      <p style=\"margin:0\">\n        - A hash function turns a key into a number. The index is that number modulo the bucket count.\n        - If multiple keys map to the same index, they collide; we store them in a small list in that bucket.\n        - Performance depends on a good hash function and a reasonable load factor (items ÷ buckets).\n      </p>\n    </section>\n  </main>\n\n  <footer>\n    Simple educational demo. Not production-ready; focuses on clarity over performance.\n  </footer>\n\n  <script>\n    function hashKey(key) {\n      key = String(key);\n      let hash = 5381;\n      for (let i = 0; i < key.length; i++) {\n        hash = ((hash << 5) + hash) + key.charCodeAt(i);\n        hash |= 0;\n      }\n      return Math.abs(hash);\n    }\n\n    class SimpleHashMap {\n      constructor(size = 13) {\n        this.size = size;\n        this.buckets = Array.from({ length: size }, () => []);\n        this.count = 0;\n      }\n      _index(key) {\n        return hashKey(key) % this.size;\n      }\n      set(key, value) {\n        const idx = this._index(key);\n        const bucket = this.buckets[idx];\n        for (let i = 0; i < bucket.length; i++) {\n          if (bucket[i][0] === key) {\n            bucket[i][1] = value;\n            return { idx, updated: true };\n          }\n        }\n        bucket.push([key, value]);\n        this.count++;\n        return { idx, updated: false };\n      }\n      get(key) {\n        const idx = this._index(key);\n        const bucket = this.buckets[idx];\n        for (const [k, v] of bucket) {\n          if (k === key) return { idx, value: v };\n        }\n        return { idx, value: undefined };\n      }\n      delete(key) {\n        const idx = this._index(key);\n        const bucket = this.buckets[idx];\n        for (let i = 0; i < bucket.length; i++) {\n          if (bucket[i][0] === key) {\n            bucket.splice(i, 1);\n            this.count--;\n            return { idx, removed: true };\n          }\n        }\n        return { idx, removed: false };\n      }\n      clear() {\n        this.buckets = Array.from({ length: this.size }, () => []);\n        this.count = 0;\n      }\n      entries() {\n        const out = [];\n        for (const bucket of this.buckets) {\n          for (const [k, v] of bucket) out.push([k, v]);\n        }\n        return out;\n      }\n      loadFactor() {\n        return this.size ? this.count / this.size : 0;\n      }\n    }\n\n    const el = {\n      size: document.getElementById('bucketSize'),\n      rebuild: document.getElementById('rebuildBtn'),\n      key: document.getElementById('keyInput'),\n      val: document.getElementById('valInput'),\n      put: document.getElementById('putBtn'),\n      get: document.getElementById('getBtn'),\n      del: document.getElementById('delBtn'),\n      clear: document.getElementById('clearBtn'),\n      status: document.getElementById('status'),\n      metrics: document.getElementById('metrics'),\n      bucketsView: document.getElementById('bucketsView'),\n    };\n\n    let map = new SimpleHashMap(parseInt(el.size.value, 10));\n\n    function showStatus(text, type = 'info') {\n      el.status.textContent = text;\n      el.status.style.display = 'block';\n      el.status.className = 'status ' + (type === 'good' ? 'good' : type === 'bad' ? 'bad' : '');\n    }\n\n    function render() {\n      el.metrics.textContent = `Items: ${map.count} • Buckets: ${map.size} • Load factor: ${map.loadFactor().toFixed(3)}`;\n      const frag = document.createDocumentFragment();\n      for (let i = 0; i < map.buckets.length; i++) {\n        const bucket = map.buckets[i];\n        const div = document.createElement('div');\n        div.className = 'bucket';\n        const h4 = document.createElement('h4');\n        h4.textContent = `Bucket ${i}`;\n        div.appendChild(h4);\n        if (bucket.length === 0) {\n          const em = document.createElement('div');\n          em.className = 'empty';\n          em.textContent = 'empty';\n          div.appendChild(em);\n        } else {\n          for (const [k, v] of bucket) {\n            const p = document.createElement('div');\n            p.className = 'pair';\n            const left = document.createElement('span');\n            left.textContent = String(k);\n            const right = document.createElement('span');\n            right.textContent = String(v);\n            p.appendChild(left);\n            p.appendChild(right);\n            div.appendChild(p);\n          }\n        }\n        frag.appendChild(div);\n      }\n      el.bucketsView.innerHTML = '';\n      el.bucketsView.appendChild(frag);\n    }\n\n    function requireKey() {\n      const key = el.key.value.trim();\n      if (!key) {\n        showStatus('Please enter a key.', 'bad');\n        return null;\n      }\n      return key;\n    }\n\n    el.put.addEventListener('click', () => {\n      const key = requireKey();\n      if (!key) return;\n      const value = el.val.value;\n      const res = map.set(key, value);\n      const msg = res.updated\n        ? `Updated key \"${key}\" at bucket ${res.idx}.`\n        : `Inserted key \"${key}\" at bucket ${res.idx}.`;\n      showStatus(msg, 'good');\n      render();\n    });\n\n    el.get.addEventListener('click', () => {\n      const key = requireKey();\n      if (!key) return;\n      const res = map.get(key);\n      if (res.value === undefined) {\n        showStatus(`Key \"${key}\" not found (mapped to bucket ${res.idx}).`, 'bad');\n      } else {\n        showStatus(`Found \"${key}\" → \"${res.value}\" in bucket ${res.idx}.`, 'good');\n      }\n    });\n\n    el.del.addEventListener('click', () => {\n      const key = requireKey();\n      if (!key) return;\n      const res = map.delete(key);\n      if (res.removed) {\n        showStatus(`Removed \"${key}\" from bucket ${res.idx}.`, 'good');\n        render();\n      } else {\n        showStatus(`Key \"${key}\" not found (bucket ${res.idx}).`, 'bad');\n      }\n    });\n\n    el.clear.addEventListener('click', () => {\n      map.clear();\n      showStatus('Map cleared.', 'good');\n      render();\n    });\n\n    el.rebuild.addEventListener('click', () => {\n      const size = parseInt(el.size.value, 10);\n      map = new SimpleHashMap(size);\n      showStatus(`Rebuilt empty map with ${size} buckets.`, 'good');\n      render();\n    });\n\n    render();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Hash Map"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "84f25760-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:58.902Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Deque",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Deque (Double-Ended Queue) — Simple Demo</title>\n  <style>\n    :root {\n      --bg: #ffffff;\n      --fg: #1f2937;\n      --muted: #6b7280;\n      --accent: #2563eb;\n      --accent-2: #10b981;\n      --warn: #ef4444;\n      --border: #e5e7eb;\n      --chip-bg: #f3f4f6;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;\n      color: var(--fg);\n      background: var(--bg);\n      line-height: 1.5;\n    }\n    header, main, footer {\n      max-width: 900px;\n      margin: 0 auto;\n      padding: 16px;\n    }\n    header h1 {\n      margin: 12px 0 4px;\n      font-size: 1.6rem;\n    }\n    header p {\n      margin: 0;\n      color: var(--muted);\n    }\n    .card {\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 16px;\n      background: #fff;\n      margin: 16px 0;\n    }\n    .controls {\n      display: grid;\n      gap: 10px;\n      grid-template-columns: 1fr;\n    }\n    @media (min-width: 640px) {\n      .controls {\n        grid-template-columns: 1fr auto auto auto auto auto;\n        align-items: end;\n      }\n    }\n    label {\n      display: block;\n      font-size: 0.9rem;\n      color: var(--muted);\n      margin-bottom: 6px;\n    }\n    input[type=\"text\"] {\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      font-size: 1rem;\n      width: 100%;\n    }\n    .btn {\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      background: #fff;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 0.95rem;\n      transition: background 0.15s ease, transform 0.02s ease;\n      white-space: nowrap;\n    }\n    .btn:active { transform: translateY(1px); }\n    .btn.primary { background: var(--accent); color: #fff; border-color: var(--accent); }\n    .btn.secondary { background: var(--accent-2); color: #fff; border-color: var(--accent-2); }\n    .btn.warn { background: var(--warn); color: #fff; border-color: var(--warn); }\n    .btn.ghost { background: #fff; color: var(--fg); }\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n      align-items: center;\n    }\n    .deque-viewport {\n      border: 1px dashed var(--border);\n      border-radius: 10px;\n      padding: 16px;\n      min-height: 64px;\n      display: flex;\n      align-items: center;\n      overflow-x: auto;\n      gap: 8px;\n      background: #fafafa;\n    }\n    .node {\n      background: var(--chip-bg);\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 10px 14px;\n      font-weight: 600;\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n    }\n    .node small {\n      font-weight: 400;\n      color: var(--muted);\n    }\n    .ends {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      color: var(--muted);\n      font-size: 0.85rem;\n      margin-top: 6px;\n    }\n    .meta {\n      display: flex;\n      gap: 16px;\n      align-items: center;\n      color: var(--muted);\n      font-size: 0.95rem;\n      margin-top: 10px;\n    }\n    .badge {\n      background: #eef2ff;\n      color: #3730a3;\n      padding: 3px 8px;\n      border-radius: 999px;\n      font-size: 0.8rem;\n    }\n    .status {\n      margin-top: 8px;\n      min-height: 1.2em;\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n    code, pre {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      background: #f8fafc;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n    }\n    code {\n      padding: 2px 6px;\n    }\n    pre {\n      padding: 12px;\n      overflow: auto;\n    }\n    footer {\n      color: var(--muted);\n      font-size: 0.9rem;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deque (Double-Ended Queue)</h1>\n    <p>A deque is a sequence container that supports fast insertion and removal at both the front and the back.</p>\n  </header>\n\n  <main>\n    <section class=\"card\" aria-labelledby=\"demo-title\">\n      <h2 id=\"demo-title\" style=\"margin-top:0\">Interactive demo</h2>\n      <div class=\"controls\" role=\"group\" aria-label=\"Deque controls\">\n        <div>\n          <label for=\"value-input\">Value</label>\n          <input id=\"value-input\" type=\"text\" placeholder=\"Enter a value, then choose where to push (Enter = push right)\" />\n        </div>\n        <button class=\"btn primary\" id=\"push-left\" title=\"Push to the front (left)\">Push Left ⟸</button>\n        <button class=\"btn primary\" id=\"push-right\" title=\"Push to the back (right)\">Push Right ⟹</button>\n        <button class=\"btn ghost\" id=\"pop-left\" title=\"Pop from the front (left)\">⟸ Pop Left</button>\n        <button class=\"btn ghost\" id=\"pop-right\" title=\"Pop from the back (right)\">Pop Right ⟹</button>\n        <button class=\"btn warn\" id=\"clear\">Clear</button>\n      </div>\n\n      <div class=\"meta\">\n        <div>Size: <strong id=\"size\">0</strong></div>\n        <div>Front: <span class=\"badge\" id=\"front\">—</span></div>\n        <div>Back: <span class=\"badge\" id=\"back\">—</span></div>\n      </div>\n\n      <div class=\"ends\" aria-hidden=\"true\">\n        <span>Front (Left)</span>\n        <span style=\"flex:1 1 auto; border-bottom:1px dotted var(--border)\"></span>\n        <span>Back (Right)</span>\n      </div>\n      <div id=\"viewport\" class=\"deque-viewport\" aria-live=\"polite\" aria-label=\"Deque contents\"></div>\n\n      <div class=\"status\" id=\"status\" aria-live=\"polite\"></div>\n\n      <div class=\"row\" style=\"margin-top:12px\">\n        <button class=\"btn secondary\" id=\"fill-sample\">Fill sample</button>\n        <button class=\"btn ghost\" id=\"peek-left\">Peek Left</button>\n        <button class=\"btn ghost\" id=\"peek-right\">Peek Right</button>\n      </div>\n    </section>\n\n    <section class=\"card\" aria-labelledby=\"about-title\">\n      <h2 id=\"about-title\" style=\"margin-top:0\">What is a Deque?</h2>\n      <p>\n        A deque (double-ended queue) is a linear collection that allows insertion and removal at both ends.\n        It generalizes stacks (LIFO) and queues (FIFO):\n      </p>\n      <ul>\n        <li>push_front(x), push_back(x): insert at the front/back</li>\n        <li>pop_front(), pop_back(): remove from the front/back</li>\n        <li>front(), back(): read the first/last element</li>\n        <li>size(), empty(): query size and emptiness</li>\n      </ul>\n      <p>Typical use cases include:</p>\n      <ul>\n        <li>Sliding window problems</li>\n        <li>Monotonic queues for O(n) minima/maxima</li>\n        <li>BFS (queue behavior) and undo/redo (stack-like ends)</li>\n        <li>Caching/paging (LRU variants)</li>\n      </ul>\n      <p>\n        With a circular buffer or linked structure, push/pop at either end are O(1) amortized.\n        Many languages provide a built-in deque:\n      </p>\n      <ul>\n        <li>Python: collections.deque</li>\n        <li>C++: std::deque</li>\n        <li>Java: ArrayDeque / LinkedList (Deque interface)</li>\n        <li>JavaScript: typically implemented with arrays or user-built circular buffers</li>\n      </ul>\n      <p>\n        Note: This demo uses a simple array for clarity; left-end operations may be O(n) in JS arrays.\n      </p>\n    </section>\n\n    <section class=\"card\" aria-labelledby=\"pseudo-title\">\n      <h2 id=\"pseudo-title\" style=\"margin-top:0\">Tiny reference</h2>\n      <pre aria-label=\"Pseudocode for deque operations\"><code>// Conceptual deque API\npush_front(x)  // insert x at the front\npush_back(x)   // insert x at the back\npop_front()    // remove and return front element\npop_back()     // remove and return back element\nfront()        // read front element without removing\nback()         // read back element without removing\nsize()         // number of elements\nempty()        // true if size == 0\n</code></pre>\n    </section>\n  </main>\n\n  <footer>\n    Built for learning: try pushing/popping from both ends and watch the structure update.\n  </footer>\n\n  <script>\n    (function () {\n      const input = document.getElementById('value-input');\n      const pushL = document.getElementById('push-left');\n      const pushR = document.getElementById('push-right');\n      const popL = document.getElementById('pop-left');\n      const popR = document.getElementById('pop-right');\n      const clearBtn = document.getElementById('clear');\n      const viewport = document.getElementById('viewport');\n      const sizeEl = document.getElementById('size');\n      const frontEl = document.getElementById('front');\n      const backEl = document.getElementById('back');\n      const status = document.getElementById('status');\n      const fillSample = document.getElementById('fill-sample');\n      const peekLeft = document.getElementById('peek-left');\n      const peekRight = document.getElementById('peek-right');\n\n      // Internal deque (array-based for demo)\n      const dq = [];\n\n      function setStatus(msg, tone = 'neutral') {\n        status.textContent = msg || '';\n        status.style.color = tone === 'warn' ? 'var(--warn)' : 'var(--muted)';\n      }\n\n      function render() {\n        // Update chips\n        viewport.innerHTML = '';\n        dq.forEach((val, i) => {\n          const node = document.createElement('div');\n          node.className = 'node';\n          const idx = document.createElement('small');\n          idx.textContent = i;\n          const txt = document.createElement('span');\n          // Display as plain text to avoid HTML injection\n          txt.textContent = String(val);\n          node.appendChild(txt);\n          node.appendChild(idx);\n          viewport.appendChild(node);\n        });\n\n        // Meta\n        sizeEl.textContent = dq.length;\n        frontEl.textContent = dq.length ? String(dq[0]) : '—';\n        backEl.textContent = dq.length ? String(dq[dq.length - 1]) : '—';\n      }\n\n      function pushLeft(val) {\n        dq.unshift(val);\n        render();\n        setStatus(`Pushed \"${val}\" to the left.`);\n      }\n\n      function pushRight(val) {\n        dq.push(val);\n        render();\n        setStatus(`Pushed \"${val}\" to the right.`);\n      }\n\n      function popLeftFn() {\n        if (!dq.length) {\n          setStatus('Deque is empty. Nothing to pop from the left.', 'warn');\n          return;\n        }\n        const v = dq.shift();\n        render();\n        setStatus(`Popped \"${v}\" from the left.`);\n      }\n\n      function popRightFn() {\n        if (!dq.length) {\n          setStatus('Deque is empty. Nothing to pop from the right.', 'warn');\n          return;\n        }\n        const v = dq.pop();\n        render();\n        setStatus(`Popped \"${v}\" from the right.`);\n      }\n\n      function getInputValue() {\n        return input.value.trim();\n      }\n\n      function tryPushLeft() {\n        const v = getInputValue();\n        if (!v) {\n          setStatus('Enter a value before pushing.', 'warn');\n          input.focus();\n          return;\n        }\n        pushLeft(v);\n        input.value = '';\n        input.focus();\n      }\n\n      function tryPushRight() {\n        const v = getInputValue();\n        if (!v) {\n          setStatus('Enter a value before pushing.', 'warn');\n          input.focus();\n          return;\n        }\n        pushRight(v);\n        input.value = '';\n        input.focus();\n      }\n\n      function clearAll() {\n        dq.length = 0;\n        render();\n        setStatus('Deque cleared.');\n      }\n\n      function fillExample() {\n        dq.length = 0;\n        ['A', 'B', 'C', 'D'].forEach(x => dq.push(x));\n        render();\n        setStatus('Sample filled: A, B, C, D');\n      }\n\n      function peek(dir) {\n        if (!dq.length) {\n          setStatus('Deque is empty. Nothing to peek.', 'warn');\n          return;\n        }\n        const v = dir === 'left' ? dq[0] : dq[dq.length - 1];\n        setStatus(`Peek ${dir}: \"${v}\"`);\n      }\n\n      // Event wiring\n      pushL.addEventListener('click', tryPushLeft);\n      pushR.addEventListener('click', tryPushRight);\n      popL.addEventListener('click', popLeftFn);\n      popR.addEventListener('click', popRightFn);\n      clearBtn.addEventListener('click', clearAll);\n      fillSample.addEventListener('click', fillExample);\n      peekLeft.addEventListener('click', () => peek('left'));\n      peekRight.addEventListener('click', () => peek('right'));\n\n      input.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          tryPushRight();\n        }\n      });\n\n      // Initial render\n      render();\n      setStatus('Ready. Type a value and push left/right.');\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Deque"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8514ac70-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:59.127Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Binary Tree",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Binary Tree</title>\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, \"Helvetica Neue\", Arial, sans-serif;\n      margin: 24px;\n      line-height: 1.55;\n    }\n    h1 {\n      margin: 0 0 8px;\n      font-size: 28px;\n    }\n    p {\n      margin: 0 0 12px;\n      color: #333;\n    }\n    #controls {\n      display: flex;\n      gap: 8px;\n      align-items: center;\n      flex-wrap: wrap;\n      margin: 12px 0 20px;\n    }\n    input[type=\"number\"] {\n      width: 140px;\n      padding: 6px 8px;\n      border: 1px solid #ccc;\n      border-radius: 6px;\n      background: #fff;\n    }\n    button {\n      padding: 6px 12px;\n      border: 1px solid #ccc;\n      border-radius: 6px;\n      background: #f7f7f7;\n      cursor: pointer;\n    }\n    button:hover {\n      background: #eee;\n    }\n    svg#svg {\n      width: 100%;\n      height: 420px;\n      border: 1px solid #eee;\n      background: #fafafa;\n      border-radius: 8px;\n    }\n    .edge {\n      stroke: #888;\n      stroke-width: 1.2;\n    }\n    .node {\n      fill: #fff;\n      stroke: #333;\n      stroke-width: 1.2;\n    }\n    .label {\n      font-size: 12px;\n      text-anchor: middle;\n      dominant-baseline: middle;\n      fill: #111;\n    }\n    #traversals {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n      gap: 12px;\n      margin-top: 16px;\n    }\n    .card {\n      border: 1px solid #eee;\n      border-radius: 8px;\n      padding: 12px;\n      background: #fff;\n    }\n    .code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      background: #f6f6f6;\n      padding: 8px;\n      border-radius: 6px;\n      min-height: 28px;\n    }\n    footer {\n      margin-top: 20px;\n      color: #666;\n      font-size: 0.92em;\n    }\n    @media (prefers-color-scheme: dark) {\n      body { color: #eaeaea; }\n      p { color: #cfcfcf; }\n      input[type=\"number\"], button { border-color: #444; background: #2b2b2b; color: #eaeaea; }\n      button:hover { background: #3a3a3a; }\n      svg#svg { border-color: #444; background: #1f1f1f; }\n      .node { fill: #262626; stroke: #bbb; }\n      .edge { stroke: #888; }\n      .label { fill: #eaeaea; }\n      .card { background: #222; border-color: #444; }\n      .code { background: #1c1c1c; }\n      footer { color: #aaa; }\n    }\n  </style>\n</head>\n<body>\n  <h1>Binary Tree</h1>\n  <p>A binary tree is a hierarchical data structure in which each node has at most two children: left and right. A Binary Search Tree (BST) keeps values ordered so that all values in the left subtree are less than the node, and all values in the right subtree are greater.</p>\n\n  <div id=\"controls\">\n    <input id=\"value\" type=\"number\" placeholder=\"Insert value\" />\n    <button id=\"insertBtn\">Insert</button>\n    <button id=\"randomBtn\">Insert random</button>\n    <button id=\"sampleBtn\">Load sample</button>\n    <button id=\"resetBtn\">Reset</button>\n  </div>\n\n  <svg id=\"svg\" viewBox=\"0 0 1000 400\" preserveAspectRatio=\"xMidYMid meet\"></svg>\n\n  <div id=\"traversals\">\n    <div class=\"card\">\n      <strong>In-order</strong>\n      <div id=\"inorder\" class=\"code\"></div>\n    </div>\n    <div class=\"card\">\n      <strong>Pre-order</strong>\n      <div id=\"preorder\" class=\"code\"></div>\n    </div>\n    <div class=\"card\">\n      <strong>Post-order</strong>\n      <div id=\"postorder\" class=\"code\"></div>\n    </div>\n    <div class=\"card\">\n      <strong>Level-order</strong>\n      <div id=\"levelorder\" class=\"code\"></div>\n    </div>\n  </div>\n\n  <footer>Tip: Try inserting numbers and observe how the BST layout and traversals change. Duplicates go to the right subtree.</footer>\n\n  <script>\n    class Node {\n      constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.x = 0;\n        this.y = 0;\n      }\n    }\n    class BST {\n      constructor() {\n        this.root = null;\n        this.size = 0;\n      }\n      insert(value) {\n        if (value === null || Number.isNaN(value)) return false;\n        if (!this.root) {\n          this.root = new Node(value);\n          this.size++;\n          return true;\n        }\n        let curr = this.root;\n        while (true) {\n          if (value < curr.value) {\n            if (curr.left) curr = curr.left;\n            else { curr.left = new Node(value); this.size++; return true; }\n          } else {\n            if (curr.right) curr = curr.right;\n            else { curr.right = new Node(value); this.size++; return true; }\n          }\n        }\n      }\n    }\n\n    const state = { bst: new BST() };\n    const svg = document.getElementById('svg');\n\n    function clearSVG() {\n      while (svg.firstChild) svg.removeChild(svg.firstChild);\n    }\n\n    function layout() {\n      const root = state.bst.root;\n      if (!root) return;\n      const vSpacing = 80;\n      const hSpacing = 70;\n      const margin = 30;\n      let index = 0;\n      function inorderAssign(node, depth) {\n        if (!node) return;\n        inorderAssign(node.left, depth + 1);\n        node.x = margin + index * hSpacing;\n        node.y = margin + depth * vSpacing;\n        index++;\n        inorderAssign(node.right, depth + 1);\n      }\n      inorderAssign(root, 0);\n    }\n\n    function render() {\n      clearSVG();\n      const root = state.bst.root;\n      if (!root) {\n        const txt = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        txt.setAttribute('x', 16);\n        txt.setAttribute('y', 28);\n        txt.textContent = 'Tree is empty. Insert values to build a BST.';\n        svg.appendChild(txt);\n        updateTraversals();\n        return;\n      }\n      layout();\n      function drawEdges(node) {\n        if (!node) return;\n        if (node.left) {\n          const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n          line.setAttribute('x1', node.x);\n          line.setAttribute('y1', node.y);\n          line.setAttribute('x2', node.left.x);\n          line.setAttribute('y2', node.left.y);\n          line.setAttribute('class', 'edge');\n          svg.appendChild(line);\n        }\n        if (node.right) {\n          const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n          line.setAttribute('x1', node.x);\n          line.setAttribute('y1', node.y);\n          line.setAttribute('x2', node.right.x);\n          line.setAttribute('y2', node.right.y);\n          line.setAttribute('class', 'edge');\n          svg.appendChild(line);\n        }\n        drawEdges(node.left);\n        drawEdges(node.right);\n      }\n      drawEdges(root);\n\n      function drawNodes(node) {\n        if (!node) return;\n        const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('cx', node.x);\n        circle.setAttribute('cy', node.y);\n        circle.setAttribute('r', 16);\n        circle.setAttribute('class', 'node');\n\n        const label = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        label.setAttribute('x', node.x);\n        label.setAttribute('y', node.y + 1);\n        label.setAttribute('class', 'label');\n        label.textContent = node.value;\n\n        group.appendChild(circle);\n        group.appendChild(label);\n        svg.appendChild(group);\n\n        drawNodes(node.left);\n        drawNodes(node.right);\n      }\n      drawNodes(root);\n      updateTraversals();\n    }\n\n    function traverse() {\n      const root = state.bst.root;\n      const inorder = [];\n      const preorder = [];\n      const postorder = [];\n      const levelorder = [];\n\n      function inOrder(node) { if (!node) return; inOrder(node.left); inorder.push(node.value); inOrder(node.right); }\n      function preOrder(node) { if (!node) return; preorder.push(node.value); preOrder(node.left); preOrder(node.right); }\n      function postOrder(node) { if (!node) return; postOrder(node.left); postOrder(node.right); postorder.push(node.value); }\n      function levelOrder(node) {\n        if (!node) return;\n        const q = [node];\n        while (q.length) {\n          const n = q.shift();\n          levelorder.push(n.value);\n          if (n.left) q.push(n.left);\n          if (n.right) q.push(n.right);\n        }\n      }\n\n      inOrder(root);\n      preOrder(root);\n      postOrder(root);\n      levelOrder(root);\n      return { inorder, preorder, postorder, levelorder };\n    }\n\n    function updateTraversals() {\n      const t = traverse();\n      document.getElementById('inorder').textContent = t.inorder.join(' ');\n      document.getElementById('preorder').textContent = t.preorder.join(' ');\n      document.getElementById('postorder').textContent = t.postorder.join(' ');\n      document.getElementById('levelorder').textContent = t.levelorder.join(' ');\n    }\n\n    function insertFromInput() {\n      const input = document.getElementById('value');\n      const val = Number(input.value);\n      if (!Number.isFinite(val)) return;\n      state.bst.insert(val);\n      input.value = '';\n      render();\n    }\n    function insertRandom() {\n      const val = Math.floor(Math.random() * 100);\n      state.bst.insert(val);\n      render();\n    }\n    function reset() {\n      state.bst = new BST();\n      render();\n    }\n    function sample() {\n      reset();\n      [8, 3, 10, 1, 6, 14, 4, 7, 13].forEach(v => state.bst.insert(v));\n      render();\n    }\n\n    document.getElementById('insertBtn').addEventListener('click', insertFromInput);\n    document.getElementById('randomBtn').addEventListener('click', insertRandom);\n    document.getElementById('resetBtn').addEventListener('click', reset);\n    document.getElementById('sampleBtn').addEventListener('click', sample);\n    document.getElementById('value').addEventListener('keydown', e => { if (e.key === 'Enter') insertFromInput(); });\n\n    render();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Binary Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "85896740-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:46:59.892Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Quick Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Quick Sort</title>\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      margin: 0;\n      line-height: 1.5;\n    }\n    header {\n      background: #0b5fff;\n      color: white;\n      padding: 1rem;\n      text-align: center;\n    }\n    main {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n    h1, h2, h3 {\n      margin: 0.5rem 0;\n    }\n    .card {\n      border: 1px solid #d0d7de;\n      border-radius: 8px;\n      padding: 1rem;\n      margin: 1rem 0;\n    }\n    label, input, button {\n      font-size: 1rem;\n    }\n    input[type=\"text\"] {\n      width: 100%;\n      padding: 0.5rem;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      margin-top: 0.25rem;\n    }\n    .actions {\n      display: flex;\n      gap: 0.5rem;\n      margin-top: 0.5rem;\n      flex-wrap: wrap;\n    }\n    button {\n      padding: 0.5rem 0.75rem;\n      border: 1px solid #0b5fff;\n      background: #0b5fff;\n      color: white;\n      border-radius: 6px;\n      cursor: pointer;\n    }\n    button.secondary {\n      background: transparent;\n      color: #0b5fff;\n    }\n    pre {\n      background: #f6f8fa;\n      border: 1px solid #d0d7de;\n      border-radius: 6px;\n      padding: 0.75rem;\n      overflow: auto;\n    }\n    .output {\n      border: 1px dashed #d0d7de;\n      border-radius: 6px;\n      padding: 0.75rem;\n      min-height: 2.2rem;\n      white-space: pre-wrap;\n      word-break: break-word;\n      background: #fff;\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 1rem;\n    }\n    @media (min-width: 700px) {\n      .grid {\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n    footer {\n      padding: 1rem;\n      text-align: center;\n      color: #6e7781;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Quick Sort</h1>\n    <p>Divide-and-conquer sorting algorithm with average O(n log n) time</p>\n  </header>\n\n  <main>\n    <section class=\"card\" aria-labelledby=\"about-title\">\n      <h2 id=\"about-title\">About</h2>\n      <p>\n        Quick Sort is a fast, comparison-based sorting algorithm that uses a divide-and-conquer strategy.\n        It selects a pivot, partitions the array into elements less than and greater than the pivot,\n        and then sorts the partitions recursively.\n      </p>\n      <ul>\n        <li>Average and best-case time: O(n log n)</li>\n        <li>Worst-case time: O(n²) (e.g., poor pivot choices on already sorted data)</li>\n        <li>Space complexity: O(log n) auxiliary (due to recursion)</li>\n        <li>Not stable (equal elements may change relative order)</li>\n        <li>In-place partitioning (no large additional arrays required)</li>\n      </ul>\n    </section>\n\n    <section class=\"card\" aria-labelledby=\"pseudo-title\">\n      <h2 id=\"pseudo-title\">Pseudocode (Hoare partition, middle pivot)</h2>\n      <pre><code>procedure quicksort(A, lo, hi):\n  if lo &gt;= hi:\n    return\n\n  pivot := A[(lo + hi) // 2]      // choose middle element as pivot\n  i := lo\n  j := hi\n\n  while i &lt;= j:\n    while A[i] &lt; pivot: i := i + 1\n    while A[j] &gt; pivot: j := j - 1\n    if i &lt;= j:\n      swap A[i], A[j]\n      i := i + 1\n      j := j - 1\n\n  quicksort(A, lo, j)\n  quicksort(A, i, hi)</code></pre>\n    </section>\n\n    <section class=\"card\" aria-labelledby=\"try-title\">\n      <h2 id=\"try-title\">Try it</h2>\n      <label for=\"numbers\">Enter numbers (comma or space-separated):</label>\n      <input id=\"numbers\" type=\"text\" placeholder=\"e.g., 5, 3, 8, 4, 2, 7\" />\n      <div class=\"actions\">\n        <button id=\"sort\">Sort</button>\n        <button id=\"random\" class=\"secondary\">Random</button>\n        <button id=\"clear\" class=\"secondary\">Clear</button>\n      </div>\n      <div class=\"grid\" style=\"margin-top: 1rem;\">\n        <div>\n          <h3>Sorted result</h3>\n          <div id=\"result\" class=\"output\" aria-live=\"polite\"></div>\n        </div>\n        <div>\n          <h3>Steps (partitioning and swaps)</h3>\n          <div id=\"steps\" class=\"output\" aria-live=\"polite\"></div>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"card\" aria-labelledby=\"impl-title\">\n      <h2 id=\"impl-title\">JavaScript Implementation</h2>\n      <pre><code>function quickSort(arr, left = 0, right = arr.length - 1, log = () =&gt; {}) {\n  if (left &gt;= right) return;\n\n  // Choose a pivot to reduce worst-case chances; here we use the middle element.\n  const pivotIndex = Math.floor((left + right) / 2);\n  const pivot = arr[pivotIndex];\n  log(`Pivot: ${pivot} (index ${pivotIndex}) on subarray [${left}..${right}]`);\n\n  // Hoare partition scheme\n  let i = left;\n  let j = right;\n  while (i &lt;= j) {\n    while (arr[i] &lt; pivot) i++;\n    while (arr[j] &gt; pivot) j--;\n    if (i &lt;= j) {\n      if (i !== j) log(`Swap arr[${i}]=${arr[i]} with arr[${j}]=${arr[j}]`);\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n      i++;\n      j--;\n    }\n  }\n\n  log(`Partitioned: [${arr.slice(left, right + 1).join(', ')}] around pivot ${pivot}`);\n  if (left &lt; j) quickSort(arr, left, j, log);\n  if (i &lt; right) quickSort(arr, i, right, log);\n}</code></pre>\n    </section>\n  </main>\n\n  <footer>\n    Built for learning: experiment with inputs to see how partitioning affects performance.\n  </footer>\n\n  <script>\n    function quickSort(arr, left = 0, right = arr.length - 1, log = () => {}) {\n      if (left >= right) return;\n\n      const pivotIndex = Math.floor((left + right) / 2);\n      const pivot = arr[pivotIndex];\n      log(`Pivot: ${pivot} (index ${pivotIndex}) on subarray [${left}..${right}]`);\n\n      let i = left;\n      let j = right;\n      while (i <= j) {\n        while (arr[i] < pivot) i++;\n        while (arr[j] > pivot) j--;\n        if (i <= j) {\n          if (i !== j) log(`Swap arr[${i}]=${arr[i]} with arr[${j}]=${arr[j}]`);\n          const tmp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = tmp;\n          i++;\n          j--;\n        }\n      }\n\n      log(`Partitioned: [${arr.slice(left, right + 1).join(', ')}] around pivot ${pivot}`);\n      if (left < j) quickSort(arr, left, j, log);\n      if (i < right) quickSort(arr, i, right, log);\n    }\n\n    function parseNumbers(str) {\n      return str\n        .split(/[\\s,]+/)\n        .filter(s => s.length)\n        .map(s => Number(s))\n        .filter(n => Number.isFinite(n));\n    }\n\n    function formatArray(arr) {\n      return arr.join(', ');\n    }\n\n    const inputEl = document.getElementById('numbers');\n    const sortBtn = document.getElementById('sort');\n    const randomBtn = document.getElementById('random');\n    const clearBtn = document.getElementById('clear');\n    const resultEl = document.getElementById('result');\n    const stepsEl = document.getElementById('steps');\n\n    sortBtn.addEventListener('click', () => {\n      const arr = parseNumbers(inputEl.value);\n      if (!arr.length) {\n        resultEl.textContent = 'Please enter at least one number.';\n        stepsEl.textContent = '';\n        return;\n      }\n      const copy = arr.slice();\n      const logs = [];\n      quickSort(copy, 0, copy.length - 1, msg => logs.push(msg));\n      resultEl.textContent = formatArray(copy);\n      stepsEl.textContent = logs.join('\\n');\n    });\n\n    randomBtn.addEventListener('click', () => {\n      const n = 10;\n      const arr = Array.from({ length: n }, () => Math.floor(Math.random() * 100));\n      inputEl.value = arr.join(', ');\n      resultEl.textContent = '';\n      stepsEl.textContent = '';\n      inputEl.focus();\n    });\n\n    clearBtn.addEventListener('click', () => {\n      inputEl.value = '';\n      resultEl.textContent = '';\n      stepsEl.textContent = '';\n      inputEl.focus();\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Quick Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "85ddefe0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:00.446Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Linear Search",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Linear Search</title>\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, sans-serif; line-height: 1.6; margin: 2rem; color: #222; }\n    h1, h2 { margin: 0.5rem 0; }\n    p { margin: 0.5rem 0 1rem; }\n    form { display: grid; gap: 0.75rem; max-width: 480px; }\n    label { display: grid; gap: 0.4rem; }\n    input[type=\"text\"], input[type=\"number\"] { padding: 0.5rem; font-size: 1rem; border: 1px solid #ccc; border-radius: 6px; }\n    button { padding: 0.5rem 0.8rem; font-size: 1rem; border: 1px solid #ccc; background: #f5f5f5; border-radius: 6px; cursor: pointer; }\n    button:hover { background: #efefef; }\n    .result { margin-top: 1rem; }\n    pre, code { background: #f6f8fa; border-radius: 6px; }\n    pre { padding: 0.75rem; overflow-x: auto; }\n    .steps { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; }\n    details { margin-top: 0.5rem; }\n  </style>\n</head>\n<body>\n  <h1>Linear Search</h1>\n  <p>Linear search checks each element from left to right until the target value is found or the list ends.</p>\n\n  <form id=\"search-form\">\n    <label>\n      Array (comma-separated numbers)\n      <input id=\"array-input\" type=\"text\" value=\"5, 2, 9, 1, 7, 3\" aria-label=\"Array input\" />\n    </label>\n    <label>\n      Target number\n      <input id=\"target-input\" type=\"number\" value=\"7\" aria-label=\"Target input\" />\n    </label>\n    <div>\n      <button type=\"submit\">Search</button>\n      <button type=\"button\" id=\"shuffle\">Randomize</button>\n    </div>\n  </form>\n\n  <div class=\"result\" id=\"result\" aria-live=\"polite\"></div>\n\n  <h2>Pseudocode</h2>\n  <pre><code>function linearSearch(arr, target):\n    for i from 0 to length(arr) - 1:\n        if arr[i] == target:\n            return i\n    return -1\n</code></pre>\n\n  <h2>JavaScript implementation</h2>\n  <pre><code>function linearSearch(arr, target) {\n  for (let i = 0; i &lt; arr.length; i++) {\n    if (arr[i] === target) return i;\n  }\n  return -1;\n}\n</code></pre>\n\n  <script>\n    function parseArray(str) {\n      const parts = str.split(/[, ]+/).filter(Boolean);\n      const arr = parts.map(p => Number(p));\n      return arr;\n    }\n\n    function linearSearch(arr, target) {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === target) return i;\n      }\n      return -1;\n    }\n\n    function handleSearch(e) {\n      e.preventDefault();\n      const arrStr = document.getElementById('array-input').value.trim();\n      const targetStr = document.getElementById('target-input').value;\n      const arr = parseArray(arrStr);\n      const target = Number(targetStr);\n\n      const res = document.getElementById('result');\n\n      if (!arr.length || Number.isNaN(target)) {\n        res.textContent = 'Please enter a valid array and target.';\n        return;\n      }\n\n      const visited = [];\n      let index = -1;\n      for (let i = 0; i < arr.length; i++) {\n        visited.push(`i=${i}, value=${arr[i]}`);\n        if (arr[i] === target) {\n          index = i;\n          break;\n        }\n      }\n\n      const comparisons = visited.length;\n      res.innerHTML = `\n        <p>Result: ${index >= 0 ? 'Found at index ' + index : 'Not found'}.</p>\n        <p>Comparisons: ${comparisons}</p>\n        <details>\n          <summary>Steps</summary>\n          <div class=\"steps\">${visited.join('<br>')}</div>\n        </details>\n        <p>Time complexity: O(n) worst-case, O(1) space.</p>\n      `;\n    }\n\n    function randomize() {\n      const n = 8;\n      const arr = Array.from({ length: n }, () => Math.floor(Math.random() * 20));\n      document.getElementById('array-input').value = arr.join(', ');\n      const target = arr[Math.floor(Math.random() * n)];\n      document.getElementById('target-input').value = target;\n    }\n\n    document.getElementById('search-form').addEventListener('submit', handleSearch);\n    document.getElementById('shuffle').addEventListener('click', randomize);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Linear Search"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "870a61f0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:02.415Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Bubble Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Bubble Sort Demo</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      --bg: #f7f7fb;\n      --fg: #1e293b;\n      --muted: #64748b;\n      --accent: #2563eb;\n      --border: #e2e8f0;\n      --good: #16a34a;\n      --warn: #dc2626;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0; padding: 24px;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      background: var(--bg); color: var(--fg);\n      line-height: 1.5;\n    }\n    .container {\n      max-width: 800px; margin: 0 auto; background: #fff;\n      border: 1px solid var(--border); border-radius: 12px; padding: 20px;\n      box-shadow: 0 6px 24px rgba(0,0,0,0.06);\n    }\n    h1 { margin: 0 0 8px; font-size: 1.75rem; }\n    p.desc { margin: 0 0 16px; color: var(--muted); }\n    label { display:block; font-weight: 600; margin-bottom: 8px; }\n    .controls {\n      display: grid; grid-template-columns: 1fr auto auto; gap: 10px; align-items: center;\n    }\n    input[type=\"text\"] {\n      width: 100%; padding: 10px 12px; border: 1px solid var(--border); border-radius: 8px;\n      font-size: 1rem; outline: none;\n    }\n    input[type=\"text\"]:focus { border-color: var(--accent); box-shadow: 0 0 0 3px rgba(37,99,235,0.15); }\n    button {\n      padding: 10px 14px; border: 1px solid var(--accent); color: #fff; background: var(--accent);\n      border-radius: 8px; font-weight: 600; cursor: pointer; white-space: nowrap;\n    }\n    button.secondary { background: #fff; color: var(--accent); }\n    button:disabled { opacity: 0.6; cursor: not-allowed; }\n    .row { margin-top: 16px; display: grid; grid-template-columns: 1fr; gap: 12px; }\n    .card {\n      border: 1px solid var(--border); border-radius: 8px; padding: 12px; background: #fff;\n    }\n    .muted { color: var(--muted); }\n    .error { color: var(--warn); font-weight: 600; }\n    .success { color: var(--good); font-weight: 600; }\n    .array {\n      display: inline-flex; flex-wrap: wrap; gap: 6px; align-items: center;\n    }\n    .chip {\n      display: inline-block; padding: 6px 10px; border-radius: 999px;\n      border: 1px solid var(--border); background: #f9fafb; font-family: ui-monospace, SFMono-Regular, Menlo, monospace;\n    }\n    ol.steps {\n      margin: 0; padding-left: 20px; max-height: 280px; overflow: auto;\n    }\n    code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, monospace;\n      background: #f9fafb; border: 1px solid var(--border); border-radius: 6px; padding: 2px 6px;\n    }\n    .footer {\n      margin-top: 18px; color: var(--muted); font-size: 0.95rem;\n    }\n    @media (max-width: 640px) {\n      .controls { grid-template-columns: 1fr; }\n      button { width: 100%; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Bubble Sort</h1>\n    <p class=\"desc\">Enter numbers and see how Bubble Sort repeatedly swaps adjacent out-of-order elements until the array is sorted.</p>\n\n    <label for=\"arrayInput\">Numbers (comma or space separated)</label>\n    <div class=\"controls\">\n      <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 5, 3, 8, 4, 2\" value=\"5, 3, 8, 4, 2\">\n      <button id=\"sortBtn\">Sort</button>\n      <button id=\"randomBtn\" class=\"secondary\" title=\"Generate a random array\">Random</button>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"card\">\n        <strong>Original array:</strong>\n        <div id=\"original\" class=\"array muted\"></div>\n      </div>\n\n      <div class=\"card\">\n        <strong>Steps:</strong>\n        <ol id=\"steps\" class=\"steps muted\"></ol>\n      </div>\n\n      <div class=\"card\">\n        <strong>Sorted array:</strong>\n        <div id=\"sorted\" class=\"array success\"></div>\n      </div>\n\n      <div id=\"message\" class=\"card muted\"></div>\n\n      <div class=\"card\">\n        <strong>Algorithm (Bubble Sort):</strong>\n        <pre><code>function bubbleSort(a) {\n  let n = a.length;\n  for (let i = 0; i &lt; n - 1; i++) {\n    let swapped = false;\n    for (let j = 0; j &lt; n - 1 - i; j++) {\n      if (a[j] &gt; a[j + 1]) {\n        [a[j], a[j + 1]] = [a[j + 1], a[j]];\n        swapped = true;\n      }\n    }\n    if (!swapped) break; // already sorted\n  }\n  return a;\n}</code></pre>\n        <div class=\"footer\">Time complexity: O(n²) average/worst, O(n) best case (already sorted). Space: O(1).</div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    const inputEl = document.getElementById('arrayInput');\n    const originalEl = document.getElementById('original');\n    const stepsEl = document.getElementById('steps');\n    const sortedEl = document.getElementById('sorted');\n    const msgEl = document.getElementById('message');\n    const sortBtn = document.getElementById('sortBtn');\n    const randomBtn = document.getElementById('randomBtn');\n\n    function parseArray(text) {\n      const raw = (text || '').trim();\n      if (!raw) return [];\n      const parts = raw.split(/[,\\s]+/).filter(Boolean);\n      const arr = [];\n      for (const p of parts) {\n        const n = Number(p);\n        if (!isFinite(n)) {\n          throw new Error('Invalid number: \"' + p + '\"');\n        }\n        arr.push(n);\n      }\n      return arr;\n    }\n\n    function formatArray(arr) {\n      return arr.map(n => `<span class=\"chip\">${Number.isInteger(n) ? n : n.toFixed(3)}</span>`).join(' ');\n    }\n\n    function bubbleSortWithSteps(arr) {\n      const a = arr.slice();\n      const steps = [];\n      const n = a.length;\n      for (let i = 0; i < n - 1; i++) {\n        let swapped = false;\n        for (let j = 0; j < n - 1 - i; j++) {\n          steps.push({ type: 'compare', j, k: j + 1, snapshot: a.slice() });\n          if (a[j] > a[j + 1]) {\n            [a[j], a[j + 1]] = [a[j + 1], a[j]];\n            swapped = true;\n            steps.push({ type: 'swap', j, k: j + 1, snapshot: a.slice() });\n          }\n        }\n        steps.push({ type: 'pass', pass: i + 1, swapped, snapshot: a.slice() });\n        if (!swapped) break; // already sorted\n      }\n      return { sorted: a, steps };\n    }\n\n    function renderSteps(steps) {\n      stepsEl.innerHTML = '';\n      if (!steps.length) {\n        stepsEl.innerHTML = '<li>No steps (empty input).</li>';\n        return;\n      }\n      const frag = document.createDocumentFragment();\n      steps.forEach(s => {\n        const li = document.createElement('li');\n        if (s.type === 'compare') {\n          li.innerHTML = `Compare positions ${s.j} and ${s.k}: ${formatArray(s.snapshot)}`;\n        } else if (s.type === 'swap') {\n          li.innerHTML = `Swap positions ${s.j} and ${s.k}: ${formatArray(s.snapshot)}`;\n        } else if (s.type === 'pass') {\n          li.innerHTML = `Pass ${s.pass} ${s.swapped ? 'completed' : '(no swaps, array sorted)'}: ${formatArray(s.snapshot)}`;\n        }\n        frag.appendChild(li);\n      });\n      stepsEl.appendChild(frag);\n      stepsEl.classList.remove('muted');\n    }\n\n    function clearOutputs() {\n      stepsEl.innerHTML = '';\n      sortedEl.innerHTML = '';\n      originalEl.innerHTML = '';\n      msgEl.textContent = '';\n      stepsEl.classList.add('muted');\n    }\n\n    function onSort() {\n      clearOutputs();\n      try {\n        const arr = parseArray(inputEl.value);\n        originalEl.innerHTML = formatArray(arr);\n        const result = bubbleSortWithSteps(arr);\n        renderSteps(result.steps);\n        sortedEl.innerHTML = formatArray(result.sorted);\n        msgEl.innerHTML = arr.length\n          ? 'Sorted ' + arr.length + ' element' + (arr.length > 1 ? 's' : '') + ' using Bubble Sort.'\n          : 'Enter some numbers to sort.';\n      } catch (e) {\n        msgEl.innerHTML = '<span class=\"error\">' + e.message + '</span>';\n      }\n    }\n\n    function randomArray(len = 8) {\n      const size = Math.max(3, Math.min(20, len));\n      const arr = Array.from({ length: size }, () => Math.floor(Math.random() * 99) + 1);\n      return arr;\n    }\n\n    function onRandom() {\n      const arr = randomArray(8);\n      inputEl.value = arr.join(', ');\n      clearOutputs();\n      originalEl.innerHTML = formatArray(arr);\n      msgEl.textContent = 'Generated a random array. Click Sort to see the steps.';\n    }\n\n    sortBtn.addEventListener('click', onSort);\n    randomBtn.addEventListener('click', onRandom);\n\n    // Initialize preview with default input\n    (function init() {\n      try {\n        const arr = parseArray(inputEl.value);\n        originalEl.innerHTML = formatArray(arr);\n        msgEl.textContent = 'Click Sort to visualize Bubble Sort.';\n      } catch {}\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Bubble Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "884504d0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:04.477Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Hash Table",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<title>Hash Table</title>\n<style>\n  :root { color-scheme: light dark; }\n  body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; line-height: 1.5; margin: 0; padding: 24px; max-width: 900px; }\n  h1 { margin-top: 0; }\n  .grid { display: grid; grid-template-columns: 1fr; gap: 16px; }\n  @media (min-width: 800px) { .grid { grid-template-columns: 2fr 3fr; } }\n  .panel { border: 1px solid rgba(0,0,0,.1); border-radius: 8px; padding: 16px; }\n  label { display: block; margin-top: 8px; }\n  input, select, button { font: inherit; padding: 8px; margin-top: 4px; }\n  button { cursor: pointer; }\n  .buckets { display: grid; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); gap: 8px; }\n  .bucket { border: 1px dashed rgba(0,0,0,.2); border-radius: 6px; padding: 8px; }\n  .bucket h3 { margin: 0 0 4px 0; font-size: 14px; opacity: .7; }\n  .pair { display: flex; gap: 4px; align-items: center; }\n  .pair .key { font-weight: 600; }\n  .muted { opacity: .75; }\n  .msg { min-height: 1em; }\n  .actions { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 8px; }\n  code, pre { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n</style>\n</head>\n<body>\n  <h1>Hash Table</h1>\n  <p>A hash table is a data structure that maps keys to values using a hash function to place entries into fixed-size buckets. It provides fast average-time insert, lookup, and delete by keeping most buckets small.</p>\n  <div class=\"grid\">\n    <section class=\"panel\">\n      <h2>Try it</h2>\n      <p class=\"muted\">This demo uses separate chaining with a djb2-style hash function.</p>\n      <label>Table size\n        <select id=\"size\">\n          <option>8</option>\n          <option selected>16</option>\n          <option>32</option>\n          <option>64</option>\n        </select>\n      </label>\n      <div class=\"actions\">\n        <button id=\"newTable\">Create new table</button>\n        <button id=\"seed\">Load sample data</button>\n        <button id=\"reset\">Clear table</button>\n      </div>\n      <hr>\n      <label>Key\n        <input id=\"key\" type=\"text\" placeholder=\"e.g., apple or 42\">\n      </label>\n      <label>Value\n        <input id=\"value\" type=\"text\" placeholder=\"e.g., red\">\n      </label>\n      <div class=\"actions\">\n        <button id=\"set\">Set</button>\n        <button id=\"get\">Get</button>\n        <button id=\"del\">Delete</button>\n      </div>\n      <p class=\"msg\" id=\"msg\"></p>\n      <p class=\"muted\" id=\"hashInfo\"></p>\n    </section>\n    <section class=\"panel\">\n      <h2>Buckets</h2>\n      <div id=\"buckets\" class=\"buckets\"></div>\n      <p class=\"muted\">Average-case time: O(1) for set/get/delete. Worst-case (all keys collide): O(n).</p>\n    </section>\n  </div>\n\n  <section class=\"panel\">\n    <h2>How it works</h2>\n    <ul>\n      <li>Hash function: Converts a key into a number and uses modulo to choose a bucket index.</li>\n      <li>Separate chaining: Each bucket stores a small list of key–value pairs. If two keys hash to the same index, they share a bucket.</li>\n      <li>Operations:\n        <ul>\n          <li>Set: Compute index, update existing pair if key is present, otherwise append.</li>\n          <li>Get: Compute index, scan bucket for the key.</li>\n          <li>Delete: Compute index, remove the pair if found.</li>\n        </ul>\n      </li>\n      <li>Load factor: entries / bucket count. Rehash to a larger table when load factor grows to keep buckets short.</li>\n    </ul>\n    <pre><code>// djb2-style hash (unsigned)\nfunction hashStringToInt(s) {\n  let h = 5381;\n  for (let i = 0; i &lt; s.length; i++) {\n    h = ((h &lt;&lt; 5) + h) + s.charCodeAt(i); // h * 33 + c\n  }\n  return h >>> 0;\n}\n</code></pre>\n  </section>\n\n  <script>\n  (function() {\n    class HashTable {\n      constructor(size = 16) {\n        this.size = size;\n        this.buckets = Array.from({ length: size }, () => []);\n        this.count = 0;\n      }\n      hash(key) {\n        const s = String(key);\n        let h = 5381;\n        for (let i = 0; i < s.length; i++) {\n          h = ((h << 5) + h) + s.charCodeAt(i);\n        }\n        const idx = (h >>> 0) % this.size;\n        return { index: idx, raw: h >>> 0 };\n      }\n      set(key, value) {\n        const { index } = this.hash(key);\n        const bucket = this.buckets[index];\n        for (let i = 0; i < bucket.length; i++) {\n          if (bucket[i].key === key) {\n            bucket[i].value = value;\n            return { updated: true, index };\n          }\n        }\n        bucket.push({ key, value });\n        this.count++;\n        return { inserted: true, index };\n      }\n      get(key) {\n        const { index } = this.hash(key);\n        const bucket = this.buckets[index];\n        for (let i = 0; i < bucket.length; i++) {\n          if (bucket[i].key === key) {\n            return { found: true, value: bucket[i].value, index };\n          }\n        }\n        return { found: false, value: undefined, index };\n      }\n      delete(key) {\n        const { index } = this.hash(key);\n        const bucket = this.buckets[index];\n        for (let i = 0; i < bucket.length; i++) {\n          if (bucket[i].key === key) {\n            const [removed] = bucket.splice(i, 1);\n            this.count--;\n            return { removed, index };\n          }\n        }\n        return { removed: null, index };\n      }\n      entries() {\n        const out = [];\n        for (let i = 0; i < this.size; i++) {\n          for (const pair of this.buckets[i]) {\n            out.push({ index: i, key: pair.key, value: pair.value });\n          }\n        }\n        return out;\n      }\n      clear() {\n        this.buckets = Array.from({ length: this.size }, () => []);\n        this.count = 0;\n      }\n    }\n\n    let table = new HashTable(16);\n    const sizeSel = document.getElementById('size');\n    const newTableBtn = document.getElementById('newTable');\n    const seedBtn = document.getElementById('seed');\n    const resetBtn = document.getElementById('reset');\n    const keyInput = document.getElementById('key');\n    const valInput = document.getElementById('value');\n    const setBtn = document.getElementById('set');\n    const getBtn = document.getElementById('get');\n    const delBtn = document.getElementById('del');\n    const bucketsDiv = document.getElementById('buckets');\n    const msg = document.getElementById('msg');\n    const hashInfo = document.getElementById('hashInfo');\n\n    function render() {\n      bucketsDiv.innerHTML = '';\n      for (let i = 0; i < table.size; i++) {\n        const bucketEl = document.createElement('div');\n        bucketEl.className = 'bucket';\n        const title = document.createElement('h3');\n        title.textContent = 'Bucket ' + i;\n        bucketEl.appendChild(title);\n        const contents = table.buckets[i];\n        if (contents.length === 0) {\n          const empty = document.createElement('div');\n          empty.className = 'muted';\n          empty.textContent = '(empty)';\n          bucketEl.appendChild(empty);\n        } else {\n          for (const pair of contents) {\n            const row = document.createElement('div');\n            row.className = 'pair';\n            const keySpan = document.createElement('span');\n            keySpan.className = 'key';\n            keySpan.textContent = String(pair.key);\n            const sep = document.createElement('span');\n            sep.textContent = ':';\n            const valSpan = document.createElement('span');\n            valSpan.textContent = String(pair.value);\n            row.appendChild(keySpan);\n            row.appendChild(sep);\n            row.appendChild(valSpan);\n            bucketEl.appendChild(row);\n          }\n        }\n        bucketsDiv.appendChild(bucketEl);\n      }\n      const lf = (table.count / table.size).toFixed(2);\n      hashInfo.textContent = 'Entries: ' + table.count + ' | Buckets: ' + table.size + ' | Load factor: ' + lf;\n    }\n\n    function showMessage(text) {\n      msg.textContent = text;\n    }\n\n    function computePreview() {\n      const k = keyInput.value;\n      if (!k) {\n        hashInfo.textContent = 'Entries: ' + table.count + ' | Buckets: ' + table.size + ' | Load factor: ' + (table.count / table.size).toFixed(2);\n        return;\n      }\n      const h = table.hash(k);\n      hashInfo.textContent = 'Hash ' + h.raw + ' → Bucket ' + h.index + ' | Entries: ' + table.count + ' | Buckets: ' + table.size + ' | Load factor: ' + (table.count / table.size).toFixed(2);\n    }\n\n    newTableBtn.addEventListener('click', () => {\n      const sz = parseInt(sizeSel.value, 10);\n      table = new HashTable(sz);\n      showMessage('Created new table with ' + sz + ' buckets.');\n      render();\n    });\n\n    resetBtn.addEventListener('click', () => {\n      table.clear();\n      showMessage('Cleared all entries.');\n      render();\n    });\n\n    seedBtn.addEventListener('click', () => {\n      const samples = [\n        ['apple', 'fruit'],\n        ['banana', 'fruit'],\n        ['carrot', 'veg'],\n        ['dog', 'animal'],\n        ['elephant', 'animal'],\n        ['grape', 'fruit'],\n        ['hat', 'clothing'],\n        ['ice', 'cold'],\n        ['jazz', 'music'],\n        ['kite', 'toy'],\n        ['lion', 'animal'],\n        ['moon', 'space'],\n        ['note', 'music'],\n        ['olive', 'fruit'],\n        ['pear', 'fruit'],\n        ['queen', 'title'],\n        ['river', 'water'],\n        ['sun', 'star'],\n        ['tree', 'plant']\n      ];\n      for (const [k, v] of samples) {\n        table.set(k, v);\n      }\n      showMessage('Loaded sample data (' + samples.length + ' entries).');\n      render();\n    });\n\n    setBtn.addEventListener('click', () => {\n      const k = keyInput.value;\n      const v = valInput.value;\n      if (!k) { showMessage('Please enter a key.'); return; }\n      if (v === '') { showMessage('Please enter a value.'); return; }\n      const res = table.set(k, v);\n      showMessage((res.updated ? 'Updated' : 'Inserted') + ' \"' + k + '\" at bucket ' + res.index + '.');\n      render();\n    });\n\n    getBtn.addEventListener('click', () => {\n      const k = keyInput.value;\n      if (!k) { showMessage('Please enter a key.'); return; }\n      const res = table.get(k);\n      if (res.found) {\n        showMessage('Found \"' + k + '\" = \"' + res.value + '\" in bucket ' + res.index + '.');\n      } else {\n        showMessage('Key \"' + k + '\" not found (looked in bucket ' + res.index + ').');\n      }\n      render();\n    });\n\n    delBtn.addEventListener('click', () => {\n      const k = keyInput.value;\n      if (!k) { showMessage('Please enter a key.'); return; }\n      const res = table.delete(k);\n      if (res.removed) {\n        showMessage('Deleted \"' + k + '\" from bucket ' + res.index + '.');\n      } else {\n        showMessage('Key \"' + k + '\" not found (bucket ' + res.index + ').');\n      }\n      render();\n    });\n\n    keyInput.addEventListener('input', computePreview);\n\n    render();\n  })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Hash Table"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "88a9e120-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:05.138Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Red-Black Tree",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Red-Black Tree</title>\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; line-height: 1.6; margin: 2rem; color: #222; }\n    h1 { margin-bottom: 0.25rem; }\n    .subtitle { color: #555; margin-top: 0; }\n    .section { margin-top: 1.5rem; }\n    ul { padding-left: 1.25rem; }\n    .diagram { margin-top: 1rem; }\n    svg { max-width: 460px; width: 100%; height: auto; }\n    .node { stroke: #333; stroke-width: 1; }\n    .label { font-size: 12px; fill: #fff; text-anchor: middle; dominant-baseline: middle; }\n    .edge { stroke: #888; stroke-width: 1.25; }\n    .legend { display: flex; gap: 1rem; align-items: center; margin-top: 0.5rem; }\n    .dot { width: 14px; height: 14px; border-radius: 50%; display: inline-block; border: 1px solid #333; }\n    .dot.red { background: #d9534f; }\n    .dot.black { background: #111; }\n    footer { margin-top: 2rem; color: #666; font-size: 0.9rem; }\n  </style>\n</head>\n<body>\n  <h1>Red-Black Tree</h1>\n  <p class=\"subtitle\">A self-balancing binary search tree with guaranteed logarithmic time for search, insert, and delete.</p>\n\n  <div class=\"section\">\n    <h2>Key properties</h2>\n    <ul>\n      <li>Each node is either red or black.</li>\n      <li>The root is black.</li>\n      <li>All leaves (NIL or sentinel nodes) are black.</li>\n      <li>No red node has a red parent (no two reds in a row).</li>\n      <li>Every path from a node to its descendant NIL leaves contains the same number of black nodes (black height).</li>\n    </ul>\n  </div>\n\n  <div class=\"section\">\n    <h2>Why it stays balanced</h2>\n    <p>These constraints ensure the longest path is at most twice the shortest path, keeping height O(log n) and operations efficient.</p>\n  </div>\n\n  <div class=\"section\">\n    <h2>Operations and complexity</h2>\n    <ul>\n      <li>Search: O(log n)</li>\n      <li>Insert: O(log n) with at most two rotations plus recoloring to fix violations</li>\n      <li>Delete: O(log n) with fix-up steps to restore properties (may propagate a “double black”)</li>\n      <li>Space: O(n)</li>\n    </ul>\n  </div>\n\n  <div class=\"section\">\n    <h2>Rotations</h2>\n    <p>Rotations locally restructure the tree while preserving in-order sequence:</p>\n    <ul>\n      <li><strong>Left rotation</strong>: moves a node down-left, its right child up.</li>\n      <li><strong>Right rotation</strong>: symmetric to left rotation.</li>\n    </ul>\n  </div>\n\n  <div class=\"section\">\n    <h2>Small example</h2>\n    <p>The diagram below shows a valid Red-Black Tree after inserting 10, 5, 15, 2, 7:</p>\n    <div class=\"diagram\">\n      <svg viewBox=\"0 0 460 220\" aria-label=\"Red-Black Tree example\">\n        <!-- Edges -->\n        <line class=\"edge\" x1=\"230\" y1=\"40\" x2=\"130\" y2=\"100\"></line>\n        <line class=\"edge\" x1=\"230\" y1=\"40\" x2=\"330\" y2=\"100\"></line>\n        <line class=\"edge\" x1=\"130\" y1=\"100\" x2=\"80\" y2=\"160\"></line>\n        <line class=\"edge\" x1=\"130\" y1=\"100\" x2=\"180\" y2=\"160\"></line>\n        <!-- Nodes -->\n        <circle class=\"node\" cx=\"230\" cy=\"40\" r=\"18\" fill=\"#111\"></circle>\n        <text class=\"label\" x=\"230\" y=\"40\">10</text>\n\n        <circle class=\"node\" cx=\"130\" cy=\"100\" r=\"18\" fill=\"#d9534f\"></circle>\n        <text class=\"label\" x=\"130\" y=\"100\">5</text>\n\n        <circle class=\"node\" cx=\"330\" cy=\"100\" r=\"18\" fill=\"#d9534f\"></circle>\n        <text class=\"label\" x=\"330\" y=\"100\">15</text>\n\n        <circle class=\"node\" cx=\"80\" cy=\"160\" r=\"18\" fill=\"#111\"></circle>\n        <text class=\"label\" x=\"80\" y=\"160\">2</text>\n\n        <circle class=\"node\" cx=\"180\" cy=\"160\" r=\"18\" fill=\"#111\"></circle>\n        <text class=\"label\" x=\"180\" y=\"160\">7</text>\n      </svg>\n    </div>\n    <div class=\"legend\">\n      <span class=\"dot red\" title=\"Red node\"></span> Red node\n      <span class=\"dot black\" title=\"Black node\"></span> Black node\n    </div>\n  </div>\n\n  <div class=\"section\">\n    <h2>Typical insert fix-up cases</h2>\n    <ul>\n      <li>Parent is black: tree remains valid.</li>\n      <li>Parent and uncle are red: recolor parent and uncle to black, grandparent to red; continue upwards.</li>\n      <li>Parent is red, uncle is black and node is an inner child: rotate to convert to outer case.</li>\n      <li>Parent is red, uncle is black and node is an outer child: rotate at grandparent and recolor parent/grandparent.</li>\n    </ul>\n  </div>\n\n  <div class=\"section\">\n    <h2>When to use</h2>\n    <ul>\n      <li>Ordered maps/sets where worst-case performance matters.</li>\n      <li>Language runtimes and standard libraries (e.g., many TreeMap-like implementations).</li>\n      <li>Workloads favoring predictable performance over slightly faster average inserts (compared to AVL trees).</li>\n    </ul>\n  </div>\n\n  <footer>\n    <p>Tip: Red-Black Trees trade a bit of strictness for simpler balancing, yielding consistent O(log n) operations.</p>\n  </footer>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Red-Black Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "891ffb80-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:05.912Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Adjacency Matrix",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Adjacency Matrix</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    body { font-family: system-ui, Arial, sans-serif; line-height: 1.5; margin: 20px; }\n    h1 { font-size: 1.5rem; margin: 0 0 8px; }\n    .small { color: #555; font-size: .9rem; }\n    .controls { display: flex; gap: 12px; flex-wrap: wrap; align-items: center; margin: 12px 0; }\n    input[type=\"number\"] { width: 5rem; }\n    .btn { padding: 6px 10px; border: 1px solid #999; background: #fff; cursor: pointer; border-radius: 4px; }\n    .btn:hover { background: #f0f0f0; }\n    .matrix-container { overflow: auto; max-width: 100%; border: 1px solid #eee; padding: 8px; }\n    table { border-collapse: collapse; margin-top: 8px; }\n    th, td { border: 1px solid #ccc; padding: 6px 8px; text-align: center; }\n    td.cell { cursor: pointer; min-width: 28px; }\n    td.cell[data-val=\"1\"] { background: #cde9ff; font-weight: bold; }\n    caption { text-align: left; margin-bottom: 6px; font-weight: 600; }\n    .summary { margin-top: 12px; }\n    .divider { height: 1px; background: #eee; margin: 12px 0; }\n  </style>\n</head>\n<body>\n  <h1>Adjacency Matrix</h1>\n  <p class=\"small\">Click cells to toggle edges (1 = edge, 0 = no edge). For undirected graphs, the matrix is kept symmetric.</p>\n\n  <div class=\"controls\">\n    <label>Vertices <input type=\"number\" id=\"n\" min=\"1\" max=\"50\" value=\"5\"></label>\n    <label><input type=\"checkbox\" id=\"directed\"> Directed</label>\n    <label>Random density <input type=\"range\" id=\"density\" min=\"0\" max=\"1\" step=\"0.05\" value=\"0.3\"></label>\n    <span id=\"densityVal\" class=\"small\">0.30</span>\n    <button class=\"btn\" id=\"generate\">Generate</button>\n    <button class=\"btn\" id=\"clear\">Clear</button>\n    <button class=\"btn\" id=\"randomize\">Randomize</button>\n  </div>\n\n  <div class=\"matrix-container\">\n    <table id=\"matrix\" aria-label=\"Adjacency matrix\">\n      <caption>Matrix</caption>\n      <thead id=\"matrixHead\"></thead>\n      <tbody id=\"matrixBody\"></tbody>\n    </table>\n  </div>\n\n  <div class=\"summary\" id=\"summary\"></div>\n  <div class=\"divider\"></div>\n\n  <div id=\"adjListBlock\">\n    <h2>Adjacency List</h2>\n    <pre id=\"adjList\"></pre>\n  </div>\n\n  <script>\n    (function () {\n      const nInput = document.getElementById('n');\n      const directedInput = document.getElementById('directed');\n      const densityRange = document.getElementById('density');\n      const densityVal = document.getElementById('densityVal');\n      const generateBtn = document.getElementById('generate');\n      const clearBtn = document.getElementById('clear');\n      const randomizeBtn = document.getElementById('randomize');\n      const head = document.getElementById('matrixHead');\n      const body = document.getElementById('matrixBody');\n      const summary = document.getElementById('summary');\n      const adjListPre = document.getElementById('adjList');\n\n      densityRange.addEventListener('input', () => {\n        densityVal.textContent = Number(densityRange.value).toFixed(2);\n      });\n\n      generateBtn.addEventListener('click', () => {\n        const n = clamp(parseInt(nInput.value, 10) || 1, 1, 50);\n        nInput.value = n;\n        buildMatrix(n, directedInput.checked);\n      });\n\n      clearBtn.addEventListener('click', () => {\n        setAll(0);\n        updateSummary();\n      });\n\n      randomizeBtn.addEventListener('click', () => {\n        const p = Number(densityRange.value);\n        randomize(p, directedInput.checked);\n        updateSummary();\n      });\n\n      function clamp(x, lo, hi) { return Math.min(Math.max(x, lo), hi); }\n\n      function buildMatrix(n, directed) {\n        head.innerHTML = '';\n        const trh = document.createElement('tr');\n        trh.appendChild(document.createElement('th'));\n        for (let j = 0; j < n; j++) {\n          const th = document.createElement('th');\n          th.textContent = j;\n          trh.appendChild(th);\n        }\n        head.appendChild(trh);\n\n        body.innerHTML = '';\n        for (let i = 0; i < n; i++) {\n          const tr = document.createElement('tr');\n          const th = document.createElement('th');\n          th.textContent = i;\n          tr.appendChild(th);\n          for (let j = 0; j < n; j++) {\n            const td = document.createElement('td');\n            td.className = 'cell';\n            td.dataset.i = i;\n            td.dataset.j = j;\n            td.dataset.val = '0';\n            td.textContent = '0';\n            td.addEventListener('click', () => {\n              toggleCell(td, directed);\n              updateSummary();\n            });\n            tr.appendChild(td);\n          }\n          body.appendChild(tr);\n        }\n        updateSummary();\n      }\n\n      function toggleCell(td, directed) {\n        const i = Number(td.dataset.i), j = Number(td.dataset.j);\n        const newVal = td.dataset.val === '1' ? '0' : '1';\n        setCell(i, j, newVal);\n        if (!directed && i !== j) {\n          setCell(j, i, newVal);\n        }\n      }\n\n      function setCell(i, j, val) {\n        const td = getCell(i, j);\n        td.dataset.val = String(val);\n        td.textContent = String(val);\n        if (val === '1') {\n          td.setAttribute('aria-label', `edge from ${i} to ${j}`);\n          td.style.fontWeight = 'bold';\n          td.style.background = '#cde9ff';\n        } else {\n          td.removeAttribute('aria-label');\n          td.style.fontWeight = '';\n          td.style.background = '';\n        }\n      }\n\n      function getCell(i, j) {\n        return body.querySelector(`td.cell[data-i=\"${i}\"][data-j=\"${j}\"]`);\n      }\n\n      function size() {\n        const firstRow = body.querySelector('tr');\n        return firstRow ? firstRow.querySelectorAll('td.cell').length : 0;\n      }\n\n      function setAll(val) {\n        const tds = body.querySelectorAll('td.cell');\n        tds.forEach(td => {\n          td.dataset.val = String(val);\n          td.textContent = String(val);\n          td.style.fontWeight = '';\n          td.style.background = '';\n          td.removeAttribute('aria-label');\n        });\n      }\n\n      function randomize(p, directed) {\n        const n = size();\n        if (n === 0) return;\n        setAll(0);\n        for (let i = 0; i < n; i++) {\n          for (let j = 0; j < n; j++) {\n            if (!directed && j < i) continue;\n            const val = Math.random() < p ? '1' : '0';\n            setCell(i, j, val);\n            if (!directed && i !== j) {\n              setCell(j, i, val);\n            }\n          }\n        }\n      }\n\n      function readMatrix() {\n        const n = size();\n        const A = Array.from({ length: n }, () => Array(n).fill(0));\n        const rows = body.querySelectorAll('tr');\n        rows.forEach((tr, i) => {\n          const cells = tr.querySelectorAll('td.cell');\n          cells.forEach((td, j) => {\n            A[i][j] = Number(td.dataset.val);\n          });\n        });\n        return A;\n      }\n\n      function updateSummary() {\n        const A = readMatrix();\n        const n = A.length;\n        if (n === 0) { summary.textContent = ''; adjListPre.textContent = ''; return; }\n        const directed = directedInput.checked;\n        let edges = 0;\n        const degOut = Array(n).fill(0);\n        const degIn = Array(n).fill(0);\n        for (let i = 0; i < n; i++) {\n          for (let j = 0; j < n; j++) {\n            const v = A[i][j];\n            if (v) {\n              edges += 1;\n              degOut[i] += 1;\n              degIn[j] += 1;\n            }\n          }\n        }\n        if (!directed) {\n          let loops = 0;\n          for (let i = 0; i < n; i++) { loops += A[i][i]; }\n          const undirectedEdges = (edges - loops) / 2 + loops;\n          edges = undirectedEdges;\n        }\n        let text = directed ? `Directed graph: ${edges} edges.` : `Undirected graph: ${edges} edges.`;\n        text += ' Degrees: ';\n        if (directed) {\n          text += degOut.map((d, i) => `v${i} out=${d}, in=${degIn[i]}`).join('; ');\n        } else {\n          text += degOut.map((d, i) => `v${i} deg=${d}`).join('; ');\n        }\n        summary.textContent = text;\n\n        const lines = [];\n        for (let i = 0; i < n; i++) {\n          const nbrs = [];\n          for (let j = 0; j < n; j++) {\n            if (A[i][j]) nbrs.push(j);\n          }\n          lines.push(`${i}: ${nbrs.join(', ')}`);\n        }\n        adjListPre.textContent = lines.join('\\n');\n      }\n\n      buildMatrix(parseInt(nInput.value, 10), directedInput.checked);\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Adjacency Matrix"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "89556360-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:06.262Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Insertion Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Insertion Sort</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      --bg: #0f172a;\n      --card: #111827;\n      --text: #e5e7eb;\n      --muted: #9ca3af;\n      --accent: #22c55e;\n      --warn: #ef4444;\n      --border: #1f2937;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      background: linear-gradient(135deg, #0f172a 0%, #111827 100%);\n      color: var(--text);\n      line-height: 1.5;\n      min-height: 100vh;\n      display: grid;\n      place-items: center;\n      padding: 24px;\n    }\n    .wrap {\n      width: 100%;\n      max-width: 840px;\n      background: rgba(17, 24, 39, 0.8);\n      border: 1px solid var(--border);\n      border-radius: 16px;\n      padding: 20px;\n      backdrop-filter: blur(6px);\n      box-shadow: 0 10px 30px rgba(0,0,0,0.35);\n    }\n    header {\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      gap: 12px;\n      margin-bottom: 12px;\n    }\n    h1 {\n      margin: 0;\n      font-size: 1.5rem;\n      letter-spacing: 0.2px;\n    }\n    .muted { color: var(--muted); font-size: 0.95rem; }\n    label { display: block; margin-bottom: 8px; }\n    .row {\n      display: grid;\n      grid-template-columns: 1fr auto auto auto;\n      gap: 8px;\n      align-items: center;\n    }\n    input[type=\"text\"] {\n      width: 100%;\n      padding: 10px 12px;\n      color: var(--text);\n      background: #0b1220;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      outline: none;\n    }\n    input[type=\"text\"]::placeholder { color: #6b7280; }\n    button {\n      padding: 10px 14px;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      background: #0b1220;\n      color: var(--text);\n      cursor: pointer;\n      transition: transform 0.05s ease, background 0.2s ease, border-color 0.2s ease;\n    }\n    button:hover { background: #0d1424; border-color: #233047; }\n    button:active { transform: scale(0.98); }\n    .primary { background: #13203a; border-color: #223252; }\n    .accent { background: #0d1f16; border-color: #1c3d2f; }\n    .error {\n      margin-top: 10px;\n      color: var(--warn);\n      font-size: 0.95rem;\n      min-height: 1.2em;\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 12px;\n      margin-top: 16px;\n    }\n    .card {\n      background: #0b1220;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 12px;\n    }\n    .card h3 { margin: 0 0 8px 0; font-size: 1rem; }\n    .array {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n    }\n    .chip {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      padding: 6px 10px;\n      border-radius: 999px;\n      border: 1px solid #223252;\n      background: #0d1424;\n      color: var(--text);\n      font-weight: 500;\n      min-width: 36px;\n    }\n    details {\n      margin-top: 14px;\n      background: #0b1220;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 10px 12px;\n    }\n    details summary {\n      cursor: pointer;\n      font-weight: 600;\n      outline: none;\n    }\n    .steps {\n      margin-top: 10px;\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    .step {\n      padding: 8px;\n      border-radius: 10px;\n      border: 1px solid #1f2a3a;\n      background: #0c1322;\n    }\n    .step .meta {\n      font-size: 0.9rem;\n      color: var(--muted);\n      margin-bottom: 6px;\n    }\n    .inline-array { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; }\n    footer {\n      margin-top: 16px;\n      color: var(--muted);\n      font-size: 0.9rem;\n    }\n    .badge {\n      display: inline-block;\n      padding: 3px 8px;\n      border-radius: 999px;\n      border: 1px solid #243041;\n      background: #0d1424;\n      margin-left: 6px;\n      font-size: 0.85rem;\n      color: #93c5fd;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <header>\n      <h1>Insertion Sort <span class=\"badge\">O(n²) average/worst • O(1) extra space • Stable</span></h1>\n    </header>\n\n    <p class=\"muted\">Enter a list of numbers and see how insertion sort builds a sorted array by inserting each element into its correct position.</p>\n\n    <label for=\"numbers\">Numbers (comma or space separated)</label>\n    <div class=\"row\">\n      <input id=\"numbers\" type=\"text\" placeholder=\"e.g. 8, 5, 2, 9, 3, 6\" value=\"8, 5, 2, 9, 3, 6\">\n      <button id=\"btnSort\" class=\"primary\">Sort</button>\n      <button id=\"btnSample\">Random</button>\n      <button id=\"btnClear\" class=\"accent\">Clear</button>\n    </div>\n    <div id=\"error\" class=\"error\"></div>\n\n    <div class=\"grid\">\n      <div class=\"card\">\n        <h3>Original array</h3>\n        <div id=\"original\" class=\"array\"></div>\n      </div>\n      <div class=\"card\">\n        <h3>Sorted array</h3>\n        <div id=\"sorted\" class=\"array\"></div>\n      </div>\n    </div>\n\n    <details id=\"detailsSteps\">\n      <summary>Show insertion steps</summary>\n      <div id=\"steps\" class=\"steps\"></div>\n    </details>\n\n    <footer>\n      Tip: Insertion sort is efficient for small or nearly-sorted arrays.\n    </footer>\n  </div>\n\n  <script>\n    const elInput = document.getElementById('numbers');\n    const elError = document.getElementById('error');\n    const elOriginal = document.getElementById('original');\n    const elSorted = document.getElementById('sorted');\n    const elSteps = document.getElementById('steps');\n    const elDetails = document.getElementById('detailsSteps');\n    document.getElementById('btnSort').addEventListener('click', handleSort);\n    document.getElementById('btnClear').addEventListener('click', handleClear);\n    document.getElementById('btnSample').addEventListener('click', handleRandom);\n\n    function parseNumbers(text) {\n      const tokens = text.trim().split(/[\\s,]+/).filter(Boolean);\n      if (tokens.length === 0) return { error: 'Please enter at least one number.' };\n      const nums = [];\n      for (const t of tokens) {\n        const n = Number(t);\n        if (!Number.isFinite(n)) {\n          return { error: `“${t}” is not a valid number.` };\n        }\n        nums.push(n);\n      }\n      return { nums };\n    }\n\n    function renderArray(container, arr) {\n      container.innerHTML = '';\n      arr.forEach(n => {\n        const chip = document.createElement('span');\n        chip.className = 'chip';\n        chip.textContent = formatNumber(n);\n        container.appendChild(chip);\n      });\n      if (arr.length === 0) {\n        const empty = document.createElement('span');\n        empty.className = 'muted';\n        empty.textContent = '—';\n        container.appendChild(empty);\n      }\n    }\n\n    function formatNumber(n) {\n      return Math.abs(n) < 1e-6 ? '0' : (Number.isInteger(n) ? String(n) : n.toFixed(3).replace(/\\.?0+$/,''));\n    }\n\n    function insertionSortWithSteps(arr) {\n      const a = arr.slice();\n      const steps = [];\n      for (let i = 1; i < a.length; i++) {\n        const key = a[i];\n        let j = i - 1;\n        steps.push({ action: 'start', i, j, key, array: a.slice() });\n        while (j >= 0 && a[j] > key) {\n          a[j + 1] = a[j];\n          j--;\n          steps.push({ action: 'shift', i, j, key, array: a.slice() });\n        }\n        a[j + 1] = key;\n        steps.push({ action: 'insert', i, j, key, array: a.slice() });\n      }\n      return { sorted: a, steps };\n    }\n\n    function renderSteps(steps) {\n      elSteps.innerHTML = '';\n      steps.forEach((s, idx) => {\n        const div = document.createElement('div');\n        div.className = 'step';\n        const meta = document.createElement('div');\n        meta.className = 'meta';\n        const actionText =\n          s.action === 'start'  ? `Start pass i=${s.i} (key=${formatNumber(s.key)})`\n        : s.action === 'shift'  ? `Shift: moved element right (j=${s.j + 1} ← ${s.j + 2})`\n        : s.action === 'insert' ? `Insert key at position ${s.j + 1}`\n        : 'Step';\n        meta.textContent = `${idx + 1}. ${actionText}`;\n        const arr = document.createElement('div');\n        arr.className = 'inline-array';\n        arr.textContent = `[ ${s.array.map(formatNumber).join(', ')} ]`;\n        div.appendChild(meta);\n        div.appendChild(arr);\n        elSteps.appendChild(div);\n      });\n    }\n\n    function handleSort() {\n      clearError();\n      const { nums, error } = parseNumbers(elInput.value);\n      if (error) return showError(error);\n      renderArray(elOriginal, nums);\n      const { sorted, steps } = insertionSortWithSteps(nums);\n      renderArray(elSorted, sorted);\n      renderSteps(steps);\n      if (steps.length > 0) elDetails.open = true;\n    }\n\n    function handleClear() {\n      elInput.value = '';\n      clearError();\n      renderArray(elOriginal, []);\n      renderArray(elSorted, []);\n      elSteps.innerHTML = '';\n      elDetails.open = false;\n      elInput.focus();\n    }\n\n    function handleRandom() {\n      const len = Math.floor(Math.random() * 6) + 6; // 6..11 items\n      const arr = Array.from({ length: len }, () => Math.floor(Math.random() * 99) + 1);\n      elInput.value = arr.join(', ');\n      clearError();\n      renderArray(elOriginal, []);\n      renderArray(elSorted, []);\n      elSteps.innerHTML = '';\n      elDetails.open = false;\n    }\n\n    function showError(msg) { elError.textContent = msg; }\n    function clearError() { elError.textContent = ''; }\n\n    // Initial render\n    (function init() {\n      const { nums, error } = parseNumbers(elInput.value);\n      if (!error) {\n        renderArray(elOriginal, nums);\n        const { sorted, steps } = insertionSortWithSteps(nums);\n        renderArray(elSorted, sorted);\n        renderSteps(steps);\n      }\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Insertion Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "89b6e450-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:06.901Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Priority Queue",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Priority Queue Demo</title>\n  <style>\n    :root {\n      --bg: #f7f7fb;\n      --fg: #222;\n      --muted: #666;\n      --accent: #2a7ade;\n      --accent-2: #00a37a;\n      --border: #ddd;\n      --danger: #d64545;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      background: var(--bg);\n      color: var(--fg);\n      line-height: 1.5;\n      padding: 24px;\n    }\n    main {\n      max-width: 820px;\n      margin: 0 auto;\n      background: white;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 20px;\n      box-shadow: 0 1px 2px rgba(0,0,0,0.06);\n    }\n    h1 {\n      margin: 0 0 8px;\n      font-size: 28px;\n    }\n    p.description {\n      margin: 0 0 16px;\n      color: var(--muted);\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr 120px 160px;\n      gap: 10px;\n      align-items: end;\n      margin: 16px 0;\n    }\n    label {\n      font-size: 13px;\n      color: var(--muted);\n      display: block;\n      margin-bottom: 6px;\n    }\n    input, select, button {\n      font: inherit;\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      background: #fff;\n    }\n    input:focus, select:focus {\n      outline: none;\n      border-color: var(--accent);\n      box-shadow: 0 0 0 3px rgba(42, 122, 222, 0.15);\n    }\n    button {\n      cursor: pointer;\n      border: 1px solid var(--accent);\n      color: white;\n      background: var(--accent);\n    }\n    button.secondary {\n      border-color: #999;\n      background: #f3f3f7;\n      color: #222;\n    }\n    button.danger {\n      border-color: var(--danger);\n      background: var(--danger);\n      color: white;\n    }\n    .row {\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr;\n      gap: 10px;\n      margin-bottom: 12px;\n    }\n    .status {\n      font-size: 13px;\n      color: var(--muted);\n      min-height: 18px;\n    }\n    .queue {\n      margin-top: 10px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      overflow: hidden;\n    }\n    .queue-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      background: #fafafa;\n      padding: 10px 12px;\n      border-bottom: 1px solid var(--border);\n      font-size: 14px;\n    }\n    .list {\n      list-style: none;\n      margin: 0;\n      padding: 0;\n    }\n    .item {\n      display: grid;\n      grid-template-columns: 1fr 120px 90px;\n      gap: 10px;\n      align-items: center;\n      padding: 10px 12px;\n      border-bottom: 1px solid var(--border);\n    }\n    .item:last-child { border-bottom: none; }\n    .priority {\n      display: inline-block;\n      padding: 2px 8px;\n      border-radius: 999px;\n      background: #eef5ff;\n      color: #0b5bd3;\n      font-weight: 600;\n      font-size: 12px;\n      text-align: center;\n    }\n    .empty {\n      padding: 16px;\n      text-align: center;\n      color: var(--muted);\n    }\n    .actions {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      margin: 12px 0 0;\n    }\n    .small {\n      padding: 8px 10px;\n      font-size: 14px;\n      border-radius: 6px;\n    }\n    .footer {\n      margin-top: 18px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .hint {\n      font-size: 12px;\n      color: var(--muted);\n      margin-top: 4px;\n    }\n    .badge {\n      font-size: 12px;\n      background: #f0faf7;\n      color: var(--accent-2);\n      border: 1px solid #cde8de;\n      border-radius: 999px;\n      padding: 2px 8px;\n    }\n  </style>\n</head>\n<body>\n  <main>\n    <h1>Priority Queue</h1>\n    <p class=\"description\">\n      A priority queue stores items with a priority and always removes the item with the “highest” priority first.\n      Use the form below to add items and experiment with min-heap or max-heap ordering.\n    </p>\n\n    <div class=\"row\">\n      <div>\n        <label for=\"heapType\">Ordering</label>\n        <select id=\"heapType\" aria-label=\"Priority ordering\">\n          <option value=\"max\">High numbers first (max-heap)</option>\n          <option value=\"min\">Low numbers first (min-heap)</option>\n        </select>\n        <div class=\"hint\">Change how priorities are compared.</div>\n      </div>\n      <div>\n        <label for=\"valueInput\">Item</label>\n        <input id=\"valueInput\" placeholder=\"e.g., Print job A\" />\n      </div>\n      <div>\n        <label for=\"priorityInput\">Priority (number)</label>\n        <input id=\"priorityInput\" type=\"number\" step=\"1\" inputmode=\"numeric\" placeholder=\"e.g., 5\" />\n      </div>\n    </div>\n\n    <div class=\"controls\">\n      <div>\n        <button id=\"addBtn\">Add to queue</button>\n      </div>\n      <div>\n        <button id=\"peekBtn\" class=\"secondary\">Peek</button>\n      </div>\n      <div>\n        <button id=\"popBtn\" class=\"secondary\">Pop highest priority</button>\n      </div>\n    </div>\n\n    <div class=\"status\" id=\"status\" aria-live=\"polite\"></div>\n\n    <section class=\"queue\" aria-label=\"Current priority queue\">\n      <div class=\"queue-header\">\n        <div>\n          Queue (<span id=\"size\">0</span> items)\n        </div>\n        <div class=\"badge\" id=\"modeBadge\">Max-heap</div>\n      </div>\n      <ul class=\"list\" id=\"list\"></ul>\n      <div class=\"actions\" style=\"padding: 10px 12px;\">\n        <button id=\"sampleBtn\" class=\"small secondary\">Add sample items</button>\n        <button id=\"shuffleBtn\" class=\"small secondary\">Randomize priorities</button>\n        <button id=\"clearBtn\" class=\"small danger\">Clear queue</button>\n      </div>\n    </section>\n\n    <div class=\"footer\">\n      Tip: In a max-heap, larger numbers have higher priority. In a min-heap, smaller numbers come out first.\n    </div>\n  </main>\n\n  <script>\n    // Simple array-backed priority queue (stable by insertion index)\n    class PriorityQueue {\n      constructor(isMax = true) {\n        this.isMax = isMax;\n        this.items = [];\n        this._counter = 0; // for stability\n      }\n      setMode(isMax) {\n        this.isMax = isMax;\n        this._resort();\n      }\n      _compare(a, b) {\n        if (this.isMax) {\n          if (b.priority !== a.priority) return b.priority - a.priority;\n        } else {\n          if (a.priority !== b.priority) return a.priority - b.priority;\n        }\n        // Stable: earlier inserted comes first when priorities tie\n        return a.index - b.index;\n      }\n      _resort() {\n        this.items.sort((a, b) => this._compare(a, b));\n      }\n      enqueue(value, priority) {\n        this.items.push({ value, priority, index: this._counter++ });\n        this._resort();\n      }\n      dequeue() {\n        return this.items.shift() || null;\n      }\n      peek() {\n        return this.items[0] || null;\n      }\n      size() {\n        return this.items.length;\n      }\n      clear() {\n        this.items = [];\n      }\n    }\n\n    const pq = new PriorityQueue(true);\n    const els = {\n      heapType: document.getElementById('heapType'),\n      value: document.getElementById('valueInput'),\n      priority: document.getElementById('priorityInput'),\n      addBtn: document.getElementById('addBtn'),\n      peekBtn: document.getElementById('peekBtn'),\n      popBtn: document.getElementById('popBtn'),\n      clearBtn: document.getElementById('clearBtn'),\n      sampleBtn: document.getElementById('sampleBtn'),\n      shuffleBtn: document.getElementById('shuffleBtn'),\n      list: document.getElementById('list'),\n      status: document.getElementById('status'),\n      size: document.getElementById('size'),\n      modeBadge: document.getElementById('modeBadge'),\n    };\n\n    function updateModeBadge() {\n      els.modeBadge.textContent = pq.isMax ? 'Max-heap' : 'Min-heap';\n    }\n\n    function render() {\n      els.size.textContent = pq.size();\n      els.list.innerHTML = '';\n      if (pq.size() === 0) {\n        const empty = document.createElement('div');\n        empty.className = 'empty';\n        empty.textContent = 'Queue is empty. Add items to get started.';\n        els.list.appendChild(empty);\n        return;\n      }\n      pq.items.forEach((item, idx) => {\n        const li = document.createElement('li');\n        li.className = 'item';\n        const value = document.createElement('div');\n        value.textContent = item.value;\n        const prio = document.createElement('div');\n        prio.innerHTML = 'Priority: <span class=\"priority\">' + item.priority + '</span>';\n        const remove = document.createElement('div');\n        const btn = document.createElement('button');\n        btn.className = 'small danger';\n        btn.textContent = 'Remove';\n        btn.addEventListener('click', () => {\n          pq.items.splice(idx, 1);\n          render();\n          announce('Removed item \"' + item.value + '\"');\n        });\n        remove.appendChild(btn);\n        li.appendChild(value);\n        li.appendChild(prio);\n        li.appendChild(remove);\n        els.list.appendChild(li);\n      });\n    }\n\n    function announce(msg) {\n      els.status.textContent = msg;\n    }\n\n    function addItem() {\n      const value = (els.value.value || '').trim();\n      const prioRaw = els.priority.value;\n      const priority = Number(prioRaw);\n      if (!value) {\n        announce('Please enter an item name.');\n        els.value.focus();\n        return;\n      }\n      if (!Number.isFinite(priority)) {\n        announce('Please enter a valid numeric priority.');\n        els.priority.focus();\n        return;\n      }\n      pq.enqueue(value, priority);\n      render();\n      announce('Added \"' + value + '\" with priority ' + priority + '.');\n      els.value.value = '';\n      els.priority.value = '';\n      els.value.focus();\n    }\n\n    function peekItem() {\n      const top = pq.peek();\n      if (!top) {\n        announce('Queue is empty.');\n        return;\n      }\n      announce('Peek: \"' + top.value + '\" (priority ' + top.priority + ').');\n    }\n\n    function popItem() {\n      const removed = pq.dequeue();\n      if (!removed) {\n        announce('Queue is empty.');\n        return;\n      }\n      render();\n      announce('Popped \"' + removed.value + '\" (priority ' + removed.priority + ').');\n    }\n\n    function clearQueue() {\n      pq.clear();\n      render();\n      announce('Queue cleared.');\n    }\n\n    function addSamples() {\n      const samples = [\n        { value: 'Print job A', priority: 3 },\n        { value: 'System alert', priority: 9 },\n        { value: 'Email sync', priority: 5 },\n        { value: 'Backup task', priority: 2 },\n        { value: 'User request', priority: 7 },\n      ];\n      samples.forEach(s => pq.enqueue(s.value, s.priority));\n      render();\n      announce('Added sample items.');\n    }\n\n    function shufflePriorities() {\n      if (pq.size() === 0) {\n        announce('Queue is empty.');\n        return;\n      }\n      pq.items.forEach(item => {\n        item.priority = Math.floor(Math.random() * 10); // 0..9\n      });\n      pq._resort();\n      render();\n      announce('Randomized priorities.');\n    }\n\n    // Events\n    els.addBtn.addEventListener('click', addItem);\n    els.peekBtn.addEventListener('click', peekItem);\n    els.popBtn.addEventListener('click', popItem);\n    els.clearBtn.addEventListener('click', clearQueue);\n    els.sampleBtn.addEventListener('click', addSamples);\n    els.shuffleBtn.addEventListener('click', shufflePriorities);\n\n    els.heapType.addEventListener('change', (e) => {\n      const mode = e.target.value;\n      const isMax = mode === 'max';\n      pq.setMode(isMax);\n      updateModeBadge();\n      render();\n      announce((isMax ? 'Max' : 'Min') + '-heap ordering selected.');\n    });\n\n    // Submit on Enter in priority field\n    [els.value, els.priority].forEach(input => {\n      input.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          addItem();\n        }\n      });\n    });\n\n    // Initial render\n    updateModeBadge();\n    render();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Priority Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8a068af0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:07.423Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Union-Find (Disjoint Set)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Union-Find (Disjoint Set)</title>\n  <style>\n    :root {\n      --bg: #f7f7fb;\n      --panel: #ffffff;\n      --border: #e2e6ea;\n      --text: #1f2937;\n      --muted: #56627a;\n      --primary: #2563eb;\n      --primary-weak: #e5efff;\n      --chip: #eef2ff;\n      --ok: #16a34a;\n      --warn: #dc2626;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      padding: 24px;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      line-height: 1.5;\n    }\n    .container {\n      max-width: 960px;\n      margin: 0 auto;\n    }\n    h1 { margin: 0 0 8px; font-size: 28px; }\n    p { margin: 0 0 12px; color: var(--muted); }\n    .panel {\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 16px;\n      margin: 16px 0;\n    }\n    .controls { display: grid; gap: 12px; grid-template-columns: repeat(12, 1fr); align-items: end; }\n    .controls .field { grid-column: span 3; }\n    .controls .wide { grid-column: span 6; }\n    label { display: block; font-size: 13px; color: var(--muted); margin-bottom: 6px; }\n    input[type=\"number\"] {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      background: #fff;\n      font-size: 14px;\n    }\n    button {\n      appearance: none;\n      border: none;\n      background: var(--primary);\n      color: #fff;\n      padding: 10px 14px;\n      border-radius: 8px;\n      font-size: 14px;\n      cursor: pointer;\n    }\n    button.secondary { background: #475569; }\n    button.ghost {\n      background: transparent;\n      color: var(--primary);\n      border: 1px solid var(--primary);\n    }\n    button:disabled { opacity: 0.5; cursor: not-allowed; }\n    .sets { display: flex; flex-wrap: wrap; gap: 8px; }\n    .chip {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 8px 10px;\n      border-radius: 999px;\n      background: var(--chip);\n      border: 1px solid var(--border);\n      font-size: 13px;\n    }\n    .chip .root {\n      background: var(--primary-weak);\n      color: var(--primary);\n      padding: 2px 8px;\n      border-radius: 999px;\n      border: 1px solid #cfe0ff;\n      font-weight: 600;\n    }\n    .array {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n      gap: 8px;\n    }\n    .cell {\n      background: #fff;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 8px;\n      font-size: 13px;\n    }\n    .cell .idx { color: var(--muted); font-size: 12px; }\n    .badge {\n      display: inline-block;\n      padding: 2px 6px;\n      background: #f3f4f6;\n      border: 1px solid var(--border);\n      border-radius: 6px;\n      font-size: 12px;\n      margin-top: 4px;\n      color: #374151;\n    }\n    .log {\n      background: #0b1020;\n      color: #cbd5e1;\n      border-radius: 8px;\n      padding: 10px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 13px;\n      max-height: 180px;\n      overflow: auto;\n      border: 1px solid #0f172a;\n    }\n    .log .ok { color: #86efac; }\n    .log .warn { color: #fca5a5; }\n    pre {\n      background: #0b1020;\n      color: #e5e7eb;\n      border-radius: 8px;\n      padding: 12px;\n      overflow: auto;\n      border: 1px solid #0f172a;\n    }\n    code { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace; }\n    .footer { color: var(--muted); font-size: 12px; margin-top: 8px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Union-Find (Disjoint Set)</h1>\n    <p>\n      Union-Find efficiently tracks a collection of disjoint sets, supporting two core operations:\n      union(a, b) to merge sets, and find(x) to return a representative element (root) of x's set.\n      With path compression and union by rank/size, operations run in near-constant amortized time.\n    </p>\n\n    <div class=\"panel\">\n      <div class=\"controls\">\n        <div class=\"field wide\">\n          <label for=\"nInput\">Number of elements (0..n-1)</label>\n          <input id=\"nInput\" type=\"number\" min=\"1\" max=\"5000\" value=\"10\" />\n        </div>\n        <div class=\"field\">\n          <button id=\"initBtn\">Initialize</button>\n        </div>\n        <div class=\"field\">\n          <button id=\"resetBtn\" class=\"ghost\">Reset</button>\n        </div>\n\n        <div class=\"field\">\n          <label for=\"unionA\">Union: a</label>\n          <input id=\"unionA\" type=\"number\" min=\"0\" value=\"1\" />\n        </div>\n        <div class=\"field\">\n          <label for=\"unionB\">Union: b</label>\n          <input id=\"unionB\" type=\"number\" min=\"0\" value=\"2\" />\n        </div>\n        <div class=\"field\">\n          <button id=\"unionBtn\">Union(a, b)</button>\n        </div>\n\n        <div class=\"field\">\n          <label for=\"connA\">Connected?: a</label>\n          <input id=\"connA\" type=\"number\" min=\"0\" value=\"1\" />\n        </div>\n        <div class=\"field\">\n          <label for=\"connB\">Connected?: b</label>\n          <input id=\"connB\" type=\"number\" min=\"0\" value=\"3\" />\n        </div>\n        <div class=\"field\">\n          <button id=\"connBtn\" class=\"secondary\">Connected(a, b)</button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"panel\">\n      <h3 style=\"margin-top:0\">Current Sets</h3>\n      <div id=\"setsView\" class=\"sets\"></div>\n      <div class=\"footer\">Each chip shows a set with its root and members.</div>\n    </div>\n\n    <div class=\"panel\">\n      <h3 style=\"margin-top:0\">Internal State</h3>\n      <p class=\"footer\">Parent and rank arrays after path compression.</p>\n      <div id=\"arraysView\" class=\"array\"></div>\n    </div>\n\n    <div class=\"panel\">\n      <h3 style=\"margin-top:0\">Console</h3>\n      <div id=\"log\" class=\"log\"></div>\n    </div>\n\n    <div class=\"panel\">\n      <h3 style=\"margin-top:0\">Union-Find (JS) Implementation</h3>\n      <pre><code>class UnionFind {\n  constructor(n) {\n    this.n = n;\n    this.parent = Array.from({ length: n }, (_, i) =&gt; i);\n    this.rank = Array(n).fill(0);\n    this.count = n; // number of sets\n  }\n  find(x) {\n    if (this.parent[x] !== x) {\n      this.parent[x] = this.find(this.parent[x]); // path compression\n    }\n    return this.parent[x];\n  }\n  union(a, b) {\n    let ra = this.find(a), rb = this.find(b);\n    if (ra === rb) return false; // already same set\n    // union by rank\n    if (this.rank[ra] &lt; this.rank[rb]) {\n      this.parent[ra] = rb;\n    } else if (this.rank[ra] &gt; this.rank[rb]) {\n      this.parent[rb] = ra;\n    } else {\n      this.parent[rb] = ra;\n      this.rank[ra]++;\n    }\n    this.count--;\n    return true;\n  }\n  connected(a, b) { return this.find(a) === this.find(b); }\n  sets() {\n    const groups = new Map();\n    for (let i = 0; i &lt; this.n; i++) {\n      const r = this.find(i);\n      if (!groups.has(r)) groups.set(r, []);\n      groups.get(r).push(i);\n    }\n    return [...groups.entries()].map(([root, members]) =&gt; ({ root, members }));\n  }\n}\n</code></pre>\n      <div class=\"footer\">Amortized time per operation is near-constant (inverse Ackermann function).</div>\n    </div>\n  </div>\n\n  <script>\n    class UnionFind {\n      constructor(n) {\n        this.n = n;\n        this.parent = Array.from({ length: n }, (_, i) => i);\n        this.rank = Array(n).fill(0);\n        this.count = n;\n      }\n      find(x) {\n        if (this.parent[x] !== x) {\n          this.parent[x] = this.find(this.parent[x]);\n        }\n        return this.parent[x];\n      }\n      union(a, b) {\n        const na = this._validIndex(a);\n        const nb = this._validIndex(b);\n        if (!na || !nb) return null;\n        let ra = this.find(a), rb = this.find(b);\n        if (ra === rb) return false;\n        if (this.rank[ra] < this.rank[rb]) {\n          this.parent[ra] = rb;\n        } else if (this.rank[ra] > this.rank[rb]) {\n          this.parent[rb] = ra;\n        } else {\n          this.parent[rb] = ra;\n          this.rank[ra]++;\n        }\n        this.count--;\n        return true;\n      }\n      connected(a, b) {\n        const na = this._validIndex(a);\n        const nb = this._validIndex(b);\n        if (!na || !nb) return null;\n        return this.find(a) === this.find(b);\n      }\n      sets() {\n        const groups = new Map();\n        for (let i = 0; i < this.n; i++) {\n          const r = this.find(i);\n          if (!groups.has(r)) groups.set(r, []);\n          groups.get(r).push(i);\n        }\n        return [...groups.entries()].map(([root, members]) => ({ root, members }));\n      }\n      _validIndex(x) { return Number.isInteger(x) && x >= 0 && x < this.n; }\n    }\n\n    const els = {\n      nInput: document.getElementById('nInput'),\n      initBtn: document.getElementById('initBtn'),\n      resetBtn: document.getElementById('resetBtn'),\n      unionA: document.getElementById('unionA'),\n      unionB: document.getElementById('unionB'),\n      unionBtn: document.getElementById('unionBtn'),\n      connA: document.getElementById('connA'),\n      connB: document.getElementById('connB'),\n      connBtn: document.getElementById('connBtn'),\n      setsView: document.getElementById('setsView'),\n      arraysView: document.getElementById('arraysView'),\n      log: document.getElementById('log'),\n    };\n\n    let uf = null;\n\n    function initUF(n) {\n      const size = clampInt(n, 1, 5000) ?? 10;\n      uf = new UnionFind(size);\n      log(`Initialized UnionFind with n=${size}`);\n      render();\n      // update max for index inputs\n      [els.unionA, els.unionB, els.connA, els.connB].forEach(inp => {\n        inp.max = String(size - 1);\n        inp.value = clampInt(parseInt(inp.value, 10), 0, size - 1) ?? 0;\n      });\n    }\n\n    function clampInt(x, min, max) {\n      if (!Number.isFinite(x)) return null;\n      x = Math.floor(x);\n      if (x < min || x > max) return null;\n      return x;\n    }\n\n    function render() {\n      if (!uf) return;\n      // Sets\n      els.setsView.innerHTML = '';\n      const sets = uf.sets();\n      if (sets.length === 0) {\n        els.setsView.textContent = 'No elements.';\n      } else {\n        sets.sort((a, b) => a.root - b.root).forEach(set => {\n          const chip = document.createElement('div');\n          chip.className = 'chip';\n          const root = document.createElement('span');\n          root.className = 'root';\n          root.textContent = `root ${set.root}`;\n          const members = document.createElement('span');\n          members.textContent = `members: ${set.members.join(', ')}`;\n          chip.append(root, members);\n          els.setsView.appendChild(chip);\n        });\n      }\n      // Arrays\n      els.arraysView.innerHTML = '';\n      for (let i = 0; i < uf.n; i++) {\n        const cell = document.createElement('div');\n        cell.className = 'cell';\n        const idx = document.createElement('div');\n        idx.className = 'idx';\n        idx.textContent = `index ${i}`;\n        const parent = document.createElement('div');\n        parent.textContent = `parent: ${uf.parent[i]}`;\n        const badge = document.createElement('div');\n        badge.className = 'badge';\n        badge.textContent = `rank: ${uf.rank[i]}`;\n        cell.append(idx, parent, badge);\n        els.arraysView.appendChild(cell);\n      }\n    }\n\n    function log(message, kind = 'info') {\n      const line = document.createElement('div');\n      if (kind === 'ok') line.className = 'ok';\n      if (kind === 'warn') line.className = 'warn';\n      const ts = new Date().toLocaleTimeString();\n      line.textContent = `[${ts}] ${message}`;\n      els.log.prepend(line);\n    }\n\n    // Event handlers\n    els.initBtn.addEventListener('click', () => {\n      const n = parseInt(els.nInput.value, 10);\n      if (!Number.isFinite(n) || n < 1 || n > 5000) {\n        log(`Invalid n. Please choose 1..5000.`, 'warn');\n        return;\n      }\n      initUF(n);\n    });\n\n    els.resetBtn.addEventListener('click', () => {\n      if (!uf) return;\n      initUF(uf.n);\n      log('Reset to all singleton sets.', 'ok');\n    });\n\n    els.unionBtn.addEventListener('click', () => {\n      if (!uf) return;\n      const a = parseInt(els.unionA.value, 10);\n      const b = parseInt(els.unionB.value, 10);\n      if (!uf._validIndex(a) || !uf._validIndex(b)) {\n        log(`Union indices must be in 0..${uf.n - 1}.`, 'warn');\n        return;\n      }\n      const result = uf.union(a, b);\n      if (result === null) {\n        log(`Union failed: invalid indices.`, 'warn');\n      } else if (result === false) {\n        log(`Union(${a}, ${b}) no-op: already in the same set.`);\n      } else {\n        log(`Union(${a}, ${b}) merged sets.`, 'ok');\n      }\n      render();\n    });\n\n    els.connBtn.addEventListener('click', () => {\n      if (!uf) return;\n      const a = parseInt(els.connA.value, 10);\n      const b = parseInt(els.connB.value, 10);\n      if (!uf._validIndex(a) || !uf._validIndex(b)) {\n        log(`Connected indices must be in 0..${uf.n - 1}.`, 'warn');\n        return;\n      }\n      const c = uf.connected(a, b);\n      log(`Connected(${a}, ${b}) -> ${c ? 'true' : 'false'}`, c ? 'ok' : 'info');\n      render();\n    });\n\n    // Initialize on load\n    initUF(parseInt(els.nInput.value, 10));\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Union-Find (Disjoint Set)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8d137cd0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:12.541Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Selection Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Selection Sort</title>\n  <style>\n    :root {\n      --bg: #0f172a;\n      --panel: #111827;\n      --text: #e5e7eb;\n      --muted: #9ca3af;\n      --accent: #60a5fa;\n      --bar: #69b3a2;\n      --scan: #03a9f4;\n      --current: #ff9800;\n      --min: #e91e63;\n      --sorted: #22c55e;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      padding: 24px;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      background: linear-gradient(180deg, #0b1220, #0f172a);\n      color: var(--text);\n      min-height: 100vh;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .app {\n      width: min(1000px, 96vw);\n      background: linear-gradient(180deg, #0f172a, #0b1220);\n      border: 1px solid rgba(255,255,255,0.06);\n      border-radius: 14px;\n      padding: 20px;\n      box-shadow: 0 20px 60px rgba(0,0,0,0.45), inset 0 1px 0 rgba(255,255,255,0.04);\n    }\n    header {\n      display: flex;\n      align-items: baseline;\n      justify-content: space-between;\n      gap: 12px;\n      margin-bottom: 12px;\n    }\n    h1 {\n      font-size: 22px;\n      margin: 0;\n      letter-spacing: .2px;\n    }\n    .desc {\n      font-size: 14px;\n      color: var(--muted);\n      margin: 0 0 16px 0;\n      line-height: 1.5;\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr auto auto auto;\n      gap: 10px;\n      align-items: center;\n      margin-bottom: 14px;\n    }\n    .inputWrap {\n      display: flex;\n      gap: 8px;\n      align-items: center;\n    }\n    label {\n      font-size: 12px;\n      color: var(--muted);\n      white-space: nowrap;\n    }\n    input[type=\"text\"] {\n      width: 100%;\n      padding: 10px 12px;\n      border-radius: 10px;\n      border: 1px solid rgba(255,255,255,0.08);\n      background: rgba(17,24,39,0.7);\n      color: var(--text);\n      outline: none;\n    }\n    input[type=\"range\"] {\n      width: 160px;\n      accent-color: var(--accent);\n    }\n    .btn {\n      padding: 10px 14px;\n      border-radius: 10px;\n      border: 1px solid rgba(255,255,255,0.08);\n      background: rgba(17,24,39,0.7);\n      color: var(--text);\n      cursor: pointer;\n      transition: transform .05s ease, background .2s ease;\n      user-select: none;\n    }\n    .btn:hover { background: rgba(30,41,59,0.75); }\n    .btn:active { transform: translateY(1px); }\n    .btn[disabled] {\n      opacity: .6;\n      cursor: not-allowed;\n      transform: none;\n    }\n    .viz {\n      background: radial-gradient(1200px 300px at 50% 0%, rgba(96,165,250,0.08), transparent 60%),\n                  linear-gradient(180deg, rgba(255,255,255,0.02), transparent 20%),\n                  rgba(15,23,42,0.7);\n      border: 1px solid rgba(255,255,255,0.06);\n      border-radius: 12px;\n      padding: 10px;\n      height: 320px;\n      display: flex;\n      align-items: flex-end;\n      justify-content: stretch;\n      overflow: hidden;\n    }\n    .bars {\n      display: flex;\n      align-items: flex-end;\n      gap: 6px;\n      width: 100%;\n      height: 100%;\n      padding: 8px 6px;\n    }\n    .bar {\n      flex: 1 1 0;\n      min-width: 14px;\n      background: linear-gradient(180deg, rgba(255,255,255,0.12), rgba(255,255,255,0.02)) , var(--bar);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-bottom: none;\n      border-radius: 8px 8px 0 0;\n      position: relative;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      transition: height .25s ease, background .15s ease, transform .1s ease, box-shadow .2s ease;\n      box-shadow: 0 6px 18px rgba(0,0,0,0.35);\n    }\n    .bar.current  { background: linear-gradient(180deg, rgba(255,255,255,0.16), rgba(255,255,255,0.04)), var(--current); }\n    .bar.scanning { background: linear-gradient(180deg, rgba(255,255,255,0.16), rgba(255,255,255,0.04)), var(--scan); }\n    .bar.min      { background: linear-gradient(180deg, rgba(255,255,255,0.16), rgba(255,255,255,0.04)), var(--min); }\n    .bar.sorted   { background: linear-gradient(180deg, rgba(255,255,255,0.16), rgba(255,255,255,0.04)), var(--sorted); }\n    .bar span {\n      font-size: 12px;\n      color: #ffffff;\n      padding: 4px 6px 6px;\n      text-shadow: 0 1px 1px rgba(0,0,0,0.4);\n      pointer-events: none;\n      opacity: .9;\n    }\n    .status {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-top: 10px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .pill {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      border: 1px solid rgba(255,255,255,0.08);\n      background: rgba(17,24,39,0.55);\n      padding: 8px 10px;\n      border-radius: 10px;\n    }\n    .legend {\n      display: flex;\n      gap: 10px;\n      flex-wrap: wrap;\n    }\n    .key {\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n      font-size: 12px;\n    }\n    .dot {\n      width: 12px;\n      height: 12px;\n      border-radius: 3px;\n      border: 1px solid rgba(255,255,255,0.18);\n    }\n    .dot.current { background: var(--current); }\n    .dot.min { background: var(--min); }\n    .dot.scanning { background: var(--scan); }\n    .dot.sorted { background: var(--sorted); }\n    .footer-note {\n      margin-top: 12px;\n      font-size: 12px;\n      color: var(--muted);\n    }\n    @media (max-width: 720px) {\n      .controls {\n        grid-template-columns: 1fr 1fr 1fr;\n      }\n      .inputWrap {\n        grid-column: 1 / -1;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"app\">\n    <header>\n      <h1>Selection Sort</h1>\n      <div class=\"pill\" id=\"status\">Ready</div>\n    </header>\n\n    <p class=\"desc\">\n      Selection sort repeatedly selects the smallest remaining element and swaps it into its correct position.\n      It runs in O(n²) time and sorts in-place.\n    </p>\n\n    <div class=\"controls\">\n      <div class=\"inputWrap\">\n        <label for=\"arrayInput\">Array</label>\n        <input id=\"arrayInput\" type=\"text\" placeholder=\"e.g., 64, 25, 12, 22, 11\" />\n      </div>\n      <button class=\"btn\" id=\"randomBtn\" title=\"Generate a random array\">Randomize</button>\n      <button class=\"btn\" id=\"renderBtn\" title=\"Render the array from input\">Visualize</button>\n      <div class=\"inputWrap\" style=\"justify-content:flex-end;\">\n        <label for=\"speed\">Speed</label>\n        <input id=\"speed\" type=\"range\" min=\"40\" max=\"800\" step=\"10\" value=\"260\" />\n      </div>\n    </div>\n\n    <div class=\"viz\">\n      <div class=\"bars\" id=\"bars\"></div>\n    </div>\n\n    <div class=\"status\">\n      <div class=\"legend\">\n        <span class=\"key\"><span class=\"dot current\"></span> Current Index</span>\n        <span class=\"key\"><span class=\"dot min\"></span> Minimum Found</span>\n        <span class=\"key\"><span class=\"dot scanning\"></span> Scanning</span>\n        <span class=\"key\"><span class=\"dot sorted\"></span> Sorted</span>\n      </div>\n      <div>\n        <button class=\"btn\" id=\"sortBtn\">Sort</button>\n      </div>\n    </div>\n\n    <div class=\"footer-note\">\n      Tip: Enter comma-separated numbers above or click Randomize.\n    </div>\n  </div>\n\n  <script>\n    const barsEl = document.getElementById('bars');\n    const inputEl = document.getElementById('arrayInput');\n    const randomBtn = document.getElementById('randomBtn');\n    const renderBtn = document.getElementById('renderBtn');\n    const sortBtn = document.getElementById('sortBtn');\n    const speedEl = document.getElementById('speed');\n    const statusEl = document.getElementById('status');\n\n    let arr = [];\n    let sorting = false;\n\n    function setStatus(text) {\n      statusEl.textContent = text;\n    }\n\n    function getDelay() {\n      // Lower slider = faster feel; we can map directly for simplicity\n      return Number(speedEl.value);\n    }\n\n    function parseInput(value) {\n      const parts = value.split(',').map(s => s.trim()).filter(s => s.length > 0);\n      if (parts.length === 0) return [];\n      const nums = parts.map(n => Number(n));\n      if (nums.some(n => Number.isNaN(n) || !Number.isFinite(n))) {\n        throw new Error('Please enter valid numbers separated by commas.');\n      }\n      return nums;\n    }\n\n    function randomArray(len = 12, min = 5, max = 99) {\n      const a = Array.from({ length: len }, () => Math.floor(Math.random() * (max - min + 1)) + min);\n      return a;\n    }\n\n    function normalizeHeights(values) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const range = max - min || 1;\n      // Return heights between 40 and 280 px\n      return values.map(v => 40 + ((v - min) / range) * 240);\n    }\n\n    function render(highlight = {}, sortedSet = new Set()) {\n      barsEl.innerHTML = '';\n      if (arr.length === 0) return;\n\n      const heights = normalizeHeights(arr);\n      arr.forEach((val, idx) => {\n        const bar = document.createElement('div');\n        bar.className = 'bar';\n        bar.style.height = `${heights[idx]}px`;\n\n        if (idx === highlight.i) bar.classList.add('current');\n        if (idx === highlight.j) bar.classList.add('scanning');\n        if (idx === highlight.min) bar.classList.add('min');\n        if (sortedSet.has(idx)) bar.classList.add('sorted');\n\n        const label = document.createElement('span');\n        label.textContent = String(val);\n        bar.appendChild(label);\n        barsEl.appendChild(bar);\n      });\n    }\n\n    function setControls(disabled) {\n      [randomBtn, renderBtn, sortBtn, inputEl, speedEl].forEach(ctrl => {\n        ctrl.disabled = !!disabled;\n      });\n      // Allow speed change while sorting for convenience\n      speedEl.disabled = false;\n    }\n\n    function sleep(ms) {\n      return new Promise(res => setTimeout(res, ms));\n    }\n\n    async function selectionSort() {\n      if (sorting || arr.length === 0) return;\n      sorting = true;\n      setControls(true);\n      setStatus('Sorting...');\n\n      const n = arr.length;\n      const sortedSet = new Set();\n\n      for (let i = 0; i < n; i++) {\n        let minIdx = i;\n        render({ i, min: minIdx, j: undefined }, sortedSet);\n        await sleep(getDelay());\n\n        for (let j = i + 1; j < n; j++) {\n          render({ i, min: minIdx, j }, sortedSet);\n          await sleep(getDelay());\n\n          if (arr[j] < arr[minIdx]) {\n            minIdx = j;\n            render({ i, min: minIdx, j }, sortedSet);\n            await sleep(getDelay());\n          }\n        }\n\n        if (minIdx !== i) {\n          [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n          render({ i, min: minIdx }, sortedSet);\n          await sleep(getDelay());\n        }\n        sortedSet.add(i);\n        render({ }, sortedSet);\n        await sleep(getDelay() * 0.6);\n      }\n\n      setStatus('Done! Array is sorted.');\n      sorting = false;\n      setControls(false);\n    }\n\n    function visualizeFromInput() {\n      try {\n        const nums = parseInput(inputEl.value);\n        arr = nums.slice(0, 60); // clamp to avoid too many bars\n        setStatus(arr.length ? 'Array loaded.' : 'Enter numbers to visualize.');\n        render();\n      } catch (e) {\n        alert(e.message);\n      }\n    }\n\n    function init() {\n      arr = [64, 25, 12, 22, 11];\n      inputEl.value = arr.join(', ');\n      render();\n\n      randomBtn.addEventListener('click', () => {\n        if (sorting) return;\n        const len = Math.floor(Math.random() * 8) + 8; // 8..15\n        arr = randomArray(len, 5, 99);\n        inputEl.value = arr.join(', ');\n        setStatus('Random array generated.');\n        render();\n      });\n\n      renderBtn.addEventListener('click', () => {\n        if (sorting) return;\n        visualizeFromInput();\n      });\n\n      sortBtn.addEventListener('click', () => {\n        selectionSort();\n      });\n\n      inputEl.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' && !sorting) visualizeFromInput();\n      });\n    }\n\n    document.addEventListener('DOMContentLoaded', init);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Selection Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8dbed800-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:13.664Z",
    "status": "error",
    "question": "Divide and Conquer",
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "error": "400 The response was filtered due to the prompt triggering Azure OpenAI's content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: https://***.com/***?linkid=***"
  },
  {
    "id": "8e7fb700-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:14.929Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Binary Search Tree (BST)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Binary Search Tree (BST) - Simple Demo</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f172a;\n      --card: #111827;\n      --muted: #94a3b8;\n      --text: #e5e7eb;\n      --accent: #22c55e;\n      --warn: #f59e0b;\n      --danger: #ef4444;\n      --node: #1f2937;\n      --node-border: #334155;\n      --found: #16a34a;\n      --empty: #475569;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      background: linear-gradient(180deg, #0b1025, #0f172a 40%);\n      color: var(--text);\n      line-height: 1.5;\n      padding: 24px;\n    }\n    .container {\n      max-width: 1000px;\n      margin: 0 auto;\n    }\n    header h1 {\n      margin: 0 0 8px 0;\n      font-size: 28px;\n    }\n    header p {\n      margin: 0;\n      color: var(--muted);\n      font-size: 14px;\n    }\n    .card {\n      background: rgba(17,24,39,0.8);\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      padding: 16px;\n      margin-top: 16px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.3), inset 0 1px 0 rgba(255,255,255,0.02);\n      backdrop-filter: blur(4px);\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: repeat(12, 1fr);\n      gap: 8px;\n      align-items: end;\n    }\n    .controls .field {\n      grid-column: span 4;\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n    }\n    .controls .field.full { grid-column: span 12; }\n    label {\n      font-size: 12px;\n      color: var(--muted);\n    }\n    input[type=\"number\"], input[type=\"text\"] {\n      background: #0b1220;\n      color: var(--text);\n      border: 1px solid #1f2937;\n      border-radius: 8px;\n      padding: 10px 12px;\n      outline: none;\n    }\n    input::placeholder { color: #64748b; }\n    .buttons {\n      grid-column: span 12;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n      margin-top: 4px;\n    }\n    button {\n      background: #0b1220;\n      color: var(--text);\n      border: 1px solid #1f2937;\n      padding: 10px 14px;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: transform 0.05s ease, background 0.2s ease, border-color 0.2s ease;\n    }\n    button:hover { background: #0e1628; border-color: #263244; }\n    button:active { transform: translateY(1px); }\n    button.primary { background: #122038; border-color: #1f3b63; }\n    button.accent { background: rgba(34,197,94,0.1); border-color: rgba(34,197,94,0.35); color: #86efac; }\n    button.warn { background: rgba(245,158,11,0.07); border-color: rgba(245,158,11,0.35); color: #fbbf24; }\n    button.danger { background: rgba(239,68,68,0.08); border-color: rgba(239,68,68,0.4); color: #fecaca; }\n    .status {\n      margin-top: 8px;\n      font-size: 14px;\n      color: var(--muted);\n      min-height: 20px;\n    }\n    .status .ok { color: #86efac; }\n    .status .warn { color: #fde68a; }\n    .status .err { color: #fecaca; }\n\n    .layout {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n    @media (min-width: 900px) {\n      .layout {\n        grid-template-columns: 1.2fr 0.8fr;\n      }\n    }\n\n    .tree {\n      overflow: auto;\n      padding: 12px;\n      border: 1px dashed #1f2937;\n      border-radius: 10px;\n      min-height: 140px;\n      background: radial-gradient(1200px 300px at 10% 0%, rgba(255,255,255,0.03), transparent 60%);\n    }\n    /* Tree visuals using nested ULs */\n    .tree ul {\n      padding-top: 14px;\n      position: relative;\n      padding-left: 0;\n      display: inline-block;\n    }\n    .tree li {\n      list-style-type: none;\n      text-align: center;\n      position: relative;\n      padding: 14px 6px 0 6px;\n    }\n    .tree li::before, .tree li::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      right: 50%;\n      border-top: 1px solid #334155;\n      width: 50%;\n      height: 14px;\n    }\n    .tree li::after {\n      right: auto;\n      left: 50%;\n      border-left: none;\n      border-right: 1px solid #334155;\n    }\n    .tree li:only-child::after, .tree li:only-child::before {\n      display: none;\n    }\n    .tree li:only-child { padding-top: 0; }\n    .tree li:first-child::before, .tree li:last-child::after {\n      border: none;\n    }\n    .tree li:last-child::before {\n      border-right: 1px solid #334155;\n      border-radius: 0 5px 0 0;\n    }\n    .tree li:first-child::after {\n      border-radius: 5px 0 0 0;\n    }\n    .node {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      min-width: 36px;\n      height: 36px;\n      padding: 0 10px;\n      font-weight: 600;\n      border-radius: 999px;\n      background: linear-gradient(180deg, #0f172a, #0b1220);\n      border: 1px solid var(--node-border);\n      color: var(--text);\n      box-shadow: 0 1px 0 rgba(255,255,255,0.04), inset 0 0 14px rgba(0,0,0,0.35);\n    }\n    .node.found {\n      background: linear-gradient(180deg, rgba(22,163,74,0.25), rgba(22,163,74,0.12));\n      border-color: rgba(34,197,94,0.7);\n      color: #bbf7d0;\n      box-shadow: 0 0 16px rgba(34,197,94,0.25), inset 0 0 14px rgba(16,185,129,0.25);\n    }\n    .empty {\n      color: var(--empty);\n      font-style: italic;\n      padding: 2px 6px;\n    }\n    .children {\n      display: flex;\n      justify-content: center;\n      align-items: flex-start;\n      gap: 16px;\n      margin-top: 8px;\n    }\n    .label {\n      font-size: 11px;\n      color: var(--muted);\n      margin-bottom: 6px;\n      text-transform: uppercase;\n      letter-spacing: 0.04em;\n    }\n\n    .traversals {\n      display: grid;\n      gap: 10px;\n    }\n    .traversals .tray {\n      background: #0b1220;\n      border: 1px solid #1f2937;\n      border-radius: 10px;\n      padding: 10px 12px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 13px;\n      color: #cbd5e1;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n    .traversals h3 {\n      margin: 0 0 6px 0;\n      font-size: 14px;\n      color: #c7d2fe;\n    }\n    .legend {\n      font-size: 12px;\n      color: var(--muted);\n      margin-top: 8px;\n    }\n\n    .about {\n      color: var(--muted);\n      font-size: 14px;\n    }\n    .about ul { margin: 6px 0 0 18px; }\n    .about li { margin: 2px 0; }\n    .pill {\n      display: inline-block;\n      padding: 2px 8px;\n      border-radius: 999px;\n      background: #0b1220;\n      border: 1px solid #263244;\n      color: #a8c5ff;\n      font-size: 12px;\n      margin-right: 6px;\n    }\n    footer {\n      margin-top: 18px;\n      font-size: 12px;\n      color: var(--muted);\n      text-align: center;\n    }\n    .note {\n      font-size: 12px;\n      color: #9ab5ff;\n      margin-top: 8px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <header>\n      <h1>Binary Search Tree (BST)</h1>\n      <p>A simple, interactive BST you can insert into and search. See traversals and structure update live.</p>\n    </header>\n\n    <div class=\"card\">\n      <div class=\"controls\">\n        <div class=\"field\">\n          <label for=\"insertVal\">Insert value</label>\n          <input id=\"insertVal\" type=\"number\" placeholder=\"e.g., 8\" />\n        </div>\n        <div class=\"field\">\n          <label for=\"searchVal\">Search value</label>\n          <input id=\"searchVal\" type=\"number\" placeholder=\"e.g., 6\" />\n        </div>\n        <div class=\"buttons\">\n          <button class=\"primary\" id=\"btnInsert\">Insert</button>\n          <button id=\"btnSearch\">Search</button>\n          <button class=\"warn\" id=\"btnSample\">Add sample data</button>\n          <button class=\"danger\" id=\"btnClear\">Clear tree</button>\n        </div>\n      </div>\n      <div class=\"status\" id=\"status\"></div>\n    </div>\n\n    <div class=\"layout\">\n      <div class=\"card\">\n        <h2 style=\"margin:0 0 8px 0;\">Tree</h2>\n        <div id=\"tree\" class=\"tree\" aria-live=\"polite\"></div>\n        <div class=\"note\">Tip: Use \"Add sample data\" to see a non-empty tree quickly.</div>\n      </div>\n\n      <div class=\"card\">\n        <h2 style=\"margin:0 0 8px 0;\">Traversals</h2>\n        <div class=\"traversals\">\n          <div>\n            <h3>In-order</h3>\n            <div id=\"inorder\" class=\"tray\"></div>\n          </div>\n          <div>\n            <h3>Pre-order</h3>\n            <div id=\"preorder\" class=\"tray\"></div>\n          </div>\n          <div>\n            <h3>Post-order</h3>\n            <div id=\"postorder\" class=\"tray\"></div>\n          </div>\n          <div>\n            <h3>Level-order (BFS)</h3>\n            <div id=\"level\" class=\"tray\"></div>\n          </div>\n        </div>\n        <div class=\"legend\">\n          <span class=\"pill\">Average O(log n)</span>\n          <span class=\"pill\">Worst O(n) if unbalanced</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"card about\">\n      <h2 style=\"margin:0 0 8px 0;\">What is a BST?</h2>\n      <p>A Binary Search Tree is a binary tree where for every node:</p>\n      <ul>\n        <li>All values in the left subtree are strictly less than the node's value.</li>\n        <li>All values in the right subtree are strictly greater than the node's value.</li>\n      </ul>\n      <p>Common operations and average-time complexities:</p>\n      <ul>\n        <li>Search: O(log n)</li>\n        <li>Insert: O(log n)</li>\n        <li>Delete: O(log n)</li>\n      </ul>\n      <p>Note: Without balancing, a BST can become skewed, degrading operations to O(n).</p>\n    </div>\n\n    <footer>\n      Built for learning: insert values, search, and inspect traversals.\n    </footer>\n  </div>\n\n  <script>\n    // Simple BST implementation\n    let root = null;\n    let lastHighlight = null;\n    let highlightTimeout = null;\n\n    function createNode(value) {\n      return { value, left: null, right: null };\n    }\n\n    function insertNode(node, value) {\n      if (node === null) return createNode(value);\n      if (value === node.value) {\n        // ignore duplicates\n        return node;\n      } else if (value < node.value) {\n        node.left = insertNode(node.left, value);\n      } else {\n        node.right = insertNode(node.right, value);\n      }\n      return node;\n    }\n\n    function searchNode(node, value) {\n      let current = node;\n      while (current) {\n        if (value === current.value) return true;\n        current = value < current.value ? current.left : current.right;\n      }\n      return false;\n    }\n\n    function inorder(node, out = []) {\n      if (!node) return out;\n      inorder(node.left, out);\n      out.push(node.value);\n      inorder(node.right, out);\n      return out;\n    }\n    function preorder(node, out = []) {\n      if (!node) return out;\n      out.push(node.value);\n      preorder(node.left, out);\n      preorder(node.right, out);\n      return out;\n    }\n    function postorder(node, out = []) {\n      if (!node) return out;\n      postorder(node.left, out);\n      postorder(node.right, out);\n      out.push(node.value);\n      return out;\n    }\n    function levelOrder(node) {\n      const out = [];\n      if (!node) return out;\n      const q = [node];\n      while (q.length) {\n        const n = q.shift();\n        out.push(n.value);\n        if (n.left) q.push(n.left);\n        if (n.right) q.push(n.right);\n      }\n      return out;\n    }\n\n    function buildTreeDOM(node, highlightValue) {\n      if (!node) {\n        const span = document.createElement('span');\n        span.className = 'empty';\n        span.textContent = '∅';\n        return span;\n      }\n      const ul = document.createElement('ul');\n      const li = document.createElement('li');\n\n      const span = document.createElement('span');\n      span.className = 'node' + (highlightValue === node.value ? ' found' : '');\n      span.textContent = node.value;\n      li.appendChild(span);\n\n      const children = document.createElement('div');\n      children.className = 'children';\n\n      const leftDiv = document.createElement('div');\n      leftDiv.className = 'child';\n      const leftLabel = document.createElement('div');\n      leftLabel.className = 'label';\n      leftLabel.textContent = 'L';\n      leftDiv.appendChild(leftLabel);\n      leftDiv.appendChild(buildTreeDOM(node.left, highlightValue));\n\n      const rightDiv = document.createElement('div');\n      rightDiv.className = 'child';\n      const rightLabel = document.createElement('div');\n      rightLabel.className = 'label';\n      rightLabel.textContent = 'R';\n      rightDiv.appendChild(rightLabel);\n      rightDiv.appendChild(buildTreeDOM(node.right, highlightValue));\n\n      children.appendChild(leftDiv);\n      children.appendChild(rightDiv);\n      li.appendChild(children);\n      ul.appendChild(li);\n      return ul;\n    }\n\n    function formatList(arr) {\n      return arr.length ? arr.join('  →  ') : '(empty)';\n    }\n\n    function updateUI(highlightValue = null) {\n      const treeEl = document.getElementById('tree');\n      treeEl.innerHTML = '';\n      treeEl.appendChild(buildTreeDOM(root, highlightValue));\n\n      document.getElementById('inorder').textContent = formatList(inorder(root, []));\n      document.getElementById('preorder').textContent = formatList(preorder(root, []));\n      document.getElementById('postorder').textContent = formatList(postorder(root, []));\n      document.getElementById('level').textContent = formatList(levelOrder(root));\n    }\n\n    function setStatus(msg, cls = '') {\n      const el = document.getElementById('status');\n      el.className = 'status ' + (cls || '');\n      el.textContent = msg;\n    }\n\n    // Event handlers\n    document.getElementById('btnInsert').addEventListener('click', () => {\n      const valStr = document.getElementById('insertVal').value.trim();\n      if (valStr === '') {\n        setStatus('Enter a value to insert.', 'warn');\n        return;\n      }\n      const val = Number(valStr);\n      if (!Number.isFinite(val)) {\n        setStatus('Please enter a valid number.', 'err');\n        return;\n      }\n      const exists = searchNode(root, val);\n      root = insertNode(root, val);\n      updateUI();\n      if (exists) {\n        setStatus(`Value ${val} already exists (duplicates ignored).`, 'warn');\n      } else {\n        setStatus(`Inserted ${val}.`, 'ok');\n      }\n      document.getElementById('insertVal').value = '';\n      document.getElementById('insertVal').focus();\n    });\n\n    document.getElementById('btnSearch').addEventListener('click', () => {\n      const valStr = document.getElementById('searchVal').value.trim();\n      if (valStr === '') {\n        setStatus('Enter a value to search.', 'warn');\n        return;\n      }\n      const val = Number(valStr);\n      if (!Number.isFinite(val)) {\n        setStatus('Please enter a valid number.', 'err');\n        return;\n      }\n      const found = searchNode(root, val);\n      if (highlightTimeout) clearTimeout(highlightTimeout);\n      lastHighlight = found ? val : null;\n      updateUI(lastHighlight);\n      if (found) {\n        setStatus(`Found ${val} in the tree.`, 'ok');\n      } else {\n        setStatus(`Value ${val} not found.`, 'warn');\n      }\n      // Clear highlight after a short time for clarity\n      highlightTimeout = setTimeout(() => {\n        lastHighlight = null;\n        updateUI(null);\n      }, 1600);\n    });\n\n    document.getElementById('btnSample').addEventListener('click', () => {\n      const sample = [8, 3, 10, 1, 6, 14, 4, 7, 13];\n      sample.forEach(v => { root = insertNode(root, v); });\n      updateUI();\n      setStatus('Sample data inserted: ' + sample.join(', ') + '.', 'ok');\n    });\n\n    document.getElementById('btnClear').addEventListener('click', () => {\n      root = null;\n      if (highlightTimeout) clearTimeout(highlightTimeout);\n      lastHighlight = null;\n      updateUI();\n      setStatus('Tree cleared.', 'ok');\n    });\n\n    // Keyboard helpers\n    document.getElementById('insertVal').addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') document.getElementById('btnInsert').click();\n    });\n    document.getElementById('searchVal').addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') document.getElementById('btnSearch').click();\n    });\n\n    // Initial render\n    updateUI();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Binary Search Tree (BST)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "8f64bfd0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:16.429Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Weighted Graph",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Weighted Graph</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      color-scheme: light dark;\n      --bg: #f7f7fb;\n      --fg: #1f2937;\n      --muted: #6b7280;\n      --accent: #2563eb;\n      --edge: #8b8fa3;\n      --edge-label: #0f172a;\n      --node: #ffffff;\n      --node-stroke: #334155;\n      --highlight: #ef4444;\n      --highlight-node: #fde68a;\n    }\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --bg: #0b1220;\n        --fg: #e5e7eb;\n        --muted: #9ca3af;\n        --edge: #5b6176;\n        --edge-label: #e5e7eb;\n        --node: #0f172a;\n        --node-stroke: #94a3b8;\n        --highlight: #f87171;\n        --highlight-node: #f59e0b55;\n      }\n    }\n    html, body {\n      margin: 0;\n      padding: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      background: var(--bg);\n      color: var(--fg);\n    }\n    .wrap {\n      max-width: 980px;\n      margin: 0 auto;\n      padding: 24px;\n    }\n    header h1 {\n      margin: 0 0 8px 0;\n      font-size: 28px;\n      letter-spacing: 0.2px;\n    }\n    header p {\n      margin: 0 0 16px 0;\n      color: var(--muted);\n    }\n    .panel {\n      background: color-mix(in oklab, var(--bg) 92%, black 8%);\n      border: 1px solid color-mix(in oklab, var(--bg), black);\n      border-radius: 10px;\n      padding: 14px 16px;\n      margin: 12px 0 18px;\n    }\n    form.controls {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n      align-items: center;\n      margin-bottom: 10px;\n    }\n    .controls label {\n      font-size: 14px;\n      color: var(--muted);\n      margin-right: 4px;\n    }\n    .controls select, .controls button {\n      font-size: 14px;\n      padding: 8px 10px;\n      border-radius: 8px;\n      border: 1px solid color-mix(in oklab, var(--bg), black 30%);\n      background: var(--bg);\n      color: var(--fg);\n    }\n    .controls button {\n      background: var(--accent);\n      color: white;\n      border-color: transparent;\n      cursor: pointer;\n    }\n    .controls button.secondary {\n      background: transparent;\n      color: var(--accent);\n      border-color: var(--accent);\n    }\n    .legend {\n      font-size: 13px;\n      color: var(--muted);\n      display: flex;\n      gap: 16px;\n      align-items: center;\n      flex-wrap: wrap;\n    }\n    .legend .swatch {\n      display: inline-block;\n      width: 16px;\n      height: 3px;\n      background: var(--edge);\n      border-radius: 2px;\n      margin-right: 6px;\n      vertical-align: middle;\n    }\n    .legend .swatch.highlight {\n      background: var(--highlight);\n    }\n\n    svg {\n      width: 100%;\n      height: auto;\n      max-height: 520px;\n      display: block;\n      border-radius: 12px;\n      background: radial-gradient(1200px 600px at 20% 10%, color-mix(in oklab, var(--bg) 85%, black 10%), var(--bg));\n      border: 1px solid color-mix(in oklab, var(--bg), black 18%);\n    }\n    .edge {\n      stroke: var(--edge);\n      stroke-width: 2.2;\n    }\n    .edge.highlight {\n      stroke: var(--highlight);\n      stroke-width: 4;\n    }\n    .weight {\n      font-size: 12px;\n      fill: var(--edge-label);\n      user-select: none;\n      pointer-events: none;\n      paint-order: stroke;\n      stroke: color-mix(in oklab, var(--bg), black 40%);\n      stroke-width: 2px;\n      stroke-linejoin: round;\n    }\n    .node {\n      fill: var(--node);\n      stroke: var(--node-stroke);\n      stroke-width: 2;\n      cursor: pointer;\n    }\n    .node.highlight {\n      fill: var(--highlight-node);\n      stroke: var(--highlight);\n      stroke-width: 3;\n    }\n    .label {\n      font-size: 12px;\n      fill: var(--fg);\n      pointer-events: none;\n      user-select: none;\n      font-weight: 600;\n    }\n    .note {\n      font-size: 13px;\n      color: var(--muted);\n      margin-top: 8px;\n    }\n    .result {\n      margin-top: 8px;\n      font-size: 14px;\n    }\n    .result b {\n      color: var(--accent);\n    }\n    .tips {\n      font-size: 14px;\n      color: var(--muted);\n      margin-top: 16px;\n    }\n    ul {\n      margin: 8px 0 0 18px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <header>\n      <h1>Weighted Graph</h1>\n      <p>A weighted graph is a graph where each edge carries a numeric cost, distance, or capacity. Algorithms like Dijkstra can use these weights to find cheapest paths.</p>\n    </header>\n\n    <div class=\"panel\">\n      <form class=\"controls\" id=\"pathForm\">\n        <div>\n          <label for=\"start\">Start</label>\n          <select id=\"start\"></select>\n        </div>\n        <div>\n          <label for=\"end\">End</label>\n          <select id=\"end\"></select>\n        </div>\n        <button type=\"submit\">Find shortest path</button>\n        <button type=\"button\" class=\"secondary\" id=\"resetBtn\">Reset</button>\n      </form>\n      <div class=\"legend\">\n        <span><span class=\"swatch\"></span>Edge (weight)</span>\n        <span><span class=\"swatch highlight\"></span>Shortest path</span>\n      </div>\n      <div class=\"result\" id=\"result\"></div>\n      <div class=\"note\">Tip: You can also click two nodes to set Start and End quickly.</div>\n    </div>\n\n    <svg id=\"graph\" viewBox=\"0 0 400 300\" aria-label=\"Weighted graph with six nodes\">\n      <g id=\"edges\"></g>\n      <g id=\"weights\"></g>\n      <g id=\"nodes\"></g>\n      <g id=\"labels\"></g>\n    </svg>\n\n    <div class=\"panel\">\n      <h3 style=\"margin:0 0 8px 0;font-size:18px;\">What to know</h3>\n      <ul>\n        <li>Edges have weights (numbers) that represent cost, distance, or time.</li>\n        <li>Shortest paths minimize the sum of weights, not necessarily the number of edges.</li>\n        <li>Dijkstra’s algorithm works when all weights are non‑negative.</li>\n      </ul>\n      <div class=\"tips\">Example uses: road maps (distances), network routing (latency), project planning (costs).</div>\n    </div>\n  </div>\n\n  <script>\n    (function () {\n      const nodes = [\n        { id: \"A\", x: 60,  y: 80 },\n        { id: \"B\", x: 220, y: 60 },\n        { id: \"C\", x: 140, y: 140 },\n        { id: \"D\", x: 280, y: 160 },\n        { id: \"E\", x: 120, y: 240 },\n        { id: \"F\", x: 320, y: 240 }\n      ];\n\n      // Undirected weighted edges\n      const edges = [\n        [\"A\", \"B\", 4],\n        [\"A\", \"C\", 2],\n        [\"B\", \"C\", 1],\n        [\"B\", \"D\", 5],\n        [\"C\", \"D\", 8],\n        [\"C\", \"E\", 10],\n        [\"D\", \"E\", 2],\n        [\"D\", \"F\", 6],\n        [\"E\", \"F\", 3]\n      ];\n\n      // DOM elements\n      const svg = document.getElementById(\"graph\");\n      const gEdges = document.getElementById(\"edges\");\n      const gWeights = document.getElementById(\"weights\");\n      const gNodes = document.getElementById(\"nodes\");\n      const gLabels = document.getElementById(\"labels\");\n      const startSel = document.getElementById(\"start\");\n      const endSel = document.getElementById(\"end\");\n      const resultEl = document.getElementById(\"result\");\n      const resetBtn = document.getElementById(\"resetBtn\");\n      const form = document.getElementById(\"pathForm\");\n\n      // Build maps\n      const nodeById = new Map(nodes.map(n => [n.id, n]));\n      const adjacency = {};\n      const edgeLineById = new Map();\n      const nodeCircleById = new Map();\n\n      nodes.forEach(n => adjacency[n.id] = []);\n\n      edges.forEach(([u, v, w]) => {\n        adjacency[u].push({ to: v, weight: w });\n        adjacency[v].push({ to: u, weight: w });\n      });\n\n      function eid(a, b) {\n        return \"edge-\" + [a, b].sort().join(\"-\");\n      }\n\n      function createEdge(u, v, w) {\n        const a = nodeById.get(u);\n        const b = nodeById.get(v);\n        const id = eid(u, v);\n\n        // Line\n        const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        line.setAttribute(\"x1\", a.x);\n        line.setAttribute(\"y1\", a.y);\n        line.setAttribute(\"x2\", b.x);\n        line.setAttribute(\"y2\", b.y);\n        line.setAttribute(\"class\", \"edge\");\n        line.setAttribute(\"id\", id);\n        gEdges.appendChild(line);\n        edgeLineById.set(id, line);\n\n        // Weight label at midpoint\n        const mx = (a.x + b.x) / 2;\n        const my = (a.y + b.y) / 2;\n\n        const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        text.setAttribute(\"x\", mx);\n        text.setAttribute(\"y\", my - 4); // slight offset\n        text.setAttribute(\"text-anchor\", \"middle\");\n        text.setAttribute(\"class\", \"weight\");\n        text.textContent = String(w);\n        gWeights.appendChild(text);\n      }\n\n      function createNode(n) {\n        const circle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        circle.setAttribute(\"cx\", n.x);\n        circle.setAttribute(\"cy\", n.y);\n        circle.setAttribute(\"r\", 14);\n        circle.setAttribute(\"class\", \"node\");\n        circle.setAttribute(\"data-id\", n.id);\n        gNodes.appendChild(circle);\n        nodeCircleById.set(n.id, circle);\n\n        const label = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        label.setAttribute(\"x\", n.x);\n        label.setAttribute(\"y\", n.y + 4);\n        label.setAttribute(\"text-anchor\", \"middle\");\n        label.setAttribute(\"class\", \"label\");\n        label.textContent = n.id;\n        gLabels.appendChild(label);\n\n        // Clicking a node helps fill the Start and End fields\n        circle.addEventListener(\"click\", () => {\n          // if start not set or both set, set start; else set end\n          const s = startSel.value;\n          const e = endSel.value;\n          if (!s || s === e) {\n            startSel.value = n.id;\n          } else {\n            endSel.value = n.id;\n          }\n          // If both are selected and different, attempt a path find\n          if (startSel.value && endSel.value && startSel.value !== endSel.value) {\n            findAndHighlightPath();\n          }\n        });\n      }\n\n      function populateSelects() {\n        const opts = nodes.map(n => `<option value=\"${n.id}\">${n.id}</option>`).join(\"\");\n        startSel.innerHTML = `<option value=\"\" selected disabled>Pick</option>${opts}`;\n        endSel.innerHTML = `<option value=\"\" selected disabled>Pick</option>${opts}`;\n      }\n\n      function render() {\n        // Edges\n        edges.forEach(([u, v, w]) => createEdge(u, v, w));\n        // Nodes\n        nodes.forEach(createNode);\n        // Selects\n        populateSelects();\n      }\n\n      function clearHighlights() {\n        // Edges\n        edgeLineById.forEach(line => line.classList.remove(\"highlight\"));\n        // Nodes\n        nodeCircleById.forEach(c => c.classList.remove(\"highlight\"));\n      }\n\n      function highlightPath(path) {\n        clearHighlights();\n        for (let i = 0; i < path.length - 1; i++) {\n          const a = path[i], b = path[i + 1];\n          const line = edgeLineById.get(eid(a, b));\n          if (line) line.classList.add(\"highlight\");\n        }\n        path.forEach(id => {\n          const nodeEl = nodeCircleById.get(id);\n          if (nodeEl) nodeEl.classList.add(\"highlight\");\n        });\n      }\n\n      function dijkstra(start, goal) {\n        // Initialize\n        const dist = {};\n        const prev = {};\n        const unvisited = new Set(Object.keys(adjacency));\n\n        for (const v of unvisited) {\n          dist[v] = Infinity;\n          prev[v] = null;\n        }\n        dist[start] = 0;\n\n        while (unvisited.size) {\n          // Get node with smallest distance\n          let u = null, best = Infinity;\n          for (const v of unvisited) {\n            if (dist[v] < best) {\n              best = dist[v];\n              u = v;\n            }\n          }\n          if (u === null || best === Infinity) break; // disconnected\n          unvisited.delete(u);\n\n          if (u === goal) break;\n\n          for (const nb of adjacency[u]) {\n            if (!unvisited.has(nb.to)) continue;\n            const alt = dist[u] + nb.weight;\n            if (alt < dist[nb.to]) {\n              dist[nb.to] = alt;\n              prev[nb.to] = u;\n            }\n          }\n        }\n\n        // Reconstruct path\n        if (dist[goal] === Infinity) return { distance: Infinity, path: [] };\n        const path = [];\n        let cur = goal;\n        while (cur) {\n          path.unshift(cur);\n          cur = prev[cur];\n        }\n        return { distance: dist[goal], path };\n      }\n\n      function findAndHighlightPath() {\n        const start = startSel.value;\n        const end = endSel.value;\n\n        if (!start || !end) {\n          resultEl.textContent = \"Pick both Start and End nodes.\";\n          return;\n        }\n        if (start === end) {\n          clearHighlights();\n          nodeCircleById.get(start)?.classList.add(\"highlight\");\n          resultEl.textContent = \"Start and End are the same. Distance is 0.\";\n          return;\n        }\n\n        const { distance, path } = dijkstra(start, end);\n        if (!path.length || distance === Infinity) {\n          clearHighlights();\n          resultEl.textContent = \"No path found.\";\n          return;\n        }\n\n        highlightPath(path);\n        resultEl.innerHTML = `Shortest path: <b>${path.join(\" → \")}</b> (total weight: <b>${distance}</b>)`;\n      }\n\n      // Events\n      form.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        findAndHighlightPath();\n      });\n\n      resetBtn.addEventListener(\"click\", () => {\n        clearHighlights();\n        populateSelects();\n        resultEl.textContent = \"\";\n      });\n\n      // Kick off\n      render();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Weighted Graph"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "917a0b40-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:19.924Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Heap (Min/Max)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Heap (Min/Max)</title>\n<style>\n  :root {\n    --bg: #f7f7fa;\n    --card: #ffffff;\n    --border: #d9d9e3;\n    --text: #1e1e2a;\n    --muted: #666681;\n    --accent: #3b82f6;\n    --accent2: #10b981;\n    --danger: #ef4444;\n  }\n  body {\n    margin: 0;\n    font-family: system-ui, -apple-system, Segoe UI, Roboto, \"Helvetica Neue\", Arial, Noto Sans, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n    background: var(--bg);\n    color: var(--text);\n  }\n  header {\n    padding: 16px;\n    text-align: center;\n    background: var(--card);\n    border-bottom: 1px solid var(--border);\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  header h1 {\n    margin: 0;\n    font-size: 20px;\n  }\n  header p {\n    margin: 6px 0 0;\n    font-size: 13px;\n    color: var(--muted);\n  }\n  .container {\n    max-width: 1000px;\n    margin: 20px auto;\n    padding: 0 16px 40px;\n  }\n  .grid {\n    display: grid;\n    grid-template-columns: 1.2fr 1.8fr;\n    gap: 16px;\n  }\n  .card {\n    background: var(--card);\n    border: 1px solid var(--border);\n    border-radius: 12px;\n    padding: 14px;\n  }\n  .section-title {\n    font-weight: 600;\n    font-size: 14px;\n    margin-bottom: 10px;\n    color: var(--muted);\n  }\n  .controls {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n    align-items: end;\n  }\n  .controls .row {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n  label {\n    font-size: 13px;\n    color: var(--muted);\n  }\n  input[type=\"number\"],\n  input[type=\"text\"] {\n    width: 100%;\n    padding: 8px 10px;\n    border: 1px solid var(--border);\n    border-radius: 8px;\n    font-size: 14px;\n    outline: none;\n    background: #fff;\n    color: var(--text);\n  }\n  input[type=\"radio\"] {\n    accent-color: var(--accent);\n  }\n  button {\n    padding: 8px 12px;\n    font-size: 14px;\n    border: 1px solid var(--border);\n    border-radius: 8px;\n    background: #fff;\n    color: var(--text);\n    cursor: pointer;\n  }\n  button.primary {\n    background: var(--accent);\n    border-color: var(--accent);\n    color: #fff;\n  }\n  button.success {\n    background: var(--accent2);\n    border-color: var(--accent2);\n    color: #fff;\n  }\n  button.danger {\n    background: var(--danger);\n    border-color: var(--danger);\n    color: #fff;\n  }\n  button:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n  .small {\n    font-size: 12px;\n    color: var(--muted);\n  }\n  .array-view {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    margin-top: 10px;\n  }\n  .box {\n    min-width: 46px;\n    padding: 8px 10px;\n    border: 1px solid var(--border);\n    border-radius: 10px;\n    background: #fff;\n    text-align: center;\n    font-size: 14px;\n    position: relative;\n  }\n  .idx {\n    position: absolute;\n    top: -8px;\n    left: -8px;\n    background: #eef2ff;\n    color: #3b82f6;\n    border: 1px solid #c7d2fe;\n    border-radius: 8px;\n    padding: 2px 6px;\n    font-size: 11px;\n  }\n  .stats {\n    display: flex;\n    gap: 12px;\n    flex-wrap: wrap;\n    margin-top: 8px;\n    font-size: 13px;\n    color: var(--muted);\n  }\n  .svg-wrap {\n    width: 100%;\n    height: 400px;\n    border: 1px dashed var(--border);\n    border-radius: 12px;\n    background: #fafbff;\n    position: relative;\n    overflow: hidden;\n  }\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n  .node {\n    fill: #fff;\n    stroke: #9aa7ff;\n    stroke-width: 2;\n  }\n  .edge {\n    stroke: #c7cdea;\n    stroke-width: 2;\n  }\n  .node-text {\n    font-size: 12px;\n    fill: #111827;\n    text-anchor: middle;\n    dominant-baseline: middle;\n    font-weight: 600;\n  }\n  .footer {\n    margin-top: 8px;\n    font-size: 12px;\n    color: var(--muted);\n  }\n  @media (max-width: 860px) {\n    .grid {\n      grid-template-columns: 1fr;\n    }\n  }\n</style>\n</head>\n<body>\n<header>\n  <h1>Heap (Min/Max)</h1>\n  <p>Interactive min/max heap with insert and extract operations, array and tree views</p>\n</header>\n\n<div class=\"container\">\n  <div class=\"grid\">\n    <div class=\"card\">\n      <div class=\"section-title\">Controls</div>\n      <div class=\"controls\">\n        <div class=\"row\">\n          <label>Heap type:</label>\n          <label><input type=\"radio\" name=\"type\" value=\"min\" checked /> Min-Heap</label>\n          <label><input type=\"radio\" name=\"type\" value=\"max\" /> Max-Heap</label>\n          <span id=\"invariant\" class=\"small\"></span>\n        </div>\n        <div class=\"row\" style=\"justify-content:flex-end\">\n          <button id=\"clearBtn\" class=\"danger\">Clear</button>\n          <button id=\"randomBtn\" class=\"success\">Random fill</button>\n        </div>\n\n        <div class=\"row\">\n          <label for=\"valueInput\">Insert value:</label>\n          <input id=\"valueInput\" type=\"number\" placeholder=\"e.g. 42\" />\n          <button id=\"insertBtn\" class=\"primary\">Insert</button>\n        </div>\n        <div class=\"row\">\n          <button id=\"extractBtn\">Extract root</button>\n          <button id=\"peekBtn\">Peek root</button>\n          <span id=\"lastAction\" class=\"small\"></span>\n        </div>\n\n        <div class=\"row\">\n          <label for=\"csvInput\">Build from list (CSV):</label>\n          <input id=\"csvInput\" type=\"text\" placeholder=\"e.g. 7, 2, 9, 1, 5\" />\n          <button id=\"buildBtn\">Build heap</button>\n        </div>\n        <div class=\"row\">\n          <label for=\"sizeInput\">Random size:</label>\n          <input id=\"sizeInput\" type=\"number\" min=\"1\" value=\"10\" />\n          <label for=\"minInput\">Min:</label>\n          <input id=\"minInput\" type=\"number\" value=\"0\" />\n          <label for=\"maxInput\">Max:</label>\n          <input id=\"maxInput\" type=\"number\" value=\"100\" />\n        </div>\n      </div>\n\n      <div class=\"stats\" id=\"stats\"></div>\n\n      <div class=\"section-title\" style=\"margin-top:14px\">Array view (level-order)</div>\n      <div id=\"arrayView\" class=\"array-view\"></div>\n\n      <div class=\"section-title\" style=\"margin-top:14px\">Tree view</div>\n      <div class=\"svg-wrap\">\n        <svg id=\"heapSvg\" viewBox=\"0 0 1000 400\" preserveAspectRatio=\"none\"></svg>\n      </div>\n\n      <div class=\"footer\">\n        Operations: insert and extract root run in O(log n); peek runs in O(1). Heap height is about log₂(n).\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <div class=\"section-title\">About heaps</div>\n      <div style=\"font-size:14px; line-height:1.6; color:#1f2937\">\n        <p>A heap is a binary tree stored as an array that satisfies the heap property:</p>\n        <ul>\n          <li>Min-heap: every parent is less than or equal to its children. The minimum element is at the root.</li>\n          <li>Max-heap: every parent is greater than or equal to its children. The maximum element is at the root.</li>\n        </ul>\n        <p>Array mapping: for an element at index i, left child is at 2i+1, right child at 2i+2, and parent at floor((i-1)/2).</p>\n        <p>Common uses include priority queues, scheduling, and algorithms like Dijkstra's and heapsort.</p>\n      </div>\n      <div class=\"section-title\" style=\"margin-top:14px\">Tips</div>\n      <ul style=\"font-size:14px; line-height:1.6; color:#1f2937\">\n        <li>Switch between min and max to rebuild the heap under a different comparator.</li>\n        <li>Use \"Build heap\" to efficiently heapify a list in linear time.</li>\n        <li>Extract root repeatedly to produce a sorted order (ascending for min-heap, descending for max-heap).</li>\n      </ul>\n    </div>\n  </div>\n</div>\n\n<script>\n(function(){\n  const typeRadios = Array.from(document.querySelectorAll('input[name=\"type\"]'));\n  const invariantEl = document.getElementById('invariant');\n  const insertBtn = document.getElementById('insertBtn');\n  const extractBtn = document.getElementById('extractBtn');\n  const peekBtn = document.getElementById('peekBtn');\n  const clearBtn = document.getElementById('clearBtn');\n  const randomBtn = document.getElementById('randomBtn');\n  const buildBtn = document.getElementById('buildBtn');\n  const valueInput = document.getElementById('valueInput');\n  const csvInput = document.getElementById('csvInput');\n  const sizeInput = document.getElementById('sizeInput');\n  const minInput = document.getElementById('minInput');\n  const maxInput = document.getElementById('maxInput');\n  const arrayView = document.getElementById('arrayView');\n  const statsEl = document.getElementById('stats');\n  const svg = document.getElementById('heapSvg');\n  const lastActionEl = document.getElementById('lastAction');\n\n  let heap = [];\n  let heapType = 'min';\n\n  function updateInvariantText() {\n    invariantEl.textContent = heapType === 'min'\n      ? 'Invariant: parent <= children'\n      : 'Invariant: parent >= children';\n  }\n\n  function compare(a, b) {\n    return heapType === 'min' ? a < b : a > b;\n  }\n\n  function swap(i, j) {\n    const t = heap[i]; heap[i] = heap[j]; heap[j] = t;\n  }\n\n  function bubbleUp(i) {\n    while (i > 0) {\n      const p = (i - 1) >> 1;\n      if (compare(heap[i], heap[p])) {\n        swap(i, p);\n        i = p;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function bubbleDown(i) {\n    const n = heap.length;\n    while (true) {\n      const l = 2 * i + 1;\n      const r = 2 * i + 2;\n      let best = i;\n      if (l < n && compare(heap[l], heap[best])) best = l;\n      if (r < n && compare(heap[r], heap[best])) best = r;\n      if (best === i) break;\n      swap(i, best);\n      i = best;\n    }\n  }\n\n  function insert(val) {\n    heap.push(val);\n    bubbleUp(heap.length - 1);\n    render();\n  }\n\n  function extractRoot() {\n    if (heap.length === 0) return null;\n    const root = heap[0];\n    const last = heap.pop();\n    if (heap.length > 0) {\n      heap[0] = last;\n      bubbleDown(0);\n    }\n    render();\n    return root;\n  }\n\n  function peekRoot() {\n    return heap.length ? heap[0] : null;\n  }\n\n  function heapify(arr) {\n    heap = arr.slice();\n    for (let i = ((heap.length - 1) - 1) >> 1; i >= 0; i--) {\n      bubbleDown(i);\n    }\n    render();\n  }\n\n  function height(n) {\n    return n === 0 ? 0 : Math.floor(Math.log2(n)) + 1;\n  }\n\n  function updateStats() {\n    const n = heap.length;\n    const h = height(n);\n    statsEl.innerHTML = `\n      <span>Size: ${n}</span>\n      <span>Height: ${h}</span>\n      <span>Root: ${peekRoot() !== null ? peekRoot() : '—'}</span>\n      <span>Time: insert/extract O(log n), peek O(1)</span>\n    `;\n  }\n\n  function renderArray() {\n    arrayView.innerHTML = '';\n    heap.forEach((v, i) => {\n      const d = document.createElement('div');\n      d.className = 'box';\n      d.textContent = v;\n      const idx = document.createElement('span');\n      idx.className = 'idx';\n      idx.textContent = i;\n      d.appendChild(idx);\n      arrayView.appendChild(d);\n    });\n  }\n\n  function renderTree() {\n    const n = heap.length;\n    const width = svg.clientWidth || 1000;\n    const heightPx = svg.clientHeight || 400;\n    const rows = height(n);\n    const r = 18;\n    const yPadding = 20;\n    const xPadding = 30;\n\n    svg.setAttribute('viewBox', `0 0 ${width} ${heightPx}`);\n    while (svg.firstChild) svg.removeChild(svg.firstChild);\n\n    if (n === 0) {\n      const t = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      t.setAttribute('x', width / 2);\n      t.setAttribute('y', heightPx / 2);\n      t.setAttribute('class', 'node-text');\n      t.textContent = 'Heap is empty';\n      svg.appendChild(t);\n      return;\n    }\n\n    const positions = new Array(n);\n    for (let i = 0; i < n; i++) {\n      const level = Math.floor(Math.log2(i + 1));\n      const firstIndexAtLevel = (1 << level) - 1;\n      const idxInLevel = i - firstIndexAtLevel;\n      const nodesInLevel = 1 << level;\n\n      const y = yPadding + (rows === 1 ? heightPx / 2 : (heightPx - 2 * yPadding) * (level / (rows - 1)));\n      const usableWidth = width - 2 * xPadding;\n      const spacing = nodesInLevel > 1 ? usableWidth / (nodesInLevel - 1) : 0;\n      const x = xPadding + spacing * idxInLevel;\n\n      positions[i] = { x, y };\n    }\n\n    // Edges\n    for (let i = 1; i < n; i++) {\n      const parent = (i - 1) >> 1;\n      const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n      line.setAttribute('x1', positions[parent].x);\n      line.setAttribute('y1', positions[parent].y + r);\n      line.setAttribute('x2', positions[i].x);\n      line.setAttribute('y2', positions[i].y - r);\n      line.setAttribute('class', 'edge');\n      svg.appendChild(line);\n    }\n\n    // Nodes\n    for (let i = 0; i < n; i++) {\n      const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      const c = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      c.setAttribute('cx', positions[i].x);\n      c.setAttribute('cy', positions[i].y);\n      c.setAttribute('r', r);\n      c.setAttribute('class', 'node');\n\n      const txt = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      txt.setAttribute('x', positions[i].x);\n      txt.setAttribute('y', positions[i].y + 1);\n      txt.setAttribute('class', 'node-text');\n      txt.textContent = heap[i];\n\n      g.appendChild(c);\n      g.appendChild(txt);\n      svg.appendChild(g);\n    }\n  }\n\n  function render() {\n    updateInvariantText();\n    updateStats();\n    renderArray();\n    renderTree();\n    updateButtons();\n  }\n\n  function updateButtons() {\n    extractBtn.disabled = heap.length === 0;\n    peekBtn.disabled = heap.length === 0;\n    clearBtn.disabled = heap.length === 0;\n  }\n\n  // Event handlers\n  typeRadios.forEach(r => {\n    r.addEventListener('change', () => {\n      const selected = typeRadios.find(x => x.checked)?.value || 'min';\n      if (selected !== heapType) {\n        heapType = selected;\n        // Re-heapify under new comparator\n        heapify(heap);\n        lastActionEl.textContent = `Switched to ${heapType}-heap and rebuilt`;\n      }\n    });\n  });\n\n  insertBtn.addEventListener('click', () => {\n    const v = Number(valueInput.value);\n    if (!Number.isFinite(v)) {\n      lastActionEl.textContent = 'Enter a valid number';\n      return;\n    }\n    insert(v);\n    valueInput.value = '';\n    lastActionEl.textContent = `Inserted ${v}`;\n  });\n\n  valueInput.addEventListener('keydown', (e) => {\n    if (e.key === 'Enter') insertBtn.click();\n  });\n\n  extractBtn.addEventListener('click', () => {\n    const root = extractRoot();\n    lastActionEl.textContent = root !== null ? `Extracted root: ${root}` : 'Heap is empty';\n  });\n\n  peekBtn.addEventListener('click', () => {\n    const root = peekRoot();\n    lastActionEl.textContent = root !== null ? `Root is ${root}` : 'Heap is empty';\n  });\n\n  clearBtn.addEventListener('click', () => {\n    heap = [];\n    render();\n    lastActionEl.textContent = 'Cleared heap';\n  });\n\n  randomBtn.addEventListener('click', () => {\n    let size = parseInt(sizeInput.value, 10);\n    let mn = Number(minInput.value);\n    let mx = Number(maxInput.value);\n    if (!Number.isFinite(size) || size <= 0) size = 10;\n    if (!Number.isFinite(mn)) mn = 0;\n    if (!Number.isFinite(mx)) mx = 100;\n    if (mx < mn) [mn, mx] = [mx, mn];\n    const arr = Array.from({ length: size }, () => {\n      return Math.round(mn + Math.random() * (mx - mn));\n    });\n    heapify(arr);\n    lastActionEl.textContent = `Filled with ${size} random values`;\n  });\n\n  buildBtn.addEventListener('click', () => {\n    const txt = csvInput.value.trim();\n    if (!txt) {\n      lastActionEl.textContent = 'Enter a CSV list of numbers';\n      return;\n    }\n    const parts = txt.split(/[\\s,;]+/).filter(Boolean);\n    const arr = [];\n    for (const p of parts) {\n      const v = Number(p);\n      if (!Number.isFinite(v)) {\n        lastActionEl.textContent = `Invalid number: \"${p}\"`;\n        return;\n      }\n      arr.push(v);\n    }\n    heapify(arr);\n    lastActionEl.textContent = `Built heap from ${arr.length} values`;\n  });\n\n  // Resize handling for SVG layout\n  window.addEventListener('resize', () => render());\n\n  // Initial state\n  heap = [];\n  render();\n})();\n</script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Heap (Min/Max)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "93b02520-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:23.634Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Binary Search",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Binary Search</title>\n  <style>\n    :root {\n      --bg: #f7f9fc;\n      --card: #ffffff;\n      --text: #1c1f23;\n      --muted: #6b7280;\n      --accent: #2563eb;\n      --ok: #16a34a;\n      --warn: #ca8a04;\n      --error: #dc2626;\n      --border: #e5e7eb;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      background: var(--bg);\n      color: var(--text);\n      line-height: 1.6;\n    }\n    .container {\n      max-width: 860px;\n      margin: 0 auto;\n      padding: 24px;\n    }\n    header { margin-bottom: 16px; }\n    h1 {\n      margin: 0 0 8px;\n      font-size: 28px;\n      letter-spacing: -0.01em;\n    }\n    p.intro { margin: 0 0 16px; color: var(--muted); }\n    .card {\n      background: var(--card);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n      box-shadow: 0 1px 2px rgba(0,0,0,0.04);\n      margin-bottom: 16px;\n    }\n    .row { display: grid; grid-template-columns: 1fr; gap: 12px; }\n    @media (min-width: 720px) { .row.two { grid-template-columns: 2fr 1fr; } }\n    label { font-weight: 600; display: block; margin-bottom: 6px; }\n    input[type=\"text\"], input[type=\"number\"] {\n      width: 100%;\n      padding: 10px 12px;\n      font-size: 16px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      background: #fff;\n      outline: none;\n    }\n    input:focus { border-color: var(--accent); box-shadow: 0 0 0 3px rgba(37,99,235,0.15); }\n    .btn {\n      appearance: none;\n      border: none;\n      padding: 10px 14px;\n      border-radius: 8px;\n      background: var(--accent);\n      color: #fff;\n      font-weight: 600;\n      cursor: pointer;\n    }\n    .btn.secondary { background: #eef2ff; color: #1e3a8a; }\n    .btn:disabled { opacity: 0.6; cursor: not-allowed; }\n    .hint { font-size: 13px; color: var(--muted); margin-top: 6px; }\n    .note { font-size: 14px; padding: 10px; border-radius: 8px; background: #fff7ed; border: 1px solid #fed7aa; color: #9a3412; margin-top: 10px; }\n    .array-view {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n      padding-top: 6px;\n    }\n    .cell {\n      padding: 8px 10px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      background: #fafafa;\n      min-width: 42px;\n      text-align: center;\n      position: relative;\n    }\n    .cell .idx {\n      position: absolute;\n      top: -10px;\n      right: 6px;\n      font-size: 11px;\n      color: var(--muted);\n      background: #fff;\n      padding: 0 4px;\n      border-radius: 6px;\n      border: 1px solid var(--border);\n    }\n    .cell.low { border-color: #60a5fa; background: #eff6ff; }\n    .cell.mid { border-color: #fb923c; background: #fff7ed; }\n    .cell.high { border-color: #fca5a5; background: #fef2f2; }\n    .result {\n      padding: 10px 12px;\n      border-radius: 8px;\n      border: 1px solid var(--border);\n      background: #f8fafc;\n      font-weight: 600;\n    }\n    .result.ok { border-color: #bbf7d0; background: #f0fdf4; color: var(--ok); }\n    .result.err { border-color: #fecaca; background: #fef2f2; color: var(--error); }\n    .steps { margin: 0; padding-left: 18px; }\n    .steps li { margin: 6px 0; }\n    pre {\n      background: #0b1220;\n      color: #e5e7eb;\n      padding: 12px;\n      border-radius: 10px;\n      overflow: auto;\n      font-size: 13px;\n    }\n    footer { color: var(--muted); font-size: 13px; margin-top: 8px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <header>\n      <h1>Binary Search</h1>\n      <p class=\"intro\">Binary search finds a target in a sorted list by repeatedly halving the search range. Time complexity: O(log n).</p>\n    </header>\n\n    <section class=\"card\">\n      <div class=\"row two\">\n        <div>\n          <label for=\"arr\">Sorted numbers (comma-separated)</label>\n          <input id=\"arr\" type=\"text\" value=\"1, 3, 4, 7, 9, 12, 15, 18, 21\" placeholder=\"e.g., 2, 5, 8, 13, 21\" />\n          <div class=\"hint\">Binary search requires ascending sorted order. Non-numeric entries are ignored.</div>\n        </div>\n        <div>\n          <label for=\"target\">Target</label>\n          <input id=\"target\" type=\"number\" value=\"15\" placeholder=\"e.g., 13\" />\n          <div class=\"hint\">Enter the number you want to find.</div>\n        </div>\n      </div>\n      <div style=\"margin-top: 12px; display: flex; gap: 8px;\">\n        <button class=\"btn\" id=\"runBtn\">Search</button>\n        <button class=\"btn secondary\" id=\"shuffleBtn\" title=\"Randomize array\">Randomize</button>\n      </div>\n      <div id=\"sortNote\" class=\"note\" style=\"display:none;\"></div>\n    </section>\n\n    <section class=\"card\">\n      <label>Array view</label>\n      <div id=\"arrayView\" class=\"array-view\"></div>\n    </section>\n\n    <section class=\"card\">\n      <label>Steps</label>\n      <ul id=\"steps\" class=\"steps\"></ul>\n      <div id=\"result\" class=\"result\" style=\"display:none; margin-top: 8px;\"></div>\n    </section>\n\n    <section class=\"card\">\n      <label>Pseudocode</label>\n      <pre><code>// Binary Search (iterative)\nfunction binarySearch(arr, x):\n    low = 0\n    high = arr.length - 1\n\n    while low &lt;= high:\n        mid = floor((low + high) / 2)\n\n        if arr[mid] == x:\n            return mid\n\n        if arr[mid] &lt; x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1</code></pre>\n      <footer>Tip: Works on ascending sorted arrays. For strings, sort consistently and compare lexicographically.</footer>\n    </section>\n  </div>\n\n  <script>\n    const arrInput = document.getElementById('arr');\n    const targetInput = document.getElementById('target');\n    const runBtn = document.getElementById('runBtn');\n    const shuffleBtn = document.getElementById('shuffleBtn');\n    const arrayView = document.getElementById('arrayView');\n    const stepsEl = document.getElementById('steps');\n    const resultEl = document.getElementById('result');\n    const sortNote = document.getElementById('sortNote');\n\n    function parseArray(str) {\n      return str\n        .split(',')\n        .map(s => parseFloat(s.trim()))\n        .filter(n => Number.isFinite(n));\n    }\n\n    function isSortedAsc(arr) {\n      for (let i = 1; i < arr.length; i++) {\n        if (arr[i - 1] > arr[i]) return false;\n      }\n      return true;\n    }\n\n    function renderArray(arr, low = null, mid = null, high = null) {\n      arrayView.innerHTML = '';\n      arr.forEach((v, i) => {\n        const cell = document.createElement('div');\n        cell.className = 'cell' + (i === low ? ' low' : '') + (i === mid ? ' mid' : '') + (i === high ? ' high' : '');\n        cell.textContent = String(v);\n        const idx = document.createElement('span');\n        idx.className = 'idx';\n        idx.textContent = i;\n        cell.appendChild(idx);\n        arrayView.appendChild(cell);\n      });\n    }\n\n    function binarySearchWithSteps(arr, target) {\n      const steps = [];\n      let low = 0;\n      let high = arr.length - 1;\n      while (low <= high) {\n        const mid = Math.floor((low + high) / 2);\n        const val = arr[mid];\n        steps.push({\n          low, mid, high,\n          message: `low=${low}, mid=${mid}, high=${high}, compare arr[mid]=${val} with target=${target}`\n        });\n        if (val === target) {\n          steps.push({ low, mid, high, message: `Found target at index ${mid}.` });\n          return { index: mid, steps };\n        }\n        if (val < target) {\n          low = mid + 1;\n        } else {\n          high = mid - 1;\n        }\n      }\n      steps.push({ low, mid: null, high, message: 'Target not found.' });\n      return { index: -1, steps };\n    }\n\n    function displaySteps(arr, steps) {\n      stepsEl.innerHTML = '';\n      steps.forEach((s, idx) => {\n        const li = document.createElement('li');\n        li.textContent = s.message;\n        stepsEl.appendChild(li);\n        // Highlight the last state\n        if (idx === steps.length - 1) {\n          renderArray(arr, s.low, s.mid, s.high);\n        }\n      });\n    }\n\n    function run() {\n      sortNote.style.display = 'none';\n      resultEl.style.display = 'none';\n      stepsEl.innerHTML = '';\n      arrayView.innerHTML = '';\n\n      let arr = parseArray(arrInput.value);\n      const target = parseFloat(targetInput.value);\n\n      if (!Number.isFinite(target)) {\n        resultEl.textContent = 'Please enter a valid numeric target.';\n        resultEl.className = 'result err';\n        resultEl.style.display = 'block';\n        return;\n      }\n      if (arr.length === 0) {\n        resultEl.textContent = 'Please provide at least one valid number.';\n        resultEl.className = 'result err';\n        resultEl.style.display = 'block';\n        return;\n      }\n\n      let sorted = isSortedAsc(arr);\n      if (!sorted) {\n        const original = arr.slice();\n        arr.sort((a, b) => a - b);\n        sortNote.textContent = 'Note: Input was not sorted. It has been sorted ascending to apply binary search.';\n        sortNote.style.display = 'block';\n      }\n\n      const { index, steps } = binarySearchWithSteps(arr, target);\n      displaySteps(arr, steps);\n\n      if (index >= 0) {\n        resultEl.textContent = `Success: target ${target} found at index ${index}.`;\n        resultEl.className = 'result ok';\n      } else {\n        resultEl.textContent = `Not found: target ${target} is not in the array.`;\n        resultEl.className = 'result err';\n      }\n      resultEl.style.display = 'block';\n    }\n\n    function randomize() {\n      const n = 9 + Math.floor(Math.random() * 6); // 9..14\n      const base = [];\n      let current = Math.floor(Math.random() * 10);\n      for (let i = 0; i < n; i++) {\n        current += 1 + Math.floor(Math.random() * 8);\n        base.push(current);\n      }\n      arrInput.value = base.join(', ');\n      targetInput.value = base[Math.floor(Math.random() * base.length)];\n      sortNote.style.display = 'none';\n      renderArray(parseArray(arrInput.value));\n      stepsEl.innerHTML = '';\n      resultEl.style.display = 'none';\n    }\n\n    runBtn.addEventListener('click', run);\n    shuffleBtn.addEventListener('click', randomize);\n\n    // Initial render\n    renderArray(parseArray(arrInput.value));\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Binary Search"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9439a070-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:24.535Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Radix Sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Radix Sort</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      --bg: #fcfcfd;\n      --text: #1b1f23;\n      --muted: #6a737d;\n      --primary: #2f62ff;\n      --accent: #f3f4f6;\n      --border: #e5e7eb;\n      --good: #10b981;\n      --warn: #ef4444;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      background: var(--bg);\n      color: var(--text);\n      line-height: 1.55;\n    }\n    .container {\n      max-width: 860px;\n      margin: 32px auto;\n      padding: 0 16px;\n    }\n    header h1 {\n      margin: 0 0 8px;\n      font-size: 28px;\n    }\n    header p {\n      margin: 0 0 16px;\n      color: var(--muted);\n    }\n    .card {\n      background: white;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      box-shadow: 0 1px 2px rgba(0,0,0,0.04);\n      padding: 16px;\n      margin: 16px 0;\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 12px;\n    }\n    .controls .row {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      align-items: center;\n    }\n    input[type=\"text\"] {\n      width: 100%;\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      font-size: 14px;\n    }\n    button {\n      appearance: none;\n      border: 1px solid var(--border);\n      background: white;\n      color: var(--text);\n      padding: 8px 12px;\n      border-radius: 8px;\n      font-weight: 600;\n      font-size: 14px;\n      cursor: pointer;\n      transition: background 0.15s ease, border-color 0.15s ease;\n    }\n    button.primary {\n      background: var(--primary);\n      border-color: var(--primary);\n      color: white;\n    }\n    button:hover { background: var(--accent); }\n    button.primary:hover { filter: brightness(0.95); }\n    .hint {\n      font-size: 13px;\n      color: var(--muted);\n    }\n    .error {\n      color: var(--warn);\n      font-weight: 600;\n      margin-top: 8px;\n    }\n    .array-view {\n      display: flex;\n      gap: 6px;\n      flex-wrap: wrap;\n      margin-top: 8px;\n    }\n    .chip {\n      padding: 6px 10px;\n      border: 1px solid var(--border);\n      border-radius: 999px;\n      background: #f9fafb;\n      font-size: 13px;\n    }\n    .pass {\n      border-top: 1px dashed var(--border);\n      margin-top: 14px;\n      padding-top: 14px;\n    }\n    .pass h3 {\n      margin: 0 0 8px;\n      font-size: 18px;\n    }\n    .buckets {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      gap: 8px;\n    }\n    @media (min-width: 680px) {\n      .buckets { grid-template-columns: repeat(5, minmax(0, 1fr)); }\n    }\n    .bucket {\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 8px;\n    }\n    .bucket-title {\n      font-size: 12px;\n      color: var(--muted);\n      margin-bottom: 6px;\n    }\n    .small {\n      font-size: 12px;\n      color: var(--muted);\n    }\n    .result-title {\n      margin-top: 8px;\n      font-size: 14px;\n      font-weight: 600;\n    }\n    code, pre {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    }\n    pre {\n      margin: 0;\n      padding: 12px;\n      background: #0f172a;\n      color: #e5e7eb;\n      border-radius: 8px;\n      overflow: auto;\n      border: 1px solid #0b1020;\n    }\n    .footer {\n      margin-top: 16px;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    .badge {\n      display: inline-block;\n      padding: 2px 8px;\n      border-radius: 999px;\n      background: #eef2ff;\n      color: #1e40af;\n      border: 1px solid #c7d2fe;\n      font-size: 12px;\n      margin-left: 4px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <header>\n      <h1>Radix Sort (LSD)</h1>\n      <p>Stable non-comparative integer sorting that processes numbers digit by digit, starting from the least significant digit (base 10).</p>\n    </header>\n\n    <div class=\"card\">\n      <div class=\"controls\">\n        <label for=\"numbers\">Numbers (non-negative integers). Separate with commas or spaces:</label>\n        <input id=\"numbers\" type=\"text\" value=\"170, 45, 75, 90, 802, 24, 2, 66\" placeholder=\"e.g., 170, 45, 75, 90, 802, 24, 2, 66\">\n        <div class=\"row\">\n          <button id=\"sortBtn\" class=\"primary\">Sort</button>\n          <button id=\"randomBtn\">Randomize</button>\n          <button id=\"clearBtn\">Clear</button>\n          <span class=\"hint\">Base: 10 <span class=\"badge\">LSD</span></span>\n        </div>\n        <div id=\"error\" class=\"error\" style=\"display:none;\"></div>\n        <div>\n          <div class=\"small\">Input array</div>\n          <div id=\"inputView\" class=\"array-view\"></div>\n        </div>\n      </div>\n    </div>\n\n    <div id=\"stepsCard\" class=\"card\" style=\"display:none;\">\n      <div id=\"steps\"></div>\n    </div>\n\n    <div id=\"resultCard\" class=\"card\" style=\"display:none;\">\n      <div class=\"result-title\">Sorted array</div>\n      <div id=\"resultView\" class=\"array-view\"></div>\n      <div class=\"footer\">\n        Complexity (base 10): O(d × (n + 10)), where d is the number of digits of the largest number.\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <div class=\"result-title\">JavaScript implementation (LSD, base 10)</div>\n      <pre><code>function radixSortLSD(arr) {\n  if (!arr.length) return arr.slice();\n  const maxDigits = Math.max(...arr).toString().length;\n\n  const getDigit = (num, place) => Math.floor(num / Math.pow(10, place)) % 10;\n\n  let result = arr.slice();\n  for (let place = 0; place &lt; maxDigits; place++) {\n    const count = Array(10).fill(0);\n    for (const num of result) count[getDigit(num, place)]++;\n\n    // prefix sums\n    for (let i = 1; i &lt; 10; i++) count[i] += count[i - 1];\n\n    const out = Array(result.length);\n    for (let i = result.length - 1; i &gt;= 0; i--) {\n      const d = getDigit(result[i], place);\n      out[--count[d]] = result[i];\n    }\n    result = out;\n  }\n  return result;\n}</code></pre>\n    </div>\n  </div>\n\n  <script>\n    const inputEl = document.getElementById('numbers');\n    const sortBtn = document.getElementById('sortBtn');\n    const randomBtn = document.getElementById('randomBtn');\n    const clearBtn = document.getElementById('clearBtn');\n    const errorEl = document.getElementById('error');\n    const inputView = document.getElementById('inputView');\n    const stepsCard = document.getElementById('stepsCard');\n    const stepsEl = document.getElementById('steps');\n    const resultCard = document.getElementById('resultCard');\n    const resultView = document.getElementById('resultView');\n\n    function parseNumbers(text) {\n      return text\n        .split(/[\\s,;]+/)\n        .map(s => s.trim())\n        .filter(s => s.length)\n        .map(s => Number(s));\n    }\n\n    function showArray(container, arr) {\n      container.innerHTML = '';\n      if (!arr.length) {\n        const none = document.createElement('div');\n        none.className = 'small';\n        none.textContent = '(empty)';\n        container.appendChild(none);\n        return;\n      }\n      for (const n of arr) {\n        const chip = document.createElement('div');\n        chip.className = 'chip';\n        chip.textContent = String(n);\n        container.appendChild(chip);\n      }\n    }\n\n    function getDigit(num, place) {\n      return Math.floor(num / Math.pow(10, place)) % 10;\n    }\n\n    function maxDigits(arr) {\n      let max = 0;\n      for (const n of arr) {\n        const d = n === 0 ? 1 : Math.floor(Math.log10(n)) + 1;\n        if (d > max) max = d;\n      }\n      return max;\n    }\n\n    function countingSortByDigit(arr, place, recordBuckets = false) {\n      const count = Array(10).fill(0);\n      const out = Array(arr.length);\n\n      // Optional buckets for visualization (distribution in input order)\n      const buckets = recordBuckets ? Array.from({ length: 10 }, () => []) : null;\n      if (recordBuckets) {\n        for (const num of arr) {\n          const d = getDigit(num, place);\n          buckets[d].push(num);\n        }\n      }\n\n      for (const num of arr) count[getDigit(num, place)]++;\n      for (let i = 1; i < 10; i++) count[i] += count[i - 1];\n      for (let i = arr.length - 1; i >= 0; i--) {\n        const d = getDigit(arr[i], place);\n        out[--count[d]] = arr[i];\n      }\n      return { out, buckets };\n    }\n\n    function radixSortWithSteps(arr) {\n      const dmax = maxDigits(arr);\n      const steps = [];\n      let current = arr.slice();\n\n      for (let place = 0; place < dmax; place++) {\n        const { out, buckets } = countingSortByDigit(current, place, true);\n        steps.push({\n          place,\n          buckets,\n          before: current.slice(),\n          after: out.slice()\n        });\n        current = out;\n      }\n      return { sorted: current, steps };\n    }\n\n    function validateInput(nums) {\n      if (!nums.length) return 'Please enter at least one number.';\n      for (const n of nums) {\n        if (!Number.isFinite(n) || !Number.isInteger(n)) {\n          return 'All entries must be integers.';\n        }\n        if (n < 0) {\n          return 'This demo handles non-negative integers only.';\n        }\n      }\n      return null;\n    }\n\n    function renderSteps(steps) {\n      stepsEl.innerHTML = '';\n      for (const step of steps) {\n        const pass = document.createElement('div');\n        pass.className = 'pass';\n\n        const h3 = document.createElement('h3');\n        h3.textContent = `Pass ${step.place + 1} (digit 10^${step.place})`;\n        pass.appendChild(h3);\n\n        const beforeLabel = document.createElement('div');\n        beforeLabel.className = 'small';\n        beforeLabel.textContent = 'Before';\n        pass.appendChild(beforeLabel);\n\n        const beforeView = document.createElement('div');\n        beforeView.className = 'array-view';\n        showArray(beforeView, step.before);\n        pass.appendChild(beforeView);\n\n        const bucketsGrid = document.createElement('div');\n        bucketsGrid.className = 'buckets';\n        for (let d = 0; d < 10; d++) {\n          const bucket = document.createElement('div');\n          bucket.className = 'bucket';\n\n          const title = document.createElement('div');\n          title.className = 'bucket-title';\n          title.textContent = `Bucket ${d}`;\n          bucket.appendChild(title);\n\n          const list = document.createElement('div');\n          list.className = 'array-view';\n          showArray(list, step.buckets[d]);\n          bucket.appendChild(list);\n\n          bucketsGrid.appendChild(bucket);\n        }\n        pass.appendChild(bucketsGrid);\n\n        const afterLabel = document.createElement('div');\n        afterLabel.className = 'small';\n        afterLabel.textContent = 'After collecting';\n        pass.appendChild(afterLabel);\n\n        const afterView = document.createElement('div');\n        afterView.className = 'array-view';\n        showArray(afterView, step.after);\n        pass.appendChild(afterView);\n\n        stepsEl.appendChild(pass);\n      }\n    }\n\n    function runSort() {\n      const nums = parseNumbers(inputEl.value);\n      const err = validateInput(nums);\n\n      // Update input preview\n      showArray(inputView, nums);\n\n      if (err) {\n        errorEl.textContent = err;\n        errorEl.style.display = 'block';\n        stepsCard.style.display = 'none';\n        resultCard.style.display = 'none';\n        return;\n      } else {\n        errorEl.style.display = 'none';\n      }\n\n      const { sorted, steps } = radixSortWithSteps(nums);\n      renderSteps(steps);\n      stepsCard.style.display = 'block';\n\n      showArray(resultView, sorted);\n      resultCard.style.display = 'block';\n    }\n\n    function fillRandom() {\n      const size = 10;\n      const arr = Array.from({ length: size }, () => Math.floor(Math.random() * 1000));\n      inputEl.value = arr.join(', ');\n      errorEl.style.display = 'none';\n      showArray(inputView, arr);\n      stepsCard.style.display = 'none';\n      resultCard.style.display = 'none';\n    }\n\n    function clearAll() {\n      inputEl.value = '';\n      errorEl.style.display = 'none';\n      inputView.innerHTML = '';\n      stepsEl.innerHTML = '';\n      stepsCard.style.display = 'none';\n      resultCard.style.display = 'none';\n    }\n\n    // Initialize preview from default value\n    showArray(inputView, parseNumbers(inputEl.value));\n\n    sortBtn.addEventListener('click', runSort);\n    randomBtn.addEventListener('click', fillRandom);\n    clearBtn.addEventListener('click', clearAll);\n    inputEl.addEventListener('input', () => {\n      const nums = parseNumbers(inputEl.value);\n      showArray(inputView, nums);\n      errorEl.style.display = 'none';\n      stepsCard.style.display = 'none';\n      resultCard.style.display = 'none';\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Radix Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "950c80d0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:25.917Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Longest Common Subsequence",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Subsequence</title>\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 24px; line-height: 1.5; }\n    h1 { font-size: 1.4rem; margin-bottom: 12px; }\n    .row { display: flex; gap: 12px; flex-wrap: wrap; }\n    .col { flex: 1 1 320px; min-width: 260px; }\n    label { display: block; font-weight: 600; margin-bottom: 6px; }\n    textarea { width: 100%; min-height: 120px; box-sizing: border-box; padding: 8px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace; }\n    .controls { display: flex; gap: 10px; margin-top: 12px; flex-wrap: wrap; }\n    button { padding: 8px 14px; cursor: pointer; }\n    .result { margin-top: 16px; padding: 12px; background: #f6f7f9; border-radius: 6px; }\n    .stat { margin: 6px 0; }\n    .small { color: #555; font-size: 0.9rem; }\n    .error { color: #b00020; }\n  </style>\n</head>\n<body>\n  <h1>Longest Common Subsequence</h1>\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <label for=\"a\">String A</label>\n      <textarea id=\"a\" placeholder=\"Enter first string\">ABCBDAB</textarea>\n    </div>\n    <div class=\"col\">\n      <label for=\"b\">String B</label>\n      <textarea id=\"b\" placeholder=\"Enter second string\">BDCABA</textarea>\n    </div>\n  </div>\n\n  <div class=\"controls\">\n    <button id=\"compute\">Compute LCS</button>\n    <button id=\"clear\">Clear</button>\n    <label class=\"small\" style=\"display:flex; align-items:center; gap:6px;\">\n      <input type=\"checkbox\" id=\"ignoreCase\"> Ignore case\n    </label>\n  </div>\n\n  <div id=\"result\" class=\"result\" aria-live=\"polite\">\n    <div class=\"stat small\">Enter strings and click Compute LCS.</div>\n  </div>\n\n  <script>\n    function lcs(a, b) {\n      const n = a.length, m = b.length;\n      const dp = Array(n + 1);\n      for (let i = 0; i <= n; i++) dp[i] = new Array(m + 1).fill(0);\n\n      for (let i = 1; i <= n; i++) {\n        const ai = a[i - 1];\n        for (let j = 1; j <= m; j++) {\n          if (ai === b[j - 1]) {\n            dp[i][j] = dp[i - 1][j - 1] + 1;\n          } else {\n            dp[i][j] = dp[i - 1][j] >= dp[i][j - 1] ? dp[i - 1][j] : dp[i][j - 1];\n          }\n        }\n      }\n\n      const length = dp[n][m];\n      const chars = [];\n      let i = n, j = m;\n      while (i > 0 && j > 0) {\n        if (a[i - 1] === b[j - 1]) {\n          chars.push(a[i - 1]);\n          i--; j--;\n        } else if (dp[i - 1][j] >= dp[i][j - 1]) {\n          i--;\n        } else {\n          j--;\n        }\n      }\n      chars.reverse();\n      return { length, sequence: chars.join(\"\") };\n    }\n\n    function sanitizeText(s) {\n      // Ensure string type and reasonable size\n      return typeof s === \"string\" ? s : String(s ?? \"\");\n    }\n\n    const aEl = document.getElementById(\"a\");\n    const bEl = document.getElementById(\"b\");\n    const computeBtn = document.getElementById(\"compute\");\n    const clearBtn = document.getElementById(\"clear\");\n    const resultEl = document.getElementById(\"result\");\n    const ignoreCaseEl = document.getElementById(\"ignoreCase\");\n\n    computeBtn.addEventListener(\"click\", () => {\n      const rawA = sanitizeText(aEl.value);\n      const rawB = sanitizeText(bEl.value);\n\n      if (!rawA.length && !rawB.length) {\n        resultEl.innerHTML = \"\";\n        const msg = document.createElement(\"div\");\n        msg.className = \"error\";\n        msg.textContent = \"Please enter at least one non-empty string.\";\n        resultEl.appendChild(msg);\n        return;\n      }\n\n      const start = performance.now();\n      const a = ignoreCaseEl.checked ? rawA.toLowerCase() : rawA;\n      const b = ignoreCaseEl.checked ? rawB.toLowerCase() : rawB;\n      const { length, sequence } = lcs(a, b);\n      const ms = Math.round(performance.now() - start);\n\n      resultEl.innerHTML = \"\";\n\n      const lenEl = document.createElement(\"div\");\n      lenEl.className = \"stat\";\n      lenEl.textContent = \"Length: \" + length;\n      resultEl.appendChild(lenEl);\n\n      const seqWrap = document.createElement(\"div\");\n      seqWrap.className = \"stat\";\n      const seqLabel = document.createElement(\"div\");\n      seqLabel.className = \"small\";\n      seqLabel.textContent = \"One LCS:\";\n      const seqEl = document.createElement(\"pre\");\n      seqEl.style.margin = \"6px 0 0 0\";\n      seqEl.style.whiteSpace = \"pre-wrap\";\n      seqEl.textContent = sequence;\n      seqWrap.appendChild(seqLabel);\n      seqWrap.appendChild(seqEl);\n      resultEl.appendChild(seqWrap);\n\n      const timeEl = document.createElement(\"div\");\n      timeEl.className = \"small\";\n      timeEl.textContent = \"Computed in \" + ms + \" ms\";\n      resultEl.appendChild(timeEl);\n    });\n\n    clearBtn.addEventListener(\"click\", () => {\n      aEl.value = \"\";\n      bEl.value = \"\";\n      resultEl.innerHTML = \"\";\n      const msg = document.createElement(\"div\");\n      msg.className = \"small\";\n      msg.textContent = \"Inputs cleared.\";\n      resultEl.appendChild(msg);\n      aEl.focus();\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Longest Common Subsequence"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "95560cf0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:26.399Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Dijkstra’s Algorithm",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Dijkstra’s Algorithm</title>\n  <style>\n    :root { color-scheme: light dark; }\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 2rem; line-height: 1.5; }\n    h1, h2 { margin: 0.2rem 0 0.6rem; }\n    .container { max-width: 900px; }\n    .panel { border: 1px solid rgba(0,0,0,0.1); border-radius: 8px; padding: 1rem; margin: 1rem 0; }\n    label { display: inline-block; margin-right: 0.5rem; }\n    select, button { font: inherit; padding: 0.4rem 0.6rem; margin-right: 0.5rem; }\n    code, pre { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace; }\n    pre { background: rgba(127,127,127,0.08); padding: 0.75rem; border-radius: 6px; overflow: auto; }\n    ul { margin: 0.4rem 0 0.8rem 1.2rem; }\n    .edges { columns: 2 16rem; }\n    .result { white-space: pre-wrap; }\n    .muted { opacity: 0.8; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Dijkstra’s Algorithm</h1>\n    <p>\n      Dijkstra’s algorithm finds the shortest-path distances from a single source to all other nodes in a weighted graph with non‑negative edge weights.\n      It is widely used in routing, mapping, and network optimization.\n    </p>\n\n    <div class=\"panel\">\n      <h2>Key ideas</h2>\n      <ul>\n        <li>Maintain the best known (tentative) distance to each node, starting with 0 for the source and infinity for others.</li>\n        <li>Repeatedly select the unvisited node with the smallest tentative distance.</li>\n        <li>Relax its outgoing edges: if a shorter path to a neighbor is found, update that neighbor’s distance and predecessor.</li>\n        <li>Stop when all nodes are visited or remaining nodes are unreachable.</li>\n      </ul>\n      <p class=\"muted\">\n        Requirements: edge weights must be non‑negative. With a binary heap/priority queue, time complexity is O((V + E) log V).\n      </p>\n    </div>\n\n    <div class=\"panel\">\n      <h2>Pseudocode</h2>\n      <pre><code>function dijkstra(G, source):\n  for each vertex v in G:\n    dist[v] := ∞\n    prev[v] := undefined\n  dist[source] := 0\n\n  Q := set of all vertices\n  while Q is not empty:\n    u := vertex in Q with smallest dist[u]\n    remove u from Q\n    if dist[u] = ∞: break  // remaining vertices are unreachable\n\n    for each edge (u, v) with weight w:\n      alt := dist[u] + w\n      if alt &lt; dist[v]:\n        dist[v] := alt\n        prev[v] := u\n\n  return dist, prev</code></pre>\n    </div>\n\n    <div class=\"panel\">\n      <h2>Try it on a small graph</h2>\n      <p>Undirected graph (non‑negative weights):</p>\n      <ul class=\"edges\">\n        <li>A — B (4)</li>\n        <li>A — C (2)</li>\n        <li>B — C (1)</li>\n        <li>B — D (5)</li>\n        <li>C — D (8)</li>\n        <li>C — E (10)</li>\n        <li>D — E (2)</li>\n      </ul>\n\n      <div style=\"margin: 0.6rem 0;\">\n        <label for=\"source\">Source</label>\n        <select id=\"source\"></select>\n\n        <label for=\"target\">Target</label>\n        <select id=\"target\"></select>\n\n        <button id=\"run\">Run Dijkstra</button>\n      </div>\n\n      <div id=\"output\" class=\"result\" aria-live=\"polite\"></div>\n    </div>\n\n    <p class=\"muted\">Tip: Try different source/target pairs to see how paths and distances change.</p>\n  </div>\n\n  <script>\n    const graph = {\n      A: [{ node: 'B', weight: 4 }, { node: 'C', weight: 2 }],\n      B: [{ node: 'A', weight: 4 }, { node: 'C', weight: 1 }, { node: 'D', weight: 5 }],\n      C: [{ node: 'A', weight: 2 }, { node: 'B', weight: 1 }, { node: 'D', weight: 8 }, { node: 'E', weight: 10 }],\n      D: [{ node: 'B', weight: 5 }, { node: 'C', weight: 8 }, { node: 'E', weight: 2 }],\n      E: [{ node: 'C', weight: 10 }, { node: 'D', weight: 2 }]\n    };\n\n    function dijkstra(g, source) {\n      const nodes = Object.keys(g);\n      const dist = Object.fromEntries(nodes.map(n => [n, Infinity]));\n      const prev = Object.fromEntries(nodes.map(n => [n, null]));\n      const unvisited = new Set(nodes);\n\n      dist[source] = 0;\n\n      while (unvisited.size) {\n        // pick the unvisited node with smallest tentative distance\n        let u = null;\n        let best = Infinity;\n        for (const v of unvisited) {\n          if (dist[v] < best) { best = dist[v]; u = v; }\n        }\n        if (u === null || dist[u] === Infinity) break; // unreachable remainder\n\n        unvisited.delete(u);\n\n        for (const { node: v, weight: w } of g[u]) {\n          if (!unvisited.has(v)) continue; // already finalized\n          const alt = dist[u] + w;\n          if (alt < dist[v]) {\n            dist[v] = alt;\n            prev[v] = u;\n          }\n        }\n      }\n\n      return { dist, prev };\n    }\n\n    function reconstructPath(prev, source, target) {\n      const path = [];\n      let cur = target;\n      while (cur != null) {\n        path.push(cur);\n        if (cur === source) break;\n        cur = prev[cur];\n      }\n      if (path[path.length - 1] !== source) return []; // no path\n      return path.reverse();\n    }\n\n    function initUI() {\n      const srcSel = document.getElementById('source');\n      const tgtSel = document.getElementById('target');\n      const output = document.getElementById('output');\n      const runBtn = document.getElementById('run');\n      const nodes = Object.keys(graph);\n\n      for (const n of nodes) {\n        const o1 = document.createElement('option'); o1.value = o1.textContent = n;\n        const o2 = document.createElement('option'); o2.value = o2.textContent = n;\n        srcSel.appendChild(o1);\n        tgtSel.appendChild(o2);\n      }\n      srcSel.value = 'A';\n      tgtSel.value = 'E';\n\n      runBtn.addEventListener('click', () => {\n        const source = srcSel.value;\n        const target = tgtSel.value;\n        const { dist, prev } = dijkstra(graph, source);\n        const path = reconstructPath(prev, source, target);\n\n        let lines = [];\n        lines.push(`Source: ${source}`);\n        lines.push('Shortest distances:');\n        const ordered = Object.keys(dist).sort();\n        for (const n of ordered) {\n          lines.push(`  ${n}: ${Number.isFinite(dist[n]) ? dist[n] : 'unreachable'}`);\n        }\n        lines.push('');\n        if (path.length) {\n          lines.push(`Shortest path ${source} → ${target}: ${path.join(' → ')}`);\n          lines.push(`Total distance: ${dist[target]}`);\n        } else {\n          lines.push(`No path found from ${source} to ${target}.`);\n        }\n        output.textContent = lines.join('\\n');\n      });\n\n      // Run once on load for initial preview\n      runBtn.click();\n    }\n\n    initUI();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Dijkstra’s Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "958d97b0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:26.763Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Two Pointers",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Two Pointers</title>\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; line-height: 1.6; margin: 24px; color: #222; }\n    h1, h2 { margin: 0.2em 0 0.2em; }\n    h1 { font-size: 1.8em; }\n    h2 { font-size: 1.2em; margin-top: 1.2em; }\n    p { margin: 0.5em 0; }\n    ul { margin: 0.5em 0 0.5em 1.2em; }\n    code, pre { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace; }\n    pre { background: #f7f7f9; border: 1px solid #e4e4e7; padding: 12px; overflow: auto; border-radius: 6px; }\n    .note { color: #444; font-size: 0.95em; }\n    .container { max-width: 820px; margin: 0 auto; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Two Pointers</h1>\n    <p>The two pointers technique uses two indices to process data efficiently, often achieving linear time and constant space. It’s useful when the data has structure (like being sorted) or when we can maintain a local invariant while moving pointers.</p>\n\n    <h2>When to Use</h2>\n    <ul>\n      <li>Finding pairs or ranges in sorted arrays (e.g., sum equals target).</li>\n      <li>In-place array transformations (remove duplicates, partitioning, moving zeros).</li>\n      <li>String problems from both ends (palindrome checks, reverse vowels).</li>\n      <li>Linked list fast/slow cycles (Floyd’s cycle detection) and middle element.</li>\n    </ul>\n\n    <h2>Common Patterns</h2>\n    <ul>\n      <li><b>Opposite ends:</b> left at start, right at end; move inward based on condition.</li>\n      <li><b>Same direction (fast/slow):</b> two indices traverse forward at different speeds or roles.</li>\n      <li><b>Partitioning:</b> one pointer reads, another writes to maintain an invariant.</li>\n    </ul>\n\n    <h2>Complexity</h2>\n    <ul>\n      <li>Time: typically O(n)</li>\n      <li>Space: typically O(1)</li>\n    </ul>\n\n    <h2>Example 1: Two Sum in a Sorted Array (Opposite Ends)</h2>\n    <p>Given a sorted array, find a pair that sums to target. Move pointers based on sum.</p>\n    <pre><code>// Returns 0-based indices of a pair that sums to target, or [-1, -1] if none.\nfunction twoSumSorted(nums, target) {\n  let left = 0, right = nums.length - 1;\n  while (left &lt; right) {\n    const sum = nums[left] + nums[right];\n    if (sum === target) return [left, right];\n    if (sum &lt; target) left++;\n    else right--;\n  }\n  return [-1, -1];\n}\n\n// Example:\nconsole.log(twoSumSorted([1, 2, 3, 4, 6, 8, 11], 10)); // [1, 5] (2 + 8)\n</code></pre>\n\n    <h2>Example 2: Remove Duplicates from Sorted Array (Read/Write)</h2>\n    <p>Overwrite duplicates in-place and return the length of the unique prefix.</p>\n    <pre><code>// Returns the count of unique elements; modifies nums in place.\nfunction removeDuplicates(nums) {\n  if (nums.length === 0) return 0;\n  let write = 1; // position to write the next unique element\n  for (let read = 1; read &lt; nums.length; read++) {\n    if (nums[read] !== nums[write - 1]) {\n      nums[write] = nums[read];\n      write++;\n    }\n  }\n  return write;\n}\n\n// Example:\nconst arr = [1, 1, 2, 2, 2, 3, 4, 4];\nconst k = removeDuplicates(arr);\nconsole.log(k, arr.slice(0, k)); // 4, [1, 2, 3, 4]\n</code></pre>\n\n    <h2>Example 3: Reverse Vowels in a String (Opposite Ends)</h2>\n    <p>Swap vowels from both ends until pointers meet.</p>\n    <pre><code>function reverseVowels(s) {\n  const vowels = new Set(['a','e','i','o','u','A','E','I','O','U']);\n  const arr = s.split('');\n  let left = 0, right = arr.length - 1;\n\n  while (left &lt; right) {\n    while (left &lt; right && !vowels.has(arr[left])) left++;\n    while (left &lt; right && !vowels.has(arr[right])) right--;\n    if (left &lt; right) {\n      [arr[left], arr[right]] = [arr[right], arr[left]];\n      left++; right--;\n    }\n  }\n  return arr.join('');\n}\n\n// Example:\nconsole.log(reverseVowels(\"hello world\")); // \"holle werld\"\n</code></pre>\n\n    <h2>Example 4: Move Zeros to End (Partitioning)</h2>\n    <p>Shift non-zero elements forward, fill remaining with zeros.</p>\n    <pre><code>function moveZeroes(nums) {\n  let write = 0;\n  for (let read = 0; read &lt; nums.length; read++) {\n    if (nums[read] !== 0) {\n      nums[write] = nums[read];\n      write++;\n    }\n  }\n  while (write &lt; nums.length) {\n    nums[write] = 0;\n    write++;\n  }\n  return nums;\n}\n\n// Example:\nconsole.log(moveZeroes([0,1,0,3,12])); // [1,3,12,0,0]\n</code></pre>\n\n    <h2>Pitfalls</h2>\n    <ul>\n      <li>Requires structure: many opposite-ends solutions need sorted input.</li>\n      <li>Watch off-by-one errors: loop conditions like while (left &lt; right) vs (left &lt;= right).</li>\n      <li>Duplicates and stability: ensure invariants when skipping or writing elements.</li>\n    </ul>\n\n    <p class=\"note\">Tip: Write down the invariant (what must always be true) before coding, and decide which pointer moves based on that invariant.</p>\n  </div>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Two Pointers"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "95a71320-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:26.930Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Bellman-Ford Algorithm",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Bellman-Ford Algorithm</title>\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", sans-serif;\n      margin: 0;\n      padding: 24px;\n      line-height: 1.6;\n      max-width: 900px;\n    }\n    header {\n      margin-bottom: 16px;\n    }\n    h1 {\n      font-size: 1.8rem;\n      margin: 0 0 8px;\n    }\n    h2 {\n      font-size: 1.3rem;\n      margin: 24px 0 8px;\n    }\n    p {\n      margin: 8px 0;\n    }\n    .container {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n    .card {\n      border: 1px solid rgba(128,128,128,0.3);\n      border-radius: 10px;\n      padding: 16px;\n    }\n    label {\n      display: block;\n      font-weight: 600;\n      margin-bottom: 6px;\n    }\n    input[type=\"number\"], input[type=\"text\"], textarea, select {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px;\n      border-radius: 6px;\n      border: 1px solid rgba(128,128,128,0.4);\n      background: transparent;\n      color: inherit;\n      font-family: inherit;\n      font-size: 0.95rem;\n    }\n    textarea {\n      min-height: 120px;\n      resize: vertical;\n      white-space: pre;\n    }\n    .row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 12px;\n    }\n    .actions {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      margin-top: 12px;\n    }\n    button {\n      border: 1px solid rgba(128,128,128,0.4);\n      background: transparent;\n      color: inherit;\n      padding: 8px 12px;\n      border-radius: 8px;\n      cursor: pointer;\n      font-weight: 600;\n    }\n    button:hover {\n      border-color: rgba(128,128,128,0.7);\n    }\n    .note {\n      font-size: 0.95rem;\n      opacity: 0.85;\n    }\n    .muted {\n      opacity: 0.75;\n    }\n    .error {\n      color: #c62828;\n      margin-top: 8px;\n    }\n    .success {\n      color: #2e7d32;\n      margin-top: 8px;\n    }\n    pre, code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 0.9rem;\n    }\n    pre {\n      overflow: auto;\n      background: rgba(127,127,127,0.08);\n      padding: 12px;\n      border-radius: 8px;\n      border: 1px solid rgba(128,128,128,0.25);\n    }\n    ul {\n      padding-left: 18px;\n    }\n    .result-list {\n      border-top: 1px dashed rgba(128,128,128,0.4);\n      margin-top: 10px;\n      padding-top: 10px;\n    }\n    .pill {\n      display: inline-block;\n      border: 1px solid rgba(128,128,128,0.4);\n      border-radius: 999px;\n      padding: 2px 8px;\n      font-size: 0.85rem;\n      margin-right: 6px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Bellman-Ford Algorithm</h1>\n    <p class=\"muted\">Single-source shortest paths for weighted graphs with negative edges. Also detects negative-weight cycles.</p>\n  </header>\n\n  <div class=\"container\">\n    <section class=\"card\">\n      <h2>Overview</h2>\n      <ul>\n        <li>Computes shortest path distances from a source vertex to all other vertices in a directed weighted graph.</li>\n        <li>Works with negative edge weights, unlike Dijkstra’s algorithm.</li>\n        <li>Detects negative-weight cycles reachable from the source.</li>\n      </ul>\n      <p class=\"pill\">Time complexity: O(V · E)</p>\n      <p class=\"pill\">Space: O(V)</p>\n    </section>\n\n    <section class=\"card\">\n      <h2>Try it</h2>\n      <div class=\"row\">\n        <div>\n          <label for=\"vertices\">Number of vertices (V)</label>\n          <input id=\"vertices\" type=\"number\" min=\"1\" value=\"4\" />\n        </div>\n        <div>\n          <label for=\"source\">Source vertex (0-based)</label>\n          <input id=\"source\" type=\"number\" min=\"0\" value=\"0\" />\n        </div>\n      </div>\n\n      <label for=\"edges\">Edges (one per line: u v w)</label>\n      <textarea id=\"edges\">0 1 4\n0 2 5\n1 2 -3\n2 3 4\n1 3 2</textarea>\n      <p class=\"note\">Vertices are 0-based indices: 0 … V-1. Each line contains \"u v w\" meaning an edge u → v with weight w.</p>\n\n      <div class=\"actions\">\n        <button id=\"run\">Compute shortest paths</button>\n        <button id=\"loadExample\">Load example with negative cycle</button>\n        <button id=\"reset\">Reset</button>\n      </div>\n\n      <div id=\"message\" class=\"error\" style=\"display:none;\"></div>\n      <div id=\"status\" class=\"success\" style=\"display:none;\"></div>\n\n      <div id=\"results\" class=\"result-list\"></div>\n    </section>\n\n    <section class=\"card\">\n      <h2>Pseudocode</h2>\n      <pre><code>// Bellman-Ford(G=(V,E), w, source s)\nfor each v in V:\n    dist[v] = +∞\n    parent[v] = null\ndist[s] = 0\n\n// Relax all edges V-1 times\nfor i = 1 to |V| - 1:\n    for each edge (u, v) in E:\n        if dist[u] + w(u,v) < dist[v]:\n            dist[v] = dist[u] + w(u,v)\n            parent[v] = u\n\n// Check for negative-weight cycles\nfor each edge (u, v) in E:\n    if dist[u] + w(u,v) < dist[v]:\n        report \"Negative-weight cycle reachable from s\"\n        // distances not well-defined\n</code></pre>\n    </section>\n\n    <section class=\"card\">\n      <h2>Notes</h2>\n      <ul>\n        <li>Use Bellman-Ford when edges can be negative or when you need cycle detection.</li>\n        <li>Dijkstra’s algorithm is faster but requires non-negative edge weights.</li>\n        <li>If a negative cycle is reachable from the source, shortest paths are undefined for vertices affected by that cycle.</li>\n      </ul>\n    </section>\n  </div>\n\n  <script>\n    const verticesEl = document.getElementById('vertices');\n    const sourceEl = document.getElementById('source');\n    const edgesEl = document.getElementById('edges');\n    const runBtn = document.getElementById('run');\n    const resetBtn = document.getElementById('reset');\n    const loadExampleBtn = document.getElementById('loadExample');\n    const messageEl = document.getElementById('message');\n    const statusEl = document.getElementById('status');\n    const resultsEl = document.getElementById('results');\n\n    function showMessage(msg) {\n      messageEl.textContent = msg;\n      messageEl.style.display = msg ? 'block' : 'none';\n      statusEl.style.display = 'none';\n      resultsEl.innerHTML = '';\n    }\n    function showStatus(msg) {\n      statusEl.textContent = msg;\n      statusEl.style.display = msg ? 'block' : 'none';\n      messageEl.style.display = 'none';\n    }\n\n    function parseEdges(text, V) {\n      const edges = [];\n      const lines = text.split('\\n').map(l => l.trim()).filter(l => l.length);\n      for (let i = 0; i < lines.length; i++) {\n        const parts = lines[i].split(/\\s+/);\n        if (parts.length !== 3) {\n          throw new Error(`Invalid edge on line ${i+1}: expected \"u v w\"`);\n        }\n        const u = Number(parts[0]);\n        const v = Number(parts[1]);\n        const w = Number(parts[2]);\n        if (!Number.isFinite(u) || !Number.isFinite(v) || !Number.isFinite(w)) {\n          throw new Error(`Invalid numbers on line ${i+1}`);\n        }\n        if (u < 0 || v < 0 || u >= V || v >= V) {\n          throw new Error(`Vertex out of range on line ${i+1}: u=${u}, v=${v}, V=${V}`);\n        }\n        edges.push({ u, v, w });\n      }\n      return edges;\n    }\n\n    function bellmanFord(V, edges, source) {\n      const dist = Array(V).fill(Infinity);\n      const parent = Array(V).fill(null);\n      dist[source] = 0;\n\n      // Relax edges V-1 times\n      for (let i = 0; i < V - 1; i++) {\n        let updated = false;\n        for (const { u, v, w } of edges) {\n          if (Number.isFinite(dist[u]) && dist[u] + w < dist[v]) {\n            dist[v] = dist[u] + w;\n            parent[v] = u;\n            updated = true;\n          }\n        }\n        if (!updated) break; // Early stop if no changes\n      }\n\n      // Check for negative cycles\n      let negativeCycle = false;\n      for (const { u, v, w } of edges) {\n        if (Number.isFinite(dist[u]) && dist[u] + w < dist[v]) {\n          negativeCycle = true;\n          break;\n        }\n      }\n\n      return { dist, parent, negativeCycle };\n    }\n\n    function reconstructPath(parent, s, t) {\n      if (t === null) return null;\n      const path = [];\n      let cur = t;\n      const visited = new Set();\n      while (cur !== null) {\n        path.push(cur);\n        if (cur === s) break;\n        cur = parent[cur];\n        // Avoid infinite loop if parent chain is corrupted\n        if (cur !== null) {\n          if (visited.has(cur)) break;\n          visited.add(cur);\n        }\n      }\n      if (path[path.length - 1] !== s) return null;\n      return path.reverse();\n    }\n\n    function renderResults(V, source, dist, parent, negativeCycle) {\n      const infinity = '\\u221E';\n      let html = '';\n\n      if (negativeCycle) {\n        html += '<p class=\"error\">Negative-weight cycle detected that is reachable from the source. Shortest paths are not well-defined for affected vertices.</p>';\n      } else {\n        html += '<p class=\"success\">No negative-weight cycles detected.</p>';\n      }\n\n      html += '<h3>Distances</h3><ul>';\n      for (let v = 0; v < V; v++) {\n        const d = Number.isFinite(dist[v]) ? dist[v] : infinity;\n        html += `<li>dist[${v}] = ${d}</li>`;\n      }\n      html += '</ul>';\n\n      html += '<h3>Paths from source</h3><ul>';\n      for (let v = 0; v < V; v++) {\n        if (!Number.isFinite(dist[v])) {\n          html += `<li>${source} → ${v}: unreachable</li>`;\n          continue;\n        }\n        const path = reconstructPath(parent, source, v);\n        if (path) {\n          html += `<li>${source} → ${v}: ${path.join(' → ')}</li>`;\n        } else {\n          html += `<li>${source} → ${v}: (path unavailable)</li>`;\n        }\n      }\n      html += '</ul>';\n\n      resultsEl.innerHTML = html;\n    }\n\n    function onRun() {\n      showMessage('');\n      showStatus('');\n      resultsEl.innerHTML = '';\n\n      const V = Number(verticesEl.value);\n      const source = Number(sourceEl.value);\n\n      if (!Number.isInteger(V) || V <= 0) {\n        showMessage('Please enter a valid number of vertices (V ≥ 1).');\n        return;\n      }\n      if (!Number.isInteger(source) || source < 0 || source >= V) {\n        showMessage(`Please enter a valid source vertex in [0, ${V-1}].`);\n        return;\n      }\n\n      let edges;\n      try {\n        edges = parseEdges(edgesEl.value, V);\n      } catch (e) {\n        showMessage(e.message);\n        return;\n      }\n\n      const { dist, parent, negativeCycle } = bellmanFord(V, edges, source);\n      renderResults(V, source, dist, parent, negativeCycle);\n      if (!negativeCycle) {\n        showStatus('Computation completed successfully.');\n      }\n    }\n\n    function onReset() {\n      verticesEl.value = 4;\n      sourceEl.value = 0;\n      edgesEl.value = '0 1 4\\n0 2 5\\n1 2 -3\\n2 3 4\\n1 3 2';\n      showMessage('');\n      showStatus('');\n      resultsEl.innerHTML = '';\n    }\n\n    function onLoadExample() {\n      verticesEl.value = 5;\n      sourceEl.value = 0;\n      edgesEl.value =\n        '0 1 1\\n' +\n        '1 2 -1\\n' +\n        '2 3 -1\\n' +\n        '3 1 -1\\n' + // forms a negative cycle 1->2->3->1\n        '0 4 10';\n      showMessage('');\n      showStatus('Loaded example with a reachable negative cycle.');\n      resultsEl.innerHTML = '';\n    }\n\n    runBtn.addEventListener('click', onRun);\n    resetBtn.addEventListener('click', onReset);\n    loadExampleBtn.addEventListener('click', onLoadExample);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Bellman-Ford Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "95cbb220-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:27.170Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Breadth-First Search (BFS)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Breadth-First Search (BFS)</title>\n  <style>\n    :root { color-scheme: light dark; }\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; line-height: 1.5; margin: 2rem; max-width: 900px; }\n    h1, h2 { margin: 0.2rem 0 0.6rem; }\n    .card { border: 1px solid rgba(0,0,0,0.15); border-radius: 8px; padding: 1rem; margin: 1rem 0; }\n    textarea, input[type=\"text\"] { width: 100%; box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n    textarea { min-height: 10rem; }\n    .row { display: flex; gap: 0.75rem; align-items: center; flex-wrap: wrap; }\n    .row > * { flex: 1 1 auto; }\n    .controls { display: flex; gap: 0.5rem; align-items: center; flex-wrap: wrap; margin: 0.5rem 0; }\n    button { padding: 0.6rem 1rem; border: 1px solid rgba(0,0,0,0.2); border-radius: 6px; background: #2563eb; color: white; cursor: pointer; }\n    button.secondary { background: #6b7280; }\n    button:disabled { opacity: 0.6; cursor: not-allowed; }\n    code, pre { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n    pre { background: rgba(0,0,0,0.05); padding: 0.75rem; border-radius: 6px; overflow: auto; }\n    .result { white-space: pre-wrap; word-break: break-word; }\n    .pill { display:inline-block; padding: 0.1rem 0.5rem; border-radius: 999px; background: #e5e7eb; margin-right: 0.25rem; }\n    .muted { color: #6b7280; font-size: 0.95rem; }\n  </style>\n</head>\n<body>\n  <h1>Breadth-First Search (BFS)</h1>\n  <p>\n    Breadth-First Search is a graph traversal algorithm that explores a graph level by level.\n    Starting from a source node, it visits all neighbors (distance 1), then all nodes at distance 2, and so on.\n    BFS is ideal for finding the shortest number of edges between nodes in an unweighted graph.\n  </p>\n\n  <div class=\"card\">\n    <h2>Key ideas</h2>\n    <ul>\n      <li>Uses a queue (FIFO) to process nodes in the order they are discovered.</li>\n      <li>Tracks visited nodes to avoid revisiting and infinite loops.</li>\n      <li>In unweighted graphs, BFS finds the shortest path (by edge count).</li>\n    </ul>\n    <p class=\"muted\">\n      Complexity: Time O(V + E), Space O(V), where V is the number of vertices and E is the number of edges.\n    </p>\n  </div>\n\n  <div class=\"card\">\n    <h2>Pseudocode</h2>\n    <pre><code>procedure BFS(G, s):\n  for each vertex v in G:\n    visited[v] = false\n    parent[v] = null\n    dist[v] = +infinity\n\n  create an empty queue Q\n  visited[s] = true\n  dist[s] = 0\n  enqueue(Q, s)\n\n  while Q is not empty:\n    u = dequeue(Q)\n    for each neighbor w of u:\n      if not visited[w]:\n        visited[w] = true\n        parent[w] = u\n        dist[w] = dist[u] + 1\n        enqueue(Q, w)\n</code></pre>\n  </div>\n\n  <div class=\"card\">\n    <h2>Try it</h2>\n    <p>Enter a graph and a start node. You can provide edges or adjacency lists in flexible formats:</p>\n    <ul>\n      <li>Edge list (one per line): A B, A C, B D</li>\n      <li>CSV: A,B</li>\n      <li>Adjacency: A: B C, or A -> B, C</li>\n      <li>Single node line (no edges): H</li>\n    </ul>\n\n    <div class=\"row\">\n      <div>\n        <label for=\"edges\"><strong>Graph input</strong></label>\n        <textarea id=\"edges\" spellcheck=\"false\">A B\nA C\nB D\nB E\nC F\nE G</textarea>\n        <div class=\"controls\">\n          <label><input type=\"checkbox\" id=\"directed\"> Directed graph</label>\n          <span class=\"muted\">Unchecked = undirected.</span>\n        </div>\n      </div>\n      <div>\n        <label for=\"start\"><strong>Start node</strong></label>\n        <input id=\"start\" type=\"text\" value=\"A\" />\n        <div class=\"controls\">\n          <button id=\"run\">Run BFS</button>\n          <button id=\"reset\" class=\"secondary\" type=\"button\">Reset</button>\n        </div>\n      </div>\n    </div>\n\n    <div id=\"output\" class=\"result\"></div>\n  </div>\n\n  <div class=\"card\">\n    <h2>What BFS is great for</h2>\n    <ul>\n      <li>Shortest paths in unweighted graphs (routes, friend-of-a-friend, minimum hops).</li>\n      <li>Level-order traversal of trees.</li>\n      <li>Checking connectivity and computing components (by repeating BFS from unvisited nodes).</li>\n      <li>Bipartite testing (2-coloring by levels).</li>\n    </ul>\n  </div>\n\n  <script>\n    function parseGraph(text, directed) {\n      const adj = new Map();\n\n      const ensure = (v) => {\n        if (!adj.has(v)) adj.set(v, new Set());\n      };\n\n      const addEdge = (u, v) => {\n        ensure(u); ensure(v);\n        adj.get(u).add(v);\n        if (!directed) adj.get(v).add(u);\n      };\n\n      const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n      for (const line of lines) {\n        // Adjacency formats: \"A: B C\", \"A -> B, C\"\n        if (line.includes(':') || line.includes('->')) {\n          const parts = line.split(/:|->/);\n          if (parts.length >= 2) {\n            const u = parts[0].trim();\n            const right = parts.slice(1).join(' ').trim();\n            const neigh = right.split(/[,\\s]+/).filter(Boolean);\n            ensure(u);\n            if (neigh.length === 0) continue;\n            for (const v of neigh) addEdge(u, v);\n            continue;\n          }\n        }\n        // Edge or list formats: \"A B\", \"A,B\", \"A B C\" (A connected to B and C)\n        const toks = line.split(/[,\\s]+/).filter(Boolean);\n        if (toks.length === 1) {\n          ensure(toks[0]);\n        } else if (toks.length === 2) {\n          addEdge(toks[0], toks[1]);\n        } else if (toks.length > 2) {\n          const u = toks[0];\n          for (let i = 1; i < toks.length; i++) addEdge(u, toks[i]);\n        }\n      }\n\n      // Normalize to arrays sorted for stable output\n      const adjList = {};\n      for (const [u, set] of adj.entries()) {\n        adjList[u] = Array.from(set).sort();\n      }\n      return adjList;\n    }\n\n    function bfs(adj, start) {\n      const nodes = Object.keys(adj);\n      const visited = new Set();\n      const parent = {};\n      const dist = {};\n      for (const v of nodes) {\n        parent[v] = null;\n        dist[v] = Infinity;\n      }\n\n      // If start is not known, include it as isolated\n      if (!(start in adj)) {\n        adj[start] = [];\n      }\n\n      const order = [];\n      const levels = new Map(); // dist -> nodes in discovery order\n      const q = [];\n      visited.add(start);\n      dist[start] = 0;\n      q.push(start);\n\n      while (q.length) {\n        const u = q.shift();\n        order.push(u);\n        const d = dist[u];\n        if (!levels.has(d)) levels.set(d, []);\n        levels.get(d).push(u);\n\n        for (const w of (adj[u] || [])) {\n          if (!visited.has(w)) {\n            visited.add(w);\n            parent[w] = u;\n            dist[w] = d + 1;\n            q.push(w);\n          }\n        }\n      }\n\n      return { order, dist, parent, levels };\n    }\n\n    function formatLevels(levels) {\n      const maxLevel = Math.max(...levels.keys());\n      let out = \"\";\n      for (let d = 0; d <= maxLevel; d++) {\n        const nodes = levels.get(d) || [];\n        out += `Level ${d}: ${nodes.join(\", \")}\\n`;\n      }\n      return out.trim();\n    }\n\n    function unreachableNodes(adj, visitedList) {\n      const all = new Set(Object.keys(adj));\n      for (const v of visitedList) all.delete(v);\n      return Array.from(all).sort();\n    }\n\n    function onRun() {\n      const edgesText = document.getElementById('edges').value;\n      const start = (document.getElementById('start').value || \"\").trim();\n      const directed = document.getElementById('directed').checked;\n      const out = document.getElementById('output');\n      out.textContent = \"\";\n\n      if (!start) {\n        out.textContent = \"Please provide a start node.\";\n        return;\n      }\n\n      const adj = parseGraph(edgesText, directed);\n      const { order, dist, parent, levels } = bfs(adj, start);\n\n      let result = \"\";\n      result += `Traversal order: ${order.join(\" -> \")}\\n\\n`;\n\n      const unreachable = unreachableNodes(adj, order);\n      if (unreachable.length) {\n        result += `Unreachable from ${start}: ${unreachable.join(\", \")}\\n\\n`;\n      }\n\n      result += \"Levels (distance from start):\\n\";\n      result += formatLevels(levels) + \"\\n\\n\";\n\n      // Show distances for discovered nodes\n      const discovered = order.slice();\n      const distLines = discovered.map(v => `${v}: ${dist[v]}`);\n      result += \"Distances:\\n\" + distLines.join(\", \") + \"\\n\\n\";\n\n      // Optional: show tree edges (parent pointers)\n      const treeEdges = discovered.filter(v => parent[v] !== null).map(v => `${parent[v]} -> ${v}`);\n      result += \"BFS tree edges:\\n\" + (treeEdges.length ? treeEdges.join(\", \") : \"(none)\") + \"\\n\";\n\n      out.textContent = result;\n    }\n\n    function onReset() {\n      document.getElementById('edges').value = `A B\nA C\nB D\nB E\nC F\nE G`;\n      document.getElementById('start').value = \"A\";\n      document.getElementById('directed').checked = false;\n      document.getElementById('output').textContent = \"\";\n    }\n\n    document.getElementById('run').addEventListener('click', onRun);\n    document.getElementById('reset').addEventListener('click', onReset);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Breadth-First Search (BFS)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9646ae80-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:27.976Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Topological Sort",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Topological Sort</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; background: #f7f7f9; color: #222; }\n    .container { max-width: 800px; margin: 0 auto; padding: 24px; }\n    h1 { font-size: 1.6rem; margin: 0 0 8px; }\n    h2 { font-size: 1.2rem; margin: 24px 0 8px; }\n    p { margin: 8px 0; }\n    ul { margin: 8px 0 8px 20px; }\n    label { display: block; font-weight: 600; margin: 16px 0 8px; }\n    textarea { width: 100%; min-height: 140px; padding: 8px; border: 1px solid #ccc; border-radius: 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; background: #fff; }\n    .controls { display: flex; gap: 8px; margin-top: 8px; flex-wrap: wrap; }\n    button { padding: 8px 12px; border: 1px solid #bbb; border-radius: 6px; background: #fff; cursor: pointer; }\n    button:hover { background: #f0f0f0; }\n    .output { white-space: pre-wrap; background: #fff; border: 1px solid #ccc; border-radius: 6px; padding: 8px; margin-top: 12px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n    .note { font-size: 0.95rem; color: #444; }\n    .small { font-size: 0.9rem; color: #555; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Topological Sort</h1>\n    <p>Topological sorting orders the vertices of a directed acyclic graph (DAG) so that for every directed edge u → v, u appears before v in the order.</p>\n\n    <h2>When is it useful?</h2>\n    <ul>\n      <li>Task scheduling with dependencies</li>\n      <li>Build systems and compilation order</li>\n      <li>Resolving package/module dependency chains</li>\n    </ul>\n\n    <h2>Algorithms</h2>\n    <p class=\"note\">Two common approaches (both run in O(V + E)):</p>\n    <ul>\n      <li>Kahn’s Algorithm (BFS):\n        <ul>\n          <li>Compute indegrees of all nodes</li>\n          <li>Start with all nodes having indegree 0</li>\n          <li>Repeatedly remove one, append to order, decrement indegrees of its neighbors</li>\n          <li>If nodes remain with indegree &gt; 0, the graph has a cycle (no topo order)</li>\n        </ul>\n      </li>\n      <li>DFS-based:\n        <ul>\n          <li>Depth-first search; on finishing a node, push it to a stack</li>\n          <li>Reverse the stack for the topological order</li>\n          <li>Detect cycles via a recursion stack</li>\n        </ul>\n      </li>\n    </ul>\n\n    <h2>Try it</h2>\n    <p class=\"small\">Enter directed edges. Formats supported: \"A->B\", \"A B\". You may also list isolated nodes on their own lines.</p>\n\n    <label for=\"edgesInput\">Graph edges (one per line):</label>\n    <textarea id=\"edgesInput\" aria-label=\"Graph edges input\">A->B\nA->C\nB->D\nC->D\nD->E</textarea>\n\n    <div class=\"controls\">\n      <button id=\"runBtn\">Run Topological Sort</button>\n      <button id=\"exampleDagBtn\">Load DAG Example</button>\n      <button id=\"exampleCycleBtn\">Load Cyclic Example</button>\n      <button id=\"clearBtn\">Clear</button>\n    </div>\n\n    <div id=\"result\" class=\"output\" aria-live=\"polite\"></div>\n\n    <h2>Notes</h2>\n    <ul>\n      <li>Topological sort exists only if the graph is a DAG (no directed cycles).</li>\n      <li>If a cycle is present, you’ll get an error indicating which nodes are still cyclic/dependent.</li>\n    </ul>\n  </div>\n\n  <script>\n    function parseGraph(text) {\n      const lines = text.split(/\\r?\\n|,/).map(s => s.trim()).filter(Boolean);\n      const edges = [];\n      const singletons = [];\n      for (const line of lines) {\n        const arrow = line.match(/^(.+?)->(.+)$/);\n        if (arrow) {\n          const u = arrow[1].trim();\n          const v = arrow[2].trim();\n          if (u && v) edges.push([u, v]);\n          continue;\n        }\n        const parts = line.split(/\\s+/).filter(Boolean);\n        if (parts.length >= 2) {\n          edges.push([parts[0], parts[1]]);\n        } else if (parts.length === 1) {\n          singletons.push(parts[0]);\n        }\n      }\n      // Deduplicate edges\n      const seen = new Set();\n      const unique = [];\n      for (const [u, v] of edges) {\n        const key = u + \"→\" + v;\n        if (!seen.has(key)) {\n          seen.add(key);\n          unique.push([u, v]);\n        }\n      }\n      return { edges: unique, singletons };\n    }\n\n    function topoSortKahn(edges, extraNodes = []) {\n      const nodes = new Set(extraNodes);\n      for (const [u, v] of edges) {\n        nodes.add(u);\n        nodes.add(v);\n      }\n\n      // Initialize adjacency and indegrees\n      const adj = new Map();\n      const indeg = new Map();\n      for (const n of nodes) {\n        adj.set(n, []);\n        indeg.set(n, 0);\n      }\n      for (const [u, v] of edges) {\n        adj.get(u).push(v);\n        indeg.set(v, indeg.get(v) + 1);\n      }\n\n      // Queue of indegree-0 nodes (sorted for deterministic output)\n      const queue = Array.from(nodes).filter(n => indeg.get(n) === 0).sort();\n      const order = [];\n      while (queue.length) {\n        const n = queue.shift();\n        order.push(n);\n        for (const m of adj.get(n)) {\n          indeg.set(m, indeg.get(m) - 1);\n          if (indeg.get(m) === 0) {\n            // Maintain sorted insertion for determinism\n            queue.push(m);\n            queue.sort();\n          }\n        }\n      }\n\n      const isDag = order.length === nodes.size;\n      const remaining = [];\n      if (!isDag) {\n        for (const n of nodes) {\n          if (indeg.get(n) > 0) remaining.push(n);\n        }\n        remaining.sort();\n      }\n\n      return { order, isDag, remaining };\n    }\n\n    function run() {\n      const input = document.getElementById('edgesInput').value;\n      const { edges, singletons } = parseGraph(input);\n      if (edges.length === 0 && singletons.length === 0) {\n        show(\"Please enter at least one edge or node.\");\n        return;\n      }\n      const result = topoSortKahn(edges, singletons);\n      if (result.isDag) {\n        show(\"Topological order:\\n\" + result.order.join(\" -> \"));\n      } else {\n        show(\n          \"Cycle detected: no topological ordering exists.\\n\" +\n          \"Nodes still cyclic/dependent: \" + result.remaining.join(\", \")\n        );\n      }\n    }\n\n    function show(text) {\n      document.getElementById('result').textContent = text;\n    }\n\n    document.getElementById('runBtn').addEventListener('click', run);\n    document.getElementById('clearBtn').addEventListener('click', function () {\n      document.getElementById('edgesInput').value = \"\";\n      show(\"\");\n    });\n    document.getElementById('exampleDagBtn').addEventListener('click', function () {\n      document.getElementById('edgesInput').value = [\n        \"A->B\",\n        \"A->C\",\n        \"B->D\",\n        \"C->D\",\n        \"D->E\",\n        \"F\" // isolated node\n      ].join(\"\\n\");\n      run();\n    });\n    document.getElementById('exampleCycleBtn').addEventListener('click', function () {\n      document.getElementById('edgesInput').value = [\n        \"A->B\",\n        \"B->C\",\n        \"C->A\",\n        \"C->D\"\n      ].join(\"\\n\");\n      run();\n    });\n\n    // Run once on load with the default example\n    window.addEventListener('DOMContentLoaded', run);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Topological Sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "97274a80-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:29.448Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Depth-First Search (DFS)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Depth-First Search (DFS)</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #f9fafb;\n      --fg: #111827;\n      --muted: #6b7280;\n      --accent: #2563eb;\n      --border: #e5e7eb;\n      --chip: #e0e7ff;\n    }\n    html, body {\n      margin: 0;\n      padding: 0;\n      background: var(--bg);\n      color: var(--fg);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      line-height: 1.5;\n    }\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 24px;\n    }\n    h1, h2, h3 {\n      margin: 0 0 12px 0;\n      font-weight: 700;\n    }\n    p {\n      margin: 0 0 12px 0;\n    }\n    .card {\n      background: white;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 16px;\n      box-shadow: 0 1px 2px rgba(0,0,0,0.04);\n      margin-bottom: 16px;\n    }\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      align-items: center;\n    }\n    label {\n      font-size: 14px;\n      color: var(--muted);\n      margin-right: 8px;\n    }\n    select, button, input[type=\"checkbox\"] {\n      font-size: 14px;\n    }\n    button {\n      background: var(--accent);\n      color: white;\n      border: none;\n      border-radius: 8px;\n      padding: 10px 14px;\n      cursor: pointer;\n    }\n    button:hover {\n      filter: brightness(1.05);\n    }\n    .chips {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n    .chip {\n      background: var(--chip);\n      color: #1f2937;\n      border: 1px solid #c7d2fe;\n      padding: 6px 10px;\n      border-radius: 999px;\n      font-size: 13px;\n    }\n    pre, code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", monospace;\n      font-size: 13px;\n    }\n    pre {\n      background: #0f172a;\n      color: #e5e7eb;\n      padding: 12px;\n      border-radius: 8px;\n      overflow: auto;\n      border: 1px solid #1f2937;\n    }\n    .muted {\n      color: var(--muted);\n    }\n    ul {\n      margin: 8px 0 8px 20px;\n    }\n    .graph {\n      font-family: ui-monospace, monospace;\n      background: #fff;\n      border: 1px dashed var(--border);\n      border-radius: 8px;\n      padding: 10px;\n      white-space: pre-wrap;\n    }\n  </style>\n</head>\n<body>\n  <main class=\"container\">\n    <h1>Depth-First Search (DFS)</h1>\n    <p>\n      Depth-First Search is a graph traversal algorithm that explores as far as possible along each branch before backtracking.\n      It can be implemented recursively or iteratively with an explicit stack.\n    </p>\n\n    <section class=\"card\">\n      <h2>Key ideas</h2>\n      <ul>\n        <li>Use a visited set to avoid revisiting nodes.</li>\n        <li>Recursive DFS uses the call stack; iterative DFS uses a manual stack.</li>\n        <li>Neighbor order affects traversal order, but not correctness.</li>\n        <li>Works on trees and general graphs (directed or undirected).</li>\n      </ul>\n    </section>\n\n    <section class=\"card\">\n      <h2>Pseudocode</h2>\n      <h3>Recursive DFS</h3>\n      <pre><code>// DFS(G, start):\nvisited = empty set\n\nfunction visit(v):\n  if v in visited: return\n  add v to visited\n  for each n in G[v]:\n    visit(n)\n\nvisit(start)</code></pre>\n\n      <h3>Iterative DFS (with a stack)</h3>\n      <pre><code>// DFS(G, start):\nvisited = empty set\nstack = [start]\n\nwhile stack not empty:\n  v = stack.pop()\n  if v not in visited:\n    add v to visited\n    // push neighbors so the first neighbor is visited first\n    for each n in reverse(G[v]):\n      if n not in visited:\n        stack.push(n)</code></pre>\n    </section>\n\n    <section class=\"card\">\n      <h2>Try it</h2>\n      <p class=\"muted\">Graph (undirected) adjacency list:</p>\n      <div class=\"graph\" id=\"graphView\"></div>\n\n      <div class=\"row\" style=\"margin-top:12px;\">\n        <div>\n          <label for=\"start\">Start node</label>\n          <select id=\"start\">\n            <option>A</option>\n            <option>B</option>\n            <option>C</option>\n            <option>D</option>\n            <option>E</option>\n            <option>F</option>\n          </select>\n        </div>\n        <div>\n          <label>Variant</label>\n          <label><input type=\"radio\" name=\"variant\" value=\"recursive\" checked /> Recursive</label>\n          <label><input type=\"radio\" name=\"variant\" value=\"iterative\" /> Iterative (stack)</label>\n        </div>\n        <div>\n          <label><input type=\"checkbox\" id=\"showTrace\" /> Show trace</label>\n        </div>\n        <button id=\"runBtn\">Run DFS</button>\n      </div>\n\n      <div style=\"margin-top:16px;\">\n        <h3>Visit order</h3>\n        <div class=\"chips\" id=\"order\"></div>\n      </div>\n\n      <div style=\"margin-top:16px; display:none;\" id=\"traceBox\">\n        <h3>Trace</h3>\n        <pre id=\"trace\"></pre>\n      </div>\n    </section>\n\n    <section class=\"card\">\n      <h2>Complexity</h2>\n      <ul>\n        <li>Time: O(V + E), where V is the number of vertices and E is the number of edges.</li>\n        <li>Space:\n          <ul>\n            <li>Recursive: O(V) worst case for call stack.</li>\n            <li>Iterative: O(V) worst case for the explicit stack.</li>\n          </ul>\n        </li>\n      </ul>\n    </section>\n\n    <section class=\"card\">\n      <h2>Common uses</h2>\n      <ul>\n        <li>Cycle detection and connectivity checks.</li>\n        <li>Topological sorting (on DAGs).</li>\n        <li>Path finding in mazes and puzzles.</li>\n        <li>Generating spanning trees.</li>\n      </ul>\n    </section>\n  </main>\n\n  <script>\n    // Example undirected graph (adjacency list)\n    const graph = {\n      A: ['B', 'C'],\n      B: ['A', 'D', 'E'],\n      C: ['A', 'F'],\n      D: ['B'],\n      E: ['B', 'F'],\n      F: ['C', 'E']\n    };\n\n    function renderGraph(g) {\n      const lines = Object.keys(g)\n        .sort()\n        .map(v => `${v}: [${g[v].join(', ')}]`)\n        .join('\\n');\n      document.getElementById('graphView').textContent = lines;\n    }\n\n    function dfsRecursive(g, start) {\n      const visited = new Set();\n      const order = [];\n      const trace = [];\n      function visit(v) {\n        if (visited.has(v)) {\n          trace.push(`Return: ${v} already visited`);\n          return;\n        }\n        visited.add(v);\n        order.push(v);\n        trace.push(`Visit ${v}`);\n        const neighbors = g[v] || [];\n        for (const n of neighbors) {\n          trace.push(`Consider edge ${v} -> ${n}`);\n          if (!visited.has(n)) {\n            trace.push(`Go deeper to ${n}`);\n          } else {\n            trace.push(`Skip ${n} (already visited)`);\n          }\n          visit(n);\n        }\n        trace.push(`Backtrack from ${v}`);\n      }\n      visit(start);\n      return { order, trace };\n    }\n\n    function dfsIterative(g, start) {\n      const visited = new Set();\n      const order = [];\n      const trace = [];\n      const stack = [start];\n      trace.push(`Push ${start}`);\n      while (stack.length) {\n        const v = stack.pop();\n        trace.push(`Pop ${v}`);\n        if (!visited.has(v)) {\n          visited.add(v);\n          order.push(v);\n          trace.push(`Visit ${v}`);\n          const neighbors = g[v] || [];\n          // Push in reverse to visit left-to-right like recursive\n          for (let i = neighbors.length - 1; i >= 0; i--) {\n            const n = neighbors[i];\n            trace.push(`Consider edge ${v} -> ${n}`);\n            if (!visited.has(n)) {\n              stack.push(n);\n              trace.push(`Push ${n}`);\n            } else {\n              trace.push(`Skip ${n} (already visited)`);\n            }\n          }\n        } else {\n          trace.push(`Skip ${v} (already visited)`);\n        }\n      }\n      return { order, trace };\n    }\n\n    function run() {\n      const start = document.getElementById('start').value;\n      const variant = document.querySelector('input[name=\"variant\"]:checked').value;\n      const showTrace = document.getElementById('showTrace').checked;\n\n      const result = variant === 'recursive'\n        ? dfsRecursive(graph, start)\n        : dfsIterative(graph, start);\n\n      const orderBox = document.getElementById('order');\n      orderBox.innerHTML = '';\n      result.order.forEach(v => {\n        const span = document.createElement('span');\n        span.className = 'chip';\n        span.textContent = v;\n        orderBox.appendChild(span);\n      });\n\n      const traceBox = document.getElementById('traceBox');\n      const tracePre = document.getElementById('trace');\n      if (showTrace) {\n        traceBox.style.display = 'block';\n        tracePre.textContent = result.trace.join('\\n');\n      } else {\n        traceBox.style.display = 'none';\n        tracePre.textContent = '';\n      }\n    }\n\n    document.getElementById('runBtn').addEventListener('click', run);\n    renderGraph(graph);\n    // Initial run\n    run();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Depth-First Search (DFS)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "982d21c0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:31.164Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Floyd-Warshall Algorithm",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<title>Floyd-Warshall Algorithm</title>\n<style>\n  body { font-family: system-ui, Arial, sans-serif; max-width: 900px; margin: 2rem auto; padding: 0 1rem; line-height: 1.6; color: #222; }\n  h1 { font-size: 1.8rem; margin-bottom: 0.5rem; }\n  h2 { font-size: 1.4rem; margin-top: 1.5rem; }\n  h3 { font-size: 1.2rem; margin-top: 1rem; }\n  pre { background: #f7f7f9; padding: 0.75rem; overflow: auto; border: 1px solid #eee; border-radius: 6px; }\n  code { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n  label, button, input, textarea { font-size: 1rem; }\n  textarea { width: 100%; min-height: 7rem; box-sizing: border-box; padding: 0.5rem; }\n  button { margin-top: 0.5rem; padding: 0.5rem 0.75rem; cursor: pointer; }\n  .output { margin-top: 1rem; }\n  .alert { color: #b00020; }\n  table { border-collapse: collapse; margin-top: 0.5rem; width: 100%; }\n  td, th { border: 1px solid #ddd; padding: 0.35rem 0.5rem; text-align: center; }\n  th { background: #fafafa; }\n  .small { font-size: 0.92rem; color: #555; }\n</style>\n</head>\n<body>\n  <h1>Floyd-Warshall Algorithm</h1>\n  <p>\n    Floyd–Warshall computes shortest-path distances between every pair of vertices in a weighted graph.\n    It supports negative edge weights but not negative cycles.\n  </p>\n  <ul>\n    <li>Input: weighted directed or undirected graph (adjacency matrix).</li>\n    <li>Output: distance matrix where entry (i, j) is the shortest-path distance from i to j.</li>\n    <li>Time complexity: O(n^3). Space complexity: O(n^2).</li>\n  </ul>\n\n  <h2>Pseudocode</h2>\n  <pre><code>for k in 0..n-1:\n  for i in 0..n-1:\n    for j in 0..n-1:\n      if dist[i][k] + dist[k][j] &lt; dist[i][j]:\n        dist[i][j] = dist[i][k] + dist[k][j]</code></pre>\n\n  <h2>Try it</h2>\n  <p class=\"small\">\n    Enter an adjacency matrix (comma- or space-separated rows). Use \"inf\" for no edge. Diagonal entries can be 0 or \"inf\" (will be set to 0).\n  </p>\n  <textarea id=\"matrix\" placeholder=\"Example:\n0,3,inf,7\n8,0,2,inf\n5,inf,0,1\ninf,inf,inf,0\"></textarea>\n  <div>\n    <label><input type=\"checkbox\" id=\"undirected\"> Treat as undirected (symmetrize matrix)</label>\n  </div>\n  <button id=\"run\">Compute shortest paths</button>\n  <div class=\"output\" id=\"result\"></div>\n\n  <script>\n    function $(id) { return document.getElementById(id); }\n\n    function parseMatrix(text) {\n      const lines = text.trim().split(/\\n+/).filter(l => l.trim().length > 0);\n      if (lines.length === 0) throw new Error('Please enter an adjacency matrix.');\n      const matrix = lines.map((line, idx) => {\n        const cells = line.trim().split(/,\\s*|\\s+/);\n        if (cells.length === 0) throw new Error('Empty row at line ' + (idx + 1));\n        return cells.map(cell => {\n          if (!cell || /^inf(?:inity)?$/i.test(cell)) return Infinity;\n          const num = Number(cell);\n          if (!Number.isFinite(num)) throw new Error('Invalid number \"' + cell + '\" at line ' + (idx + 1));\n          return num;\n        });\n      });\n      const n = matrix.length;\n      for (let i = 0; i < n; i++) {\n        if (matrix[i].length !== n) {\n          throw new Error('Matrix must be square: row ' + i + ' has ' + matrix[i].length + ' entries, expected ' + n + '.');\n        }\n      }\n      return { matrix, n };\n    }\n\n    function showTable(mat) {\n      const n = mat.length;\n      let html = '<table><thead><tr><th></th>';\n      for (let j = 0; j < n; j++) html += '<th>' + j + '</th>';\n      html += '</tr></thead><tbody>';\n      for (let i = 0; i < n; i++) {\n        html += '<tr><th>' + i + '</th>';\n        for (let j = 0; j < n; j++) {\n          const val = mat[i][j];\n          const text = (val === Infinity) ? 'inf' : String(Math.round(val * 1000) / 1000);\n          html += '<td>' + text + '</td>';\n        }\n        html += '</tr>';\n      }\n      html += '</tbody></table>';\n      return html;\n    }\n\n    function floydWarshall(dist) {\n      const n = dist.length;\n      for (let i = 0; i < n; i++) {\n        if (dist[i][i] === Infinity) dist[i][i] = 0;\n      }\n      for (let k = 0; k < n; k++) {\n        for (let i = 0; i < n; i++) {\n          const dik = dist[i][k];\n          if (dik === Infinity) continue;\n          for (let j = 0; j < n; j++) {\n            const alt = dik + dist[k][j];\n            if (alt < dist[i][j]) dist[i][j] = alt;\n          }\n        }\n      }\n      return dist;\n    }\n\n    function symmetrize(mat) {\n      const n = mat.length;\n      for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n          const a = mat[i][j], b = mat[j][i];\n          // Choose the smaller weight if both directions provided, else whichever is defined\n          let w;\n          if (a === Infinity && b === Infinity) w = Infinity;\n          else if (a === Infinity) w = b;\n          else if (b === Infinity) w = a;\n          else w = Math.min(a, b);\n          mat[i][j] = mat[j][i] = w;\n        }\n      }\n    }\n\n    $('run').addEventListener('click', () => {\n      const res = $('result');\n      res.textContent = '';\n      try {\n        const { matrix, n } = parseMatrix($('matrix').value);\n        const dist = matrix.map(row => row.slice());\n        if ($('undirected').checked) symmetrize(dist);\n        floydWarshall(dist);\n        const negCycleVertices = [];\n        for (let v = 0; v < n; v++) {\n          if (dist[v][v] < 0) negCycleVertices.push(v);\n        }\n        let html = '';\n        if (negCycleVertices.length) {\n          html += '<p class=\"alert\">Negative cycle detected (reachable from vertices: ' + negCycleVertices.join(', ') + '). Distances may be undefined.</p>';\n        }\n        html += '<h3>Distance matrix</h3>' + showTable(dist);\n        res.innerHTML = html;\n      } catch (e) {\n        res.innerHTML = '<p class=\"alert\">Error: ' + e.message + '</p>';\n      }\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Floyd-Warshall Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9c654d30-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:38.243Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Fibonacci Sequence",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Fibonacci Sequence</title>\n  <meta name=\"description\" content=\"A simple page that explains the Fibonacci sequence and lets you generate its terms.\" />\n  <style>\n    :root { color-scheme: light dark; }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.6;\n      margin: 0;\n      padding: 0 1rem 3rem;\n      background: Canvas;\n      color: CanvasText;\n    }\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    h1 { font-size: 1.8rem; margin-top: 1.2rem; }\n    h2 { font-size: 1.2rem; margin-top: 2rem; }\n    .card {\n      border: 1px solid rgba(127,127,127,.3);\n      border-radius: 10px;\n      padding: 1rem;\n      background: rgba(127,127,127,.05);\n    }\n    label { display: inline-block; margin: 0.5rem 0 0.2rem; }\n    input[type=\"number\"] {\n      width: 8rem;\n      padding: 0.4rem 0.5rem;\n      border: 1px solid rgba(127,127,127,.4);\n      border-radius: 6px;\n      background: transparent;\n      color: inherit;\n    }\n    input[type=\"checkbox\"] { transform: translateY(1px); }\n    button {\n      padding: 0.5rem 0.8rem;\n      border: 1px solid rgba(127,127,127,.4);\n      border-radius: 8px;\n      background: ButtonFace;\n      color: ButtonText;\n      cursor: pointer;\n    }\n    button:hover { filter: brightness(0.98); }\n    .row { display: flex; gap: 1rem; flex-wrap: wrap; align-items: center; }\n    .muted { color: GrayText; font-size: 0.9rem; }\n    pre, code {\n      white-space: pre-wrap;\n      word-wrap: break-word;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 0.95rem;\n    }\n    .output {\n      border: 1px dashed rgba(127,127,127,.4);\n      border-radius: 8px;\n      padding: 0.75rem;\n      background: rgba(127,127,127,.06);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Fibonacci Sequence</h1>\n    <p>\n      The Fibonacci sequence is a series of numbers where each term is the sum of the two preceding ones.\n      Using the common convention F(0) = 0 and F(1) = 1, we define:\n    </p>\n    <div class=\"card\">\n      <code>F(0) = 0, F(1) = 1, and for n ≥ 2: F(n) = F(n−1) + F(n−2)</code>\n    </div>\n    <p class=\"muted\">\n      Some sources start with 1, 1 instead (i.e., F(1) = 1, F(2) = 1). You can choose either below.\n    </p>\n\n    <h2>First 15 terms (starting with 0, 1)</h2>\n    <div class=\"output\">\n      <pre id=\"static-seq\">0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377</pre>\n    </div>\n\n    <h2>Generate your own sequence</h2>\n    <div class=\"card\">\n      <div class=\"row\">\n        <div>\n          <label for=\"count\">Number of terms (1–200)</label><br />\n          <input id=\"count\" type=\"number\" min=\"1\" max=\"200\" value=\"10\" />\n        </div>\n        <div style=\"margin-top: 1.6rem;\">\n          <label>\n            <input id=\"start11\" type=\"checkbox\" />\n            Start with 1, 1 instead of 0, 1\n          </label>\n        </div>\n        <div style=\"margin-top: 1.6rem;\">\n          <button id=\"btn-generate\" type=\"button\">Generate</button>\n        </div>\n      </div>\n      <div style=\"margin-top: 0.8rem;\">\n        <div class=\"output\"><pre id=\"gen-output\">Click Generate to list the terms here.</pre></div>\n      </div>\n    </div>\n\n    <h2>Compute a specific term F(n)</h2>\n    <div class=\"card\">\n      <div class=\"row\">\n        <div>\n          <label for=\"nth\">n (0–5000)</label><br />\n          <input id=\"nth\" type=\"number\" min=\"0\" max=\"5000\" value=\"20\" />\n        </div>\n        <div style=\"margin-top: 1.6rem;\">\n          <button id=\"btn-nth\" type=\"button\">Compute F(n)</button>\n        </div>\n      </div>\n      <div style=\"margin-top: 0.8rem;\">\n        <div class=\"output\">\n          <pre id=\"nth-output\">F(20) = 6765</pre>\n        </div>\n        <p class=\"muted\">Values are computed exactly using big integers.</p>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Generate first n terms as BigInt, with choice of starting pair.\n    function fibSequence(n, startWith11) {\n      const arr = [];\n      let a = startWith11 ? 1n : 0n;\n      let b = 1n;\n      for (let i = 0; i < n; i++) {\n        arr.push(a);\n        const next = a + b;\n        a = b;\n        b = next;\n      }\n      return arr;\n    }\n\n    // Compute F(n) (0-indexed, with F(0)=0, F(1)=1) using iterative method in O(n).\n    function fibNthBigInt(n) {\n      let a = 0n, b = 1n; // a=F(i), b=F(i+1)\n      for (let i = 0; i < n; i++) {\n        const next = a + b;\n        a = b;\n        b = next;\n      }\n      return a;\n    }\n\n    function showError(el, message) {\n      el.textContent = message;\n    }\n\n    function formatListBigInt(arr) {\n      // Join as comma-separated string without locale-specific separators.\n      return arr.map(x => x.toString()).join(\", \");\n    }\n\n    document.getElementById(\"btn-generate\").addEventListener(\"click\", () => {\n      const out = document.getElementById(\"gen-output\");\n      const countEl = document.getElementById(\"count\");\n      const start11 = document.getElementById(\"start11\").checked;\n      const n = Number(countEl.value);\n\n      if (!Number.isInteger(n) || n < 1 || n > 200) {\n        showError(out, \"Please enter a whole number between 1 and 200.\");\n        return;\n      }\n\n      const seq = fibSequence(n, start11);\n      out.textContent = formatListBigInt(seq);\n    });\n\n    document.getElementById(\"btn-nth\").addEventListener(\"click\", () => {\n      const out = document.getElementById(\"nth-output\");\n      const nthEl = document.getElementById(\"nth\");\n      const n = Number(nthEl.value);\n\n      if (!Number.isInteger(n) || n < 0 || n > 5000) {\n        showError(out, \"Please enter an integer n between 0 and 5000.\");\n        return;\n      }\n\n      const value = fibNthBigInt(n);\n      out.textContent = `F(${n}) = ${value.toString()}`;\n    });\n\n    // Initialize default computed nth value.\n    (function init() {\n      const n = Number(document.getElementById(\"nth\").value);\n      document.getElementById(\"nth-output\").textContent = `F(${n}) = ${fibNthBigInt(n).toString()}`;\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Fibonacci Sequence"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9cfcab30-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:39.235Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Recursion",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Recursion</title>\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      line-height: 1.6;\n      margin: 0;\n      padding: 2rem 1rem;\n      max-width: 800px;\n      margin-inline: auto;\n    }\n    h1 {\n      margin: 0 0 0.5rem 0;\n      font-size: 2rem;\n    }\n    p {\n      margin: 0.5rem 0;\n    }\n    .card {\n      border: 1px solid rgba(0,0,0,0.1);\n      border-radius: 12px;\n      padding: 1rem;\n      margin-top: 1rem;\n      background: rgba(0,0,0,0.03);\n    }\n    label, input, button {\n      font-size: 1rem;\n    }\n    input[type=\"number\"] {\n      width: 6rem;\n      padding: 0.35rem 0.5rem;\n      margin-right: 0.5rem;\n    }\n    button {\n      padding: 0.4rem 0.8rem;\n      border-radius: 8px;\n      border: 1px solid rgba(0,0,0,0.2);\n      background: #ececec;\n      cursor: pointer;\n    }\n    button:hover {\n      filter: brightness(0.98);\n    }\n    .row {\n      display: flex;\n      gap: 0.5rem;\n      align-items: center;\n      flex-wrap: wrap;\n      margin-top: 0.5rem;\n    }\n    .result {\n      margin-top: 0.75rem;\n      font-weight: 600;\n    }\n    .error {\n      color: #b00020;\n      margin-top: 0.5rem;\n    }\n    pre {\n      padding: 0.75rem;\n      border-radius: 10px;\n      background: rgba(0,0,0,0.06);\n      overflow: auto;\n      margin-top: 0.75rem;\n      white-space: pre-wrap;\n    }\n    code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    }\n    small {\n      color: rgba(0,0,0,0.7);\n    }\n  </style>\n</head>\n<body>\n  <h1>Recursion</h1>\n  <p>Recursion is a technique where a function solves a problem by calling itself on smaller versions of the same problem, until a base case stops the calls.</p>\n  <p><em>Recursive joke:</em> To understand recursion, you must first understand recursion.</p>\n\n  <div class=\"card\" aria-labelledby=\"example-title\">\n    <h2 id=\"example-title\" style=\"margin-top:0\">Interactive example: factorial(n)</h2>\n    <p>\n      Factorial is defined recursively as:\n      <code>factorial(0) = 1</code> and <code>factorial(n) = n × factorial(n − 1)</code> for <code>n ≥ 1</code>.\n    </p>\n\n    <div class=\"row\" role=\"group\" aria-label=\"Factorial input\">\n      <label for=\"n\">Enter n (0–20):</label>\n      <input id=\"n\" type=\"number\" min=\"0\" max=\"20\" value=\"5\" />\n      <button id=\"compute\">Compute</button>\n      <button id=\"clear\" title=\"Clear logs\">Clear</button>\n    </div>\n\n    <div class=\"result\" id=\"result\" aria-live=\"polite\"></div>\n    <div class=\"error\" id=\"error\" role=\"alert\" aria-live=\"assertive\"></div>\n    <pre id=\"logs\" aria-label=\"Recursion steps\"></pre>\n\n    <details style=\"margin-top:0.75rem\">\n      <summary>See the recursive function</summary>\n      <pre><code>function factorial(n):\n  if n is 0 or 1:\n    return 1          // base case\n  return n * factorial(n - 1)  // recursive step</code></pre>\n    </details>\n    <small>Tip: Try n = 0, 1, 5, 10, or 15 and watch the call stack unfold.</small>\n  </div>\n\n  <script>\n    function factorial(n, logs) {\n      logs.push(\"→ factorial(\" + n + \")\");\n      if (n === 0 || n === 1) {\n        logs.push(\"  Base case: factorial(\" + n + \") = 1\");\n        return 1;\n      }\n      logs.push(\"  Compute: \" + n + \" × factorial(\" + (n - 1) + \")\");\n      const sub = factorial(n - 1, logs);\n      const res = n * sub;\n      logs.push(\"  Return: \" + n + \" × \" + sub + \" = \" + res);\n      return res;\n    }\n\n    function formatNumber(n) {\n      return n.toLocaleString(undefined, { maximumFractionDigits: 0 });\n    }\n\n    const nInput = document.getElementById(\"n\");\n    const computeBtn = document.getElementById(\"compute\");\n    const clearBtn = document.getElementById(\"clear\");\n    const resultEl = document.getElementById(\"result\");\n    const errorEl = document.getElementById(\"error\");\n    const logsEl = document.getElementById(\"logs\");\n\n    function compute() {\n      errorEl.textContent = \"\";\n      logsEl.textContent = \"\";\n      resultEl.textContent = \"\";\n\n      const raw = nInput.value;\n      const n = Number(raw);\n\n      if (!Number.isFinite(n) || !Number.isInteger(n)) {\n        errorEl.textContent = \"Please enter a whole number.\";\n        return;\n      }\n      if (n < 0) {\n        errorEl.textContent = \"n must be ≥ 0.\";\n        return;\n      }\n      if (n > 20) {\n        errorEl.textContent = \"n is too large for this demo (max 20).\";\n        return;\n      }\n\n      const logs = [];\n      const value = factorial(n, logs);\n      resultEl.textContent = \"factorial(\" + n + \") = \" + formatNumber(value);\n      logsEl.textContent = logs.join(\"\\n\");\n    }\n\n    function clearLogs() {\n      errorEl.textContent = \"\";\n      logsEl.textContent = \"\";\n      resultEl.textContent = \"\";\n    }\n\n    computeBtn.addEventListener(\"click\", compute);\n    clearBtn.addEventListener(\"click\", clearLogs);\n\n    // Compute initial example on load\n    compute();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Recursion"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9d340ee0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:39.598Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Kruskal’s Algorithm",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Kruskal’s Algorithm — Simple Demo</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 16px;\n      line-height: 1.6;\n    }\n    h1, h2 {\n      margin: 0.4em 0;\n    }\n    p {\n      margin: 0.6em 0;\n    }\n    ul, ol {\n      margin: 0.6em 0 0.6em 1.2em;\n    }\n    textarea {\n      width: 100%;\n      min-height: 140px;\n      box-sizing: border-box;\n      padding: 10px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 14px;\n    }\n    button {\n      padding: 8px 12px;\n      font-size: 14px;\n      cursor: pointer;\n      margin: 8px 0;\n    }\n    .inline-note {\n      font-size: 0.95em;\n      opacity: 0.8;\n    }\n    pre {\n      background: #f6f8fa;\n      border-radius: 6px;\n      padding: 10px;\n      overflow: auto;\n    }\n    code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    }\n    .stat {\n      display: inline-block;\n      margin-right: 14px;\n    }\n  </style>\n</head>\n<body>\n  <h1>Kruskal’s Algorithm</h1>\n  <p>\n    Kruskal’s algorithm finds a minimum spanning tree (MST) of a connected, weighted, undirected graph.\n    It builds the MST by always choosing the smallest edge that doesn’t create a cycle, using a\n    Union-Find (Disjoint Set) data structure to detect cycles efficiently.\n  </p>\n\n  <h2>How it works</h2>\n  <ol>\n    <li>Sort all edges by increasing weight.</li>\n    <li>Start with each vertex in its own set (a forest of single-node trees).</li>\n    <li>Scan edges in order: if an edge connects two different sets, add it to the MST and union the sets.</li>\n    <li>Stop when the MST has V − 1 edges (for V vertices). If the graph is disconnected, you get a minimum spanning forest.</li>\n  </ol>\n  <p class=\"inline-note\">Time complexity: O(E log E) due to sorting, where E is the number of edges.</p>\n\n  <h2>Try it</h2>\n  <p>Enter edges as lines in the form “u v w” or “u,v,w” (undirected). Examples: “A B 4”, “B,C,3”.</p>\n  <textarea id=\"edgesInput\" aria-label=\"Edges input\">\nA C 1\nB D 2\nB C 3\nA B 4\nC D 5\n  </textarea>\n  <div>\n    <button id=\"runBtn\">Compute MST</button>\n    <button id=\"clearBtn\" title=\"Clear output\">Clear Output</button>\n  </div>\n\n  <div id=\"output\" aria-live=\"polite\"></div>\n\n  <h2>Example (from the default input)</h2>\n  <p>Sorted edges: A–C (1), B–D (2), B–C (3), A–B (4), C–D (5). Selected edges (★) form the MST:</p>\n  <pre><code>A–C (1) ★\nB–D (2) ★\nB–C (3) ★\nA–B (4)\nC–D (5)\n\nMST total weight = 6</code></pre>\n\n  <script>\n    (function () {\n      const input = document.getElementById('edgesInput');\n      const output = document.getElementById('output');\n      const runBtn = document.getElementById('runBtn');\n      const clearBtn = document.getElementById('clearBtn');\n\n      function parseEdges(text) {\n        const lines = text.split(/\\r?\\n/);\n        const edges = [];\n        const nodesSet = new Set();\n        let idCounter = 0;\n\n        for (let raw of lines) {\n          const line = raw.trim();\n          if (!line) continue;\n          // Support \"u v w\" or \"u,v,w\"\n          const parts = line.split(/[,\\s]+/).filter(Boolean);\n          if (parts.length < 3) continue;\n\n          const u = parts[0];\n          const v = parts[1];\n          const w = parseFloat(parts[2]);\n\n          if (!u || !v || !isFinite(w)) continue;\n\n          edges.push({ id: idCounter++, u, v, w });\n          nodesSet.add(u);\n          nodesSet.add(v);\n        }\n        return { edges, nodes: Array.from(nodesSet) };\n      }\n\n      function makeUF(nodes) {\n        const parent = new Map();\n        const size = new Map();\n        nodes.forEach(n => { parent.set(n, n); size.set(n, 1); });\n\n        function find(x) {\n          let p = parent.get(x);\n          if (p !== x) {\n            p = find(p);\n            parent.set(x, p);\n          }\n          return parent.get(x);\n        }\n        function union(a, b) {\n          let ra = find(a), rb = find(b);\n          if (ra === rb) return false;\n          const sa = size.get(ra), sb = size.get(rb);\n          if (sa < sb) { const tmp = ra; ra = rb; rb = tmp; }\n          parent.set(rb, ra);\n          size.set(ra, sa + sb);\n          return true;\n        }\n        return { find, union };\n      }\n\n      function kruskal(edges, nodes) {\n        const uf = makeUF(nodes);\n        const sorted = edges.slice().sort((a, b) => a.w === b.w ? a.id - b.id : a.w - b.w);\n        const mst = [];\n        let total = 0;\n\n        for (const e of sorted) {\n          if (uf.union(e.u, e.v)) {\n            mst.push(e);\n            total += e.w;\n            if (mst.length === nodes.length - 1) break;\n          }\n        }\n        const connected = mst.length === nodes.length - 1;\n        return { mst, total, connected, sorted };\n      }\n\n      function renderResult(parsed, result) {\n        const { edges, nodes } = parsed;\n        const { mst, total, connected, sorted } = result;\n        const selected = new Set(mst.map(e => e.id));\n\n        const stats = `\n<div class=\"stat\"><strong>Vertices:</strong> ${nodes.length}</div>\n<div class=\"stat\"><strong>Edges:</strong> ${edges.length}</div>\n<div class=\"stat\"><strong>MST edges chosen:</strong> ${mst.length}</div>\n<div class=\"stat\"><strong>Total weight:</strong> ${mst.length ? total : '-'}</div>\n`;\n        const lines = sorted.map(e => {\n          const star = selected.has(e.id) ? '★' : '';\n          return `${e.u}–${e.v} (${e.w}) ${star}`;\n        }).join('\\n');\n\n        const note = connected\n          ? 'Graph is connected. A minimum spanning tree was found.'\n          : 'Graph is disconnected. Produced a minimum spanning forest (MST for each component).';\n\n        output.innerHTML = `\n<p>${note}</p>\n<div>${stats}</div>\n<pre><code>${lines}\n\n${mst.length ? `MST total weight = ${total}` : 'No MST edges selected.'}</code></pre>\n`;\n      }\n\n      runBtn.addEventListener('click', () => {\n        const parsed = parseEdges(input.value);\n        if (parsed.edges.length === 0) {\n          output.innerHTML = '<p>Please enter edges in the form “u v w” or “u,v,w”.</p>';\n          return;\n        }\n        const result = kruskal(parsed.edges, parsed.nodes);\n        renderResult(parsed, result);\n      });\n\n      clearBtn.addEventListener('click', () => {\n        output.innerHTML = '';\n      });\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Kruskal’s Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9f2be740-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:42.900Z",
    "model": "gpt-5",
    "status": "success",
    "question": "K-Means Clustering",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>K-Means Clustering</title>\n  <style>\n    :root {\n      --bg: #0f1221;\n      --panel: #171b31;\n      --text: #e7ebff;\n      --muted: #aab3d5;\n      --accent: #7aa2ff;\n      --accent2: #7fffd4;\n      --accent3: #ff9f7a;\n      --code: #0c0f1a;\n      --border: #2a3158;\n    }\n    * { box-sizing: border-box; }\n    html, body {\n      margin: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      line-height: 1.6;\n    }\n    header {\n      padding: 2.5rem 1rem 1rem;\n      text-align: center;\n    }\n    h1 {\n      margin: 0 0 .25rem 0;\n      font-size: clamp(1.8rem, 3vw, 2.4rem);\n      letter-spacing: .3px;\n    }\n    header p {\n      margin: 0;\n      color: var(--muted);\n      font-size: 0.98rem;\n    }\n    main {\n      max-width: 900px;\n      margin: 0 auto;\n      padding: 1rem;\n      display: grid;\n      gap: 1rem;\n    }\n    section, aside {\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 1rem 1.1rem;\n    }\n    h2 {\n      margin-top: 0;\n      font-size: 1.2rem;\n    }\n    ul { margin: .5rem 0 .25rem 1.2rem; }\n    li { margin: .2rem 0; }\n    code, pre {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      font-size: .92rem;\n    }\n    pre {\n      background: var(--code);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: .9rem;\n      overflow: auto;\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 1rem;\n    }\n    @media (min-width: 840px) {\n      .grid {\n        grid-template-columns: 1.2fr .8fr;\n      }\n    }\n    .pill {\n      display: inline-block;\n      background: #0e1733;\n      border: 1px solid var(--border);\n      color: var(--accent);\n      padding: .2rem .55rem;\n      border-radius: 999px;\n      font-size: .82rem;\n      margin-right: .35rem;\n    }\n    .figure {\n      background: #0c1126;\n      border: 1px dashed #2a3158;\n      border-radius: 10px;\n      padding: .75rem;\n    }\n    .legend {\n      display: flex;\n      gap: .75rem;\n      flex-wrap: wrap;\n      font-size: .9rem;\n      color: var(--muted);\n      margin-top: .5rem;\n    }\n    .dot { width: .7rem; height: .7rem; border-radius: 50%; display: inline-block; vertical-align: middle; margin-right: .35rem; }\n    .dot.c1 { background: var(--accent); }\n    .dot.c2 { background: var(--accent2); }\n    .dot.c3 { background: var(--accent3); }\n    a { color: #9ec1ff; text-decoration: none; }\n    a:hover { text-decoration: underline; }\n    footer {\n      max-width: 900px;\n      margin: 0 auto;\n      padding: 1rem;\n      color: var(--muted);\n      text-align: center;\n      font-size: .9rem;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>K-Means Clustering</h1>\n    <p>Partition n observations into k clusters by minimizing within-cluster variance</p>\n  </header>\n\n  <main>\n    <div class=\"grid\">\n      <section>\n        <h2>What is K-Means?</h2>\n        <p>\n          K-Means is an unsupervised learning algorithm that groups data into k clusters.\n          It assumes clusters are roughly spherical in feature space and aims to minimize the sum of squared distances from points to their assigned cluster centroids.\n        </p>\n\n        <div class=\"figure\" aria-label=\"Illustrative 2D clustering with three clusters and centroids\">\n          <svg viewBox=\"0 0 600 300\" width=\"100%\" height=\"220\" role=\"img\" aria-labelledby=\"fig-title\">\n            <title id=\"fig-title\">Three clusters with centroids (X)</title>\n            <rect x=\"0\" y=\"0\" width=\"600\" height=\"300\" fill=\"#0c1126\"></rect>\n\n            <!-- Cluster 1 (blue) -->\n            <g fill=\"#7aa2ff\">\n              <circle cx=\"120\" cy=\"160\" r=\"5\"></circle>\n              <circle cx=\"150\" cy=\"140\" r=\"5\"></circle>\n              <circle cx=\"130\" cy=\"120\" r=\"5\"></circle>\n              <circle cx=\"165\" cy=\"165\" r=\"5\"></circle>\n              <circle cx=\"140\" cy=\"180\" r=\"5\"></circle>\n              <circle cx=\"110\" cy=\"135\" r=\"5\"></circle>\n            </g>\n            <!-- Centroid 1 -->\n            <g stroke=\"#7aa2ff\" stroke-width=\"3\">\n              <line x1=\"145\" y1=\"145\" x2=\"160\" y2=\"160\"></line>\n              <line x1=\"160\" y1=\"145\" x2=\"145\" y2=\"160\"></line>\n            </g>\n\n            <!-- Cluster 2 (mint) -->\n            <g fill=\"#7fffd4\">\n              <circle cx=\"300\" cy=\"70\" r=\"5\"></circle>\n              <circle cx=\"330\" cy=\"85\" r=\"5\"></circle>\n              <circle cx=\"315\" cy=\"110\" r=\"5\"></circle>\n              <circle cx=\"345\" cy=\"95\" r=\"5\"></circle>\n              <circle cx=\"285\" cy=\"95\" r=\"5\"></circle>\n              <circle cx=\"325\" cy=\"65\" r=\"5\"></circle>\n            </g>\n            <!-- Centroid 2 -->\n            <g stroke=\"#7fffd4\" stroke-width=\"3\">\n              <line x1=\"316\" y1=\"90\" x2=\"331\" y2=\"105\"></line>\n              <line x1=\"331\" y1=\"90\" x2=\"316\" y2=\"105\"></line>\n            </g>\n\n            <!-- Cluster 3 (orange) -->\n            <g fill=\"#ff9f7a\">\n              <circle cx=\"470\" cy=\"210\" r=\"5\"></circle>\n              <circle cx=\"500\" cy=\"220\" r=\"5\"></circle>\n              <circle cx=\"520\" cy=\"200\" r=\"5\"></circle>\n              <circle cx=\"490\" cy=\"240\" r=\"5\"></circle>\n              <circle cx=\"515\" cy=\"235\" r=\"5\"></circle>\n              <circle cx=\"545\" cy=\"215\" r=\"5\"></circle>\n            </g>\n            <!-- Centroid 3 -->\n            <g stroke=\"#ff9f7a\" stroke-width=\"3\">\n              <line x1=\"505\" y1=\"220\" x2=\"520\" y2=\"235\"></line>\n              <line x1=\"520\" y1=\"220\" x2=\"505\" y2=\"235\"></line>\n            </g>\n          </svg>\n          <div class=\"legend\">\n            <span><span class=\"dot c1\"></span>Cluster A</span>\n            <span><span class=\"dot c2\"></span>Cluster B</span>\n            <span><span class=\"dot c3\"></span>Cluster C</span>\n            <span>Centroids marked by X</span>\n          </div>\n        </div>\n\n        <h2>How it works</h2>\n        <ol>\n          <li>Choose k, the number of clusters.</li>\n          <li>Initialize k centroids (randomly or with k-means++).</li>\n          <li>Assignment step: assign each point to the nearest centroid.</li>\n          <li>Update step: recompute each centroid as the mean of its assigned points.</li>\n          <li>Repeat steps 3–4 until assignments stop changing or improvement is below a threshold.</li>\n        </ol>\n\n        <h2>Pseudocode</h2>\n        <pre><code>input: data X ∈ R^(n×d), clusters k, max_iter, tol\ninitialize centroids μ₁..μ_k  (e.g., k-means++)\n\nfor t in 1..max_iter:\n    # assignment\n    for i in 1..n:\n        c[i] ← argmin_j ||X[i] - μ_j||²\n\n    # update\n    for j in 1..k:\n        S_j ← { i | c[i] = j }\n        if S_j not empty:\n            μ_j ← mean of X over indices in S_j\n\n    # check convergence\n    if change in μ is &lt; tol:\n        break\n\nreturn assignments c, centroids μ</code></pre>\n\n        <h2>Key parameters</h2>\n        <p>\n          <span class=\"pill\">k (clusters)</span>\n          <span class=\"pill\">init (random, k-means++)</span>\n          <span class=\"pill\">max_iter</span>\n          <span class=\"pill\">n_init (restarts)</span>\n          <span class=\"pill\">tol (convergence)</span>\n          <span class=\"pill\">metric (typically Euclidean)</span>\n        </p>\n\n        <h2>When to use</h2>\n        <ul>\n          <li>Quick, scalable clustering for roughly spherical, similarly sized groups.</li>\n          <li>Feature learning or compression (cluster centroids as prototypes).</li>\n          <li>Initialization for other algorithms (e.g., GMM with EM).</li>\n        </ul>\n      </section>\n\n      <aside>\n        <h2>Tips and caveats</h2>\n        <ul>\n          <li>Initialization matters. Use k-means++ and multiple restarts to reduce local minima.</li>\n          <li>Scale features. Differences in units can dominate Euclidean distance.</li>\n          <li>Choose k via elbow method, silhouette score, or domain knowledge.</li>\n          <li>Sensitive to outliers; consider trimming or robust alternatives.</li>\n          <li>Non-spherical or varying-density clusters may be better handled by DBSCAN or spectral clustering.</li>\n        </ul>\n\n        <h2>Complexity</h2>\n        <p>Per iteration: O(n × k × d). Total cost scales with number of iterations until convergence.</p>\n\n        <h2>Resources</h2>\n        <ul>\n          <li><a href=\"https://en.wikipedia.org/wiki/K-means_clustering\" target=\"_blank\" rel=\"noopener\">Wikipedia: K-means clustering</a></li>\n          <li><a href=\"https://scikit-learn.org/stable/modules/clustering.html#k-means\" target=\"_blank\" rel=\"noopener\">scikit-learn: KMeans</a></li>\n          <li><a href=\"https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf\" target=\"_blank\" rel=\"noopener\">k-means++ paper (Arthur &amp; Vassilvitskii, 2007)</a></li>\n        </ul>\n      </aside>\n    </div>\n  </main>\n\n  <footer>\n    © 2025 K-Means Clustering — Simple overview and illustration\n  </footer>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "K-Means Clustering"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a0233f90-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:44.521Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Knapsack Problem",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Knapsack Problem (0/1) — Simple Explanation and Solver</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root { color-scheme: light dark; }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;\n      line-height: 1.5;\n      margin: 0;\n      padding: 0 1rem 4rem;\n      max-width: 1000px;\n      margin-inline: auto;\n    }\n    header, section { margin-block: 1.5rem; }\n    header h1 { margin-bottom: .25rem; }\n    .card {\n      border: 1px solid color-mix(in srgb, CanvasText 20%, Canvas 80%);\n      border-radius: 10px;\n      padding: 1rem;\n    }\n    .grid {\n      display: grid;\n      gap: .75rem;\n    }\n    .grid-2 { grid-template-columns: 1fr 1fr; }\n    .muted { color: color-mix(in srgb, CanvasText 60%, Canvas 40%); }\n    small.muted { display: block; margin-top: .25rem; }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: .5rem;\n    }\n    th, td {\n      border-bottom: 1px solid color-mix(in srgb, CanvasText 12%, Canvas 88%);\n      padding: .5rem;\n      text-align: left;\n    }\n    tbody tr:hover { background: color-mix(in srgb, CanvasText 6%, Canvas 94%); }\n    input[type=\"number\"], input[type=\"text\"] {\n      width: 100%;\n      box-sizing: border-box;\n      padding: .4rem .5rem;\n      border-radius: 6px;\n      border: 1px solid color-mix(in srgb, CanvasText 22%, Canvas 78%);\n      background: Field;\n      color: FieldText;\n    }\n    button {\n      padding: .5rem .75rem;\n      border: 1px solid color-mix(in srgb, CanvasText 22%, Canvas 78%);\n      background: color-mix(in srgb, Canvas 92%, CanvasText 8%);\n      color: ButtonText;\n      border-radius: 8px;\n      cursor: pointer;\n    }\n    button.primary {\n      background: #2563eb;\n      color: white;\n      border-color: #2563eb;\n    }\n    button.ghost {\n      background: transparent;\n    }\n    .actions {\n      display: flex;\n      gap: .5rem;\n      flex-wrap: wrap;\n      align-items: center;\n    }\n    .badge {\n      display: inline-block;\n      padding: .15rem .5rem;\n      border-radius: 999px;\n      background: color-mix(in srgb, CanvasText 10%, Canvas 90%);\n      font-size: .8rem;\n    }\n    details summary { cursor: pointer; }\n    pre {\n      background: color-mix(in srgb, CanvasText 8%, Canvas 92%);\n      padding: .75rem;\n      border-radius: 8px;\n      overflow: auto;\n    }\n    .error { color: #b91c1c; }\n    .ok { color: #065f46; }\n    .out {\n      margin-top: .75rem; \n      padding: .75rem;\n      border: 1px dashed color-mix(in srgb, CanvasText 25%, Canvas 75%);\n      border-radius: 8px;\n    }\n    .nowrap { white-space: nowrap; }\n    @media (max-width: 720px) {\n      .grid-2 { grid-template-columns: 1fr; }\n      th.nowrap, td.nowrap { white-space: nowrap; }\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Knapsack Problem</h1>\n    <p class=\"muted\">Choose a subset of items with maximum total value that fits within a weight capacity.</p>\n  </header>\n\n  <section class=\"card\">\n    <h2>Overview</h2>\n    <p>\n      The 0/1 Knapsack problem is a classic optimization problem:\n    </p>\n    <ul>\n      <li>Input: a set of items, each with a value and a weight, and a capacity W.</li>\n      <li>Goal: pick a subset of items so that the total weight ≤ W and the total value is maximized.</li>\n      <li>Constraint: each item can be taken at most once (hence “0/1”).</li>\n    </ul>\n    <p class=\"muted\">\n      0/1 Knapsack is NP-hard in general, but it has a pseudo-polynomial time dynamic programming solution when weights are small integers.\n    </p>\n  </section>\n\n  <section class=\"card\">\n    <h2>Try it: 0/1 Knapsack Solver</h2>\n\n    <div class=\"grid grid-2\">\n      <div>\n        <label for=\"capacity\"><strong>Capacity</strong> (non-negative integer)</label>\n        <input id=\"capacity\" type=\"number\" min=\"0\" step=\"1\" value=\"10\" />\n        <small class=\"muted\">Tip: keep capacity under a few thousand for instant results.</small>\n      </div>\n      <div>\n        <span class=\"badge\">Variant: 0/1 Knapsack</span>\n        <small class=\"muted\">Each item can be used at most once.</small>\n      </div>\n    </div>\n\n    <div style=\"margin-top: .75rem;\">\n      <strong>Items</strong>\n      <table id=\"itemsTable\" aria-label=\"Items table\">\n        <thead>\n          <tr>\n            <th style=\"width: 40%;\">Name</th>\n            <th class=\"nowrap\" style=\"width: 20%;\">Weight</th>\n            <th class=\"nowrap\" style=\"width: 20%;\">Value</th>\n            <th style=\"width: 20%;\">Actions</th>\n          </tr>\n        </thead>\n        <tbody id=\"itemsBody\">\n          <tr>\n            <td><input type=\"text\" value=\"A\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"2\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"3\" /></td>\n            <td><button class=\"ghost\" onclick=\"removeRow(this)\">Remove</button></td>\n          </tr>\n          <tr>\n            <td><input type=\"text\" value=\"B\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"3\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"4\" /></td>\n            <td><button class=\"ghost\" onclick=\"removeRow(this)\">Remove</button></td>\n          </tr>\n          <tr>\n            <td><input type=\"text\" value=\"C\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"4\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"8\" /></td>\n            <td><button class=\"ghost\" onclick=\"removeRow(this)\">Remove</button></td>\n          </tr>\n          <tr>\n            <td><input type=\"text\" value=\"D\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"5\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"8\" /></td>\n            <td><button class=\"ghost\" onclick=\"removeRow(this)\">Remove</button></td>\n          </tr>\n          <tr>\n            <td><input type=\"text\" value=\"E\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"9\" /></td>\n            <td><input type=\"number\" min=\"0\" step=\"1\" value=\"10\" /></td>\n            <td><button class=\"ghost\" onclick=\"removeRow(this)\">Remove</button></td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div class=\"actions\" style=\"margin-top: .5rem;\">\n        <button onclick=\"addRow()\">Add item</button>\n        <button class=\"primary\" onclick=\"solve()\">Solve</button>\n        <button class=\"ghost\" onclick=\"loadExample()\">Load small example</button>\n      </div>\n\n      <div id=\"msg\" role=\"status\" class=\"muted\" style=\"margin-top: .5rem;\"></div>\n\n      <div id=\"output\" class=\"out\" aria-live=\"polite\" style=\"display:none;\"></div>\n    </div>\n  </section>\n\n  <section class=\"card\">\n    <h2>How it works (DP idea)</h2>\n    <p>\n      Let dp[i][w] be the maximum value achievable using the first i items with capacity w. For item i with weight wi and value vi:\n    </p>\n    <pre><code>// If we skip item i:\ndp[i][w] = dp[i-1][w]\n\n// If we take item i (only if wi ≤ w):\ndp[i][w] = dp[i-1][w - wi] + vi\n\n// Choose the better of the two:\ndp[i][w] = max(dp[i-1][w], dp[i-1][w - wi] + vi)</code></pre>\n    <p>\n      Time complexity is O(n · W) and space can be optimized to O(W), where n is number of items and W is capacity. This is pseudo-polynomial in W.\n    </p>\n    <details>\n      <summary>Note on variants</summary>\n      <ul>\n        <li>0/1 Knapsack (this page): each item can be taken at most once.</li>\n        <li>Unbounded Knapsack: unlimited copies of each item allowed.</li>\n        <li>Fractional Knapsack: items can be split; a greedy strategy by value/weight ratio is optimal.</li>\n      </ul>\n    </details>\n  </section>\n\n  <footer class=\"muted\">\n    <p>Built as a simple, self-contained demo page. No external libraries.</p>\n  </footer>\n\n  <script>\n    function addRow(name = \"\", weight = \"\", value = \"\") {\n      const tr = document.createElement(\"tr\");\n      tr.innerHTML = `\n        <td><input type=\"text\" value=\"${String(name)}\" /></td>\n        <td><input type=\"number\" min=\"0\" step=\"1\" value=\"${String(weight)}\" /></td>\n        <td><input type=\"number\" min=\"0\" step=\"1\" value=\"${String(value)}\" /></td>\n        <td><button class=\"ghost\" onclick=\"removeRow(this)\">Remove</button></td>\n      `;\n      document.getElementById(\"itemsBody\").appendChild(tr);\n    }\n\n    function removeRow(btn) {\n      const tbody = document.getElementById(\"itemsBody\");\n      if (tbody.children.length <= 1) {\n        setMsg(\"You need at least one item row.\", \"error\");\n        return;\n      }\n      tbody.removeChild(btn.closest(\"tr\"));\n    }\n\n    function loadExample() {\n      const tbody = document.getElementById(\"itemsBody\");\n      tbody.innerHTML = \"\";\n      const items = [\n        { name: \"Map\", weight: 9, value: 150 },\n        { name: \"Compass\", weight: 13, value: 35 },\n        { name: \"Water\", weight: 153, value: 200 },\n        { name: \"Sandwich\", weight: 50, value: 160 },\n        { name: \"Glucose\", weight: 15, value: 60 },\n        { name: \"Tin\", weight: 68, value: 45 },\n        { name: \"Banana\", weight: 27, value: 60 },\n        { name: \"Apple\", weight: 39, value: 40 }\n      ];\n      // Scaled-down capacity for demo purposes\n      document.getElementById(\"capacity\").value = 200;\n      items.forEach(it => addRow(it.name, it.weight, it.value));\n      setMsg(\"Loaded a classic example. Press Solve to compute.\", \"ok\");\n      document.getElementById(\"output\").style.display = \"none\";\n    }\n\n    function setMsg(text, tone = \"muted\") {\n      const el = document.getElementById(\"msg\");\n      el.textContent = text;\n      el.className = tone === \"error\" ? \"error\" : tone === \"ok\" ? \"ok\" : \"muted\";\n    }\n\n    function readItems() {\n      const rows = Array.from(document.querySelectorAll(\"#itemsBody tr\"));\n      const items = [];\n      let errors = [];\n      rows.forEach((tr, idx) => {\n        const [nameEl, wEl, vEl] = tr.querySelectorAll(\"input\");\n        const name = nameEl.value.trim() || `Item ${idx + 1}`;\n        const w = Number(wEl.value);\n        const v = Number(vEl.value);\n        if (!Number.isFinite(w) || !Number.isInteger(w) || w < 0) {\n          errors.push(`Row ${idx + 1}: weight must be a non-negative integer.`);\n        }\n        if (!Number.isFinite(v) || v < 0) {\n          errors.push(`Row ${idx + 1}: value must be a non-negative number.`);\n        }\n        items.push({ name, weight: w, value: v });\n      });\n      return { items, errors };\n    }\n\n    function solve() {\n      setMsg(\"\");\n      const capEl = document.getElementById(\"capacity\");\n      const Wraw = Number(capEl.value);\n      if (!Number.isFinite(Wraw) || !Number.isInteger(Wraw) || Wraw < 0) {\n        setMsg(\"Capacity must be a non-negative integer.\", \"error\");\n        return;\n      }\n      const { items, errors } = readItems();\n      if (errors.length) {\n        setMsg(errors[0], \"error\");\n        return;\n      }\n      if (items.length === 0) {\n        setMsg(\"Please add at least one item.\", \"error\");\n        return;\n      }\n      if (Wraw > 20000) {\n        setMsg(\"Capacity too large for this demo; try ≤ 20000.\", \"error\");\n        return;\n      }\n      // Filter items with weight 0 and positive value: can only pick at most once.\n      // DP will handle weight 0 by allowing inclusion once due to backtracking.\n      const result = knapsack01(items, Wraw);\n      renderOutput(result);\n      const n = items.length;\n      const W = Wraw;\n      const estCells = (n + 1) * (W + 1);\n      const cellNote = estCells > 2_000_000 ? \" (large DP solved — this may be slow on very big inputs)\" : \"\";\n      setMsg(`Solved 0/1 knapsack for ${n} items and capacity ${W}.${cellNote}`, \"ok\");\n    }\n\n    function knapsack01(items, capacity) {\n      const n = items.length;\n      const W = capacity;\n      // Use two-row DP to reduce memory, but keep separate to reconstruct choices by storing decisions\n      // Alternatively, build full dp table for backtracking. For clarity, we’ll build full table.\n      const dp = Array.from({ length: n + 1 }, () => new Array(W + 1).fill(0));\n\n      for (let i = 1; i <= n; i++) {\n        const wi = items[i - 1].weight;\n        const vi = items[i - 1].value;\n        for (let w = 0; w <= W; w++) {\n          const skip = dp[i - 1][w];\n          const take = wi <= w ? dp[i - 1][w - wi] + vi : -Infinity;\n          dp[i][w] = skip >= take ? skip : take;\n        }\n      }\n\n      // Backtrack to find chosen items\n      let w = W;\n      const chosen = [];\n      for (let i = n; i >= 1; i--) {\n        if (dp[i][w] !== dp[i - 1][w]) {\n          chosen.push(i - 1);\n          w = Math.max(0, w - items[i - 1].weight);\n        }\n      }\n      chosen.reverse();\n\n      const totalValue = dp[n][W];\n      const totalWeight = chosen.reduce((acc, idx) => acc + items[idx].weight, 0);\n      return { items, capacity: W, totalValue, totalWeight, chosenIndexes: chosen };\n    }\n\n    function renderOutput(result) {\n      const out = document.getElementById(\"output\");\n      const { items, capacity, totalValue, totalWeight, chosenIndexes } = result;\n      const chosen = chosenIndexes.map(i => items[i]);\n      const list = chosen.length\n        ? `<ul>${chosen.map((it, i) => `<li>${escapeHtml(it.name)} — weight ${it.weight}, value ${it.value}</li>`).join(\"\")}</ul>`\n        : \"<p>No items selected.</p>\";\n\n      out.innerHTML = `\n        <p><strong>Capacity:</strong> ${capacity}</p>\n        <p><strong>Total value:</strong> ${totalValue} &nbsp; <strong>Total weight:</strong> ${totalWeight}</p>\n        <p><strong>Chosen items (${chosen.length}):</strong></p>\n        ${list}\n      `;\n      out.style.display = \"block\";\n    }\n\n    function escapeHtml(s) {\n      return String(s)\n        .replaceAll(\"&\", \"&amp;\")\n        .replaceAll(\"<\", \"&lt;\")\n        .replaceAll(\">\", \"&gt;\")\n        .replaceAll('\"', \"&quot;\")\n        .replaceAll(\"'\", \"&#039;\");\n    }\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Knapsack Problem"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a2598080-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:48.232Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Linear Regression",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Linear Regression (Simple Demo)</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root { color-scheme: light dark; }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n      margin: 0 auto;\n      max-width: 900px;\n      padding: 24px;\n      line-height: 1.5;\n    }\n    h1 { font-size: 1.6rem; margin: 0 0 8px; }\n    h2 { font-size: 1.2rem; margin-top: 24px; }\n    .grid {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n      align-items: start;\n    }\n    label { font-weight: 600; display: block; margin-bottom: 6px; }\n    textarea, input[type=\"text\"], input[type=\"number\"], button {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 8px 10px;\n      border: 1px solid #bbb;\n      border-radius: 6px;\n      background: transparent;\n      font-size: 14px;\n    }\n    textarea { min-height: 72px; resize: vertical; }\n    button {\n      cursor: pointer;\n      border: none;\n      background: #2f6fed;\n      color: white;\n      font-weight: 600;\n    }\n    button.secondary { background: #e0e0e0; color: #222; }\n    .actions { display: flex; gap: 8px; margin-top: 8px; }\n    .results {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(240px, 1fr));\n      gap: 16px;\n      margin-top: 16px;\n    }\n    .card {\n      border: 1px solid #ccc;\n      border-radius: 8px;\n      padding: 12px;\n    }\n    .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\n    .small { font-size: 12px; opacity: 0.8; }\n    .error {\n      color: #b00020;\n      margin-top: 8px;\n      font-weight: 600;\n    }\n    svg { width: 100%; height: 320px; border: 1px solid #ccc; border-radius: 8px; background: rgba(0,0,0,0.02); }\n    .footer { margin-top: 24px; font-size: 13px; opacity: 0.8; }\n  </style>\n</head>\n<body>\n  <h1>Linear Regression</h1>\n  <p>\n    Linear regression models a relationship between a predictor x and a response y using a straight line:\n    ŷ = a + b·x. The goal is to choose coefficients a (intercept) and b (slope) that minimize the sum of\n    squared residuals between observed y and predicted ŷ.\n  </p>\n  <ul>\n    <li>Slope b = (n·Σ(xy) − Σx·Σy) / (n·Σ(x²) − (Σx)²)</li>\n    <li>Intercept a = ȳ − b·x̄</li>\n    <li>R² measures how much variance in y is explained by x (closer to 1 is better)</li>\n  </ul>\n\n  <h2>Try it</h2>\n  <div class=\"grid\">\n    <div>\n      <label for=\"xInput\">x values (comma or space separated)</label>\n      <textarea id=\"xInput\" placeholder=\"e.g., 1, 2, 3, 4, 5\">1, 2, 3, 4, 5</textarea>\n    </div>\n    <div>\n      <label for=\"yInput\">y values (comma or space separated)</label>\n      <textarea id=\"yInput\" placeholder=\"e.g., 1.2, 2.1, 2.9, 3.7, 5.1\">1.2, 2.1, 2.9, 3.7, 5.1</textarea>\n    </div>\n  </div>\n  <div class=\"actions\">\n    <button id=\"fitBtn\">Fit model</button>\n    <button id=\"clearBtn\" class=\"secondary\">Clear</button>\n  </div>\n  <div id=\"error\" class=\"error\" aria-live=\"polite\"></div>\n\n  <div class=\"results\">\n    <div class=\"card\">\n      <div><strong>Model</strong></div>\n      <div class=\"mono\" id=\"eqn\">ŷ = a + b·x</div>\n      <div class=\"small\" id=\"stats\">Slope b: —, Intercept a: —, R²: —, MSE: —</div>\n      <div style=\"margin-top: 10px;\">\n        <label for=\"predictX\">Predict ŷ for x</label>\n        <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 8px;\">\n          <input id=\"predictX\" type=\"number\" step=\"any\" placeholder=\"Enter x\">\n          <button id=\"predictBtn\" class=\"secondary\">Predict</button>\n        </div>\n        <div class=\"mono small\" id=\"predictY\" style=\"margin-top: 6px;\"></div>\n      </div>\n    </div>\n    <div class=\"card\">\n      <div><strong>Scatter & fitted line</strong></div>\n      <svg id=\"plot\" viewBox=\"0 0 640 360\" role=\"img\" aria-label=\"Scatter plot with fitted line\">\n        <defs>\n          <style>\n            .axis { stroke: #666; stroke-width: 1; }\n            .gridline { stroke: #ccc; stroke-width: 0.5; }\n            .point { fill: #2f6fed; }\n            .fitline { stroke: #e34a4a; stroke-width: 2.5; }\n            .label { font-size: 12px; fill: currentColor; }\n          </style>\n        </defs>\n        <!-- Plot elements created via script -->\n      </svg>\n    </div>\n  </div>\n\n  <div class=\"footer\">\n    Notes:\n    <ul>\n      <li>Provide at least two pairs of numeric (x, y) values.</li>\n      <li>If all x values are identical, the slope is undefined.</li>\n      <li>R² is computed as 1 − SSE/SST; if SST is 0 (constant y), R² is set to 1.</li>\n    </ul>\n  </div>\n\n  <script>\n    function parseNumbers(str) {\n      if (!str) return [];\n      // Split by commas or whitespace, filter out empties\n      const tokens = str.split(/[\\s,]+/).map(t => t.trim()).filter(Boolean);\n      const nums = [];\n      for (const t of tokens) {\n        const v = Number(t);\n        if (!Number.isFinite(v)) return null;\n        nums.push(v);\n      }\n      return nums;\n    }\n\n    function fitLinearRegression(x, y) {\n      const n = x.length;\n      let sumX = 0, sumY = 0, sumXX = 0, sumXY = 0;\n      for (let i = 0; i < n; i++) {\n        const xi = x[i], yi = y[i];\n        sumX += xi;\n        sumY += yi;\n        sumXX += xi * xi;\n        sumXY += xi * yi;\n      }\n      const denom = n * sumXX - sumX * sumX;\n      if (denom === 0) return { error: \"Cannot fit: all x values are identical.\" };\n      const slope = (n * sumXY - sumX * sumY) / denom;\n      const meanX = sumX / n;\n      const meanY = sumY / n;\n      const intercept = meanY - slope * meanX;\n\n      // Residuals & metrics\n      let sse = 0, sst = 0;\n      const yhat = [];\n      for (let i = 0; i < n; i++) {\n        const yiHat = intercept + slope * x[i];\n        yhat.push(yiHat);\n        const resid = y[i] - yiHat;\n        sse += resid * resid;\n        const dy = y[i] - meanY;\n        sst += dy * dy;\n      }\n      const r2 = sst === 0 ? 1 : 1 - sse / sst;\n      const mse = sse / n;\n\n      return { slope, intercept, r2, mse, yhat, meanX, meanY, x, y };\n    }\n\n    function format(num) {\n      if (!Number.isFinite(num)) return \"—\";\n      const abs = Math.abs(num);\n      if ((abs !== 0 && abs < 1e-3) || abs >= 1e6) {\n        return num.toExponential(3);\n      }\n      return Math.round(num * 1e6) / 1e6 + \"\";\n    }\n\n    function drawPlot(model) {\n      const svg = document.getElementById(\"plot\");\n      while (svg.firstChild) svg.removeChild(svg.firstChild);\n\n      const width = 640;\n      const height = 360;\n      const margin = { left: 54, right: 16, top: 16, bottom: 40 };\n      const innerW = width - margin.left - margin.right;\n      const innerH = height - margin.top - margin.bottom;\n\n      const xs = model.x, ys = model.y;\n      const xMin = Math.min(...xs), xMax = Math.max(...xs);\n      const yMinData = Math.min(...ys, model.intercept + model.slope * xMin, model.intercept + model.slope * xMax);\n      const yMaxData = Math.max(...ys, model.intercept + model.slope * xMin, model.intercept + model.slope * xMax);\n\n      // Add padding to ranges\n      const padX = (xMax - xMin) === 0 ? 1 : (xMax - xMin) * 0.08;\n      const padY = (yMaxData - yMinData) === 0 ? 1 : (yMaxData - yMinData) * 0.12;\n      const x0 = xMin - padX, x1 = xMax + padX;\n      const y0 = yMinData - padY, y1 = yMaxData + padY;\n\n      const xScale = x => margin.left + ( (x - x0) / (x1 - x0) ) * innerW;\n      const yScale = y => margin.top + innerH - ( (y - y0) / (y1 - y0) ) * innerH;\n\n      // Axes\n      const axis = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n      const xAxisLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n      xAxisLine.setAttribute(\"x1\", margin.left);\n      xAxisLine.setAttribute(\"y1\", margin.top + innerH);\n      xAxisLine.setAttribute(\"x2\", margin.left + innerW);\n      xAxisLine.setAttribute(\"y2\", margin.top + innerH);\n      xAxisLine.setAttribute(\"class\", \"axis\");\n      axis.appendChild(xAxisLine);\n\n      const yAxisLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n      yAxisLine.setAttribute(\"x1\", margin.left);\n      yAxisLine.setAttribute(\"y1\", margin.top);\n      yAxisLine.setAttribute(\"x2\", margin.left);\n      yAxisLine.setAttribute(\"y2\", margin.top + innerH);\n      yAxisLine.setAttribute(\"class\", \"axis\");\n      axis.appendChild(yAxisLine);\n\n      // Ticks\n      const ticks = 5;\n      for (let i = 0; i <= ticks; i++) {\n        const tx = x0 + (i / ticks) * (x1 - x0);\n        const ty = y0 + (i / ticks) * (y1 - y0);\n\n        const xTick = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        xTick.setAttribute(\"x1\", xScale(tx));\n        xTick.setAttribute(\"y1\", margin.top + innerH);\n        xTick.setAttribute(\"x2\", xScale(tx));\n        xTick.setAttribute(\"y2\", margin.top + innerH + 6);\n        xTick.setAttribute(\"class\", \"axis\");\n        axis.appendChild(xTick);\n\n        const xLabel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        xLabel.setAttribute(\"x\", xScale(tx));\n        xLabel.setAttribute(\"y\", margin.top + innerH + 22);\n        xLabel.setAttribute(\"text-anchor\", \"middle\");\n        xLabel.setAttribute(\"class\", \"label\");\n        xLabel.textContent = format(tx);\n        axis.appendChild(xLabel);\n\n        const yTick = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        yTick.setAttribute(\"x1\", margin.left - 6);\n        yTick.setAttribute(\"y1\", yScale(ty));\n        yTick.setAttribute(\"x2\", margin.left);\n        yTick.setAttribute(\"y2\", yScale(ty));\n        yTick.setAttribute(\"class\", \"axis\");\n        axis.appendChild(yTick);\n\n        const yLabel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        yLabel.setAttribute(\"x\", margin.left - 8);\n        yLabel.setAttribute(\"y\", yScale(ty) + 4);\n        yLabel.setAttribute(\"text-anchor\", \"end\");\n        yLabel.setAttribute(\"class\", \"label\");\n        yLabel.textContent = format(ty);\n        axis.appendChild(yLabel);\n\n        const gridline = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        gridline.setAttribute(\"x1\", margin.left);\n        gridline.setAttribute(\"y1\", yScale(ty));\n        gridline.setAttribute(\"x2\", margin.left + innerW);\n        gridline.setAttribute(\"y2\", yScale(ty));\n        gridline.setAttribute(\"class\", \"gridline\");\n        svg.appendChild(gridline);\n      }\n      svg.appendChild(axis);\n\n      // Points\n      for (let i = 0; i < xs.length; i++) {\n        const cx = xScale(xs[i]);\n        const cy = yScale(ys[i]);\n        const p = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        p.setAttribute(\"cx\", cx);\n        p.setAttribute(\"cy\", cy);\n        p.setAttribute(\"r\", 4);\n        p.setAttribute(\"class\", \"point\");\n        svg.appendChild(p);\n      }\n\n      // Fitted line across x-range\n      const yStart = model.intercept + model.slope * x0;\n      const yEnd = model.intercept + model.slope * x1;\n      const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n      line.setAttribute(\"x1\", xScale(x0));\n      line.setAttribute(\"y1\", yScale(yStart));\n      line.setAttribute(\"x2\", xScale(x1));\n      line.setAttribute(\"y2\", yScale(yEnd));\n      line.setAttribute(\"class\", \"fitline\");\n      svg.appendChild(line);\n    }\n\n    function showModel(model) {\n      const eqn = document.getElementById(\"eqn\");\n      const stats = document.getElementById(\"stats\");\n      eqn.textContent = `ŷ = ${format(model.intercept)} + ${format(model.slope)}·x`;\n      stats.textContent = `Slope b: ${format(model.slope)}, Intercept a: ${format(model.intercept)}, R²: ${format(model.r2)}, MSE: ${format(model.mse)}`;\n    }\n\n    function clearAll() {\n      document.getElementById(\"xInput\").value = \"\";\n      document.getElementById(\"yInput\").value = \"\";\n      document.getElementById(\"error\").textContent = \"\";\n      document.getElementById(\"eqn\").textContent = \"ŷ = a + b·x\";\n      document.getElementById(\"stats\").textContent = \"Slope b: —, Intercept a: —, R²: —, MSE: —\";\n      document.getElementById(\"predictX\").value = \"\";\n      document.getElementById(\"predictY\").textContent = \"\";\n      // Clear plot\n      const svg = document.getElementById(\"plot\");\n      while (svg.firstChild) svg.removeChild(svg.firstChild);\n    }\n\n    let currentModel = null;\n\n    document.getElementById(\"fitBtn\").addEventListener(\"click\", () => {\n      const x = parseNumbers(document.getElementById(\"xInput\").value);\n      const y = parseNumbers(document.getElementById(\"yInput\").value);\n      const errEl = document.getElementById(\"error\");\n      errEl.textContent = \"\";\n\n      if (!x || !y) {\n        errEl.textContent = \"Please enter only numeric values, separated by commas or spaces.\";\n        return;\n      }\n      if (x.length !== y.length) {\n        errEl.textContent = \"x and y must have the same number of values.\";\n        return;\n      }\n      if (x.length < 2) {\n        errEl.textContent = \"Provide at least two (x, y) points.\";\n        return;\n      }\n      const model = fitLinearRegression(x, y);\n      if (model.error) {\n        errEl.textContent = model.error;\n        return;\n      }\n      currentModel = model;\n      showModel(model);\n      drawPlot(model);\n    });\n\n    document.getElementById(\"clearBtn\").addEventListener(\"click\", clearAll);\n\n    document.getElementById(\"predictBtn\").addEventListener(\"click\", () => {\n      const out = document.getElementById(\"predictY\");\n      out.textContent = \"\";\n      const x0 = Number(document.getElementById(\"predictX\").value);\n      if (!Number.isFinite(x0)) {\n        out.textContent = \"Enter a numeric x to predict.\";\n        return;\n      }\n      if (!currentModel) {\n        out.textContent = \"Fit a model first.\";\n        return;\n      }\n      const yhat = currentModel.intercept + currentModel.slope * x0;\n      out.textContent = `ŷ(${format(x0)}) = ${format(yhat)}`;\n    });\n\n    // Auto-fit on load with initial example\n    window.addEventListener(\"DOMContentLoaded\", () => {\n      document.getElementById(\"fitBtn\").click();\n    });\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Linear Regression"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a32cfd20-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:49.618Z",
    "model": "gpt-5",
    "status": "success",
    "question": "K-Nearest Neighbors (KNN)",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>K-Nearest Neighbors (KNN) – A Simple Guide</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      --bg: #0f1220;\n      --panel: #171a2c;\n      --accent: #6ac1ff;\n      --text: #e6e9f5;\n      --muted: #9aa3b2;\n      --a: #ff6b6b;\n      --b: #4dd17d;\n      --query: #ffd66b;\n      --neighbor: #b48bff;\n      --border: #29304a;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      background: radial-gradient(1200px 800px at 20% 10%, #12152a 0%, #0f1220 55%, #0b0e1a 100%);\n      color: var(--text);\n      font: 15px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\n    }\n    header {\n      padding: 28px 22px 8px;\n    }\n    h1 {\n      margin: 0 0 6px;\n      font-size: 26px;\n      letter-spacing: 0.2px;\n    }\n    header p {\n      margin: 0;\n      color: var(--muted);\n    }\n    main {\n      display: grid;\n      grid-template-columns: minmax(280px, 520px) minmax(260px, 1fr);\n      gap: 18px;\n      padding: 18px 22px 28px;\n    }\n    section, .panel {\n      background: linear-gradient(180deg, #171a2c 0%, #13162a 100%);\n      border: 1px solid var(--border);\n      border-radius: 14px;\n      padding: 14px 14px 6px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.25);\n    }\n    h2 {\n      margin: 2px 0 8px;\n      font-size: 18px;\n    }\n    ul { margin: 8px 0 10px; padding-left: 18px; }\n    li { margin: 6px 0; }\n    code, pre {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      background: #111425;\n      color: #dbe0ff;\n      border: 1px solid #262c44;\n      border-radius: 10px;\n    }\n    pre {\n      padding: 10px 12px;\n      overflow: auto;\n      max-height: 280px;\n    }\n    code.inline { padding: 2px 6px; border-radius: 6px; }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 10px;\n      margin: 8px 0 12px;\n    }\n    .control {\n      background: #13162a;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px;\n    }\n    .control label {\n      display: block;\n      font-weight: 600;\n      margin-bottom: 6px;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    input[type=\"range\"] { width: 100%; }\n    select, input[type=\"number\"], input[type=\"checkbox\"] {\n      width: 100%;\n      background: #0f1326;\n      color: var(--text);\n      border: 1px solid #2a3151;\n      border-radius: 8px;\n      padding: 8px;\n    }\n    .checkbox-wrap {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n    .btn-row {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      margin: 6px 0 8px;\n    }\n    button {\n      background: #1b2140;\n      color: var(--text);\n      border: 1px solid #2a3151;\n      border-radius: 10px;\n      padding: 8px 12px;\n      cursor: pointer;\n    }\n    button:hover { border-color: #3b466e; }\n    .legend {\n      display: flex;\n      gap: 12px;\n      align-items: center;\n      flex-wrap: wrap;\n      font-size: 13px;\n      color: var(--muted);\n      margin: 8px 0 12px;\n    }\n    .dot {\n      width: 14px; height: 14px; border-radius: 50%;\n      display: inline-block; margin-right: 6px; border: 2px solid #0b0e1a;\n    }\n    .legend .a .dot { background: var(--a); }\n    .legend .b .dot { background: var(--b); }\n    .legend .q .dot { background: var(--query); }\n    .legend .n .dot { background: var(--neighbor); }\n    .canvas-wrap {\n      background: #101328;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      overflow: hidden;\n      position: relative;\n    }\n    canvas { display: block; width: 100%; height: auto; background: #0f1326; }\n    .result {\n      margin: 10px 0 8px;\n      padding: 10px 12px;\n      border: 1px dashed #2a3151;\n      border-radius: 10px;\n      background: #121634;\n      color: var(--text);\n    }\n    .result strong { color: var(--accent); }\n    footer {\n      padding: 8px 22px 26px;\n      color: var(--muted);\n      font-size: 13px;\n    }\n    a { color: var(--accent); text-decoration: none; }\n    a:hover { text-decoration: underline; }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>K-Nearest Neighbors (KNN)</h1>\n    <p>A simple, intuitive machine learning method for classification and regression using proximity.</p>\n  </header>\n\n  <main>\n    <section>\n      <h2>Overview</h2>\n      <ul>\n        <li>KNN predicts a label or value for a new point based on the labels/values of its K closest points in the training set.</li>\n        <li>It is a lazy learner: no explicit training phase; it stores data and defers computation to query time.</li>\n        <li>Works for classification (majority vote) and regression (average or weighted average).</li>\n      </ul>\n\n      <h2>How it works</h2>\n      <ul>\n        <li>Choose a number K (e.g., 3, 5, 7).</li>\n        <li>Select a distance metric (e.g., Euclidean, Manhattan, cosine for high-dimensional data).</li>\n        <li>Find the K nearest neighbors of the query point.</li>\n        <li>Aggregate their labels:\n          <ul>\n            <li>Classification: majority vote, optionally weighted by distance.</li>\n            <li>Regression: mean or distance-weighted mean.</li>\n          </ul>\n        </li>\n      </ul>\n\n      <h2>Distance metrics</h2>\n      <ul>\n        <li>Euclidean (L2): square root of sum of squared differences.</li>\n        <li>Manhattan (L1): sum of absolute differences.</li>\n        <li>Cosine similarity: angle between vectors (useful when magnitude matters less than direction).</li>\n      </ul>\n\n      <h2>Choosing K</h2>\n      <ul>\n        <li>Small K: low bias, high variance; sensitive to noise.</li>\n        <li>Large K: smoother decision boundary; may blur class boundaries.</li>\n        <li>Pick K via cross‑validation; prefer odd K for binary classification to reduce ties.</li>\n      </ul>\n\n      <h2>Pros and cons</h2>\n      <ul>\n        <li>Pros: simple, non-parametric, effective on well-separated data, naturally supports multi-class.</li>\n        <li>Cons: slow at query time on large datasets, memory-heavy, sensitive to feature scaling, struggles in high dimensions.</li>\n      </ul>\n\n      <h2>Pseudocode</h2>\n      <pre><code>// KNN for classification\nfunction knnClassify(points, query, K, metric, weighted=false):\n  // points: array of {x, ..., label}\n  distances = []\n  for each p in points:\n    d = metric(p, query)\n    distances.append({point: p, d: d})\n  sort distances by d ascending\n  neighbors = first K of distances\n  votes = map label -> 0\n  for each n in neighbors:\n    w = weighted ? 1 / (n.d + 1e-9) : 1\n    votes[n.point.label] += w\n  return argmax_label(votes)</code></pre>\n\n      <h2>Python example</h2>\n      <pre><code>from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\n# X: features (n_samples x n_features), y: labels\nmodel = make_pipeline(StandardScaler(), KNeighborsClassifier(n_neighbors=5, weights=\"distance\", metric=\"minkowski\", p=2))\nmodel.fit(X_train, y_train)\nprint(\"Accuracy:\", model.score(X_test, y_test))\n\n# Predict\npreds = model.predict(X_test)</code></pre>\n    </section>\n\n    <div class=\"panel\">\n      <h2>Try KNN (2D demo)</h2>\n      <div class=\"controls\">\n        <div class=\"control\">\n          <label for=\"k\">K neighbors: <span id=\"kVal\">5</span></label>\n          <input id=\"k\" type=\"range\" min=\"1\" max=\"15\" value=\"5\">\n        </div>\n        <div class=\"control\">\n          <label for=\"metric\">Distance metric</label>\n          <select id=\"metric\">\n            <option value=\"euclidean\">Euclidean (L2)</option>\n            <option value=\"manhattan\">Manhattan (L1)</option>\n          </select>\n        </div>\n        <div class=\"control\">\n          <label>Weights</label>\n          <div class=\"checkbox-wrap\">\n            <input id=\"weighted\" type=\"checkbox\">\n            <span>Weight by inverse distance</span>\n          </div>\n        </div>\n        <div class=\"control\">\n          <label>Mode</label>\n          <div class=\"checkbox-wrap\">\n            <input id=\"regression\" type=\"checkbox\">\n            <span>Regression (predict numeric value)</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"legend\">\n        <span class=\"a\"><span class=\"dot\" aria-hidden=\"true\"></span> Class A</span>\n        <span class=\"b\"><span class=\"dot\" aria-hidden=\"true\"></span> Class B</span>\n        <span class=\"q\"><span class=\"dot\" aria-hidden=\"true\"></span> Query point</span>\n        <span class=\"n\"><span class=\"dot\" aria-hidden=\"true\"></span> Neighbors</span>\n      </div>\n\n      <div class=\"canvas-wrap\">\n        <canvas id=\"canvas\" width=\"520\" height=\"360\" aria-label=\"KNN playground canvas\"></canvas>\n      </div>\n\n      <div class=\"btn-row\">\n        <button id=\"resetQuery\">Reset query</button>\n        <button id=\"shuffleData\">Shuffle dataset</button>\n        <button id=\"toggleData\">Toggle clusters</button>\n      </div>\n\n      <div class=\"result\" id=\"result\">Click on the canvas to add a query point. The K nearest neighbors and prediction will appear here.</div>\n    </div>\n  </main>\n\n  <footer>\n    Tips:\n    <ul>\n      <li>Scale features to avoid one dimension dominating distance.</li>\n      <li>Use cross‑validation to choose K and metric.</li>\n      <li>Consider approximate nearest neighbors for speed on large datasets.</li>\n    </ul>\n  </footer>\n\n  <script>\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    const kInput = document.getElementById('k');\n    const kVal = document.getElementById('kVal');\n    const metricSel = document.getElementById('metric');\n    const weightedChk = document.getElementById('weighted');\n    const regressionChk = document.getElementById('regression');\n    const resultEl = document.getElementById('result');\n    const resetBtn = document.getElementById('resetQuery');\n    const shuffleBtn = document.getElementById('shuffleData');\n    const toggleBtn = document.getElementById('toggleData');\n\n    const W = canvas.width;\n    const H = canvas.height;\n    const PAD = 24;\n\n    let query = null;\n    let dataset = [];\n    let mode = 0; // 0: twin clusters, 1: intertwined\n\n    function randn(mean=0, std=1) {\n      // Box-Muller\n      let u = 0, v = 0;\n      while (u === 0) u = Math.random();\n      while (v === 0) v = Math.random();\n      return mean + std * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    }\n\n    function makeData(mode = 0) {\n      const points = [];\n      if (mode === 0) {\n        // Two Gaussian blobs A and B with slight overlap\n        for (let i = 0; i < 50; i++) {\n          const x = clamp(PAD + 140 + randn(0, 28), PAD, W - PAD);\n          const y = clamp(PAD + 110 + randn(0, 26), PAD, H - PAD);\n          points.push({x, y, label: 'A', value: 1});\n        }\n        for (let i = 0; i < 50; i++) {\n          const x = clamp(W - PAD - 140 + randn(0, 28), PAD, W - PAD);\n          const y = clamp(H - PAD - 110 + randn(0, 26), PAD, H - PAD);\n          points.push({x, y, label: 'B', value: 3});\n        }\n      } else {\n        // Intertwined semicircles (rough approximation)\n        for (let i = 0; i < 60; i++) {\n          const t = Math.random() * Math.PI;\n          const r = 90 + Math.random() * 20;\n          const x = W/2 + Math.cos(t) * r + randn(0, 6);\n          const y = H/2 + Math.sin(t) * r + randn(0, 6);\n          points.push({x, y, label: 'A', value: 1});\n        }\n        for (let i = 0; i < 60; i++) {\n          const t = Math.random() * Math.PI;\n          const r = 90 + Math.random() * 20;\n          const x = W/2 + Math.cos(t) * r + 70 + randn(0, 6);\n          const y = H/2 - Math.sin(t) * r + randn(0, 6);\n          points.push({x, y, label: 'B', value: 3});\n        }\n      }\n      return points;\n    }\n\n    function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }\n\n    function draw() {\n      // Background grid\n      ctx.clearRect(0, 0, W, H);\n      ctx.fillStyle = \"#0f1326\";\n      ctx.fillRect(0, 0, W, H);\n      ctx.strokeStyle = \"#1f2542\";\n      ctx.lineWidth = 1;\n      for (let x = PAD; x <= W - PAD; x += 26) {\n        ctx.beginPath(); ctx.moveTo(x, PAD); ctx.lineTo(x, H - PAD); ctx.stroke();\n      }\n      for (let y = PAD; y <= H - PAD; y += 26) {\n        ctx.beginPath(); ctx.moveTo(PAD, y); ctx.lineTo(W - PAD, y); ctx.stroke();\n      }\n\n      // Points\n      for (const p of dataset) {\n        drawPoint(p.x, p.y, p.label === 'A' ? getColor('--a') : getColor('--b'), 5, 0.95);\n      }\n\n      // Query and neighbors\n      if (query) {\n        drawPoint(query.x, query.y, getColor('--query'), 6, 1.0, true);\n        const res = knn(dataset, query, parseInt(kInput.value, 10), metricSel.value, weightedChk.checked, regressionChk.checked);\n        for (const n of res.neighbors) {\n          drawLine(query, n.point, getColor('--neighbor'), 1.5, 0.6);\n          drawPoint(n.point.x, n.point.y, getColor('--neighbor'), 7, 0.9, true);\n        }\n        // Decision boundary hint: circle with radius = farthest neighbor distance\n        const r = res.neighbors.length ? res.neighbors[res.neighbors.length - 1].d : 0;\n        if (r > 0) {\n          ctx.beginPath();\n          ctx.arc(query.x, query.y, r, 0, Math.PI * 2);\n          ctx.strokeStyle = \"rgba(180,139,255,0.25)\";\n          ctx.lineWidth = 1.2;\n          ctx.setLineDash([5, 4]);\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n        updateResult(res);\n      } else {\n        resultEl.textContent = \"Click on the canvas to add a query point. The K nearest neighbors and prediction will appear here.\";\n      }\n    }\n\n    function drawPoint(x, y, color, radius = 5, alpha = 1.0, ring = false) {\n      ctx.save();\n      ctx.globalAlpha = alpha;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, Math.PI * 2);\n      ctx.fillStyle = color;\n      ctx.fill();\n      if (ring) {\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"#0b0e1a\";\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n\n    function drawLine(a, b, color, width = 1, alpha = 1) {\n      ctx.save();\n      ctx.globalAlpha = alpha;\n      ctx.beginPath();\n      ctx.moveTo(a.x, a.y);\n      ctx.lineTo(b.x, b.y);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function getColor(varName) {\n      return getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\n    }\n\n    function dist(a, b, metric = 'euclidean') {\n      const dx = a.x - b.x;\n      const dy = a.y - b.y;\n      if (metric === 'manhattan') {\n        return Math.abs(dx) + Math.abs(dy);\n      }\n      return Math.sqrt(dx*dx + dy*dy); // euclidean default\n    }\n\n    function knn(points, query, K, metric, weighted, regression) {\n      const distances = points.map(p => ({ point: p, d: dist(p, query, metric) }));\n      distances.sort((a, b) => a.d - b.d);\n      const neighbors = distances.slice(0, Math.max(1, K));\n\n      if (regression) {\n        // Predict numeric value via mean or weighted mean\n        let num = 0, den = 0;\n        for (const n of neighbors) {\n          const w = weighted ? 1 / (n.d + 1e-9) : 1;\n          num += w * n.point.value;\n          den += w;\n        }\n        const predValue = num / Math.max(den, 1e-9);\n        return { neighbors, mode: 'regression', value: predValue };\n      } else {\n        // Classification majority vote or weighted\n        const votes = new Map();\n        for (const n of neighbors) {\n          const label = n.point.label;\n          const w = weighted ? 1 / (n.d + 1e-9) : 1;\n          votes.set(label, (votes.get(label) || 0) + w);\n        }\n        let bestLabel = null, bestScore = -Infinity;\n        for (const [label, score] of votes.entries()) {\n          if (score > bestScore) { bestScore = score; bestLabel = label; }\n        }\n        return { neighbors, mode: 'classification', label: bestLabel, score: bestScore };\n      }\n    }\n\n    function updateResult(res) {\n      if (res.mode === 'classification') {\n        const aCount = res.neighbors.filter(n => n.point.label === 'A').length;\n        const bCount = res.neighbors.filter(n => n.point.label === 'B').length;\n        const k = res.neighbors.length;\n        resultEl.innerHTML =\n          `<strong>Classification</strong> → Predicted: <strong>${res.label}</strong> ` +\n          `(K=${k}, A=${aCount}, B=${bCount}${weightedChk.checked ? \", weighted\" : \"\"}, metric=${metricSel.value}).`;\n      } else {\n        resultEl.innerHTML =\n          `<strong>Regression</strong> → Predicted value: <strong>${res.value.toFixed(2)}</strong> ` +\n          `(K=${res.neighbors.length}${weightedChk.checked ? \", weighted\" : \"\"}, metric=${metricSel.value}).`;\n      }\n    }\n\n    // Event handlers\n    canvas.addEventListener('click', (e) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = (e.clientX - rect.left) * (canvas.width / rect.width);\n      const y = (e.clientY - rect.top) * (canvas.height / rect.height);\n      query = { x, y };\n      draw();\n    });\n\n    kInput.addEventListener('input', () => {\n      kVal.textContent = kInput.value;\n      draw();\n    });\n    metricSel.addEventListener('change', draw);\n    weightedChk.addEventListener('change', draw);\n    regressionChk.addEventListener('change', draw);\n\n    resetBtn.addEventListener('click', () => { query = null; draw(); });\n    shuffleBtn.addEventListener('click', () => {\n      // Slight jitter to points\n      dataset.forEach(p => {\n        p.x = clamp(p.x + randn(0, 4), PAD, W - PAD);\n        p.y = clamp(p.y + randn(0, 4), PAD, H - PAD);\n      });\n      draw();\n    });\n    toggleBtn.addEventListener('click', () => {\n      mode = (mode + 1) % 2;\n      dataset = makeData(mode);\n      query = null;\n      draw();\n    });\n\n    // Initialize\n    function init() {\n      kVal.textContent = kInput.value;\n      dataset = makeData(0);\n      draw();\n    }\n    init();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "K-Nearest Neighbors (KNN)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a38cd060-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:50.246Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Huffman Coding",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Huffman Coding</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root {\n      color-scheme: light dark;\n    }\n    body {\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;\n      line-height: 1.5;\n      margin: 0;\n      padding: 1rem;\n    }\n    header {\n      max-width: 900px;\n      margin: 0 auto 1rem auto;\n    }\n    main {\n      max-width: 900px;\n      margin: 0 auto;\n      display: grid;\n      gap: 1rem;\n    }\n    .card {\n      border: 1px solid rgba(0,0,0,0.12);\n      border-radius: 8px;\n      padding: 1rem;\n    }\n    h1, h2, h3 {\n      margin: 0 0 .5rem 0;\n    }\n    textarea, input[type=\"text\"] {\n      width: 100%;\n      box-sizing: border-box;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n      font-size: 14px;\n      padding: .5rem;\n      border: 1px solid rgba(0,0,0,0.2);\n      border-radius: 6px;\n      min-height: 110px;\n      resize: vertical;\n    }\n    .controls {\n      display: flex;\n      gap: .5rem;\n      flex-wrap: wrap;\n      margin-top: .5rem;\n    }\n    button {\n      padding: .5rem .8rem;\n      border: 1px solid rgba(0,0,0,0.2);\n      border-radius: 6px;\n      background: #f5f5f5;\n      cursor: pointer;\n    }\n    button:disabled {\n      opacity: .5;\n      cursor: not-allowed;\n    }\n    .grid {\n      display: grid;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      gap: 1rem;\n    }\n    @media (max-width: 720px) {\n      .grid {\n        grid-template-columns: 1fr;\n      }\n    }\n    .muted {\n      color: rgba(0,0,0,0.6);\n      font-size: 0.95em;\n    }\n    ul {\n      padding-left: 1.2rem;\n      margin: .5rem 0;\n    }\n    .mono {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n    }\n    .small {\n      font-size: .9em;\n    }\n    .ok {\n      color: #0a7c2f;\n    }\n    .warn {\n      color: #b85e00;\n    }\n    .error {\n      color: #b00020;\n    }\n    .stat-row {\n      display: grid;\n      grid-template-columns: 220px 1fr;\n      gap: .5rem;\n    }\n    .code-pill {\n      display: inline-block;\n      padding: .15rem .4rem;\n      border: 1px solid rgba(0,0,0,0.15);\n      border-radius: 4px;\n      background: #fafafa;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n    }\n    details summary {\n      cursor: pointer;\n      user-select: none;\n      margin: .25rem 0;\n    }\n    .bits-preview {\n      border: 1px dashed rgba(0,0,0,0.2);\n      border-radius: 6px;\n      padding: .5rem;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n      word-wrap: break-word;\n      word-break: break-all;\n      white-space: pre-wrap;\n      background: #fff;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Huffman Coding</h1>\n    <p class=\"muted\">\n      Huffman coding is a lossless compression method that assigns shorter bit codes to more frequent symbols and longer codes to less frequent symbols.\n      Enter text below to build a Huffman tree, see the codes, and encode/decode.\n    </p>\n  </header>\n\n  <main>\n    <section class=\"card\">\n      <h2>Try it</h2>\n      <label for=\"inputText\" class=\"small muted\">Input text</label>\n      <textarea id=\"inputText\" placeholder=\"Type or paste text to compress...\">this is an example for huffman encoding</textarea>\n      <div class=\"controls\">\n        <button id=\"encodeBtn\">Encode</button>\n        <button id=\"copyBitsBtn\" disabled>Copy encoded bits</button>\n        <button id=\"clearBtn\">Clear</button>\n      </div>\n      <p id=\"status\" class=\"muted\"></p>\n    </section>\n\n    <section class=\"grid\">\n      <section class=\"card\">\n        <h3>Encoded bits</h3>\n        <details id=\"bitsDetails\" open>\n          <summary>Preview</summary>\n          <div id=\"bitsPreview\" class=\"bits-preview mono muted\">No data yet.</div>\n        </details>\n        <label for=\"bitsText\" class=\"small muted\">Encoded bits (0/1)</label>\n        <textarea id=\"bitsText\" placeholder=\"Huffman bitstream (0s and 1s) to decode...\" disabled></textarea>\n        <div class=\"controls\">\n          <button id=\"decodeBtn\" disabled>Decode</button>\n        </div>\n        <p id=\"decodeStatus\" class=\"muted\"></p>\n      </section>\n\n      <section class=\"card\">\n        <h3>Codes</h3>\n        <div id=\"codesList\" class=\"muted\">No codes yet.</div>\n      </section>\n    </section>\n\n    <section class=\"card\">\n      <h3>Stats</h3>\n      <div id=\"stats\" class=\"muted\">\n        <div class=\"stat-row\"><div>Original length</div><div>—</div></div>\n        <div class=\"stat-row\"><div>Unique symbols</div><div>—</div></div>\n        <div class=\"stat-row\"><div>Encoded bit length</div><div>—</div></div>\n        <div class=\"stat-row\"><div>Average bits per symbol</div><div>—</div></div>\n        <div class=\"stat-row\"><div>Estimated compression vs 8-bit</div><div>—</div></div>\n      </div>\n    </section>\n\n    <section class=\"card\">\n      <h2>How it works (quick overview)</h2>\n      <ul>\n        <li>Count the frequency of each symbol in the input.</li>\n        <li>Build a binary tree by repeatedly merging the two lowest-frequency nodes.</li>\n        <li>Assign codes: left edges are 0, right edges are 1. Leaves get their code.</li>\n        <li>Encode by replacing each symbol with its code; decode by traversing the tree per bit.</li>\n      </ul>\n      <p class=\"muted small\">Note: For a single unique symbol, the code is 0.</p>\n    </section>\n  </main>\n\n  <script>\n    // Data structures\n    let currentTree = null;\n    let currentCodes = null;\n    let currentInput = \"\";\n    let currentBits = \"\";\n\n    const inputEl = document.getElementById('inputText');\n    const encodeBtn = document.getElementById('encodeBtn');\n    const copyBitsBtn = document.getElementById('copyBitsBtn');\n    const clearBtn = document.getElementById('clearBtn');\n\n    const bitsPreviewEl = document.getElementById('bitsPreview');\n    const bitsTextEl = document.getElementById('bitsText');\n    const bitsDetailsEl = document.getElementById('bitsDetails');\n    const decodeBtn = document.getElementById('decodeBtn');\n\n    const codesListEl = document.getElementById('codesList');\n    const statsEl = document.getElementById('stats');\n    const statusEl = document.getElementById('status');\n    const decodeStatusEl = document.getElementById('decodeStatus');\n\n    function printableChar(ch) {\n      if (ch === ' ') return '␠ space';\n      if (ch === '\\n') return '↵ newline';\n      if (ch === '\\t') return '⇥ tab';\n      if (ch === '\\r') return '␍ carriage return';\n      return ch;\n    }\n\n    function frequencyMap(str) {\n      const map = new Map();\n      for (const ch of str) {\n        map.set(ch, (map.get(ch) || 0) + 1);\n      }\n      return map;\n    }\n\n    function buildHuffmanTree(freqMap) {\n      const nodes = [];\n      for (const [ch, freq] of freqMap.entries()) {\n        nodes.push({ ch, freq, left: null, right: null });\n      }\n      if (nodes.length === 0) return null;\n      if (nodes.length === 1) {\n        // Special case: single symbol\n        return nodes[0];\n      }\n      while (nodes.length > 1) {\n        nodes.sort((a, b) => a.freq - b.freq);\n        const a = nodes.shift();\n        const b = nodes.shift();\n        nodes.push({ ch: null, freq: a.freq + b.freq, left: a, right: b });\n      }\n      return nodes[0];\n    }\n\n    function buildCodes(root) {\n      const codes = {};\n      function walk(node, prefix) {\n        if (!node) return;\n        if (!node.left && !node.right) {\n          codes[node.ch] = prefix.length ? prefix : '0';\n          return;\n        }\n        walk(node.left, prefix + '0');\n        walk(node.right, prefix + '1');\n      }\n      walk(root, '');\n      return codes;\n    }\n\n    function encodeWithCodes(str, codes) {\n      let bits = '';\n      for (const ch of str) {\n        const code = codes[ch];\n        if (code == null) {\n          throw new Error('Missing code for symbol: ' + ch);\n        }\n        bits += code;\n      }\n      return bits;\n    }\n\n    function decodeBits(bits, root) {\n      if (!root) return '';\n      // Single-node tree\n      if (!root.left && !root.right) {\n        // Every bit corresponds to the single symbol; number of symbols equals number of bits\n        // But if bits is empty, decoding length is ambiguous; we assume original length is unknown\n        // Here we decode: each bit produces one symbol\n        let out = '';\n        for (let i = 0; i < bits.length; i++) out += root.ch;\n        return out;\n      }\n      let out = '';\n      let node = root;\n      for (let i = 0; i < bits.length; i++) {\n        const b = bits[i];\n        if (b === '0') node = node.left;\n        else if (b === '1') node = node.right;\n        else throw new Error('Bitstream contains non-binary character: ' + b);\n        if (!node) throw new Error('Invalid traversal: reached null node at position ' + i);\n        if (!node.left && !node.right) {\n          out += node.ch;\n          node = root;\n        }\n      }\n      if (node !== root) {\n        // Trailing bits that don't complete a symbol\n        throw new Error('Bitstream ended mid-code. Ensure you used the same Huffman codes.');\n      }\n      return out;\n    }\n\n    function renderCodes(codes, freqMap) {\n      if (!codes || Object.keys(codes).length === 0) {\n        codesListEl.textContent = 'No codes yet.';\n        return;\n      }\n      const items = [];\n      const sorted = Object.keys(codes).sort((a, b) => {\n        const fa = freqMap.get(a) || 0;\n        const fb = freqMap.get(b) || 0;\n        if (fb !== fa) return fb - fa;\n        return a.localeCompare(b);\n      });\n      for (const ch of sorted) {\n        const code = codes[ch];\n        const freq = freqMap.get(ch);\n        items.push(`<li><span class=\"code-pill\">${code}</span> — \"${escapeHtml(printableChar(ch))}\" (freq: ${freq})</li>`);\n      }\n      codesListEl.innerHTML = `<ul>${items.join('')}</ul>`;\n    }\n\n    function renderStats(originalText, codes, bits, freqMap) {\n      const originalLen = originalText.length;\n      const unique = freqMap.size;\n      const bitLen = bits.length;\n      const avgBits = originalLen > 0 ? (bitLen / originalLen) : 0;\n      const estCompression = originalLen > 0 ? (100 * (1 - (bitLen / (originalLen * 8)))) : 0;\n\n      const rows = [\n        ['Original length', `${originalLen} symbols`],\n        ['Unique symbols', `${unique}`],\n        ['Encoded bit length', `${bitLen} bits`],\n        ['Average bits per symbol', avgBits ? avgBits.toFixed(3) : '—'],\n        ['Estimated compression vs 8-bit', originalLen ? `${estCompression.toFixed(1)}%` : '—'],\n      ];\n      statsEl.innerHTML = rows.map(([k, v]) => `<div class=\"stat-row\"><div>${k}</div><div>${v}</div></div>`).join('');\n    }\n\n    function renderBits(bits) {\n      if (!bits) {\n        bitsPreviewEl.textContent = 'No data yet.';\n        bitsTextEl.value = '';\n        bitsTextEl.disabled = true;\n        decodeBtn.disabled = true;\n        copyBitsBtn.disabled = true;\n        return;\n      }\n      copyBitsBtn.disabled = false;\n      bitsTextEl.disabled = false;\n      decodeBtn.disabled = false;\n\n      const maxPreview = 512;\n      const preview = bits.length > maxPreview ? bits.slice(0, maxPreview) + ' … (+' + (bits.length - maxPreview) + ' bits)' : bits;\n      bitsPreviewEl.textContent = preview;\n      bitsTextEl.value = bits;\n    }\n\n    function escapeHtml(str) {\n      return String(str)\n        .replaceAll('&', '&amp;')\n        .replaceAll('<', '&lt;')\n        .replaceAll('>', '&gt;')\n        .replaceAll('\"', '&quot;')\n        .replaceAll(\"'\", '&#39;');\n    }\n\n    function setStatus(message, kind = 'muted') {\n      statusEl.className = kind;\n      statusEl.textContent = message || '';\n    }\n\n    function setDecodeStatus(message, kind = 'muted') {\n      decodeStatusEl.className = kind;\n      decodeStatusEl.textContent = message || '';\n    }\n\n    // Event handlers\n    encodeBtn.addEventListener('click', () => {\n      setStatus('');\n      setDecodeStatus('');\n      const text = inputEl.value || '';\n      currentInput = text;\n\n      if (text.length === 0) {\n        currentTree = null;\n        currentCodes = null;\n        currentBits = '';\n        renderBits('');\n        renderCodes(null, new Map());\n        renderStats('', {}, '', new Map());\n        setStatus('Please enter some text to encode.', 'warn');\n        return;\n      }\n\n      try {\n        const freq = frequencyMap(text);\n        const tree = buildHuffmanTree(freq);\n        const codes = buildCodes(tree);\n        const bits = encodeWithCodes(text, codes);\n\n        currentTree = tree;\n        currentCodes = codes;\n        currentBits = bits;\n\n        renderCodes(codes, freq);\n        renderBits(bits);\n        renderStats(text, codes, bits, freq);\n        setStatus('Encoded successfully.', 'ok');\n      } catch (e) {\n        setStatus('Error: ' + e.message, 'error');\n      }\n    });\n\n    decodeBtn.addEventListener('click', () => {\n      setDecodeStatus('');\n      if (!currentTree) {\n        setDecodeStatus('No Huffman tree available. Encode some text first.', 'warn');\n        return;\n      }\n      const bits = (bitsTextEl.value || '').trim();\n      if (!bits) {\n        setDecodeStatus('Enter a bitstream (0s and 1s) to decode.', 'warn');\n        return;\n      }\n      try {\n        const decoded = decodeBits(bits, currentTree);\n        // Show decoded output in a lightweight dialog via details\n        const dlg = document.createElement('details');\n        dlg.open = true;\n        const summary = document.createElement('summary');\n        summary.textContent = 'Decoded output';\n        const pre = document.createElement('pre');\n        pre.className = 'mono';\n        pre.textContent = decoded;\n        dlg.appendChild(summary);\n        dlg.appendChild(pre);\n\n        // Replace any existing decoded result\n        decodeStatusEl.replaceChildren();\n        decodeStatusEl.appendChild(dlg);\n        decodeStatusEl.className = '';\n      } catch (e) {\n        setDecodeStatus('Decoding error: ' + e.message, 'error');\n      }\n    });\n\n    copyBitsBtn.addEventListener('click', async () => {\n      if (!currentBits) return;\n      try {\n        await navigator.clipboard.writeText(currentBits);\n        setStatus('Copied encoded bits to clipboard.', 'ok');\n      } catch {\n        setStatus('Could not copy to clipboard. Select and copy manually.', 'warn');\n      }\n    });\n\n    clearBtn.addEventListener('click', () => {\n      inputEl.value = '';\n      currentTree = null;\n      currentCodes = null;\n      currentBits = '';\n      renderCodes(null, new Map());\n      renderBits('');\n      renderStats('', {}, '', new Map());\n      setStatus('Cleared.', 'muted');\n      setDecodeStatus('');\n    });\n\n    // Initialize with default\n    encodeBtn.click();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Huffman Coding"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a45cf1a0-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:47:51.611Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Sliding Window",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Sliding Window</title>\n  <style>\n    :root {\n      --bg: #ffffff;\n      --text: #222;\n      --muted: #666;\n      --primary: #0069d9;\n      --fixed-bg: #e7f3ff;\n      --fixed-border: #2e86ff;\n      --var-bg: #ffecec;\n      --var-border: #ff6b6b;\n      --box: #e5e7eb;\n      --border: #cfd4dc;\n    }\n    body {\n      margin: 24px;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      color: var(--text);\n      background: var(--bg);\n      line-height: 1.5;\n    }\n    h1 {\n      margin: 0 0 12px 0;\n      font-size: 1.6rem;\n    }\n    p {\n      margin: 8px 0;\n      color: var(--muted);\n    }\n    .panel {\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 16px;\n      margin: 16px 0;\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 12px;\n      align-items: end;\n    }\n    .controls .full {\n      grid-column: 1 / -1;\n    }\n    label {\n      display: block;\n      font-weight: 600;\n      margin-bottom: 6px;\n    }\n    input[type=\"text\"], input[type=\"number\"] {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid var(--border);\n      border-radius: 6px;\n      font-size: 0.95rem;\n    }\n    .buttons {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      margin-top: 8px;\n    }\n    button {\n      padding: 10px 14px;\n      border: 1px solid var(--border);\n      background: #f7f7f7;\n      border-radius: 6px;\n      cursor: pointer;\n      font-weight: 600;\n    }\n    button.primary {\n      background: var(--primary);\n      color: #fff;\n      border-color: var(--primary);\n    }\n    button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .array {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n      margin-top: 12px;\n    }\n    .box {\n      min-width: 40px;\n      padding: 10px 12px;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      background: var(--box);\n      text-align: center;\n      font-weight: 600;\n    }\n    .box.fixed {\n      background: var(--fixed-bg);\n      border-color: var(--fixed-border);\n      box-shadow: 0 0 0 2px rgba(46, 134, 255, 0.15) inset;\n    }\n    .box.var {\n      background: var(--var-bg);\n      border-color: var(--var-border);\n      box-shadow: 0 0 0 2px rgba(255, 107, 107, 0.15) inset;\n    }\n    .result {\n      margin-top: 12px;\n      padding: 10px;\n      background: #fafafa;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      font-size: 0.95rem;\n    }\n    .small {\n      font-size: 0.9rem;\n      color: var(--muted);\n    }\n    code, pre {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    }\n    pre {\n      margin: 0;\n      padding: 12px;\n      background: #0f172a;\n      color: #e5e7eb;\n      border-radius: 8px;\n      overflow: auto;\n    }\n    .note {\n      font-size: 0.9rem;\n      color: #8a5a00;\n      background: #fff6e0;\n      border: 1px solid #ffe7a3;\n      border-radius: 8px;\n      padding: 10px;\n      margin-top: 8px;\n    }\n    .msg {\n      margin-top: 8px;\n      color: #b00020;\n      font-weight: 600;\n    }\n  </style>\n</head>\n<body>\n  <h1>Sliding Window</h1>\n  <p>The sliding window technique is a powerful pattern for processing contiguous subarrays or substrings efficiently, often in linear time.</p>\n\n  <div class=\"panel\">\n    <div class=\"controls\">\n      <div class=\"full\">\n        <label for=\"arr\">Array (comma or space separated)</label>\n        <input id=\"arr\" type=\"text\" value=\"2, 1, 5, 1, 3, 2\" placeholder=\"e.g. 2, 1, 5, 1, 3, 2\" />\n      </div>\n      <div>\n        <label for=\"k\">Fixed window size (k)</label>\n        <input id=\"k\" type=\"number\" min=\"1\" value=\"3\" />\n      </div>\n      <div>\n        <label for=\"target\">Target sum (for variable window)</label>\n        <input id=\"target\" type=\"number\" value=\"7\" />\n      </div>\n    </div>\n    <div class=\"buttons\">\n      <button id=\"render\" title=\"Render array\">Render</button>\n      <button id=\"fixed\" class=\"primary\" title=\"Compute max sum fixed-size window\">Max Sum (Fixed k)</button>\n      <button id=\"variable\" class=\"primary\" title=\"Compute smallest subarray with sum ≥ target\">Smallest Subarray ≥ Target</button>\n      <button id=\"clear\" title=\"Clear highlights\">Clear Highlights</button>\n      <button id=\"fillEx\" title=\"Fill example data\">Use Example</button>\n    </div>\n\n    <div id=\"message\" class=\"msg\" aria-live=\"polite\"></div>\n\n    <div id=\"array\" class=\"array\" aria-label=\"Array visualization\"></div>\n\n    <div id=\"fixedResult\" class=\"result\" hidden></div>\n    <div id=\"varResult\" class=\"result\" hidden></div>\n\n    <div class=\"note\">\n      Note:\n      - The fixed-size window demo works with any numbers.\n      - The variable-size demo assumes non-negative numbers; with negatives, standard sliding window for sum constraints may not be valid.\n    </div>\n  </div>\n\n  <div class=\"panel\">\n    <h2 style=\"margin:0 0 8px 0;\">How it works</h2>\n    <ul class=\"small\">\n      <li>Fixed window: Move a window of size k across the array, update the sum in O(1) by subtracting the element that leaves and adding the one that enters.</li>\n      <li>Variable window: Expand the end pointer until the condition is met, then shrink the start pointer to minimize the window while keeping the condition true.</li>\n      <li>Time complexity: Typically O(n); Space complexity: O(1) additional space.</li>\n    </ul>\n    <pre><code>// Fixed-size window: max sum of any subarray of length k\nfunction maxSumFixed(arr, k) {\n  if (k &lt;= 0 || k &gt; arr.length) return null;\n  let sum = 0;\n  for (let i = 0; i &lt; k; i++) sum += arr[i];\n  let best = { sum, start: 0 };\n  for (let i = k; i &lt; arr.length; i++) {\n    sum += arr[i] - arr[i - k];\n    if (sum &gt; best.sum) best = { sum, start: i - k + 1 };\n  }\n  return { ...best, end: best.start + k - 1 };\n}\n\n// Variable-size window: smallest subarray with sum ≥ target (non-negative arr)\nfunction minSubarrayAtLeast(arr, target) {\n  let start = 0, sum = 0, best = { len: Infinity, start: -1, end: -1 };\n  for (let end = 0; end &lt; arr.length; end++) {\n    sum += arr[end];\n    while (sum &gt;= target) {\n      const len = end - start + 1;\n      if (len &lt; best.len) best = { len, start, end };\n      sum -= arr[start++];\n    }\n  }\n  return best.len === Infinity ? null : best;\n}</code></pre>\n  </div>\n\n  <noscript>\n    This demo requires JavaScript enabled to run the interactive examples.\n  </noscript>\n\n  <script>\n    const arrInput = document.getElementById('arr');\n    const kInput = document.getElementById('k');\n    const targetInput = document.getElementById('target');\n    const renderBtn = document.getElementById('render');\n    const fixedBtn = document.getElementById('fixed');\n    const varBtn = document.getElementById('variable');\n    const clearBtn = document.getElementById('clear');\n    const fillExBtn = document.getElementById('fillEx');\n    const arrayEl = document.getElementById('array');\n    const msgEl = document.getElementById('message');\n    const fixedResultEl = document.getElementById('fixedResult');\n    const varResultEl = document.getElementById('varResult');\n\n    let currentArr = [];\n\n    function parseArray(str) {\n      const parts = String(str).trim().split(/[,\\s]+/).filter(Boolean);\n      if (parts.length === 0) return [];\n      const nums = parts.map(p => Number(p));\n      if (nums.some(n => Number.isNaN(n))) return null;\n      return nums;\n    }\n\n    function renderArray(arr) {\n      arrayEl.innerHTML = '';\n      arr.forEach((n, i) => {\n        const div = document.createElement('div');\n        div.className = 'box';\n        div.textContent = String(n);\n        div.setAttribute('data-index', i);\n        arrayEl.appendChild(div);\n      });\n    }\n\n    function clearHighlights() {\n      [...arrayEl.children].forEach(el => {\n        el.classList.remove('fixed', 'var');\n      });\n      fixedResultEl.hidden = true;\n      varResultEl.hidden = true;\n      msgEl.textContent = '';\n    }\n\n    function highlightRange(start, end, type) {\n      [...arrayEl.children].forEach((el, i) => {\n        el.classList.remove(type);\n        if (i >= start && i <= end) {\n          el.classList.add(type);\n        }\n      });\n    }\n\n    function maxSumFixed(arr, k) {\n      if (!Array.isArray(arr) || arr.length === 0 || k <= 0 || k > arr.length) return null;\n      let sum = 0;\n      for (let i = 0; i < k; i++) sum += arr[i];\n      let bestSum = sum;\n      let bestStart = 0;\n      for (let i = k; i < arr.length; i++) {\n        sum += arr[i] - arr[i - k];\n        if (sum > bestSum) {\n          bestSum = sum;\n          bestStart = i - k + 1;\n        }\n      }\n      return { sum: bestSum, start: bestStart, end: bestStart + k - 1 };\n    }\n\n    function minSubarrayAtLeast(arr, target) {\n      if (!Array.isArray(arr) || arr.length === 0) return null;\n      // Warn if negatives exist (algorithm assumption)\n      const hasNegative = arr.some(n => n < 0);\n      if (hasNegative && target >= 0) {\n        // Proceed, but may be incorrect; just compute anyway\n      }\n      let start = 0, sum = 0;\n      let bestLen = Infinity, bestStart = -1, bestEnd = -1;\n      for (let end = 0; end < arr.length; end++) {\n        sum += arr[end];\n        while (sum >= target) {\n          const len = end - start + 1;\n          if (len < bestLen) {\n            bestLen = len;\n            bestStart = start;\n            bestEnd = end;\n          }\n          sum -= arr[start++];\n        }\n      }\n      if (bestLen === Infinity) return null;\n      return { len: bestLen, start: bestStart, end: bestEnd };\n    }\n\n    function runRender() {\n      const arr = parseArray(arrInput.value);\n      if (arr === null) {\n        msgEl.textContent = 'Invalid array: please enter numbers separated by commas/spaces.';\n        return;\n      }\n      currentArr = arr;\n      renderArray(arr);\n      clearHighlights();\n      msgEl.textContent = 'Array rendered.';\n    }\n\n    function runFixed() {\n      if (!currentArr.length) {\n        msgEl.textContent = 'Please render a valid array first.';\n        return;\n      }\n      const k = Number(kInput.value);\n      if (!Number.isInteger(k) || k <= 0) {\n        msgEl.textContent = 'Window size k must be a positive integer.';\n        return;\n      }\n      if (k > currentArr.length) {\n        msgEl.textContent = 'Window size k cannot exceed array length.';\n        return;\n      }\n      const res = maxSumFixed(currentArr, k);\n      if (!res) {\n        msgEl.textContent = 'Unable to compute fixed window result.';\n        return;\n      }\n      highlightRange(res.start, res.end, 'fixed');\n      fixedResultEl.hidden = false;\n      fixedResultEl.textContent = `Max sum for k=${k}: ${res.sum} at indices [${res.start}..${res.end}] -> [${currentArr.slice(res.start, res.end + 1).join(', ')}]`;\n      msgEl.textContent = '';\n    }\n\n    function runVariable() {\n      if (!currentArr.length) {\n        msgEl.textContent = 'Please render a valid array first.';\n        return;\n      }\n      const target = Number(targetInput.value);\n      if (!Number.isFinite(target)) {\n        msgEl.textContent = 'Target must be a valid number.';\n        return;\n      }\n      const res = minSubarrayAtLeast(currentArr, target);\n      varResultEl.hidden = false;\n      if (!res) {\n        clearHighlights();\n        varResultEl.textContent = `No subarray has sum ≥ ${target}.`;\n        return;\n      }\n      highlightRange(res.start, res.end, 'var');\n      const sub = currentArr.slice(res.start, res.end + 1);\n      const sum = sub.reduce((a, b) => a + b, 0);\n      varResultEl.textContent = `Smallest subarray with sum ≥ ${target}: length ${res.len} at [${res.start}..${res.end}] -> [${sub.join(', ')}], sum=${sum}`;\n      msgEl.textContent = '';\n    }\n\n    function fillExample() {\n      arrInput.value = '2, 1, 5, 1, 3, 2';\n      kInput.value = 3;\n      targetInput.value = 7;\n      runRender();\n      runFixed();\n      runVariable();\n    }\n\n    renderBtn.addEventListener('click', runRender);\n    fixedBtn.addEventListener('click', runFixed);\n    varBtn.addEventListener('click', runVariable);\n    clearBtn.addEventListener('click', clearHighlights);\n    fillExBtn.addEventListener('click', fillExample);\n\n    document.addEventListener('DOMContentLoaded', fillExample);\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Sliding Window"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "aa213b50-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:48:01.285Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Prim’s Algorithm",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n  <title>Prim’s Algorithm (Minimum Spanning Tree)</title>\n  <style>\n    :root {\n      --bg: #ffffff;\n      --text: #1f2937;\n      --muted: #6b7280;\n      --accent: #2563eb;\n      --good: #10b981;\n      --edge: #9ca3af;\n      --edge-strong: #374151;\n      --visited: #fde68a;\n    }\n    body {\n      margin: 0;\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      background: var(--bg);\n      color: var(--text);\n      line-height: 1.55;\n    }\n    .page {\n      max-width: 950px;\n      margin: 0 auto;\n      padding: 28px 18px 48px;\n    }\n    header h1 {\n      margin: 0 0 8px;\n      font-size: 28px;\n      font-weight: 700;\n    }\n    header p {\n      margin: 0 0 18px;\n      color: var(--muted);\n    }\n    section {\n      margin: 22px 0;\n    }\n    h2 {\n      font-size: 20px;\n      margin: 0 0 10px;\n    }\n    ul {\n      padding-left: 18px;\n      margin: 8px 0;\n    }\n    code, pre {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    }\n    pre {\n      background: #f8fafc;\n      border: 1px solid #e5e7eb;\n      border-radius: 8px;\n      padding: 12px 14px;\n      overflow: auto;\n      margin: 10px 0;\n    }\n    /* Visualization */\n    .viz-wrap {\n      display: grid;\n      grid-template-columns: 1fr 320px;\n      gap: 16px;\n      align-items: start;\n    }\n    .canvas {\n      background: #f9fafb;\n      border: 1px solid #e5e7eb;\n      border-radius: 10px;\n      padding: 6px;\n    }\n    svg {\n      width: 100%;\n      height: 380px;\n      display: block;\n    }\n    .node {\n      fill: #ffffff;\n      stroke: var(--edge-strong);\n      stroke-width: 2.2;\n      transition: fill 150ms ease, stroke 150ms ease;\n    }\n    .node.visited {\n      fill: var(--visited);\n      stroke: #ca8a04;\n    }\n    .edge {\n      stroke: var(--edge);\n      stroke-width: 2.5;\n      transition: stroke 150ms ease, stroke-width 150ms ease;\n    }\n    .edge.mst {\n      stroke: var(--good);\n      stroke-width: 4.5;\n    }\n    .edge.considered {\n      stroke: #f59e0b;\n      stroke-dasharray: 6 4;\n    }\n    .weight {\n      fill: #111827;\n      font-size: 12px;\n      user-select: none;\n      text-anchor: middle;\n    }\n    .label {\n      fill: #111827;\n      font-size: 12px;\n      font-weight: 600;\n      user-select: none;\n    }\n    .controls {\n      border: 1px solid #e5e7eb;\n      border-radius: 10px;\n      padding: 12px;\n      background: #f9fafb;\n    }\n    .controls .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 10px;\n      align-items: center;\n      margin-bottom: 10px;\n    }\n    .controls label {\n      font-size: 14px;\n      color: var(--muted);\n    }\n    select, button {\n      font: inherit;\n      padding: 8px 12px;\n      border-radius: 8px;\n      border: 1px solid #d1d5db;\n      background: #ffffff;\n      cursor: pointer;\n    }\n    button {\n      background: var(--accent);\n      color: #fff;\n      border: none;\n    }\n    button.secondary {\n      background: #e5e7eb;\n      color: #111827;\n    }\n    button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n    .log {\n      background: #fff;\n      border: 1px solid #e5e7eb;\n      border-radius: 8px;\n      padding: 10px 12px;\n      max-height: 180px;\n      overflow: auto;\n      font-size: 13px;\n    }\n    .summary {\n      margin-top: 6px;\n      font-size: 14px;\n      color: var(--muted);\n    }\n    .legend {\n      display: flex;\n      gap: 14px;\n      align-items: center;\n      margin-top: 8px;\n      font-size: 12px;\n      color: var(--muted);\n    }\n    .chip {\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n    }\n    .swatch {\n      width: 18px;\n      height: 3px;\n      border-radius: 2px;\n    }\n    .swatch.mst { background: var(--good); }\n    .swatch.consider { background: #f59e0b; }\n    .swatch.default { background: var(--edge); }\n    @media (max-width: 860px) {\n      .viz-wrap { grid-template-columns: 1fr; }\n      svg { height: 420px; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"page\">\n    <header>\n      <h1>Prim’s Algorithm (Minimum Spanning Tree)</h1>\n      <p>Builds a minimum-cost tree that connects all vertices in a connected, weighted, undirected graph. Prim’s is a greedy algorithm.</p>\n    </header>\n\n    <section>\n      <h2>How it works</h2>\n      <ul>\n        <li>Start from any vertex. Mark it visited.</li>\n        <li>Repeatedly choose the lightest edge that connects the visited set to an unvisited vertex.</li>\n        <li>Add that edge to the MST and mark the new vertex visited.</li>\n        <li>Stop when all vertices are included. The selected edges form the minimum spanning tree (MST).</li>\n      </ul>\n      <p><strong>Complexity:</strong> O(E log V) with a min-heap / priority queue; O(V²) with a simple array on dense graphs.</p>\n    </section>\n\n    <section>\n      <h2>Pseudocode</h2>\n      <pre><code>Prim(G, start):\n    T = {}                        // edges of the MST\n    visited = {start}\n    PQ = min-priority queue of edges touching visited\n\n    push all edges (start, v, w) into PQ\n\n    while |visited| &lt; |V(G)| and PQ not empty:\n        (u, v, w) = PQ.pop_min() // lightest edge from visited to unvisited\n        if u in visited and v not in visited:\n            T.add((u, v, w))\n            visited.add(v)\n            for each edge (v, x, w2):\n                if x not in visited:\n                    PQ.push((v, x, w2))\n\n    if |visited| &lt; |V(G)|:\n        error \"Graph is disconnected\"\n\n    return T</code></pre>\n    </section>\n\n    <section>\n      <h2>Interactive example</h2>\n      <div class=\"viz-wrap\">\n        <div class=\"canvas\">\n          <svg viewBox=\"0 0 450 360\" aria-label=\"Graph visualization\">\n            <!-- Edges -->\n            <line id=\"edge-A-B\" class=\"edge\" x1=\"70\" y1=\"60\" x2=\"270\" y2=\"50\" data-u=\"A\" data-v=\"B\" data-w=\"4\" />\n            <line id=\"edge-A-D\" class=\"edge\" x1=\"70\" y1=\"60\" x2=\"130\" y2=\"200\" data-u=\"A\" data-v=\"D\" data-w=\"3\" />\n            <line id=\"edge-A-F\" class=\"edge\" x1=\"70\" y1=\"60\" x2=\"90\" y2=\"320\" data-u=\"A\" data-v=\"F\" data-w=\"8\" />\n\n            <line id=\"edge-B-C\" class=\"edge\" x1=\"270\" y1=\"50\" x2=\"370\" y2=\"160\" data-u=\"B\" data-v=\"C\" data-w=\"6\" />\n            <line id=\"edge-B-D\" class=\"edge\" x1=\"270\" y1=\"50\" x2=\"130\" y2=\"200\" data-u=\"B\" data-v=\"D\" data-w=\"5\" />\n            <line id=\"edge-B-E\" class=\"edge\" x1=\"270\" y1=\"50\" x2=\"260\" y2=\"240\" data-u=\"B\" data-v=\"E\" data-w=\"7\" />\n\n            <line id=\"edge-C-D\" class=\"edge\" x1=\"370\" y1=\"160\" x2=\"130\" y2=\"200\" data-u=\"C\" data-v=\"D\" data-w=\"7\" />\n            <line id=\"edge-C-E\" class=\"edge\" x1=\"370\" y1=\"160\" x2=\"260\" y2=\"240\" data-u=\"C\" data-v=\"E\" data-w=\"4\" />\n\n            <line id=\"edge-D-E\" class=\"edge\" x1=\"130\" y1=\"200\" x2=\"260\" y2=\"240\" data-u=\"D\" data-v=\"E\" data-w=\"2\" />\n            <line id=\"edge-D-F\" class=\"edge\" x1=\"130\" y1=\"200\" x2=\"90\" y2=\"320\" data-u=\"D\" data-v=\"F\" data-w=\"6\" />\n            <line id=\"edge-E-F\" class=\"edge\" x1=\"260\" y1=\"240\" x2=\"90\" y2=\"320\" data-u=\"E\" data-v=\"F\" data-w=\"5\" />\n\n            <!-- Weights -->\n            <text class=\"weight\" x=\"170\" y=\"52\">4</text>\n            <text class=\"weight\" x=\"100\" y=\"125\">3</text>\n            <text class=\"weight\" x=\"93\" y=\"190\">8</text>\n\n            <text class=\"weight\" x=\"320\" y=\"102\">6</text>\n            <text class=\"weight\" x=\"195\" y=\"120\">5</text>\n            <text class=\"weight\" x=\"265\" y=\"150\">7</text>\n\n            <text class=\"weight\" x=\"255\" y=\"178\">7</text>\n            <text class=\"weight\" x=\"315\" y=\"202\">4</text>\n\n            <text class=\"weight\" x=\"200\" y=\"222\">2</text>\n            <text class=\"weight\" x=\"110\" y=\"260\">6</text>\n            <text class=\"weight\" x=\"170\" y=\"292\">5</text>\n\n            <!-- Nodes -->\n            <circle id=\"node-A\" class=\"node\" cx=\"70\" cy=\"60\" r=\"16\" data-name=\"A\"></circle>\n            <text class=\"label\" x=\"70\" y=\"63\" text-anchor=\"middle\">A</text>\n\n            <circle id=\"node-B\" class=\"node\" cx=\"270\" cy=\"50\" r=\"16\" data-name=\"B\"></circle>\n            <text class=\"label\" x=\"270\" y=\"53\" text-anchor=\"middle\">B</text>\n\n            <circle id=\"node-C\" class=\"node\" cx=\"370\" cy=\"160\" r=\"16\" data-name=\"C\"></circle>\n            <text class=\"label\" x=\"370\" y=\"163\" text-anchor=\"middle\">C</text>\n\n            <circle id=\"node-D\" class=\"node\" cx=\"130\" cy=\"200\" r=\"16\" data-name=\"D\"></circle>\n            <text class=\"label\" x=\"130\" y=\"203\" text-anchor=\"middle\">D</text>\n\n            <circle id=\"node-E\" class=\"node\" cx=\"260\" cy=\"240\" r=\"16\" data-name=\"E\"></circle>\n            <text class=\"label\" x=\"260\" y=\"243\" text-anchor=\"middle\">E</text>\n\n            <circle id=\"node-F\" class=\"node\" cx=\"90\" cy=\"320\" r=\"16\" data-name=\"F\"></circle>\n            <text class=\"label\" x=\"90\" y=\"323\" text-anchor=\"middle\">F</text>\n          </svg>\n          <div class=\"legend\" aria-hidden=\"true\">\n            <span class=\"chip\"><span class=\"swatch mst\"></span>MST edge</span>\n            <span class=\"chip\"><span class=\"swatch consider\"></span>Frontier (considered)</span>\n            <span class=\"chip\"><span class=\"swatch default\"></span>Other edge</span>\n          </div>\n        </div>\n\n        <div class=\"controls\">\n          <div class=\"row\">\n            <label for=\"startSel\">Start vertex:</label>\n            <select id=\"startSel\" aria-label=\"Start vertex\">\n              <option>A</option>\n              <option>B</option>\n              <option>C</option>\n              <option>D</option>\n              <option>E</option>\n              <option>F</option>\n            </select>\n          </div>\n          <div class=\"row\">\n            <button id=\"stepBtn\">Step</button>\n            <button id=\"runBtn\" class=\"secondary\">Run</button>\n            <button id=\"resetBtn\" class=\"secondary\">Reset</button>\n          </div>\n          <div class=\"log\" id=\"log\" aria-live=\"polite\"></div>\n          <div class=\"summary\" id=\"summary\"></div>\n        </div>\n      </div>\n    </section>\n\n    <section>\n      <h2>Notes</h2>\n      <ul>\n        <li>Prim’s works on connected, weighted, undirected graphs. If the graph is disconnected, the algorithm can’t reach all vertices.</li>\n        <li>Edge weights must be non-negative for typical implementations; negative weights still work for MST since cycles aren’t chosen, but beware of other algorithms.</li>\n        <li>Kruskal’s algorithm is another MST method; it sorts edges and uses a disjoint-set (union–find) structure.</li>\n      </ul>\n    </section>\n  </div>\n\n  <script>\n    (function() {\n      const edgesEls = Array.from(document.querySelectorAll('.edge'));\n      const nodesEls = Array.from(document.querySelectorAll('.node'));\n      const startSel = document.getElementById('startSel');\n      const stepBtn = document.getElementById('stepBtn');\n      const runBtn = document.getElementById('runBtn');\n      const resetBtn = document.getElementById('resetBtn');\n      const logEl = document.getElementById('log');\n      const summaryEl = document.getElementById('summary');\n\n      const nodes = nodesEls.map(n => n.dataset.name);\n      const edges = edgesEls.map(el => ({\n        id: el.id,\n        u: el.dataset.u,\n        v: el.dataset.v,\n        w: Number(el.dataset.w)\n      }));\n\n      let seq = [];\n      let stepIndex = 0;\n      let currentStart = startSel.value;\n\n      function clearClasses() {\n        edgesEls.forEach(el => {\n          el.classList.remove('mst', 'considered');\n        });\n        nodesEls.forEach(el => el.classList.remove('visited'));\n        logEl.innerHTML = '';\n        summaryEl.textContent = '';\n        stepIndex = 0;\n      }\n\n      function log(msg) {\n        const line = document.createElement('div');\n        line.textContent = msg;\n        logEl.appendChild(line);\n        logEl.scrollTop = logEl.scrollHeight;\n      }\n\n      function formatEdge(e) {\n        return `${e.u}–${e.v} (${e.w})`;\n      }\n\n      function labelOf(e) {\n        // Deterministic label for tie-breaking\n        const a = e.u;\n        const b = e.v;\n        return a < b ? `${a}-${b}` : `${b}-${a}`;\n      }\n\n      function primSequence(start) {\n        const visited = new Set([start]);\n        const chosen = [];\n        // Keep track of candidates each step for UI\n        const perStepCandidates = [];\n\n        while (visited.size < nodes.length) {\n          const candidates = edges.filter(e =>\n            (visited.has(e.u) && !visited.has(e.v)) ||\n            (visited.has(e.v) && !visited.has(e.u))\n          );\n\n          perStepCandidates.push(candidates.map(e => e.id));\n\n          if (candidates.length === 0) break; // disconnected\n\n          // pick minimum by weight then label for stability\n          candidates.sort((a, b) => {\n            if (a.w !== b.w) return a.w - b.w;\n            const la = labelOf(a), lb = labelOf(b);\n            return la.localeCompare(lb);\n          });\n\n          const e = candidates[0];\n          chosen.push(e);\n\n          // mark the new vertex\n          const next = visited.has(e.u) ? e.v : e.u;\n          visited.add(next);\n        }\n\n        return { chosen, perStepCandidates };\n      }\n\n      function highlightCandidates(ids) {\n        // Clear previous considered\n        edgesEls.forEach(el => el.classList.remove('considered'));\n        ids.forEach(id => {\n          const el = document.getElementById(id);\n          if (el && !el.classList.contains('mst')) {\n            el.classList.add('considered');\n          }\n        });\n      }\n\n      function highlightStep(i) {\n        if (!seq || i < 0 || i >= seq.chosen.length) return;\n        const e = seq.chosen[i];\n        document.getElementById(e.id)?.classList.add('mst');\n\n        // mark visited nodes\n        document.getElementById('node-' + e.u)?.classList.add('visited');\n        document.getElementById('node-' + e.v)?.classList.add('visited');\n\n        highlightCandidates(seq.perStepCandidates[i] || []);\n        log(`Step ${i + 1}: picked ${formatEdge(e)}`);\n      }\n\n      function recomputeIfNeeded() {\n        const start = startSel.value;\n        if (!seq || start !== currentStart) {\n          currentStart = start;\n          seq = primSequence(start);\n        }\n      }\n\n      function summarize() {\n        const total = seq.chosen.reduce((s, e) => s + e.w, 0);\n        const done = seq.chosen.length === nodes.length - 1;\n        if (done) {\n          summaryEl.textContent = `MST found. Total weight = ${total}.`;\n        } else {\n          summaryEl.textContent = `Graph is disconnected from start ${currentStart}. Selected ${seq.chosen.length} edges.`;\n        }\n      }\n\n      // Initial state\n      clearClasses();\n\n      // Events\n      startSel.addEventListener('change', () => {\n        clearClasses();\n        seq = primSequence(startSel.value);\n        // Mark start as visited to show context\n        document.getElementById('node-' + startSel.value)?.classList.add('visited');\n        highlightCandidates(seq.perStepCandidates[0] || []);\n        log(`Start at ${startSel.value}.`);\n      });\n\n      stepBtn.addEventListener('click', () => {\n        recomputeIfNeeded();\n        if (stepIndex === 0) {\n          // show initial\n          clearClasses();\n          document.getElementById('node-' + currentStart)?.classList.add('visited');\n          highlightCandidates(seq.perStepCandidates[0] || []);\n          log(`Start at ${currentStart}.`);\n        }\n        if (stepIndex < seq.chosen.length) {\n          highlightStep(stepIndex);\n          stepIndex += 1;\n          if (stepIndex === seq.chosen.length) {\n            summarize();\n          }\n        } else {\n          summarize();\n        }\n      });\n\n      runBtn.addEventListener('click', () => {\n        recomputeIfNeeded();\n        clearClasses();\n        document.getElementById('node-' + currentStart)?.classList.add('visited');\n        log(`Start at ${currentStart}.`);\n        seq.chosen.forEach((e, i) => {\n          document.getElementById(e.id)?.classList.add('mst');\n          document.getElementById('node-' + e.u)?.classList.add('visited');\n          document.getElementById('node-' + e.v)?.classList.add('visited');\n          log(`Step ${i + 1}: picked ${formatEdge(e)}`);\n        });\n        highlightCandidates([]); // none at the end\n        stepIndex = seq.chosen.length;\n        summarize();\n      });\n\n      resetBtn.addEventListener('click', () => {\n        clearClasses();\n        seq = primSequence(startSel.value);\n        document.getElementById('node-' + startSel.value)?.classList.add('visited');\n        highlightCandidates(seq.perStepCandidates[0] || []);\n        log(`Start at ${startSel.value}.`);\n      });\n\n      // Auto-seed initial log and frontier\n      seq = primSequence(startSel.value);\n      document.getElementById('node-' + startSel.value)?.classList.add('visited');\n      highlightCandidates(seq.perStepCandidates[0] || []);\n      log(`Start at ${startSel.value}.`);\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Prim’s Algorithm"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "b406a600-b3c1-11f0-aab4-0f5330718115",
    "timestamp": "2025-10-28T05:48:17.888Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Graph (Directed/Undirected)",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Graph (Directed / Undirected)</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f172a;\n      --panel: #111827;\n      --panel-2: #0b1220;\n      --text: #e5e7eb;\n      --muted: #9ca3af;\n      --accent: #3b82f6;\n      --accent-2: #60a5fa;\n      --line: #64748b;\n      --line-2: #475569;\n      --danger: #ef4444;\n      --success: #22c55e;\n      --node: #1f2937;\n      --node-border: #94a3b8;\n      --node-selected: #3b82f6;\n      --shadow: rgba(0,0,0,0.35);\n    }\n    * { box-sizing: border-box; }\n    html, body {\n      margin: 0;\n      height: 100%;\n      background: radial-gradient(1200px 600px at 20% -10%, #0a1432, #060b1a 55%, #050913),\n                  radial-gradient(900px 900px at 120% 110%, #172034 0%, #0b1220 50%, #070b15 100%);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n    }\n    .wrap {\n      max-width: 1100px;\n      margin: 24px auto;\n      padding: 0 16px 24px;\n    }\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: 12px;\n      margin-bottom: 12px;\n      flex-wrap: wrap;\n    }\n    .title {\n      display: flex;\n      align-items: baseline;\n      gap: 10px;\n    }\n    .title h1 {\n      font-size: 20px;\n      margin: 0;\n      letter-spacing: 0.2px;\n      font-weight: 650;\n    }\n    .badge {\n      font-size: 12px;\n      color: var(--muted);\n      padding: 2px 8px;\n      border-radius: 999px;\n      background: linear-gradient(180deg,#0c1629,#0a1220);\n      border: 1px solid #1f2937;\n    }\n    .panel {\n      background: linear-gradient(180deg, #0e1626, #0c1322);\n      border: 1px solid #1f2a3d;\n      border-radius: 14px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.35), inset 0 1px 0 rgba(255,255,255,0.03);\n      overflow: hidden;\n    }\n    .controls {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      padding: 12px 14px;\n      border-bottom: 1px solid #1f2a3d;\n      background: linear-gradient(180deg,#0f192a,#0a1220);\n    }\n    .segment {\n      display: inline-flex;\n      background: #0b1220;\n      border: 1px solid #1f2a3d;\n      border-radius: 10px;\n      overflow: hidden;\n    }\n    .segment label {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 8px 12px;\n      font-size: 13px;\n      color: var(--muted);\n      cursor: pointer;\n      user-select: none;\n      border-right: 1px solid #1e293b66;\n    }\n    .segment label:last-child {\n      border-right: none;\n    }\n    .segment input {\n      appearance: none;\n      width: 14px;\n      height: 14px;\n      border: 1px solid #334155;\n      border-radius: 999px;\n      position: relative;\n      display: grid;\n      place-items: center;\n      background: #0c1424;\n    }\n    .segment input:checked {\n      border-color: var(--accent-2);\n      background: radial-gradient(circle at 50% 50%, #1b366c, #0c1629);\n      box-shadow: 0 0 0 2px rgba(59,130,246,0.25);\n    }\n    .segment input:checked::after {\n      content: \"\";\n      width: 7px;\n      height: 7px;\n      border-radius: 999px;\n      background: linear-gradient(180deg,#60a5fa,#3b82f6);\n    }\n    .btn {\n      background: linear-gradient(180deg,#0e1626,#0c1322);\n      border: 1px solid #1f2a3d;\n      color: var(--text);\n      font-size: 13px;\n      padding: 8px 12px;\n      border-radius: 10px;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      transition: 0.15s ease background, 0.15s ease transform, 0.15s ease box-shadow;\n    }\n    .btn:hover {\n      background: linear-gradient(180deg,#111b2d,#0d1426);\n      box-shadow: 0 4px 14px rgba(0,0,0,0.28);\n    }\n    .btn:active {\n      transform: translateY(1px);\n    }\n    .btn.clear { color: #fecaca; border-color: #7f1d1d; background: linear-gradient(180deg,#1a0c0c,#120909); }\n    .btn.layout { color: #bbf7d0; border-color: #064e3b; background: linear-gradient(180deg,#0d1a15,#0a1612); }\n    .spacer { flex: 1; }\n    .stats {\n      font-size: 12px;\n      color: var(--muted);\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    .stats .dot {\n      width: 6px; height: 6px; border-radius: 999px; display: inline-block; margin-right: 6px;\n      background: #60a5fa;\n      box-shadow: 0 0 10px rgba(96,165,250,0.6);\n    }\n    .canvas-wrap {\n      position: relative;\n      width: 100%;\n      height: 520px;\n      background:\n        radial-gradient(800px 400px at 20% -10%, rgba(50,100,200,0.06), transparent 60%),\n        radial-gradient(700px 360px at 120% 110%, rgba(50,200,150,0.06), transparent 60%),\n        linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.0));\n    }\n    canvas {\n      width: 100%;\n      height: 100%;\n      display: block;\n      border-radius: 0 0 14px 14px;\n    }\n    .hint {\n      margin-top: 10px;\n      font-size: 13px;\n      color: var(--muted);\n      display: grid;\n      gap: 4px;\n    }\n    .hint code {\n      background: #0a1220;\n      border: 1px solid #1f2a3d;\n      padding: 2px 6px;\n      border-radius: 6px;\n      color: #d1d5db;\n    }\n    .footer-note {\n      margin-top: 14px;\n      font-size: 12px;\n      color: #93c5fd;\n      opacity: 0.9;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <header>\n      <div class=\"title\">\n        <h1>Graph (Directed / Undirected)</h1>\n        <span class=\"badge\">click-to-build • drag-to-move</span>\n      </div>\n    </header>\n\n    <div class=\"panel\">\n      <div class=\"controls\">\n        <div class=\"segment\" role=\"tablist\" aria-label=\"Graph type\">\n          <label for=\"type-directed\" title=\"Edges have direction (arrows)\">\n            <input type=\"radio\" name=\"graph-type\" id=\"type-directed\" value=\"directed\" checked />\n            Directed\n          </label>\n          <label for=\"type-undirected\" title=\"Edges have no direction\">\n            <input type=\"radio\" name=\"graph-type\" id=\"type-undirected\" value=\"undirected\" />\n            Undirected\n          </label>\n        </div>\n\n        <button class=\"btn layout\" id=\"layoutCircle\" title=\"Arrange nodes on a circle\">\n          Layout: Circle\n        </button>\n\n        <button class=\"btn clear\" id=\"clearGraph\" title=\"Remove all nodes and edges\">\n          Clear\n        </button>\n\n        <div class=\"spacer\"></div>\n        <div class=\"stats\" aria-live=\"polite\">\n          <span><span class=\"dot\"></span><strong id=\"modeLabel\">Directed</strong></span>\n          <span>|</span>\n          <span>Nodes: <strong id=\"nodeCount\">0</strong></span>\n          <span>Edges: <strong id=\"edgeCount\">0</strong></span>\n        </div>\n      </div>\n\n      <div class=\"canvas-wrap\">\n        <canvas id=\"graphCanvas\"></canvas>\n      </div>\n    </div>\n\n    <div class=\"hint\">\n      <div>Instructions:</div>\n      <div>- Click empty space to add a node. Click a node, then another to add an edge. In Directed mode, the edge goes from first to second.</div>\n      <div>- Drag nodes to reposition. Right-click a node to delete it.</div>\n      <div>- Toggle Directed/Undirected to switch how edges are displayed and added.</div>\n      <div>- Tip: With a node selected, clicking empty space adds a new node and connects to it.</div>\n      <div class=\"footer-note\">Note: Self-loops and multi-edges are not added in this simple demo.</div>\n    </div>\n  </div>\n\n  <script>\n    (() => {\n      const canvas = document.getElementById('graphCanvas');\n      const ctx = canvas.getContext('2d');\n\n      const modeLabel = document.getElementById('modeLabel');\n      const nodeCountEl = document.getElementById('nodeCount');\n      const edgeCountEl = document.getElementById('edgeCount');\n      const typeDirected = document.getElementById('type-directed');\n      const typeUndirected = document.getElementById('type-undirected');\n      const clearBtn = document.getElementById('clearGraph');\n      const layoutBtn = document.getElementById('layoutCircle');\n\n      const state = {\n        isDirected: true,\n        nodes: [],\n        edges: [], // {source: id, target: id}\n        nextId: 1,\n        nextLabelIndex: 0,\n        selectedNodeId: null,\n        hoverNodeId: null,\n        dragging: null, // {id, offsetX, offsetY}\n        isPointerDown: false,\n        pointerDownAt: {x:0, y:0},\n        pointerMoved: false,\n        mouse: {x:0, y:0},\n        radius: 18\n      };\n\n      // Device Pixel Ratio handling\n      function resizeCanvas() {\n        const dpr = window.devicePixelRatio || 1;\n        const wrap = canvas.parentElement;\n        const displayWidth = wrap.clientWidth;\n        const displayHeight = wrap.clientHeight;\n\n        canvas.style.width = displayWidth + 'px';\n        canvas.style.height = displayHeight + 'px';\n        canvas.width = Math.floor(displayWidth * dpr);\n        canvas.height = Math.floor(displayHeight * dpr);\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        draw();\n      }\n      window.addEventListener('resize', resizeCanvas, {passive:true});\n      resizeCanvas();\n\n      // Helpers\n      function indexToLabel(n) {\n        let x = n + 1;\n        let s = '';\n        while (x > 0) {\n          x--;\n          s = String.fromCharCode(65 + (x % 26)) + s;\n          x = Math.floor(x / 26);\n        }\n        return s;\n      }\n\n      function getNodeAt(x, y) {\n        for (let i = state.nodes.length - 1; i >= 0; i--) {\n          const n = state.nodes[i];\n          const dx = x - n.x;\n          const dy = y - n.y;\n          if (dx*dx + dy*dy <= state.radius*state.radius) {\n            return n;\n          }\n        }\n        return null;\n      }\n\n      function addNode(x, y) {\n        const node = {\n          id: state.nextId++,\n          label: indexToLabel(state.nextLabelIndex++),\n          x, y\n        };\n        state.nodes.push(node);\n        updateStats();\n        return node;\n      }\n\n      function hasEdge(u, v, considerUndirected = false) {\n        return state.edges.some(e => (e.source === u && e.target === v) ||\n          (considerUndirected && e.source === v && e.target === u));\n      }\n\n      function addEdge(u, v) {\n        if (u === v) return; // skip self loop in this demo\n        const considerUndirected = !state.isDirected;\n        if (hasEdge(u, v, considerUndirected)) return;\n        state.edges.push({source: u, target: v});\n        updateStats();\n      }\n\n      function deleteNode(id) {\n        state.nodes = state.nodes.filter(n => n.id !== id);\n        state.edges = state.edges.filter(e => e.source !== id && e.target !== id);\n        if (state.selectedNodeId === id) state.selectedNodeId = null;\n        if (state.hoverNodeId === id) state.hoverNodeId = null;\n        updateStats();\n      }\n\n      function updateStats() {\n        nodeCountEl.textContent = state.nodes.length;\n        edgeCountEl.textContent = state.edges.length;\n      }\n\n      // Drawing\n      function draw() {\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n\n        // Clear\n        ctx.clearRect(0, 0, w, h);\n\n        // Draw edges\n        for (const e of state.edges) {\n          const a = state.nodes.find(n => n.id === e.source);\n          const b = state.nodes.find(n => n.id === e.target);\n          if (!a || !b) continue;\n          if (state.isDirected) {\n            drawDirectedEdge(a, b);\n          } else {\n            drawUndirectedEdge(a, b);\n          }\n        }\n\n        // Draw preview edge from selected node to mouse\n        if (state.selectedNodeId != null) {\n          const a = state.nodes.find(n => n.id === state.selectedNodeId);\n          if (a) {\n            const tmp = {x: state.mouse.x, y: state.mouse.y};\n            ctx.save();\n            ctx.globalAlpha = 0.6;\n            ctx.setLineDash([6, 6]);\n            if (state.isDirected) {\n              drawDirectedEdge(a, tmp, true);\n            } else {\n              drawUndirectedEdge(a, tmp, true);\n            }\n            ctx.setLineDash([]);\n            ctx.restore();\n          }\n        }\n\n        // Draw nodes\n        for (const n of state.nodes) {\n          drawNode(n);\n        }\n      }\n\n      function drawUndirectedEdge(a, b, isTemp=false) {\n        const {x: x1, y: y1} = a;\n        const {x: x2, y: y2} = b;\n        const trimmed = trimLineToCircle(x1, y1, x2, y2, state.radius);\n        ctx.beginPath();\n        ctx.moveTo(trimmed.x1, trimmed.y1);\n        ctx.lineTo(trimmed.x2, trimmed.y2);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = isTemp ? '#64748b' : '#7aa2d8';\n        ctx.shadowColor = 'transparent';\n        ctx.stroke();\n      }\n\n      function drawDirectedEdge(a, b, isTemp=false) {\n        const {x: x1, y: y1} = a;\n        const {x: x2, y: y2} = b;\n\n        const trimmed = trimLineToCircle(x1, y1, x2, y2, state.radius);\n        const angle = Math.atan2(trimmed.y2 - trimmed.y1, trimmed.x2 - trimmed.x1);\n\n        // Line\n        ctx.beginPath();\n        ctx.moveTo(trimmed.x1, trimmed.y1);\n        ctx.lineTo(trimmed.x2, trimmed.y2);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = isTemp ? '#64748b' : '#93c5fd';\n        ctx.stroke();\n\n        // Arrowhead\n        const len = 12;\n        const width = 7;\n        const ex = trimmed.x2;\n        const ey = trimmed.y2;\n        ctx.beginPath();\n        ctx.moveTo(ex, ey);\n        ctx.lineTo(ex - len * Math.cos(angle - Math.PI / 8), ey - len * Math.sin(angle - Math.PI / 8));\n        ctx.lineTo(ex - len * Math.cos(angle + Math.PI / 8), ey - len * Math.sin(angle + Math.PI / 8));\n        ctx.closePath();\n        ctx.fillStyle = isTemp ? '#64748b' : '#93c5fd';\n        ctx.fill();\n      }\n\n      function trimLineToCircle(x1, y1, x2, y2, r) {\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const dist = Math.hypot(dx, dy) || 1;\n        const ux = dx / dist;\n        const uy = dy / dist;\n        const start = { x: x1 + ux * r, y: y1 + uy * r };\n        const end = { x: x2 - ux * r, y: y2 - uy * r };\n        return { x1: start.x, y1: start.y, x2: end.x, y2: end.y };\n      }\n\n      function drawNode(n) {\n        const r = state.radius;\n        const selected = n.id === state.selectedNodeId;\n        const hover = n.id === state.hoverNodeId;\n\n        // Glow\n        if (selected || hover) {\n          ctx.save();\n          ctx.beginPath();\n          ctx.arc(n.x, n.y, r + 10, 0, Math.PI * 2);\n          ctx.fillStyle = selected ? 'rgba(59,130,246,0.15)' : 'rgba(96,165,250,0.12)';\n          ctx.fill();\n          ctx.restore();\n        }\n\n        // Node circle\n        ctx.beginPath();\n        ctx.arc(n.x, n.y, r, 0, Math.PI * 2);\n        const grad = ctx.createLinearGradient(n.x, n.y - r, n.x, n.y + r);\n        grad.addColorStop(0, '#0d1424');\n        grad.addColorStop(1, '#0a111f');\n        ctx.fillStyle = grad;\n        ctx.fill();\n\n        ctx.lineWidth = selected ? 3 : 2;\n        ctx.strokeStyle = selected ? '#60a5fa' : (hover ? '#94a3b8' : '#586a87');\n        ctx.stroke();\n\n        // Label\n        ctx.font = '600 13px system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial';\n        ctx.fillStyle = '#e5e7eb';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(n.label, n.x, n.y);\n      }\n\n      // Interaction\n      function getMouse(evt) {\n        const rect = canvas.getBoundingClientRect();\n        return {\n          x: evt.clientX - rect.left,\n          y: evt.clientY - rect.top\n        };\n      }\n\n      canvas.addEventListener('mousemove', (e) => {\n        const {x, y} = getMouse(e);\n        state.mouse.x = x; state.mouse.y = y;\n\n        if (state.dragging) {\n          const n = state.nodes.find(nn => nn.id === state.dragging.id);\n          if (n) {\n            n.x = x - state.dragging.offsetX;\n            n.y = y - state.dragging.offsetY;\n            state.pointerMoved = true;\n            draw();\n          }\n          return;\n        }\n\n        // Hover\n        const hit = getNodeAt(x, y);\n        const newHover = hit ? hit.id : null;\n        if (newHover !== state.hoverNodeId) {\n          state.hoverNodeId = newHover;\n          draw();\n        }\n      });\n\n      canvas.addEventListener('mousedown', (e) => {\n        if (e.button !== 0) return; // only left\n        const {x, y} = getMouse(e);\n        state.isPointerDown = true;\n        state.pointerMoved = false;\n        state.pointerDownAt = {x, y};\n        const hit = getNodeAt(x, y);\n        if (hit) {\n          state.dragging = { id: hit.id, offsetX: x - hit.x, offsetY: y - hit.y };\n        } else {\n          state.dragging = null;\n        }\n      });\n\n      function handleClickAt(x, y) {\n        const hit = getNodeAt(x, y);\n\n        if (hit) {\n          if (state.selectedNodeId == null) {\n            // Select the node\n            state.selectedNodeId = hit.id;\n          } else {\n            if (state.selectedNodeId === hit.id) {\n              // Deselect same node\n              state.selectedNodeId = null;\n            } else {\n              // Create edge from selected to this\n              addEdge(state.selectedNodeId, hit.id);\n              state.selectedNodeId = null;\n            }\n          }\n        } else {\n          // Empty space: add node\n          const newNode = addNode(x, y);\n          // If a node was selected, connect it to the new node\n          if (state.selectedNodeId != null) {\n            addEdge(state.selectedNodeId, newNode.id);\n            state.selectedNodeId = null;\n          }\n        }\n        draw();\n      }\n\n      canvas.addEventListener('mouseup', (e) => {\n        if (e.button !== 0) return;\n        const {x, y} = getMouse(e);\n        const movedDist = Math.hypot(x - state.pointerDownAt.x, y - state.pointerDownAt.y);\n        const wasDrag = state.pointerMoved || movedDist > 3;\n\n        state.isPointerDown = false;\n        state.dragging = null;\n\n        if (!wasDrag) {\n          handleClickAt(x, y);\n        }\n      });\n\n      canvas.addEventListener('mouseleave', () => {\n        if (state.dragging) {\n          state.dragging = null;\n        }\n        state.isPointerDown = false;\n      });\n\n      // Right-click to delete node\n      canvas.addEventListener('contextmenu', (e) => {\n        e.preventDefault();\n        const {x, y} = getMouse(e);\n        const hit = getNodeAt(x, y);\n        if (hit) {\n          deleteNode(hit.id);\n          draw();\n        }\n      });\n\n      // Controls\n      typeDirected.addEventListener('change', () => {\n        if (typeDirected.checked) {\n          state.isDirected = true;\n          modeLabel.textContent = 'Directed';\n          draw();\n        }\n      });\n      typeUndirected.addEventListener('change', () => {\n        if (typeUndirected.checked) {\n          state.isDirected = false;\n          modeLabel.textContent = 'Undirected';\n          draw();\n        }\n      });\n\n      clearBtn.addEventListener('click', () => {\n        state.nodes = [];\n        state.edges = [];\n        state.selectedNodeId = null;\n        state.hoverNodeId = null;\n        state.nextId = 1;\n        state.nextLabelIndex = 0;\n        updateStats();\n        draw();\n      });\n\n      layoutBtn.addEventListener('click', () => {\n        const n = state.nodes.length;\n        if (n === 0) return;\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n        const cx = w / 2;\n        const cy = h / 2;\n        const r = Math.min(w, h) * 0.35;\n\n        for (let i = 0; i < n; i++) {\n          const angle = (i / n) * Math.PI * 2 - Math.PI / 2;\n          state.nodes[i].x = cx + r * Math.cos(angle);\n          state.nodes[i].y = cy + r * Math.sin(angle);\n        }\n        draw();\n      });\n\n      // Initial draw and gentle intro nodes\n      function quickIntro() {\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n        const points = [\n          {x: w*0.35, y: h*0.35},\n          {x: w*0.65, y: h*0.35},\n          {x: w*0.50, y: h*0.60}\n        ];\n        points.forEach(p => addNode(p.x, p.y));\n        addEdge(state.nodes[0].id, state.nodes[1].id);\n        addEdge(state.nodes[1].id, state.nodes[2].id);\n        draw();\n      }\n      quickIntro();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "Create a simple HTML page. Only respond with HTML code."
      },
      {
        "role": "user",
        "content": "Graph (Directed/Undirected)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "e3439400-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:06.946Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Graph (Directed/Undirected)",
    "answer": {
      "role": "assistant",
      "content": "Certainly! Below is a detailed design plan for an interactive HTML page aimed at teaching the **Bubble Sort** algorithm. The page will contain interactive elements allowing users to visualize the sorting process, thus understanding how Bubble Sort works.\n\n### Interactive Design Plan: Bubble Sort\n\n---\n\n#### **Concept Title:**\n**Bubble Sort Visualizer**\n\n---\n\n#### **Learning Objective:**\nUsers will understand how the Bubble Sort algorithm functions by visually interacting with an array of numbers. After using the module, they should be able to explain how Bubble Sort repeatedly compares and swaps adjacent elements to sort the array, and recognize the efficiency of the algorithm.\n\n---\n\n#### **Interaction Design:**\n1. **User Interaction:**\n   - Users can enter a series of numbers into a text input field and click a \"Sort\" button to initiate the Bubble Sort process.\n   - The numbers entered will be represented as bars on the screen, with their heights corresponding to the numerical values.\n   - When users click \"Sort\", an animation will demonstrate the sorting process, showing real-time comparisons and swaps of the bars.\n\n2. **Visual Feedback:**\n   - Each time two elements are compared, their bars will briefly change color (e.g., from blue to green) to indicate an active comparison.\n   - If a swap occurs, a smooth animation will slide the bars to their new positions.\n   - After the sorting completes, the final sorted array will be displayed with a celebratory effect (e.g., all bars turning green).\n\n---\n\n#### **Layout Description:**\n- **Header:** Contains the title \"Bubble Sort Visualizer\" centered at the top.\n- **Input Section:** Directly below the header, there will be:\n  - A text input field for users to enter numbers (separated by commas).\n  - A \"Sort\" button next to the input field.\n- **Visualization Area:** Below the input section, a wide rectangular area where the bars representing the numbers will appear. This area will be centrally aligned with appropriate dimensions to maintain focus.\n- **Spacing:**\n  - **Safe Area Margins:** 24 px on all sides of the viewport.\n  - **Minimum Spacing:** 16 px between the input field, button, and visualization area.\n- **Color Scheme:** Soft background with contrasting colors for the bars (blue for unsorted, green for sorted).\n\n---\n\n### HTML Implementation:\nHere's the HTML code for the Bubble Sort visualizer.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualizer</title>\n    <style>\n        body {\n            background-color: #f7f7f7;\n            font-family: Arial, sans-serif;\n            padding: 24px;\n        }\n        header {\n            text-align: center;\n            margin-bottom: 24px;\n        }\n        .input-container {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 24px;\n        }\n        input[type=\"text\"] {\n            width: 300px;\n            padding: 10px;\n            margin-right: 16px;\n        }\n        button {\n            padding: 10px 20px;\n            cursor: pointer;\n        }\n        #visualization {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 300px;\n            border: 1px solid #ccc;\n        }\n        .bar {\n            width: 30px;\n            margin-right: 8px;\n            background-color: blue;\n            transition: height 0.4s, background-color 0.2s;\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Bubble Sort Visualizer</h1>\n    </header>\n    <div class=\"input-container\">\n        <input type=\"text\" id=\"numbers\" placeholder=\"Enter numbers separated by commas\">\n        <button id=\"sortButton\">Sort</button>\n    </div>\n    <div id=\"visualization\"></div>\n\n    <script>\n        document.getElementById(\"sortButton\").addEventListener(\"click\", function() {\n            const input = document.getElementById(\"numbers\").value;\n            const array = input.split(',').map(Number);\n            visualizeSort(array);\n        });\n\n        function visualizeSort(array) {\n            const visualization = document.getElementById(\"visualization\");\n            visualization.innerHTML = ''; // Clear previous bars\n\n            // Create the bars for the visualization\n            array.forEach(num => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${num * 5}px`; // Scale height\n                visualization.appendChild(bar);\n            });\n\n            bubbleSort(array, visualization);\n        }\n\n        async function bubbleSort(array, visualization) {\n            const bars = document.querySelectorAll('.bar');\n            let n = array.length;\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    bars[j].style.backgroundColor = 'green'; // Highlight current comparison\n                    bars[j + 1].style.backgroundColor = 'green'; // Highlight next comparison\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Pause for animation\n                    \n                    if (array[j] > array[j + 1]) {\n                        // Swap elements in the array\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        // Swap bar heights visually\n                        bars[j].style.height = `${array[j] * 5}px`;\n                        bars[j + 1].style.height = `${array[j + 1] * 5}px`;\n                    }\n                    bars[j].style.backgroundColor = 'blue'; // Reset color\n                    bars[j + 1].style.backgroundColor = 'blue'; // Reset color\n                }\n            }\n            // Mark the sorted array\n            bars.forEach(bar => bar.style.backgroundColor = 'green');\n        }\n    </script>\n</body>\n</html>\n```\n\n### Key Points:\n- **Single Concept Focus:** The module focuses solely on the Bubble Sort algorithm.\n- **Visual Feedback:** Users receive immediate visual feedback on comparisons, swaps, and the final sorted state.\n- **Self-Contained Implementation:** The code is fully contained within HTML, CSS, and JavaScript, with no external dependencies.\n- **Accessibility and Responsiveness:** The layout is designed to maintain clarity and focus, with appropriate margins and spacing for user interface elements.\n\nThis interactive module will allow users to grasp the Bubble Sort algorithm effectively through hands-on visual learning."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Graph (Directed/Undirected)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for the Bubble Sort Visualizer application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "clearVisualization",
          "onExit": "none",
          "on": {
            "SORT_BUTTON_CLICKED": "visualizing"
          }
        },
        {
          "name": "visualizing",
          "onEnter": "initializeBars",
          "onExit": "none",
          "on": {
            "SORT_COMPLETED": "done"
          }
        },
        {
          "name": "comparing",
          "onEnter": "highlightBars",
          "onExit": "resetBarColors",
          "on": {
            "SWAP_OCCURRED": "swapping",
            "NEXT_COMPARISON": "comparing"
          }
        },
        {
          "name": "swapping",
          "onEnter": "performSwap",
          "onExit": "none",
          "on": {
            "SWAP_COMPLETED": "comparing"
          }
        },
        {
          "name": "done",
          "onEnter": "markSorted",
          "onExit": "none",
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "SORT_BUTTON_CLICKED",
        "SORT_COMPLETED",
        "SWAP_OCCURRED",
        "SWAP_COMPLETED",
        "NEXT_COMPARISON",
        "RESET"
      ],
      "notes": "The FSM captures the states of the sorting process, including idle state before sorting, visualizing state during sorting, comparing and swapping states, and the final done state after sorting is complete."
    }
  },
  {
    "id": "e3ff42e0-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:08.174Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Search Tree (BST)",
    "answer": {
      "role": "assistant",
      "content": "Sure! Below is a high-quality interactive HTML page designed to provide an in-depth, hands-on exploration of bubble sort. The design includes a clear layout, interactive elements, and visual feedback with animations, all using only vanilla HTML, CSS, and JavaScript.\n\n### Interactive HTML Module on Bubble Sort\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f9f9f9;\n            margin: 0;\n            padding: 24px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        h1 {\n            color: #333;\n        }\n        #array-container {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            margin: 24px 0;\n            height: 150px;\n            width: 100%;\n            max-width: 800px;\n            border: 2px solid #ccc;\n            border-radius: 8px;\n            background-color: #fff;\n            position: relative;\n        }\n        .bar {\n            width: 40px;\n            margin: 0 4px;\n            background-color: #4CAF50;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        .active {\n            background-color: #FF5722 !important;\n        }\n        .sorted {\n            background-color: #2196F3 !important;\n        }\n        #controls {\n            display: flex;\n            justify-content: center;\n            margin-top: 16px;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 0 8px;\n            border: none;\n            border-radius: 4px;\n            background-color: #6200EE;\n            color: white;\n            cursor: pointer;\n            font-size: 16px;\n        }\n        button:hover {\n            background-color: #3700B3;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Interactive Bubble Sort</h1>\n<p>Understand how the Bubble Sort algorithm works through an interactive animation.</p>\n\n<div id=\"array-container\"></div>\n<div id=\"controls\">\n    <button id=\"start\">Start Sorting</button>\n    <button id=\"reset\">Reset</button>\n</div>\n\n<script>\n    let array = [];\n    const container = document.getElementById('array-container');\n\n    function generateRandomArray() {\n        array = Array.from({length: 10}, () => Math.floor(Math.random() * 100) + 1);\n        renderArray();\n    }\n\n    function renderArray() {\n        container.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = value * 2 + 'px'; // height scaling\n            bar.textContent = value;\n            container.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        const bars = document.querySelectorAll('.bar');\n        const n = array.length;\n\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                bars[j].classList.add('active');\n                bars[j + 1].classList.add('active');\n                await new Promise(resolve => setTimeout(resolve, 500));\n\n                if (array[j] > array[j + 1]) {\n                    // Swap\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    renderArray();\n                }\n\n                bars[j].classList.remove('active');\n                bars[j + 1].classList.remove('active');\n            }\n            // Mark as sorted\n            bars[n - 1 - i].classList.add('sorted');\n        }\n    }\n\n    document.getElementById('start').addEventListener('click', async () => {\n        await bubbleSort();\n    });\n\n    document.getElementById('reset').addEventListener('click', generateRandomArray);\n\n    // Initialize the array on page load\n    generateRandomArray();\n</script>\n\n</body>\n</html>\n```\n\n### Explanation of the Design\n\n#### Concept Title:\n**Interactive Bubble Sort**\n\n#### Learning Objective:\nUsers should understand the bubble sort algorithm through an animated visual demonstration, allowing them to observe how the sorting process unfolds step by step.\n\n#### Interaction Design:\n- **Generate Random Array:** Pressing the \"Reset\" button generates a new random array of integers and renders it as bars in a container.\n- **Start Sorting:** Clicking the \"Start Sorting\" button initiates the bubble sort algorithm, with each step animated for clarity:\n    - Two bars are highlighted (active) as they are compared.\n    - If they are out of order, they are swapped, which is visually represented by changing the heights of the bars.\n    - Once an element is fully sorted, it's marked with a different color (blue) to indicate the sorting progress.\n- The animations and color changes provide immediate feedback about the sorting process, reinforcing understanding of the algorithm's mechanics.\n\n#### Layout Description:\n- The main title and explanatory text are centered at the top to focus attention.\n- The array container is positioned below the text, centered and maximized for clarity, with a height to provide visual contrast for sorting.\n- Controls are positioned below the array container, with buttons spaced and styled for good usability.\n- All elements are responsively designed, with a consistent margin to enhance clarity and accessibility without external libraries.\n\nThis interactive module provides a comprehensive overview of the bubble sort algorithm in a visually engaging and educational manner."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Binary Search Tree (BST)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for an interactive Bubble Sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateRandomArray",
          "onExit": null,
          "on": {
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORT_COMPLETE": "sorted",
            "RESET": "idle"
          }
        },
        {
          "name": "sorted",
          "onEnter": null,
          "onExit": null,
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "START_SORTING",
        "RESET",
        "SORT_COMPLETE"
      ],
      "notes": "The 'sorting' state transitions to 'sorted' when the sorting is complete. The 'idle' state initializes the array and can transition to 'sorting' when the sort starts."
    }
  },
  {
    "id": "e4459ab0-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:08.635Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Array",
    "answer": {
      "role": "assistant",
      "content": "Here’s a high-quality interactive HTML page that provides an in-depth, hands-on exploration of the **bubble sort** algorithm.\n\n### HTML Structure\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort Exploration</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            background-color: #f0f4f8;\n            min-height: 100vh;\n            padding: 24px;\n            box-sizing: border-box;\n        }\n        h1 {\n            margin-bottom: 16px;\n        }\n        p {\n            margin-bottom: 24px;\n            text-align: center;\n        }\n        #array-container {\n            display: flex;\n            align-items: flex-end;\n            margin-bottom: 24px;\n        }\n        .bar {\n            width: 40px;\n            margin: 0 8px;\n            background-color: #3498db;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        .active {\n            background-color: #e74c3c;\n        }\n        #controls {\n            display: flex;\n            gap: 16px;\n        }\n        button {\n            padding: 10px 16px;\n            font-size: 16px;\n            background-color: #2ecc71;\n            border: none;\n            color: white;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n        button:hover {\n            background-color: #27ae60;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Bubble Sort Interactive Demonstration</h1>\n    <p>Learn how the Bubble Sort algorithm works by visualizing the sorting process of an array!</p>\n\n    <div id=\"array-container\"></div>\n\n    <div id=\"controls\">\n        <button id=\"generate\">Generate Array</button>\n        <button id=\"sort\">Sort Array</button>\n    </div>\n\n    <script>\n        const arrayContainer = document.getElementById('array-container');\n        let array = [];\n\n        function generateArray() {\n            array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100));\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach((value) => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            for (let i = 0; i < array.length; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    highlightBars(j, j + 1); \n                    if (array[j] > array[j + 1]) {\n                        await swap(j, j + 1);\n                    }\n                    resetBars(j, j + 1);\n                }\n            }\n        }\n\n        function highlightBars(index1, index2) {\n            const bars = document.getElementsByClassName('bar');\n            bars[index1].classList.add('active');\n            bars[index2].classList.add('active');\n        }\n\n        function resetBars(index1, index2) {\n            const bars = document.getElementsByClassName('bar');\n            bars[index1].classList.remove('active');\n            bars[index2].classList.remove('active');\n        }\n\n        function swap(index1, index2) {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    [array[index1], array[index2]] = [array[index2], array[index1]];\n                    renderArray();\n                    resolve();\n                }, 500); \n            });\n        }\n\n        document.getElementById('generate').addEventListener('click', generateArray);\n        document.getElementById('sort').addEventListener('click', bubbleSort);\n\n        generateArray(); // Initial array generation\n    </script>\n\n</body>\n</html>\n```\n\n### Design Plan Breakdown\n\n1. **Concept Title**: \n   - \"Bubble Sort Interactive Demonstration\"\n\n2. **Learning Objective**: \n   - Users should understand how the Bubble Sort algorithm works through visualizing the process of sorting an array, observing changes to the array in real-time as they interact with the buttons.\n\n3. **Interaction Design**: \n   - **Generate Array Button**: Users click this button to generate a new random array, triggering `generateArray()` which builds the bar chart.\n   - **Sort Array Button**: Upon clicking this button, the sorting begins. The `bubbleSort()` function sorts the array by iteratively comparing adjacent elements and swapping them if they’re in the wrong order. Each comparison and swap is accompanied by visual feedback: the bars representing the elements being compared will briefly highlight (using the `.active` class), and the bars will animate as their heights change when they’re swapped. \n   - The sorting process is asynchronous, allowing users to see each step of the sorting visually without freezing the UI.\n\n4. **Layout Description**: \n   - The title (`h1`) is positioned at the top of the page with a margin for breathing space, followed by a descriptive paragraph. \n   - The array bars are visually arranged in a flex container that allows them to be displayed side by side and aligned to the bottom of their container, creating a bar chart effect. \n   - Below the array, control buttons are displayed in a flex container for alignment and spacing. There is a safe area margin of 24px on all sides and a minimum spacing of 16px between elements, ensuring a clear layout that is also responsive and accessible.\n\n### Conclusion\nThis interactive module provides hands-on learning of the Bubble Sort algorithm through simple, engaging interactions, reinforcing the concept via visual feedback and dynamic representation of an array being sorted."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Array"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for an interactive bubble sort demonstration application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateInitialArray",
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "SORT_ARRAY": "sorting"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "SORT_ARRAY": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startBubbleSort",
          "onExit": null,
          "on": {
            "SORT_COMPLETE": "sorted",
            "GENERATE_ARRAY": "array_generated"
          }
        },
        {
          "name": "sorted",
          "onEnter": null,
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "SORT_ARRAY",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of the application during the sorting process, including initial array generation and completion of sorting."
    }
  },
  {
    "id": "e4cea0d0-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:09.533Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Red-Black Tree",
    "answer": {
      "role": "assistant",
      "content": "Certainly! Below is a detailed outline for an interactive HTML page dedicated to teaching the concept of the Bubble Sort algorithm, focusing on hands-on exploration, visualization, and engagement.\n\n### High-Quality Interactive HTML Page for Bubble Sort\n\n#### Concept Title\n**Understanding Bubble Sort: A Visual Exploration**\n\n#### Learning Objective\nAfter interacting with this module, users should understand how the Bubble Sort algorithm works, visualize the sorting process step-by-step, and appreciate the dynamics of algorithm performance.\n\n#### Interaction Design\nUsers will interact with the module by:\n- **Interacting with an Array:** Users can generate a random array of numbers to sort. Each time they click a button, a new array is created.\n- **Animation Controls:** A \"Sort\" button will initiate the Bubble Sort algorithm, animating the comparison and swapping of elements in the array in real time. Users can pause or resume the sorting process as needed.\n- **Speed Control:** A slider will allow users to adjust the speed of the sorting animation, giving them more control over how quickly they observe the sorting process.\n- **Step-by-Step Mode:** Users can click a \"Next Step\" button to see one comparison and potential swap at a time, which helps them understand how the algorithm progresses through the array.\n- **Visual Feedback:** The elements in the array will change color during comparisons (e.g., red for active comparisons, green for sorted elements), and elements will swap places with a smooth animation effect.\n\n#### Layout Description\n- The layout will be structured into three main sections:\n    1. **Header:** \n       - Contains the concept title and a brief description of Bubble Sort.\n       - Centered at the top, with large, readable fonts.\n      \n    2. **Array Visualization Area:**\n       - Takes up the central portion of the page, showing the unsorted array as colored boxes. Each box represents a number in the array.\n       - Each box will change color during interactions to indicate comparisons (active) and completed swaps (sorted).\n\n    3. **Control Panel:**\n       - Located below the visualization area.\n       - Contains buttons for \"Generate Array\", \"Sort\", \"Pause/Resume\", and \"Next Step\", along with a speed slider.\n       - Spacing of 16px between each button and the slider for clarity and usability.\n\n- **Margins:** A safe area margin of 24px on all sides of the viewport ensuring no elements touch the edge of the screen.\n- **Accessibility:** Ensures adequate contrast ratios and uses semantic HTML for screen reader compatibility. All interactive controls are keyboard accessible.\n\n### Implementation Example\n\nBelow is a basic implementation based on the outlined design using plain HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualizer</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f2f2f2;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 0;\n        }\n        .header {\n            margin: 24px;\n            text-align: center;\n        }\n        .array {\n            display: flex;\n            justify-content: center;\n            margin: 24px;\n        }\n        .element {\n            width: 40px;\n            height: 40px;\n            margin: 0 8px;\n            background-color: #3498db;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            color: white;\n            font-weight: bold;\n            font-size: 20px;\n            border-radius: 5px;\n            transition: background-color 0.5s ease;\n        }\n        .controls {\n            margin: 24px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        button {\n            margin: 8px;\n            padding: 10px 20px;\n            border: none;\n            background-color: #3498db;\n            color: white;\n            cursor: pointer;\n            font-size: 16px;\n            border-radius: 5px;\n        }\n        button:hover {\n            background-color: #2980b9;\n        }\n        input[type=\"range\"] {\n            width: 200px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Understanding Bubble Sort</h1>\n        <p>Click to visualize the Bubble Sort algorithm in action!</p>\n    </div>\n    <div class=\"array\" id=\"array\"></div>\n    <div class=\"controls\">\n        <button onclick=\"generateArray()\">Generate Random Array</button>\n        <button onclick=\"startSort()\">Sort</button>\n        <button id=\"pauseResumeButton\">Pause</button>\n        <button id=\"nextStepButton\" onclick=\"nextStep()\">Next Step</button>\n        <label for=\"speed\">Speed:</label>\n        <input type=\"range\" id=\"speed\" min=\"100\" max=\"1000\" step=\"50\" value=\"500\">\n    </div>\n    <script>\n        let array = [];\n        let animationSpeed = 500;\n        let animationInterval;\n        let currentStep = 0;\n        let isSorting = false;\n        let paused = false;\n\n        function generateArray() {\n            array = Array.from({length: 10}, () => Math.floor(Math.random() * 100));\n            renderArray();\n            resetControls();\n        }\n\n        function renderArray() {\n            const arrayContainer = document.getElementById('array');\n            arrayContainer.innerHTML = '';\n            array.forEach(num => {\n                const element = document.createElement('div');\n                element.classList.add('element');\n                element.textContent = num;\n                arrayContainer.appendChild(element);\n            });\n        }\n\n        function startSort() {\n            if (isSorting) return;\n            isSorting = true;\n            currentStep = 0;\n            paused = false;\n            const button = document.getElementById('pauseResumeButton');\n            button.textContent = 'Pause';\n            bubbleSort();\n        }\n\n        function bubbleSort() {\n            const arrayElements = document.querySelectorAll('.element');\n            let i, j;\n            let sorted;\n            animationInterval = setInterval(() => {\n                if (paused || currentStep >= array.length - 1) {\n                    clearInterval(animationInterval);\n                    isSorting = false;\n                    return;\n                }\n                sorted = true;\n                for (j = 0; j < array.length - 1 - currentStep; j++) {\n                    if (array[j] > array[j + 1]) {\n                        swap(arrayElements[j], arrayElements[j + 1]);\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        sorted = false;\n                    }\n                }\n                if (sorted) {\n                    clearInterval(animationInterval);\n                    isSorting = false;\n                    return;\n                }\n                currentStep++;\n                renderArray();\n            }, animationSpeed);\n        }\n\n        function swap(el1, el2) {\n            el1.style.backgroundColor = 'red';\n            el2.style.backgroundColor = 'red';\n            setTimeout(() => {\n                const temp = el1.textContent;\n                el1.textContent = el2.textContent;\n                el2.textContent = temp;\n                el1.style.backgroundColor = '#3498db';\n                el2.style.backgroundColor = '#3498db';\n            }, animationSpeed);\n        }\n\n        function nextStep() {\n            if (!isSorting) {\n                isSorting = true;\n                currentStep = 0;\n            }\n            paused = false;\n            clearInterval(animationInterval);\n            bubbleSort();\n        }\n\n        document.getElementById('speed').oninput = (event) => {\n            animationSpeed = event.target.value;\n            if (isSorting) {\n                clearInterval(animationInterval);\n                bubbleSort();\n            }\n        };\n\n        function resetControls() {\n            const button = document.getElementById('pauseResumeButton');\n            button.textContent = 'Pause';\n            isSorting = false;\n            paused = false;\n        }\n\n        document.getElementById('pauseResumeButton').onclick = () => {\n            if (!isSorting) return;\n            paused = !paused;\n            const button = document.getElementById('pauseResumeButton');\n            button.textContent = paused ? 'Resume' : 'Pause';\n        };\n    </script>\n</body>\n</html>\n```\n\n### Explanation of the Implementation\n- **HTML Structure:** The implementation consists of a header, an area for displaying the array, and a control panel for user interaction.\n- **CSS Styles:** Styles are applied for layout, color, and interactivity, ensuring an appealing design with clear user experience.\n- **JavaScript Functionality:** The core logic implements Bubble Sort and manages the animations, user interactions (e.g., generating arrays, sorting, controlling speed), and allows for step-by-step progression through the sorting process.\n\nUsers can visualize how Bubble Sort works while engaging with a responsive, interactive design, reinforcing their understanding of the algorithm."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Red-Black Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for Bubble Sort Visualizer",
      "states": [
        {
          "name": "idle",
          "onEnter": "resetControls",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORT": "sorting",
            "NEXT_STEP": "sorting"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray",
          "on": {
            "START_SORT": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startSort",
          "onExit": "clearInterval(animationInterval)",
          "on": {
            "PAUSE": "paused",
            "NEXT_STEP": "sorting",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "paused",
          "onEnter": "togglePause",
          "on": {
            "RESUME": "sorting",
            "NEXT_STEP": "sorting"
          }
        },
        {
          "name": "done",
          "onEnter": "resetControls",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORT": "sorting"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORT",
        "PAUSE",
        "RESUME",
        "NEXT_STEP",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of the Bubble Sort visualizer, including idle, array generation, sorting, paused, and completion states."
    }
  },
  {
    "id": "e533f250-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:10.197Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Hash Table",
    "answer": {
      "role": "assistant",
      "content": "Here's a structured design for an interactive HTML page that teaches the concept of **Bubble Sort** using only vanilla HTML, CSS, and JavaScript. This module provides a comprehensive interactive experience with clear visual feedback and state changes.\n\n### Interactive Module Design for Bubble Sort\n\n#### 1. Concept Title:\n**Understanding Bubble Sort: A Step-by-Step Visualization**\n\n#### 2. Learning Objective:\nUsers will understand how Bubble Sort works by visualizing the sorting process of an array of numbers. They will be able to see each step of the algorithm and better grasp how Bubble Sort iterates through the array and swaps elements.\n\n#### 3. Interaction Design:\n- **User Interaction:** \n  - Users will have a button to **\"Start Animation\"** that initiates the Bubble Sort process for a predefined set of numbers. \n  - Users can also click on a **\"Randomize Numbers\"** button to generate a new set of numbers before starting the animation. \n  - As the animation progresses, users will see numbers swapping visually to represent the sorting process.\n  \n- **Visual Feedback:**\n  - Each swap will be visually indicated by changing the colors of the involved numbers (e.g., changing from blue to red).\n  - A number will \"bounce\" up when it is placed in the correct position, providing a clear indication of movement.\n  \n#### 4. Layout Description:\n- The layout maintains a clean and focused design with the following structure:\n  \n  - **Safe Area Margins:** 24 pixels on all sides.\n  - **Header (Concept Title):** Centered at the top with larger font for visibility.\n  - **Interactive Area:** Center of the viewport, containing the array of numbers represented as colored blocks.\n  - **Controls Area:** Below the interactive area, with buttons for \"Start Animation\" and \"Randomize Numbers\" spaced at least 16 pixels apart.\n  \n- **Accessibility:** All buttons will have accessible titles, and colors will be distinct to accommodate color blindness.\n\n### Full Implementation\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            background-color: #f4f4f4;\n            font-family: Arial, sans-serif;\n            height: 100vh;\n            box-sizing: border-box;\n            padding: 24px;\n        }\n        #title {\n            font-size: 24px;\n            margin-bottom: 16px;\n        }\n        #array {\n            display: flex;\n            margin: 16px 0;\n        }\n        .number {\n            width: 40px;\n            height: 40px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 0 4px;\n            background-color: #007bff;\n            color: white;\n            border-radius: 4px;\n            transition: background-color 0.5s, transform 0.2s;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 8px 8px;\n            border: none;\n            background-color: #007bff;\n            color: white;\n            cursor: pointer;\n            border-radius: 4px;\n            font-size: 16px;\n            transition: background-color 0.3s;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"title\">Understanding Bubble Sort: A Step-by-Step Visualization</div>\n    <div id=\"array\"></div>\n    <button id=\"startButton\">Start Animation</button>\n    <button id=\"randomizeButton\">Randomize Numbers</button>\n\n    <script>\n        let array = [];\n        const arraySize = 10;\n        const arrayDisplay = document.getElementById('array');\n        const startButton = document.getElementById('startButton');\n        const randomizeButton = document.getElementById('randomizeButton');\n\n        function generateRandomArray() {\n            array = Array.from({length: arraySize}, () => Math.floor(Math.random() * 100));\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayDisplay.innerHTML = '';\n            array.forEach(number => {\n                const numberBlock = document.createElement('div');\n                numberBlock.classList.add('number');\n                numberBlock.innerText = number;\n                arrayDisplay.appendChild(numberBlock);\n            });\n        }\n\n        async function bubbleSort() {\n            const numbers = document.querySelectorAll('.number');\n            for (let i = 0; i < array.length - 1; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    numbers[j].style.backgroundColor = 'red';\n                    numbers[j + 1].style.backgroundColor = 'red';\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                    if (array[j] > array[j + 1]) {\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                    }\n                    numbers[j].style.backgroundColor = '#007bff';\n                    numbers[j + 1].style.backgroundColor = '#007bff';\n                }\n                // Bounce effect by changing scale temporarily\n                numbers[array.length - i - 1].style.transform = 'scale(1.2)';\n                await new Promise(resolve => setTimeout(resolve, 200));\n                numbers[array.length - i - 1].style.transform = 'scale(1)';\n            }\n            alert('Sorting complete!');\n        }\n\n        startButton.addEventListener('click', bubbleSort);\n        randomizeButton.addEventListener('click', generateRandomArray);\n\n        // Initialize the random array on page load\n        generateRandomArray();\n    </script>\n</body>\n</html>\n```\n\n### Explanation:\n- The implementation creates a randomized array of 10 numbers each time the page loads. Users can start the Bubble Sort process by clicking the **\"Start Animation\"** button, and they can generate a new set of random numbers using the **\"Randomize Numbers\"** button.\n- The visual response (color changes and bounce effects) aids in understanding the sorting mechanics, reinforcing how Bubble Sort progresses through the array.\n- The layout ensures a clean and intuitive user experience, maintaining both clarity and accessibility."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Hash Table"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for Bubble Sort Visualization Application",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateRandomArray",
          "onExit": null,
          "on": {
            "START_BUTTON_CLICK": "sorting",
            "RANDOMIZE_BUTTON_CLICK": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORTING_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "alert('Sorting complete!')",
          "onExit": null,
          "on": {
            "RANDOMIZE_BUTTON_CLICK": "idle"
          }
        }
      ],
      "events": [
        "START_BUTTON_CLICK",
        "RANDOMIZE_BUTTON_CLICK",
        "SORTING_COMPLETE"
      ],
      "notes": "The FSM captures the states of the application during sorting and randomization, including transitions based on button clicks and sorting completion."
    }
  },
  {
    "id": "e560a7a0-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:10.490Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Stack",
    "answer": {
      "role": "assistant",
      "content": "Creating an interactive HTML page that teaches the bubble sort algorithm effectively can be an engaging way to explore sorting algorithms. Below is a design for a self-contained, interactive module focused on bubble sort. This includes a clear layout and user interactions that will help users understand the concept through visual feedback and animations.\n\n### Interactive HTML Page Design for Bubble Sort\n\n#### Concept Title:\n**Bubble Sort Visualization**\n\n#### Learning Objective:\nBy the end of this interaction, users should understand how the bubble sort algorithm works, including how elements are compared and swapped, ultimately resulting in a sorted array.\n\n#### Interaction Design:\n1. **Visual Elements:**\n   - An array represented by a series of colored boxes (divs), each box displaying a number.\n   - Users can generate a new random array by clicking a button.\n   - Users can start the bubble sort animation by clicking a \"Sort\" button.\n\n2. **Animations:**\n   - When the Sort button is clicked, the sorting process is animated: adjacent elements will be compared, and if they are out of order, they will be swapped. The boxes will momentarily change color to indicate they are being compared or swapped.\n   - A final state will show the sorted array with a different color for the sorted boxes.\n\n3. **User Controls:**\n   - A button to generate a new array.\n   - A button to initiate the bubble sort animation.\n   - Instructions are displayed to guide the user on how to interact with the module.\n\n#### Layout Description:\n- **Viewport Structure:**\n  - A header at the top displaying the concept title.\n  - Below the header, two buttons ('Generate Array' and 'Sort') aligned centrally with adequate spacing.\n  - Below the buttons, a visual representation of the array in a row of colored boxes (divs).\n  - At the bottom, descriptive text explaining what is happening in real-time during the sort process.\n\n- **Safe Areas and Spacing:**\n  - All content maintains a **24 px** margin from the viewport edges.\n  - Minimum **16 px** spacing between buttons and the array display.\n\n- **Accessibility and Responsiveness:**\n  - Text is legible against background colors with sufficient contrast.\n  - Buttons are large enough for easy clicking and are responsive across different screen sizes.\n\n### Implementation\n\nHere’s how you would implement this module using HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 24px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        #header {\n            font-size: 24px;\n            font-weight: bold;\n            margin-bottom: 16px;\n        }\n\n        .button-container {\n            margin-bottom: 16px;\n        }\n\n        button {\n            padding: 10px 20px;\n            margin: 0 8px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n\n        #array-container {\n            display: flex;\n            align-items: flex-end;\n            margin: 16px 0;\n        }\n\n        .number-box {\n            width: 30px;\n            height: 30px;\n            margin: 0 4px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: #3498db;\n            color: white;\n            border-radius: 4px;\n            transition: background-color 0.3s;\n        }\n\n        .swapping {\n            background-color: #e74c3c !important;\n        }\n\n        .sorted {\n            background-color: #2ecc71 !important;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"header\">Bubble Sort Visualization</div>\n    <div class=\"button-container\">\n        <button id=\"generateArray\">Generate Array</button>\n        <button id=\"sortArray\">Sort</button>\n    </div>\n    <div id=\"array-container\"></div>\n    <div id=\"status\"></div>\n\n    <script>\n        const arrayContainer = document.getElementById('array-container');\n        const statusDiv = document.getElementById('status');\n\n        let array = [];\n\n        function generateRandomArray(size = 10, range = 50) {\n            array = Array.from({ length: size }, () => Math.floor(Math.random() * range));\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach(num => {\n                const box = document.createElement('div');\n                box.classList.add('number-box');\n                box.textContent = num;\n                arrayContainer.appendChild(box);\n            });\n        }\n\n        async function bubbleSort() {\n            for (let i = 0; i < array.length - 1; i++) {\n                for (let j = 0; j < array.length - 1 - i; j++) {\n                    const box1 = arrayContainer.children[j];\n                    const box2 = arrayContainer.children[j + 1];\n\n                    box1.classList.add('swapping');\n                    box2.classList.add('swapping');\n\n                    if (array[j] > array[j + 1]) {\n                        await new Promise(resolve => setTimeout(resolve, 500));\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    }\n\n                    renderArray();\n                    await new Promise(resolve => setTimeout(resolve, 500));\n\n                    box1.classList.remove('swapping');\n                    box2.classList.remove('swapping');\n                }\n            }\n            // Mark the sorted array\n            for (let i = 0; i < array.length; i++) {\n                const box = arrayContainer.children[i];\n                box.classList.add('sorted');\n            }\n            statusDiv.textContent = \"Sorting complete!\";\n        }\n\n        document.getElementById('generateArray').addEventListener('click', () => {\n            generateRandomArray();\n            statusDiv.textContent = \"Array generated. Click 'Sort' to sort the array.\";\n        });\n\n        document.getElementById('sortArray').addEventListener('click', () => {\n            statusDiv.textContent = \"Sorting in progress...\";\n            bubbleSort();\n        });\n\n        // Initial array generation\n        generateRandomArray();\n    </script>\n</body>\n</html>\n```\n\n### Summary:\nThis module effectively teaches the bubble sort algorithm through a hands-on, interactive approach. Users can visualize the sorting process while receiving immediate feedback via animations and color changes that underscore the key mechanisms of the algorithm. The layout is clear, accessible, and maintains a responsive design suitable for various screen sizes."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Stack"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for the Bubble Sort Visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateRandomArray",
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated"
          }
        },
        {
          "name": "array_generated",
          "onEnter": null,
          "onExit": null,
          "on": {
            "SORT_ARRAY": "sorting_in_progress"
          }
        },
        {
          "name": "sorting_in_progress",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORT_COMPLETE": "sorted"
          }
        },
        {
          "name": "sorted",
          "onEnter": null,
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "SORT_ARRAY",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of generating an array, sorting the array, and marking it as sorted. The sorting process is asynchronous and involves visual feedback through class changes."
    }
  },
  {
    "id": "e56bf240-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:10.564Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Deque",
    "answer": {
      "role": "assistant",
      "content": "Below is a high-quality interactive HTML page that provides an in-depth, hands-on exploration of the bubble sort algorithm. \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Interactive Module</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 600px;\n            margin: 24px;\n            padding: 16px;\n            background: white;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            border-radius: 8px;\n        }\n\n        h1 {\n            text-align: center;\n        }\n\n        .array {\n            display: flex;\n            justify-content: center;\n            margin: 16px 0;\n        }\n\n        .bar {\n            width: 30px;\n            margin: 0 4px;\n            display: inline-block;\n            background-color: #3498db;\n            transition: height 0.3s, background-color 0.3s;\n        }\n\n        button {\n            display: block;\n            width: 100%;\n            padding: 10px;\n            margin: 16px 0;\n            border: none;\n            background-color: #2ecc71;\n            color: white;\n            font-size: 16px;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n\n        button:disabled {\n            background-color: #95a5a6;\n            cursor: not-allowed;\n        }\n\n        #learner-info {\n            text-align: center;\n            margin-top: 16px;\n        }\n\n        @media (max-width: 600px) {\n            .bar {\n                width: 20px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Bubble Sort Interactive Module</h1>\n        <div class=\"array\" id=\"arrayContainer\"></div>\n        <button id=\"startSortBtn\">Start Bubble Sort</button>\n        <p id=\"learner-info\">Click the button to sort the array using bubble sort!</p>\n    </div>\n\n    <script>\n        const arrayContainer = document.getElementById('arrayContainer');\n        const startSortBtn = document.getElementById('startSortBtn');\n        const learnerInfo = document.getElementById('learner-info');\n\n        // Create an array of random integers\n        let array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100) + 10);\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            startSortBtn.disabled = true;\n            learnerInfo.innerText = 'Sorting...';\n            for(let i = 0; i < array.length; i++) {\n                for(let j = 0; j < array.length - i - 1; j++) {\n                    // Visual feedback for comparisons\n                    const bars = document.querySelectorAll('.bar');\n                    bars[j].style.backgroundColor = '#e74c3c'; // Highlight the first element\n                    bars[j + 1].style.backgroundColor = '#e74c3c'; // Highlight the second element\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Wait for 0.5s\n                    if (array[j] > array[j + 1]) {\n                        // Swap values\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    }\n                    // Reset colors\n                    bars[j].style.backgroundColor = '#3498db';\n                    bars[j + 1].style.backgroundColor = '#3498db';\n                    renderArray(); // Reflect changes visually\n                }\n            }\n            learnerInfo.innerText = 'Sorting Complete!';\n            startSortBtn.disabled = false;\n        }\n\n        startSortBtn.addEventListener('click', () => {\n            renderArray();\n            bubbleSort();\n        });\n\n        // Initial render\n        renderArray();\n    </script>\n</body>\n</html>\n```\n\n### Overview of the Module:\n\n#### Concept Title:\nBubble Sort Interactive Module\n\n#### Learning Objective:\nUsers will understand how the bubble sort algorithm works through a visual demonstration. They will learn how values are compared, swapped, and visually represented in an array.\n\n#### Interaction Design:\n- Users will see an array of bars which represent numbers.\n- When the \"Start Bubble Sort\" button is clicked, the bars will change color to indicate which two numbers are being compared.\n- Users will observe sorting happening in real-time, with visual feedback for each swap.\n- The animation runs step-by-step, allowing users to see the concept of bubble sort in action.\n\n#### Layout Description:\n- The layout is designed to maintain clarity and focus, with the title at the top, an interactive area below it (the array), a button to initiate sorting, and learner information at the bottom.\n- The container ensures that all elements are padded appropriately with a maximum width of 600px, centered within 24px safe margins on all sides.\n- Enough spacing (16px) is provided between interactive elements to maintain clarity, ensuring users can easily interact without confusion.\n- The entire module is responsive, providing adjustments on smaller screens, particularly for the bars' width and arrangement.\n\nThis self-contained design ensures a seamless educational experience on the bubble sort algorithm through an engaging, interactive interface."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Deque"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for the Bubble Sort Interactive Module",
      "states": [
        {
          "name": "idle",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "START_SORT_BUTTON_CLICKED": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "disableStartButton; updateLearnerInfo('Sorting...')",
          "onExit": "enableStartButton; updateLearnerInfo('Sorting Complete!')",
          "on": {
            "SORTING_COMPLETE": "idle"
          }
        }
      ],
      "events": [
        "START_SORT_BUTTON_CLICKED",
        "SORTING_COMPLETE"
      ],
      "notes": "The FSM captures the states of the application during the bubble sort process, including the idle state before sorting and the sorting state during the execution of the algorithm."
    }
  },
  {
    "id": "e5c07ae0-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:11.118Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Tree",
    "answer": {
      "role": "assistant",
      "content": "Certainly! Here’s a detailed design plan for an interactive HTML module that explores the concept of **Bubble Sort**.\n\n### Module Design Plan for Bubble Sort\n\n---\n\n#### Concept Title:\n**Understanding Bubble Sort: A Visual Exploration**\n\n---\n\n#### Learning Objective:\nUsers should be able to:\n- Understand how the Bubble Sort algorithm works through visual simulation.\n- Observe the process of sorting an unsorted array step-by-step.\n- Recognize the importance of comparisons and swaps in the sorting process.\n\n---\n\n#### Interaction Design:\n1. **Initial Setup**: Upon loading the page, an unsorted array of numbers will be displayed as horizontal bars with a corresponding number below each bar.\n   \n2. **Controls**:\n   - **Start Sort Button**: When users click this button, it triggers the Bubble Sort animation. The button dynamically changes to \"Sorting...\" while the sort is in progress and becomes enabled only once sorting is completed.\n   - **Reset Button**: Allows users to reset the array to a random unsorted state and start the sorting process again.\n\n3. **Visual Feedback**:\n   - Bars representing numbers will be animated to visually demonstrate the sorting process.\n   - A comparison (highlighted bars) will occur during each iteration, and swaps (color change) will flash the bars being swapped.\n   - After a swap, a brief pause will be implemented to enhance the visibility of the action.\n   \n4. **Progress Indicator**: A step indicator will show the current pass number of the sorting process, enhancing user understanding of iterations in Bubble Sort.\n\n---\n\n#### Layout Description:\n- The page is divided into the following sections:\n  - **Header**: Displaying the title at the top, centered (font size: 24px).\n  - **Sorting Visualization Section**:\n    - Bars are arranged horizontally, centered within the viewport.\n    - Corresponding numbers are displayed beneath each bar.\n  - **Control Buttons**: Located below the sorting visualization with a minimum spacing of 16px between the buttons to ensure clarity (Start Sort and Reset).\n  - **Progress Display**: Positioned above the buttons, indicating the current step of the sorting process.\n\n**Spatial Organization and Styling**:\n- **Margins**: 24px on all sides to ensure content is not cramped.\n- **Button Sizes**: Buttons should be adequately sized for easy interaction (50px height, flexible width).\n- **Accessibility**: Adequate contrast between text and background; button states for hover and active are visually distinct.\n  \n---\n\n### HTML, CSS, and JavaScript Implementation:\n\nHere is a simplified version of the implementation.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            margin: 24px;\n            background-color: #f5f5f5;\n        }\n        .array {\n            display: flex;\n            margin: 16px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 4px;\n            background-color: #4CAF50;\n            transition: height 0.3s ease;\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 8px;\n            cursor: pointer;\n            background-color: #007BFF;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            transition: background-color 0.2s ease;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <h1>Understanding Bubble Sort: A Visual Exploration</h1>\n    <div class=\"array\" id=\"array\"></div>\n    <div>\n        <button id=\"startSort\">Start Sort</button>\n        <button id=\"resetArray\">Reset Array</button>\n    </div>\n    <div id=\"progressIndicator\"></div>\n\n    <script>\n        const arrayContainer = document.getElementById('array');\n        const startSortBtn = document.getElementById('startSort');\n        const resetArrayBtn = document.getElementById('resetArray');\n        const progressIndicator = document.getElementById('progressIndicator');\n        let array = [];\n\n        function generateRandomArray(length = 10) {\n            array = [];\n            for (let i = 0; i < length; i++) {\n                array.push(Math.floor(Math.random() * 100));\n            }\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach((value) => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 3}px`; // Scale height for visibility\n                bar.innerHTML = value;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            let n = array.length;\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    progressIndicator.innerText = `Pass ${i + 1}`;\n                    renderArray();\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        let temp = array[j];\n                        array[j] = array[j + 1];\n                        array[j + 1] = temp;\n                        renderArray();\n                        await new Promise(resolve => setTimeout(resolve, 300)); // Delay for visualization\n                    }\n                }\n            }\n            progressIndicator.innerText = 'Sorting Complete!';\n            startSortBtn.disabled = false;\n        }\n\n        startSortBtn.addEventListener('click', async () => {\n            startSortBtn.disabled = true;\n            progressIndicator.innerText = '';\n            await bubbleSort();\n        });\n\n        resetArrayBtn.addEventListener('click', () => {\n            generateRandomArray();\n            progressIndicator.innerText = '';\n        });\n\n        // Initialize the array on page load\n        generateRandomArray();\n    </script>\n</body>\n</html>\n```\n\n### Explanation of the Code:\n- **HTML Structure**: The structure features a title, an array display, control buttons, and a progress indicator.\n- **CSS**: Styling creates a visually appealing layout while ensuring responsive design.\n- **JavaScript**: \n  - Upon clicking, the array is sorted using the Bubble Sort algorithm with visual changes for each comparison and swap.\n  - `setTimeout()` creates pauses between animations for clarity.\n  - The interactive buttons allow users to reset the array or start sorting, enhancing engagement.\n\nThis module serves as an effective educational tool for users to learn about the Bubble Sort algorithm through hands-on interaction and visualization."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Binary Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for Bubble Sort Visualization",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateRandomArray",
          "onExit": "",
          "on": {
            "START_SORT": "sorting",
            "RESET_ARRAY": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startSortBtn.disabled = true; progressIndicator.innerText = ''",
          "onExit": "progressIndicator.innerText = 'Sorting Complete!'; startSortBtn.disabled = false",
          "on": {
            "SORT_COMPLETE": "idle"
          }
        }
      ],
      "events": [
        "START_SORT",
        "RESET_ARRAY",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of the application during the sorting process and the reset functionality."
    }
  },
  {
    "id": "e6129280-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:11.656Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Queue",
    "answer": {
      "role": "assistant",
      "content": "Here’s a design plan for an interactive HTML module dedicated to explaining the **Bubble Sort** algorithm.\n\n## Interactive Module Design for Bubble Sort\n\n### Concept Title:\n**Bubble Sort Visualization**\n\n### Learning Objective:\nUsers will understand how the Bubble Sort algorithm works through interactive visualizations. By the end of the module, users will be able to:\n- Comprehend the concept of swapping elements to sort a list.\n- Observe how the algorithm iterates through the list and progressively sorts it.\n- Modify the dataset to see how different inputs affect the sorting process.\n\n### Interaction Design:\n1. **Array Generation:**\n   - Users can create an array of numbers by clicking a button. The numbers will be randomly generated and displayed horizontally.\n\n2. **Sorting Animation:**\n   - Once the array is generated, the user can start the Bubble Sort by clicking a \"Sort\" button. As the sort progresses, each pair of elements will be highlighted, and animations will show swapping visually.\n   - The state of the array will be updated after each swap, allowing the user to see how the array transforms step-by-step on each iteration.\n\n3. **Pause & Reset Functionality:**\n   - Users can pause the animation to see the current state and reset the array to generate a new one.\n\n4. **Visual Feedback:**\n   - Elements will change color during comparison (e.g., green for a pair being compared, red when swapping), and after the sort is complete, the sorted array could pulse or change color.\n\n### Layout Description:\n- The layout will be responsive and structured as follows:\n    - **Header (24px margin top):** Title (\"Bubble Sort Visualization\") centered at the top.\n    - **Array Display Area:** Centered below the header, a horizontal list of numbers represented by styled div elements. Each number will be visually distinct and spaced evenly.\n    - **Controls (24px below array):** A row of buttons for \"Generate Array\", \"Sort\", \"Pause\", and \"Reset\". Each button will have a minimum spacing of 16px from others.\n    - **Footer (24px margin below controls):** A brief explanation of Bubble Sort’s efficiency (O(n^2) complexity) to provide context.\n\n### Code Implementation:\n\nHere’s a self-contained HTML/CSS/JavaScript implementation:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 24px;\n            text-align: center;\n            background-color: #f4f4f4;\n        }\n        .array-container {\n            display: flex;\n            justify-content: center;\n            margin: 16px 0;\n        }\n        .array-element {\n            width: 30px;\n            height: 50px;\n            margin: 0 5px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            background-color: #3498db;\n            color: white;\n            font-weight: bold;\n            border-radius: 5px;\n            transition: background-color 0.3s ease;\n        }\n        button {\n            margin: 0 8px;\n            padding: 10px 20px;\n            background: #2980b9;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:hover {\n            background: #1abc9c;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    <div class=\"array-container\" id=\"arrayContainer\"></div>\n    <button id=\"generateBtn\">Generate Array</button>\n    <button id=\"sortBtn\">Sort</button>\n    <button id=\"pauseBtn\">Pause</button>\n    <button id=\"resetBtn\">Reset</button>\n    <p>Bubble Sort Complexity: O(n²)</p>\n\n    <script>\n        let array = [];\n        let animations = [];\n        let isPaused = false;\n        let animationFrame;\n\n        function generateArray(size = 10) {\n            array = Array.from({length: size}, () => Math.floor(Math.random() * 100));\n            displayArray();\n        }\n\n        function displayArray() {\n            const container = document.getElementById('arrayContainer');\n            container.innerHTML = '';\n            array.forEach(value => {\n                const element = document.createElement('div');\n                element.className = 'array-element';\n                element.textContent = value;\n                container.appendChild(element);\n            });\n        }\n\n        async function sortArray() {\n            const n = array.length;\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    if (isPaused) {\n                        await pauseAnimation();\n                    }\n                    if (array[j] > array[j + 1]) {\n                        await swap(j, j + 1);\n                    }\n                }\n            }\n        }\n\n        function swap(i, j) {\n            return new Promise(resolve => {\n                const container = document.getElementById('arrayContainer');\n                const elements = container.children;\n\n                // Highlight elements being compared\n                elements[i].style.backgroundColor = 'red';\n                elements[j].style.backgroundColor = 'red';\n\n                setTimeout(() => {\n                    // Swap\n                    [array[i], array[j]] = [array[j], array[i]];\n                    elements[i].textContent = array[i];\n                    elements[j].textContent = array[j];\n                    \n                    // Reset colors\n                    elements[i].style.backgroundColor = '#3498db';\n                    elements[j].style.backgroundColor = '#3498db';\n                    resolve();\n                }, 500);\n            });\n        }\n\n        function pauseAnimation() {\n            return new Promise(resolve => {\n                const pauseCheck = setInterval(() => {\n                    if (!isPaused) {\n                        clearInterval(pauseCheck);\n                        resolve();\n                    }\n                }, 100);\n            });\n        }\n\n        function pause() {\n            isPaused = !isPaused;\n        }\n\n        // Set up event listeners\n        document.getElementById('generateBtn').addEventListener('click', generateArray);\n        document.getElementById('sortBtn').addEventListener('click', () => {\n            isPaused = false;\n            sortArray();\n        });\n        document.getElementById('pauseBtn').addEventListener('click', pause);\n        document.getElementById('resetBtn').addEventListener('click', () => {\n            generateArray();\n            isPaused = false;\n        });\n\n        // Initialize with a default array\n        generateArray(10);\n    </script>\n</body>\n</html>\n```\n\n### Summary:\nThis interactive module provides an engaging way to learn the Bubble Sort algorithm through visual and hands-on interaction. Users can generate arrays, sort them, and observe the mechanics of Bubble Sort in action, fostering a better understanding of sorting algorithms. The design prioritizes accessibility and responsiveness, ensuring an inclusive learning experience."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite state machine for the Bubble Sort Visualization application, capturing states and transitions based on user interactions.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray(10)",
          "onExit": "",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "SORT": "sorting",
            "RESET": "array_generated"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "displayArray()",
          "onExit": "",
          "on": {
            "SORT": "sorting",
            "PAUSE": "paused",
            "RESET": "array_generated"
          }
        },
        {
          "name": "sorting",
          "onEnter": "sortArray()",
          "onExit": "",
          "on": {
            "PAUSE": "paused",
            "RESET": "array_generated"
          }
        },
        {
          "name": "paused",
          "onEnter": "",
          "onExit": "pauseAnimation()",
          "on": {
            "PAUSE": "sorting",
            "RESET": "array_generated"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "SORT",
        "PAUSE",
        "RESET"
      ],
      "notes": "The FSM captures the main states of the application: idle, array_generated, sorting, and paused. Transitions occur based on button clicks and user interactions."
    }
  },
  {
    "id": "e6b00b00-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:12.688Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Hash Map",
    "answer": {
      "role": "assistant",
      "content": "Here's a design plan for an interactive HTML page focused on the bubble sort algorithm:\n\n### Interactive Bubble Sort Module\n\n#### Concept Title:\n**Understanding Bubble Sort Algorithm**\n\n#### Learning Objective:\nBy the end of this interactive module, users should be able to explain how the bubble sort algorithm works, understand the step-by-step process of sorting a list, and visually grasp the concept of sorting through interaction.\n\n#### Interaction Design:\n1. **Initial State**: Users start with a randomly generated list of integers displayed as colored bars representing their values (height of the bar corresponding to the number).\n   \n2. **User Controls**: \n   - A \"Start Sorting\" button initiates the bubble sort visualization.\n   - A \"Reset\" button to generate a new random array for another demonstration.\n   - A slider allows users to control the speed of the sorting animation (slow, medium, fast).\n\n3. **Visual Feedback**: \n   - As the sort progresses, bars change color to indicate the current action (swapping vs. not swapping), enhancing concepts of comparisons and swaps.\n   - Step-by-step animations show the algorithm's execution.\n   - When the sort is completed, a message is displayed to confirm that the array is sorted.\n\n4. **Animation**: The bars will visually slide to their new positions when swapped, and the colors represent the active elements being compared or swapped. \n\n#### Layout Description:\n- **Container Layout**: \n  - Main content centered in the viewport with a width max of 600px, ensuring clarity.\n  - Top section includes the title and learning objectives.\n  - Below it, a central interactive area displaying the array as vertical bars.\n  - Below the bars, we have three control buttons arranged horizontally with the required spacing.\n  - A slider is placed right below the buttons for speed control.\n  - All elements are spaced carefully (minimum 16px) and contained within a safe area of 24px margins.\n\n- **Accessibility Considerations**: \n  - Use of clear labels and keyboard navigation for all controls.\n  - Font sizes are adjustable for readability, and high-contrast colors are used to support users with visual impairments.\n\n### Implementation: HTML, CSS, and JavaScript\n\nHere's the code to implement the above design:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Interactive Visualization</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            margin: 0;\n            padding: 0;\n            min-height: 100vh;\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n        }\n\n        .container {\n            max-width: 600px;\n            width: 100%;\n            margin: 24px;\n            padding: 16px;\n            background-color: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            text-align: center;\n        }\n\n        #array {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            margin: 16px 0;\n            height: 200px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            overflow: hidden;\n        }\n\n        .bar {\n            width: 20px;\n            margin: 0 2px;\n            background-color: #4caf50;\n        }\n\n        button {\n            padding: 10px 20px;\n            margin: 8px;\n            font-size: 16px;\n            cursor: pointer;\n            background-color: #007BFF;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            transition: background-color 0.3s;\n        }\n\n        button:hover {\n            background-color: #0056b3;\n        }\n\n        #speed {\n            width: 100%;\n            margin-top: 16px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <h1>Understanding Bubble Sort Algorithm</h1>\n        <p>Click \"Start Sorting\" to visualize the Bubble Sort algorithm working on a randomized array.</p>\n        <div id=\"array\"></div>\n        <button id=\"start\">Start Sorting</button>\n        <button id=\"reset\">Reset</button>\n        <input type=\"range\" id=\"speed\" min=\"100\" max=\"1000\" value=\"500\">\n        <label for=\"speed\">Animation Speed</label>\n    </div>\n    \n    <script>\n        const arrayContainer = document.getElementById('array');\n        const startButton = document.getElementById('start');\n        const resetButton = document.getElementById('reset');\n        const speedInput = document.getElementById('speed');\n        let array = [];\n\n        function generateArray() {\n            array = Array.from({ length: 30 }, () => Math.floor(Math.random() * 100));\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 2}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            const bars = document.querySelectorAll('.bar');\n            let n = array.length;\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    bars[j].style.backgroundColor = 'red'; // Mark for comparison\n                    bars[j + 1].style.backgroundColor = 'red'; // Mark for comparison\n                    await new Promise(resolve => setTimeout(resolve, speedInput.value)); // Control speed\n                    if (array[j] > array[j + 1]) {\n                        // Swap elements and update visualization\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                    }\n                    bars[j].style.backgroundColor = '#4caf50'; // Reset color\n                    bars[j + 1].style.backgroundColor = '#4caf50'; // Reset color\n                }\n            }\n            alert(\"Sorting complete!\");\n        }\n\n        startButton.addEventListener('click', bubbleSort);\n        resetButton.addEventListener('click', generateArray);\n        window.onload = generateArray;\n    </script>\n</body>\n\n</html>\n```\n\n### Explanation of Implementation:\n- **HTML Structure**: The basic structure includes a title, explanatory paragraph, a container for the bars, and control buttons/sliders.\n- **CSS for Styling**: Styling ensures responsive behavior, clarity, and aesthetics.\n- **JavaScript Logic**: \n  - The `generateArray` function creates a new random array and displays it.\n  - The `bubbleSort` function implements the bubble sort algorithm, providing user feedback with animations and color changes.\n- This will create an interactive visualization for users to engage with and learn the bubble sort algorithm hands-on."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Hash Map"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for Bubble Sort Interactive Visualization",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray",
          "onExit": null,
          "on": {
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORTING_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "alertCompletion",
          "onExit": null,
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "START_SORTING",
        "RESET",
        "SORTING_COMPLETE"
      ],
      "notes": "The FSM captures the main states of the Bubble Sort visualization, including idle state for generating the array, sorting state for executing the algorithm, and done state for completion feedback."
    }
  },
  {
    "id": "e9880a30-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:17.459Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Linked List",
    "answer": {
      "role": "assistant",
      "content": "Sure! Let’s create a detailed design plan for an interactive HTML page that teaches the concept of Bubble Sort through a hands-on approach.\n\n### Interactive HTML Page Design for Bubble Sort\n\n**1. Concept Title:**\n- **\"Bubble Sort Visualization\"**\n\n**2. Learning Objective:**\n- By the end of this interactive module, users should understand how the Bubble Sort algorithm works, visualizing its process through a series of animations as the sorting progresses. Users will also grasp the concept of swapping elements based on comparative values.\n\n**3. Interaction Design:**\n- **User Actions:**\n  - Users can initiate the sorting process by clicking a \"Start\" button.\n  - Users can adjust the number of elements in the array using a slider to see how sorting adapts to different sizes.\n  - Users can click on “Reset” to generate a new, randomly ordered array.\n- **Visual Changes & Feedback:**\n  - The array of numbers will be displayed as colored blocks, where each block’s height corresponds to its value.\n  - When users click “Start,” the blocks will animate by \"bubbling\" up or down to their correct positions, with swaps highlighted through color changes.\n  - An indicator will show the current pass and comparisons made in the sorting process.\n  - The process will halt at any point if the user clicks \"Stop\", allowing them to analyze the current state of sorting.\n\n**4. Layout Description:**\n- **Spatial Organization:**\n  - The page will have a title centered at the top for clarity.\n  - Below the title, there will be a visual area in the center showcasing the animated array of blocks.\n  - To the left of the visual area, a slider will allow adjustment of the number of elements, labeled \"Number of Elements\".\n  - Beneath the visual area, two buttons: \"Start\" on the left, and \"Stop\" on the right (with at least 16 px spacing between them).\n  - A \"Reset\" button will be on the right, below the start and stop buttons.\n  - The information section (displaying current pass and comparisons) will be placed at the bottom of the viewport, centered and clearly visible.\n- **Margins and Spacing:**\n  - The page will maintain a 24 px margin on all sides.\n  - All interactive elements will have at least 16 px spacing between them to ensure clarity and usability. \n\n### Implementation\n\nThe following code snippet outlines how this interactive module can be constructed using HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 24px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            background-color: #f3f4f6;\n        }\n        .title {\n            font-size: 24px;\n            margin-bottom: 16px;\n        }\n        .array-container {\n            display: flex;\n            align-items: flex-end;\n            justify-content: center;\n            margin-bottom: 16px;\n            height: 300px;\n            border: 1px solid #ccc;\n            width: 80%;\n        }\n        .bar {\n            margin: 0 4px;\n            display: inline-block;\n            background-color: #3498db;\n            transition: height 0.3s ease, background-color 0.3s ease;\n        }\n        .controls {\n            margin-bottom: 16px;\n        }\n        .button {\n            margin: 0 8px;\n            padding: 8px 12px;\n            font-size: 16px;\n            background-color: #2ecc71;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n        .button:hover {\n            background-color: #27ae60;\n        }\n        .info {\n            margin-top: 16px;\n            font-size: 18px;\n        }\n        @media (max-width: 600px) {\n            .array-container {\n                height: 200px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"title\">Bubble Sort Visualization</div>\n    <div class=\"array-container\" id=\"array-container\"></div>\n    <div class=\"controls\">\n        <input type=\"range\" id=\"sizeSlider\" min=\"5\" max=\"20\" value=\"10\" />\n        <button class=\"button\" id=\"startButton\">Start</button>\n        <button class=\"button\" id=\"stopButton\">Stop</button>\n        <button class=\"button\" id=\"resetButton\">Reset</button>\n    </div>\n    <div class=\"info\" id=\"info\">Pass: 0, Comparisons: 0</div>\n\n    <script>\n        let array = [];\n        let originalArraySize = 10;\n        const arrayContainer = document.getElementById('array-container');\n        const sizeSlider = document.getElementById('sizeSlider');\n        const startButton = document.getElementById('startButton');\n        const stopButton = document.getElementById('stopButton');\n        const resetButton = document.getElementById('resetButton');\n        const infoDisplay = document.getElementById('info');\n        let isSorted = false;\n        let animationFrameId;\n        \n        function generateArray(size) {\n            array = Array.from({ length: size }, () => Math.floor(Math.random() * 100) + 1);\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            for (let value of array) {\n                const bar = document.createElement('div');\n                bar.classList.add('bar');\n                bar.style.height = `${value * 2}px`;\n                bar.style.width = '10px';\n                arrayContainer.appendChild(bar);\n            }\n        }\n\n        async function bubbleSort() {\n            const arrayLength = array.length;\n            let pass = 0;\n            let comparisons = 0;\n            for (let i = 0; i < arrayLength - 1; i++) {\n                for (let j = 0; j < arrayLength - i - 1; j++) {\n                    comparisons++;\n                    updateInfo(pass, comparisons);\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        let temp = array[j];\n                        array[j] = array[j + 1];\n                        array[j + 1] = temp;\n                        renderArray();\n                        await new Promise(resolve => setTimeout(resolve, 200)); // Wait for animation\n                    }\n                }\n                pass++;\n                updateInfo(pass, comparisons);\n            }\n            isSorted = true;\n        }\n\n        function updateInfo(pass, comparisons) {\n            infoDisplay.innerText = `Pass: ${pass}, Comparisons: ${comparisons}`;\n        }\n\n        startButton.addEventListener('click', () => {\n            if (!isSorted) {\n                bubbleSort();\n            }\n        });\n\n        stopButton.addEventListener('click', () => {\n            cancelAnimationFrame(animationFrameId);\n            isSorted = true; // Stop sorting\n        });\n\n        resetButton.addEventListener('click', () => {\n            isSorted = false;\n            generateArray(sizeSlider.value);\n        });\n\n        sizeSlider.addEventListener('input', () => {\n            generateArray(sizeSlider.value);\n        });\n\n        // Initial array generation\n        generateArray(originalArraySize);\n    </script>\n</body>\n</html>\n```\n\n### Explanation of Implementation Components:\n\n- **HTML Structure:**\n  - The HTML contains a title, interactive controls (slider and buttons), and a dynamic visualization area for the sorting blocks.\n  \n- **CSS Styling:**\n  - The layout is responsive and maintains sufficient margins and spacings, ensuring clarity and ease of use.\n  \n- **JavaScript Logic:**\n  - The sorting logic is implemented in a function that visualizes each operation and updates the display accordingly.\n\n### Conclusion:\n\nThis interactive module provides a robust hands-on exploration of the Bubble Sort algorithm. Users can visually understand the sorting process while customizing the number of elements and controlling the animation through buttons. This enhanced interactivity promotes deeper learning and retention of the key concepts behind Bubble Sort."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Linked List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for the Bubble Sort Visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray(originalArraySize)",
          "onExit": "",
          "on": {
            "START_BUTTON_CLICK": "sorting",
            "RESET_BUTTON_CLICK": "idle",
            "SIZE_SLIDER_CHANGE": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort()",
          "onExit": "cancelAnimationFrame(animationFrameId)",
          "on": {
            "STOP_BUTTON_CLICK": "sorted",
            "SORTING_COMPLETE": "sorted"
          }
        },
        {
          "name": "sorted",
          "onEnter": "",
          "onExit": "",
          "on": {
            "RESET_BUTTON_CLICK": "idle"
          }
        }
      ],
      "events": [
        "START_BUTTON_CLICK",
        "STOP_BUTTON_CLICK",
        "RESET_BUTTON_CLICK",
        "SIZE_SLIDER_CHANGE",
        "SORTING_COMPLETE"
      ],
      "notes": "The 'sorting' state transitions to 'sorted' when sorting is complete or when stopped. The 'idle' state allows for resetting and changing the array size."
    }
  },
  {
    "id": "eaadc580-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:19.384Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Set",
    "answer": {
      "role": "assistant",
      "content": "Here’s a detailed design plan for an interactive HTML page that focuses on the concept of bubble sort. \n\n### **Interactive Module Plan: Bubble Sort Visualization**\n\n---\n\n#### **Concept Title:** \n**Visualizing Bubble Sort**\n\n#### **Learning Objective:** \nBy the end of this interactive module, users will understand how the bubble sort algorithm works by visually tracking how elements are swapped in a list until it is sorted.\n\n---\n\n#### **Interaction Design:**\n\n1. **User Interaction:**\n   - **Starting the Sort:** \n     - Users can click a **\"Start Sorting\"** button to initiate the bubble sort animation.\n   - **Dynamic Array Generation:** \n     - Users can input the length of the array (between 3 to 20) in a text box and click a **\"Generate Array\"** button to create a new random array to sort.\n   - **Pause and Reset:** \n     - Options to **“Pause”** the sorting animation or **“Reset”** the current sorted state for further experimentation.\n   - **Immediate Feedback:** \n     - As the sorting occurs, the visual elements (bars) change colors to highlight the current and swapped elements, enhancing the user’s understanding of the algorithm's progress.\n\n2. **Visual Changes:**\n   - The array is represented visually as a series of vertical bars where the height of each bar corresponds to the value of the element.\n   - During the sorting process, the bars swap positions with a sliding animation.\n   - The current comparing elements are highlighted using contrasting colors (e.g., blue), and once they are swapped, they turn back to the original color (e.g., green) post-swap.\n\n---\n\n#### **Layout Description:**\n- **Safe Area Margins:** Maintain 24 px margins on all sides of the viewport.\n- **Spacing:** Maintain a minimum spacing of 16 px between the buttons and input fields.\n- **Element Arrangement:**\n  - **Title Section:** A bold title at the top center of the page.\n  - **Controls Section:** Below the title, include:\n    - An input field for length with label (“Enter Array Length”) and a **\"Generate Array\"** button.\n    - Below that, two control buttons: **\"Start Sorting\"**, **\"Pause\"**, and **\"Reset\"**.\n  - **Visualization Area:** A large, centered section beneath the controls where the bars are displayed.\n  - Ensure that all buttons are visually distinct and have hover effects for accessibility.\n\n#### **Accessibility and Responsiveness:**\n- Use semantic HTML for better accessibility.\n- Color choices should ensure that the module is comprehensible to color-blind users (e.g., using patterns or shades).\n- Make sure the layout is structured using flexible units (like percentages) to adapt to different screen sizes while maintaining functionality.\n\n---\n\n### **Sample Implementation**\nHere is a simple self-contained example using HTML, CSS, and JavaScript to implement the above design.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 24px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            margin-bottom: 16px;\n        }\n        #controls {\n            margin-bottom: 16px;\n        }\n        input {\n            margin-right: 8px;\n            padding: 4px;\n            width: 70px;\n        }\n        button {\n            padding: 8px 12px;\n            margin-left: 8px;\n            cursor: pointer;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin-top: 16px;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 4px;\n            background-color: green;\n            display: inline-block;\n        }\n        .highlight {\n            background-color: blue;\n        }\n        .swapped {\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <h1>Visualizing Bubble Sort</h1>\n    <div id=\"controls\">\n        <label for=\"arrayLength\">Enter Array Length:</label>\n        <input type=\"number\" id=\"arrayLength\" min=\"3\" max=\"20\" value=\"10\">\n        <button id=\"generate\">Generate Array</button>\n        <button id=\"start\">Start Sorting</button>\n        <button id=\"pause\">Pause</button>\n        <button id=\"reset\">Reset</button>\n    </div>\n    <div id=\"array\"></div>\n\n    <script>\n        let array = [], interval, sorted = false;\n\n        function generateArray(length) {\n            array = Array.from({ length }, () => Math.floor(Math.random() * 100) + 1);\n            renderArray();\n        }\n\n        function renderArray() {\n            const arrayContainer = document.getElementById('array');\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = value * 3 + 'px';\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        function bubbleSort() {\n            let n = array.length;\n            let i = 0;\n            let j = 0;\n\n            interval = setInterval(() => {\n                if (i < n) {\n                    if (j < n - i - 1) {\n                        highlight(j, j + 1);\n                        if (array[j] > array[j + 1]) {\n                            swap(j, j + 1);\n                        }\n                        j++;\n                    } else {\n                        i++;\n                        j = 0;\n                        if (i < n) {\n                            renderArray();\n                        }\n                    }\n                } else {\n                    clearInterval(interval);\n                }\n            }, 500);\n        }\n\n        function highlight(index1, index2) {\n            const bars = document.getElementsByClassName('bar');\n            bars[index1].classList.add('highlight');\n            bars[index2].classList.add('highlight');\n            setTimeout(() => {\n                bars[index1].classList.remove('highlight');\n                bars[index2].classList.remove('highlight');\n            }, 500);\n        }\n\n        function swap(index1, index2) {\n            [array[index1], array[index2]] = [array[index2], array[index1]];\n            renderArray();\n        }\n\n        document.getElementById('generate').onclick = () => {\n            const length = parseInt(document.getElementById('arrayLength').value);\n            generateArray(length);\n        };\n        \n        document.getElementById('start').onclick = () => {\n            if (!sorted) bubbleSort();\n        };\n\n        document.getElementById('pause').onclick = () => {\n            clearInterval(interval);\n            sorted = true;\n        };\n\n        document.getElementById('reset').onclick = () => {\n            clearInterval(interval);\n            sorted = false;\n            generateArray(parseInt(document.getElementById('arrayLength').value));\n        };\n\n        // Initial array generation\n        generateArray(10); \n    </script>\n</body>\n</html>\n```\n\n### **Conclusion:**\n\nThis interactive module provides a hands-on learning experience for users to explore bubble sort visually. The arrangement of elements, combined with dynamic interactions and visual feedback, will reinforce users' understanding of how the bubble sort algorithm functions. By clicking buttons and watching the sorting process happen in real-time, learners can gain a solid grasp of this important algorithmic concept."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Set"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for Bubble Sort Visualization",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray(10)",
          "onExit": "",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray()",
          "onExit": "",
          "on": {
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort()",
          "onExit": "clearInterval(interval)",
          "on": {
            "PAUSE": "paused",
            "RESET": "idle"
          }
        },
        {
          "name": "paused",
          "onEnter": "",
          "onExit": "",
          "on": {
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORTING",
        "PAUSE",
        "RESET"
      ],
      "notes": "The FSM captures the states of the application during the bubble sort visualization, including idle state, array generation, sorting, and paused states."
    }
  },
  {
    "id": "eaaf7330-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:19.395Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Heap (Min/Max)",
    "answer": {
      "role": "assistant",
      "content": "Here's a comprehensive design plan for an interactive HTML page focused on the bubble sort algorithm. The module will provide an in-depth exploration of the concept in a hands-on manner, adhering to your requirements.\n\n### Interactive HTML Page Design for Bubble Sort\n\n#### Concept Title\n**Bubble Sort Algorithm: An Interactive Exploration**\n\n#### Learning Objective\nUsers should understand how the Bubble Sort algorithm works, visually grasp the sorting process, and gain insight into the efficiency and mechanics of sorting algorithms through an interactive experience.\n\n#### Interaction Design\n1. **Initial Setup:**\n   - The user is presented with an array of numbers (randomly generated) displayed as horizontal bars.\n   - Each bar's height corresponds to the value it represents, making it visually engaging to understand sorting.\n\n2. **Interaction Methods:**\n   - **Start Sorting Button:** Users can click a button to initiate the bubble sort process.\n   - **Pause and Resume:** A toggle button allows users to pause or resume the sorting animation for closer inspection.\n   - **Reset Button:** Users can reset the array to a new randomized state.\n   - **Speed Control Slider:** A slider allows users to adjust the speed of the sorting animation.\n   \n3. **Visual Feedback:**\n   - As the sort proceeds, bars change color to indicate comparisons and swaps: \n     - Original state: Blue\n     - Comparing: Yellow\n     - Swapped: Green\n   - The sorting process includes animations that move the bars smoothly to their new positions, reinforcing the understanding of how elements move during sort iterations.\n\n4. **State Changes:**\n   - Informative messages will display the current state of the sorting array, including how many iterations have been completed and any swaps that occurred.\n   - Once complete, a message will display \"Sorting Complete!\" and the final sorted array.\n\n#### Layout Description\n- **Spatial Organization:**\n  - **Safe Areas:** Maintain a margin of 24px on all sides of the viewport.\n  - **Header Section (Top, 24px margin):** Contains the title at the center.\n  - **Main Section (Middle width):** Displays the array bars in a horizontal layout.\n    - Bars are 100% of the viewport width minus margins and spaced appropriately to maintain clarity.\n  - **Control Section (Bottom):** Includes buttons and slider, evenly spaced with 16px minimum gaps.\n    - Placed in a single-line flexbox container for responsiveness.\n  - **Footer Section (Bottom, 24px margin):** Displays sorting status updates.\n\n### Example HTML, CSS, and JavaScript Implementation\n\nHere's a self-contained implementation using vanilla HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 24px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            background: #f0f0f0;\n        }\n        h1 {\n            margin-bottom: 16px;\n        }\n        .array-container {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n            height: 300px;\n            width: calc(100% - 48px);\n            position: relative;\n        }\n        .bar {\n            height: 100%;\n            margin: 0 2px;\n            background: blue;\n            transition: height 0.3s, background 0.3s;\n        }\n        .active {\n            background: yellow;\n        }\n        .swapped {\n            background: green;\n        }\n        .controls {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 16px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Algorithm: An Interactive Exploration</h1>\n\n<div class=\"array-container\" id=\"arrayContainer\"></div>\n\n<div class=\"controls\">\n    <button id=\"startButton\">Start Sorting</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"resetButton\">Reset</button>\n    <label>\n        Speed:\n        <input type=\"range\" id=\"speedSlider\" min=\"100\" max=\"1000\" step=\"100\" value=\"500\">\n    </label>\n    <div id=\"status\" style=\"margin-top:16px;\">Ready to start!</div>\n</div>\n\n<script>\n    let array = [];\n    const arrayContainer = document.getElementById('arrayContainer');\n    const statusDiv = document.getElementById('status');\n    let isSorting = false;\n    let speed = 500;\n\n    function generateArray() {\n        array = Array.from({length: 10}, () => Math.floor(Math.random() * 100) + 1);\n        renderArray();\n    }\n\n    function renderArray() {\n        arrayContainer.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${value * 3}px`; // Scale up for visibility\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        isSorting = true;\n        statusDiv.innerText = 'Sorting...';\n        const bars = document.querySelectorAll('.bar');\n\n        for (let i = 0; i < array.length - 1; i++) {\n            for (let j = 0; j < array.length - i - 1; j++) {\n                if (!isSorting) return;\n                bars[j].classList.add('active');\n                bars[j + 1].classList.add('active');\n                \n                await new Promise(resolve => setTimeout(resolve, speed));\n\n                if (array[j] > array[j + 1]) {\n                    // Swap elements\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    bars[j].classList.add('swapped');\n                    bars[j + 1].classList.add('swapped');\n                }\n                \n                renderArray();\n                await new Promise(resolve => setTimeout(resolve, speed));\n                bars[j].classList.remove('active');\n                bars[j + 1].classList.remove('active');\n                bars[j].classList.remove('swapped');\n                bars[j + 1].classList.remove('swapped');\n            }\n        }\n        isSorting = false;\n        statusDiv.innerText = 'Sorting Complete!';\n    }\n\n    document.getElementById('startButton').onclick = () => {\n        if (!isSorting) bubbleSort();\n    };\n\n    document.getElementById('resetButton').onclick = () => {\n        generateArray();\n        statusDiv.innerText = 'Ready to start!';\n    };\n\n    document.getElementById('pauseButton').onclick = () => {\n        isSorting = !isSorting;\n        this.innerText = isSorting ? 'Resume' : 'Pause';\n    };\n\n    document.getElementById('speedSlider').oninput = (event) => {\n        speed = event.target.value;\n    };\n\n    // Initial Array Generation\n    generateArray();\n</script>\n\n</body>\n</html>\n```\n\n### Explanation of Code:\n- The `generateArray` function creates a random array and displays it.\n- The `renderArray` function visually represents the array as bars in the `arrayContainer`.\n- The `bubbleSort` function implements the bubble sort algorithm with visual delays using promises to allow for animation.\n- The buttons enable user controls to start sorting, pause, reset the array, and adjust the speed.\n- CSS styles ensure proper margins, spacing, and aesthetics for clarity and responsiveness.\n\nThis interactive module effectively teaches bubble sort in a visually engaging manner, allowing users a hands-on experience while reinforcing their understanding of the sorting algorithm."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Heap (Min/Max)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for an interactive Bubble Sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray",
          "onExit": "",
          "on": {
            "START_BUTTON_CLICK": "sorting",
            "RESET_BUTTON_CLICK": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": "setStatusComplete",
          "on": {
            "PAUSE_BUTTON_CLICK": "paused",
            "RESET_BUTTON_CLICK": "idle"
          }
        },
        {
          "name": "paused",
          "onEnter": "",
          "onExit": "",
          "on": {
            "PAUSE_BUTTON_CLICK": "sorting",
            "RESET_BUTTON_CLICK": "idle"
          }
        }
      ],
      "events": [
        "START_BUTTON_CLICK",
        "PAUSE_BUTTON_CLICK",
        "RESET_BUTTON_CLICK"
      ],
      "notes": "The application starts in the idle state where an array is generated. The user can start sorting, which transitions to the sorting state. The sorting can be paused, leading to a paused state, or reset back to idle."
    }
  },
  {
    "id": "ed281450-b3fd-11f0-8f18-3ff2a1d65a7c",
    "timestamp": "2025-10-28T12:59:23.541Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Weighted Graph",
    "answer": {
      "role": "assistant",
      "content": "### Interactive HTML Page for Bubble Sort\n\nHere's a detailed plan for creating an engaging interactive HTML module focused on teaching the concept of Bubble Sort.\n\n---\n\n### Concept Title\n**\"Understanding Bubble Sort Through Interactive Visualization\"**\n\n### Learning Objective\nAfter interacting with this module, users should be able to:\n- Understand the Bubble Sort algorithm and how it operates.\n- Visualize how the algorithm sorts an array step-by-step.\n- Recognize the importance of algorithm efficiency and how different elements interact through the sorting process.\n\n### Interaction Design\n1. **User Interaction:**\n   - Users can **initially click a \"Generate Array\" button** to create a random array of numbers (visualized as bars).\n   - Users can initiate the sorting process by clicking a **\"Sort\" button**. The sorting animation will visually illustrate each step of the algorithm.\n   - Users can **pause** and **resume** the sorting animation for closer observation.\n   - Users can adjust the size of the array using a **slider control** which dynamically updates the displayed array when adjusted.\n\n2. **Visual Changes and Feedback:**\n   - The randomly generated array will be represented by vertical bars of varying heights using CSS.\n   - During sorting, the bars will change color to indicate comparisons and swaps (e.g., highlighting bars in red during a swap).\n   - The sorting process itself will be animated, with delays to give users a chance to observe how the algorithm works.\n\n3. **State Changes:**\n   - Each time the process swaps two elements, there will be a noticeable animation to move the bars and reflect their new order.\n   - After sorting is complete, a message will display the sorted array in numerical form.\n\n### Layout Description\n- The entire interface will be designed within a single viewport, adhering to safe area margins and spacing:\n   - **Safe Area:** 24 pixels on all sides.\n   - **Minimum Spacing:** 16 pixels between all interactive elements.\n\n#### Spatial Organization:\n1. **Top Section (Title and Learning Objective):**\n   - **Title** centered at the top.\n   - Below the title, a concise description of the learning objective.\n   \n2. **Middle Section (Visualization Area):**\n   - A dynamically generated array of bars occupies the central part of the page.\n   - The height of each bar represents the value of the respective element in the array.\n\n3. **Bottom Section (Controls):**\n   - Contains buttons for \"Generate Array\", \"Sort\", \"Pause\", and \"Resume\".\n   - A slider below these buttons to adjust the size of the array.\n\n4. **Responsiveness:**\n   - The design will adjust based on the screen size, utilizing CSS Flexbox or Grid for layout management to ensure that all elements maintain responsive spacing and hierarchy.\n\n5. **Accessibility:**\n   - All buttons will have `aria-labels` for screen readers.\n   - Sufficient contrast between text and background colors.\n   - Keyboard accessibility through tabindex attributes for all interactive elements.\n\n---\n\n### Sample Code Implementation\nBelow is a self-contained HTML, CSS, and JavaScript implementation of the Bubble Sort interactive module.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 24px;\n            font-family: Arial, sans-serif;\n        }\n        #array {\n            display: flex;\n            align-items: flex-end;\n            margin: 16px 0;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 4px;\n            background-color: steelblue;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        button, input[type=\"range\"] {\n            margin: 16px;\n            padding: 10px;\n            font-size: 16px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Understanding Bubble Sort</h1>\n    <p>Learn how Bubble Sort works through this interactive visualization!</p>\n\n    <div id=\"array\"></div>\n    \n    <div>\n        <input type=\"range\" id=\"sizeInput\" min=\"5\" max=\"50\" value=\"20\" aria-label=\"Array size\">\n        <label for=\"sizeInput\">Array Size</label>\n    </div>\n    <button id=\"generateButton\">Generate Array</button>\n    <button id=\"sortButton\">Sort</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"resumeButton\">Resume</button>\n\n    <script>\n        const arrayContainer = document.getElementById('array');\n        const sizeInput = document.getElementById('sizeInput');\n        const generateButton = document.getElementById('generateButton');\n        const sortButton = document.getElementById('sortButton');\n        const pauseButton = document.getElementById('pauseButton');\n        const resumeButton = document.getElementById('resumeButton');\n\n        let array = [];\n        let animationId;\n        let isPaused = false;\n\n        function generateArray(size) {\n            array = [];\n            arrayContainer.innerHTML = '';\n            for (let i = 0; i < size; i++) {\n                const value = Math.floor(Math.random() * 100) + 1;\n                array.push(value);\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 2}px`; // Height for visibility\n                arrayContainer.appendChild(bar);\n            }\n        }\n\n        async function bubbleSort() {\n            const bars = document.querySelectorAll('.bar');\n            for (let i = 0; i < array.length - 1; i++) {\n                for (let j = 0; j < array.length - 1 - i; j++) {\n                    if (isPaused) await new Promise(resolve => {\n                        const checkPause = setInterval(() => {\n                            if (!isPaused) {\n                                clearInterval(checkPause);\n                                resolve();\n                            }\n                        }, 100);\n                    });\n                    \n                    // Highlight and swap logic\n                    bars[j].style.backgroundColor = 'red';\n                    bars[j + 1].style.backgroundColor = 'red';\n\n                    if (array[j] > array[j + 1]) {\n                        await swap(bars[j], bars[j + 1], j, j + 1);\n                    }\n\n                    bars[j].style.backgroundColor = 'steelblue';\n                    bars[j + 1].style.backgroundColor = 'steelblue';\n                }\n            }\n        }\n\n        async function swap(bar1, bar2, index1, index2) {\n            await new Promise(resolve => {\n                const tempHeight = bar1.style.height;\n                bar1.style.height = bar2.style.height;\n                bar2.style.height = tempHeight;\n\n                setTimeout(() => {\n                    // Update the array values to reflect the swap\n                    [array[index1], array[index2]] = [array[index2], array[index1]];\n                    resolve();\n                }, 300);\n            });\n        }\n\n        generateButton.onclick = () => generateArray(sizeInput.value);\n        sortButton.onclick = () => {\n            isPaused = false;\n            bubbleSort();\n        };\n        pauseButton.onclick = () => isPaused = true;\n        resumeButton.onclick = () => isPaused = false;\n\n        sizeInput.oninput = () => {\n            generateArray(sizeInput.value);\n        };\n    </script>\n</body>\n</html>\n```\n\n### Explanation of Code Implementation\n- **HTML Structure:** The page contains sections for title, instruction paragraphs, the visualization area for the array, and buttons for user interactions.\n- **CSS Styling:** Designed to be visually appealing and responsive, maintaining clear boundaries and spacing.\n- **JavaScript Logic:** Defines how the array is generated, the sorting algorithm visualized through animation, and how user interactions are handled (pause, resume, etc.).\n\nBy integrating these UI and functional elements, the module aims to provide a comprehensive, interactive educational experience for learning Bubble Sort."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Weighted Graph"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": null,
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "Interactive Application",
      "description": "Finite State Machine for Bubble Sort Visualization",
      "states": [
        {
          "name": "idle",
          "onEnter": "resetArray",
          "onExit": "",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "CHANGE_ARRAY_SIZE": "array_generated"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "",
          "onExit": "",
          "on": {
            "START_SORT": "sorting",
            "PAUSE": "paused"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startBubbleSort",
          "onExit": "",
          "on": {
            "PAUSE": "paused",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "paused",
          "onEnter": "",
          "onExit": "",
          "on": {
            "RESUME": "sorting",
            "STOP": "idle"
          }
        },
        {
          "name": "done",
          "onEnter": "displaySortedArray",
          "onExit": "resetState",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "CHANGE_ARRAY_SIZE": "array_generated"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "CHANGE_ARRAY_SIZE",
        "START_SORT",
        "PAUSE",
        "RESUME",
        "SORT_COMPLETE",
        "STOP"
      ],
      "notes": "The FSM captures the states of the application during the bubble sort visualization process, including idle, generating an array, sorting, paused, and completion states."
    }
  },
  {
    "id": "47074810-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:01:54.321Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Deque",
    "answer": {
      "role": "assistant",
      "content": "Here’s a detailed plan for an interactive HTML page designed to teach the bubble sort algorithm through exploration and hands-on interactivity.\n\n### Interactive HTML Page Design for \"Bubble Sort\"\n\n#### Concept Title:\n**\"Bubble Sort: Step-by-Step Visualization\"**\n\n#### Learning Objective:\nBy the end of this interactive module, users will understand how the bubble sort algorithm functions, including how it compares and swaps elements to sort an array in ascending order. Users will also gain insight into the concept of algorithm efficiency through a visual representation.\n\n#### Interaction Design:\n- **User Actions:**\n  - Users will generate a random array of numbers by clicking a \"Generate Array\" button.\n  - They can click a \"Start Sorting\" button to begin the bubble sort animation.\n  - An optional \"Pause\" button allows users to pause the animation at any stage.\n  - Users can adjust the speed of the sorting animation using a slider.\n  \n- **Visual Changes:**\n  - The array will be displayed as colored bars, where each bar's height represents the value of the array element.\n  - As the sorting animation progresses, the bars will swap positions with animations to highlight which elements are being compared and swapped.\n  - The current pair of elements being compared will be highlighted in a different color, providing visual feedback during the sort process.\n\n#### Layout Description:\n- The layout will be divided into three main sections:\n  - **Title and Learning Objective (Top Area):** \n    - Located at the top with a clear title and briefly stated learning objectives.\n  \n  - **Array Visualization (Middle Area):**\n    - A canvas where elements of the array will be rendered as colored bars.\n    - This section occupies the center of the viewport, allowing ample space for the bar visualization.\n    \n  - **Control Panel (Bottom Area):**\n    - A set of buttons for user interaction (\"Generate Array,\" \"Start Sorting,\" and \"Pause\") and a slider for speed adjustment.\n    - These controls will be vertically organized with at least **16 px** spacing between them for clarity and ease of use.\n\n- **Accessibility and Responsiveness:**\n  - The layout will respect **24 px** safe area margins on all sides to ensure content is not cramped.\n  - A responsive design will allow the module to adapt for different screen sizes (e.g., mobile, tablet, desktop).\n  - Text and controls will be large enough for easy interaction and comply with accessibility standards.\n\n### Implementation Code:\n\nHere is a self-contained example implementation using HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        h1 {\n            margin: 24px;\n        }\n        #array {\n            display: flex;\n            margin: 16px 0;\n            align-items: flex-end;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 4px;\n            background-color: #3498db;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        .highlight {\n            background-color: #e74c3c;\n        }\n        .btn, .slider {\n            margin: 8px;\n            padding: 10px 20px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort: Step-by-Step Visualization</h1>\n    <div id=\"array\"></div>\n    <div>\n        <button class=\"btn\" onclick=\"generateArray()\">Generate Array</button>\n        <button class=\"btn\" onclick=\"startSorting()\">Start Sorting</button>\n        <button class=\"btn\" onclick=\"pauseSorting()\">Pause</button>\n        <input type=\"range\" min=\"100\" max=\"1000\" value=\"500\" class=\"slider\" id=\"speedSlider\" onchange=\"updateSpeed(this.value)\">\n    </div>\n    <script>\n        let array = [];\n        let animationSpeed = 500;\n        let isSorting = false;\n        let pauseSort = false;\n\n        function generateArray() {\n            array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100));\n            renderArray();\n        }\n\n        function renderArray() {\n            const arrayDiv = document.getElementById('array');\n            arrayDiv.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 3}px`;\n                arrayDiv.appendChild(bar);\n            });\n        }\n\n        async function startSorting() {\n            isSorting = true;\n            pauseSort = false;\n            const bars = document.querySelectorAll('.bar');\n            for (let i = 0; i < array.length - 1; i++) {\n                for (let j = 0; j < array.length - 1 - i; j++) {\n                    if (pauseSort) break;\n                    bars[j].classList.add('highlight');\n                    bars[j + 1].classList.add('highlight');\n                    await new Promise(resolve => setTimeout(resolve, animationSpeed));\n                    \n                    if (array[j] > array[j + 1]) {\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                    }\n                    bars[j].classList.remove('highlight');\n                    bars[j + 1].classList.remove('highlight');\n                }\n                if (pauseSort) break;\n            }\n            isSorting = false;\n        }\n\n        function pauseSorting() {\n            pauseSort = !pauseSort;\n        }\n\n        function updateSpeed(newSpeed) {\n            animationSpeed = newSpeed;\n        }\n    </script>\n</body>\n</html>\n```\n\n### Key Points:\n1. **Clarity & Focus:** The layout promotes focus on the sorting mechanism, while the control panel is clearly separated from the visualization area.\n2. **Visual Feedback:** The use of bar heights and colors provides interactive visual feedback that is crucial for understanding how bubble sort operates.\n3. **Self-Contained:** The code is completely self-sufficient, relying only on built-in web technologies.\n\nUsers can explore the bubble sort algorithm interactively through this module, gaining a deeper understanding of its mechanism while engaging in a hands-on experience."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Deque"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the Bubble Sort visualization application, capturing the states and transitions during sorting.",
      "states": [
        {
          "name": "idle",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": null,
          "onExit": null,
          "on": {
            "PAUSE_SORTING": "paused",
            "SORTING_COMPLETE": "done"
          }
        },
        {
          "name": "paused",
          "onEnter": null,
          "onExit": null,
          "on": {
            "PAUSE_SORTING": "sorting",
            "RESUME_SORTING": "sorting"
          }
        },
        {
          "name": "done",
          "onEnter": null,
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORTING": "sorting"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORTING",
        "PAUSE_SORTING",
        "SORTING_COMPLETE",
        "RESUME_SORTING"
      ],
      "notes": "The state transitions are triggered by button clicks and user interactions. The sorting process can be paused and resumed, and the array can be regenerated at any time."
    }
  },
  {
    "id": "4b4d5630-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:01.491Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Heap (Min/Max)",
    "answer": {
      "role": "assistant",
      "content": "Creating an interactive module to teach the concept of bubble sort is an exciting challenge. Below is a complete guide for developing an HTML page that meets your requirements.\n\n### High-Quality Interactive Bubble Sort Module\n\n#### Concept Title\n**Understanding Bubble Sort**\n\n#### Learning Objective\nUsers will understand how the bubble sort algorithm works through an interactive demonstration that visually demonstrates how elements are compared and swapped until the entire list is sorted.\n\n#### Interaction Design\n1. **Interactivity**: Users can:\n   - Click a \"Start Sorting\" button to begin the animation of the bubble sort process.\n   - Adjust the array size using a slider to change the number of elements in the array.\n   - Use a \"Reset\" button to restart the visualization with a new random array.\n\n2. **Visual Feedback**: \n   - When the user clicks \"Start Sorting\", the elements will animate their movement (swapping when needed).\n   - As the sorting algorithm progresses, the current elements being compared will be highlighted in a different color.\n   - Once the sorting is complete, a \"Sorted!\" message will display.\n\n3. **Visual Updates**: The array display will change dynamically as elements are swapped, with smooth transitions to illustrate the sorting process.\n\n#### Layout Description\n- **Safe Area Margins**: 24px on all sides.\n- **Spacing**: Minimum of 16px between buttons and the array.\n- **Responsiveness**: The layout will adjust based on the viewport size, maintaining clarity and balance.\n- **Organized Structure**:\n    - **Top Section**: Title and Objective.\n    - **Middle Section**: Array visualization (bars representing numbers).\n    - **Bottom Section**: Controls (Start, Reset, Size Slider).\n\nHere's the complete code for the interactive module:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 24px;\n            background-color: #f8f9fa;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        #array-container {\n            margin: 16px 0;\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 300px;\n            width: 100%;\n            border: 2px solid #007bff;\n            position: relative;\n        }\n        .bar {\n            width: 40px;\n            margin: 0 2px;\n            background-color: #007bff;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        .highlight {\n            background-color: #ffcc00;\n        }\n        button {\n            margin: 8px;\n            padding: 10px 15px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n        #size-slider {\n            margin-top: 16px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Understanding Bubble Sort</h1>\n    <p>Explore how the Bubble Sort algorithm sorts an array of numbers.</p>\n\n    <div id=\"array-container\"></div>\n\n    <button id=\"startButton\">Start Sorting</button>\n    <button id=\"resetButton\">Reset</button>\n    <input id=\"size-slider\" type=\"range\" min=\"5\" max=\"20\" value=\"10\">\n\n    <script>\n        const arrayContainer = document.getElementById('array-container');\n        const startButton = document.getElementById('startButton');\n        const resetButton = document.getElementById('resetButton');\n        const sizeSlider = document.getElementById('size-slider');\n        let array = [];\n\n        // Function to generate a random array\n        const generateArray = (size) => {\n            array = Array.from({ length: size }, () => Math.floor(Math.random() * 100) + 1);\n            drawArray();\n        };\n\n        // Function to draw the array\n        const drawArray = () => {\n            arrayContainer.innerHTML = '';\n            array.forEach(num => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${num}px`;\n                arrayContainer.appendChild(bar);\n            });\n        };\n\n        // Bubble sort visualization\n        const bubbleSort = async () => {\n            for (let i = 0; i < array.length; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    const bars = document.querySelectorAll('.bar');\n                    bars[j].classList.add('highlight');\n                    bars[j + 1].classList.add('highlight');\n\n                    if (array[j] > array[j + 1]) {\n                        await new Promise(resolve => setTimeout(resolve, 300));\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    }\n\n                    await new Promise(resolve => setTimeout(resolve, 300));\n                    drawArray();\n                    bars[j].classList.remove('highlight');\n                    bars[j + 1].classList.remove('highlight');\n                }\n            }\n            alert(\"Sorted!\");\n        };\n\n        // Event listeners\n        startButton.addEventListener('click', bubbleSort);\n        resetButton.addEventListener('click', () => generateArray(sizeSlider.value));\n        sizeSlider.addEventListener('input', () => generateArray(sizeSlider.value));\n        \n        // Initial array generation\n        generateArray(sizeSlider.value);\n    </script>\n</body>\n</html>\n```\n\n### Instructions:\n1. **Copy and Paste**: Copy the above code into an empty `.html` file.\n2. **Open in a Browser**: Open that file in a web browser to view and interact with the bubble sort visualization.\n3. **Interactivity**: Adjust the slider to generate a different-sized array, click \"Start Sorting\" to visualize the sorting process, or click \"Reset\" to generate a new random array.\n\n### Summary\nThis interactive HTML page provides a clear, engaging way for users to learn about bubble sort through direct interaction and visual feedback, adhering to all requirements and ensuring a smooth learning experience."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Heap (Min/Max)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the Bubble Sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateInitialArray",
          "on": {
            "START_SORT": "sorting",
            "RESET": "idle",
            "CHANGE_SIZE": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startBubbleSort",
          "onExit": "clearHighlights",
          "on": {
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "showCompletionAlert",
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "START_SORT",
        "RESET",
        "CHANGE_SIZE",
        "SORT_COMPLETE"
      ],
      "notes": "The 'sorting' state involves highlighting elements and swapping them. The 'done' state signifies the completion of the sorting process."
    }
  },
  {
    "id": "4bc74120-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:02.290Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Graph (Directed/Undirected)",
    "answer": {
      "role": "assistant",
      "content": "Certainly! Below is a high-quality interactive HTML page designed to provide an in-depth, hands-on exploration of the bubble sort algorithm. This implementation meets your specified requirements, focuses solely on the bubble sort concept, and offers a clean and interactive user experience.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 24px;\n            background-color: #f0f4f8;\n        }\n        h1 {\n            text-align: center;\n        }\n        #content {\n            max-width: 800px;\n            margin: auto;\n            background: white;\n            padding: 24px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n        #array {\n            display: flex;\n            justify-content: space-around;\n            padding: 16px 0;\n        }\n        .bar {\n            width: 40px;\n            background-color: #3498db;\n            border-radius: 4px;\n            transition: height 0.5s ease;\n        }\n        button {\n            display: block;\n            margin: 16px auto;\n            padding: 8px 16px;\n            font-size: 16px;\n            border: none;\n            border-radius: 4px;\n            background-color: #2ecc71;\n            color: white;\n            cursor: pointer;\n        }\n        button:disabled {\n            background-color: #bdc3c7;\n            cursor: not-allowed;\n        }\n        footer {\n            text-align: center;\n            margin-top: 24px;\n            font-size: 14px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"content\">\n        <h1>Interactive Bubble Sort Visualization</h1>\n        <p id=\"learning-objective\">\n            Understand how the bubble sort algorithm works through hands-on interaction and visualization.\n        </p>\n        <div id=\"array-container\">\n            <div id=\"array\"></div>\n        </div>\n        <button id=\"shuffle\">Shuffle Array</button>\n        <button id=\"start-sort\" disabled>Start Bubble Sort</button>\n        <footer>\n            <p>&copy; 2023 Interactive Learning</p>\n        </footer>\n    </div>\n\n    <script>\n        const arrayContainer = document.getElementById('array');\n        const shuffleButton = document.getElementById('shuffle');\n        const startSortButton = document.getElementById('start-sort');\n        let array = [];\n\n        function generateArray() {\n            array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100) + 1);\n            renderArray();\n            startSortButton.disabled = false; \n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 2}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            startSortButton.disabled = true; \n            for (let i = 0; i < array.length - 1; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    if (array[j] > array[j + 1]) {\n                        await swap(j, j + 1);\n                    }\n                }\n            }\n            startSortButton.disabled = false; \n        }\n\n        async function swap(i, j) {\n            const bars = document.querySelectorAll('.bar');\n            bars[i].style.backgroundColor = '#e74c3c'; // Highlight the first bar\n            bars[j].style.backgroundColor = '#e74c3c'; // Highlight the second bar\n\n            // Wait for the animation to complete\n            await new Promise(resolve => setTimeout(resolve, 500));\n\n            // Swap the array values\n            [array[i], array[j]] = [array[j], array[i]];\n\n            // Update the visual representation\n            renderArray();\n\n            // Reset bar colors back to original\n            bars[i].style.backgroundColor = '#3498db';\n            bars[j].style.backgroundColor = '#3498db';\n        }\n\n        shuffleButton.addEventListener('click', generateArray);\n        startSortButton.addEventListener('click', bubbleSort);\n\n        // Initial array generation\n        generateArray();\n    </script>\n</body>\n</html>\n```\n\n### Explanation of the Design Plan:\n\n- **Concept Title:** \"Interactive Bubble Sort Visualization\"\n  \n- **Learning Objective:** Users will understand how the bubble sort algorithm works through hands-on interaction and visual feedback from sorting an array of numbers.\n\n- **Interaction Design:**\n  - **Shuffle Button:** Users click to generate a random array of numbers.\n  - **Start Sort Button:** Users click to start the bubble sort animation. When clicked, visual changes (bar colors changing) and animations (height changes) occur as the sorting algorithm executes.\n  - **Visual Feedback:** The height of each \"bar\" in the array visually represents the value of the number, and bars change color during swaps to reinforce the learning process.\n\n- **Layout Description:**\n  - **Margins and Spacing:** A safe area margin of 24px is applied on all sides. Minimum spacing of 16px is maintained between buttons and other elements.\n  - **Accessibility:** The buttons are clearly labeled and are disabled during sorting for clarity.\n  - **Responsiveness:** The layout is flexible, adapting to different screen sizes while ensuring that the content remains central.\n\nThis design provides a clear, educational, and interactive module for learning bubble sort concepts through user engagement."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Graph (Directed/Undirected)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the interactive bubble sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray",
          "onExit": null,
          "on": {
            "SHUFFLE_ARRAY": "array_generated"
          }
        },
        {
          "name": "array_generated",
          "onEnter": null,
          "onExit": null,
          "on": {
            "START_BUBBLE_SORT": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startSortButton.disabled = true",
          "onExit": "startSortButton.disabled = false",
          "on": {
            "SWAP": "swapping",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "swapping",
          "onEnter": "highlightBars",
          "onExit": "resetBarColors",
          "on": {
            "SWAP_COMPLETE": "sorting"
          }
        },
        {
          "name": "done",
          "onEnter": null,
          "onExit": null,
          "on": {
            "SHUFFLE_ARRAY": "array_generated"
          }
        }
      ],
      "events": [
        "SHUFFLE_ARRAY",
        "START_BUBBLE_SORT",
        "SWAP",
        "SWAP_COMPLETE",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the main states of the bubble sort visualization, including idle, array generation, sorting, swapping, and completion."
    }
  },
  {
    "id": "4bcff3b0-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:02.347Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Queue",
    "answer": {
      "role": "assistant",
      "content": "Here's a structured design plan for an interactive HTML page focused on the bubble sort algorithm. The page will be an educational module that visually demonstrates the bubble sort process and allows users to interact with the sorting mechanism.\n\n### Interactive Design Plan\n\n**Concept Title:**\nBubble Sort Visualization\n\n**Learning Objective:**\nUsers will understand how the bubble sort algorithm works through visualizations and hands-on interaction, specifically by observing how elements are compared and swapped until they are sorted.\n\n**Interaction Design:**\n- **User Interaction:** \n    - Users will control the sorting process using a \"Start Sort\" button, which, when clicked, triggers the bubble sort animation. \n    - Users can also reset the array to random values by clicking the \"Generate New Array\" button.\n    - The users can input the size of the array through a number input field to change the number of elements being sorted.\n\n- **Visual Feedback:**\n    - As the sorting occurs, each number will be represented by a colored bar (using div elements).\n    - Bars will change color (e.g., red for comparing, green for sorted, and blue for swapped) to indicate actions taken during the sorting process.\n    - Heights of the bars will visually represent the values in the array.\n    - Animation is used to show the swapping of bars in real-time.\n\n### Layout Description:\n- **Structure and Spacing:**\n    - The layout will maintain a safe area with 24 px margins on all sides of the page.\n    - There will be a clear vertical arrangement of elements: a title at the top, followed by controls, the visualization area, and then a description of bubble sort below. \n    - Minimum spacing of 16 px will be ensured between any two interactive elements.\n\n- **Responsive Design:**\n    - The visual bars will resize according to the viewport width, ensuring that they are always viewable without overflow.\n    - Buttons and input fields will be responsive, adjusting to different device sizes.\n\n### Implementation:\n\nBelow is the self-contained HTML, CSS, and JavaScript code for the bubble sort visualization module:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f0f0f0;\n            margin: 0;\n            padding: 24px;\n        }\n        h1 {\n            text-align: center;\n            margin-bottom: 24px;\n        }\n        #controls {\n            text-align: center;\n            margin-bottom: 24px;\n        }\n        .bar {\n            display: inline-block;\n            width: 20px;\n            margin: 0 4px;\n            background-color: teal;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        #bars {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 300px;\n            margin-bottom: 24px;\n        }\n        #description {\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n\n<div id=\"controls\">\n    <input type=\"number\" id=\"arraySize\" value=\"10\" min=\"2\" max=\"30\" />\n    <button id=\"generateBtn\">Generate New Array</button>\n    <button id=\"sortBtn\">Start Sort</button>\n</div>\n\n<div id=\"bars\"></div>\n<div id=\"description\">\n    <p>Watch how bubble sort works by clicking \"Start Sort\". The array will be sorted using the bubble sort algorithm.</p>\n</div>\n\n<script>\n    const barsContainer = document.getElementById('bars');\n    const sortBtn = document.getElementById('sortBtn');\n    const generateBtn = document.getElementById('generateBtn');\n    const arraySizeInput = document.getElementById('arraySize');\n    let array = [];\n\n    function generateArray() {\n        const size = parseInt(arraySizeInput.value, 10);\n        array = Array.from({ length: size }, () => Math.floor(Math.random() * 100) + 1);\n        renderBars();\n    }\n\n    function renderBars() {\n        barsContainer.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${value * 3}px`; // scale for visibility\n            barsContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        const bars = document.querySelectorAll('.bar');\n        const n = array.length;\n        for (let i = 0; i < n - 1; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                // Compare elements\n                bars[j].style.backgroundColor = 'red'; // Highlight current bar\n                bars[j + 1].style.backgroundColor = 'red'; // Highlight next bar\n\n                await new Promise(resolve => setTimeout(resolve, 300)); // Wait for 300ms\n\n                if (array[j] > array[j + 1]) {\n                    // Swap\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    renderBars();\n                }\n                // Reset the color after comparison\n                bars[j].style.backgroundColor = 'teal';\n                bars[j + 1].style.backgroundColor = 'teal'; \n            }\n            // Mark the last element of the pass as sorted\n            bars[n - i - 1].style.backgroundColor = 'green';\n        }\n        // Mark the first element as sorted\n        bars[0].style.backgroundColor = 'green';\n    }\n\n    generateBtn.addEventListener('click', generateArray);\n    sortBtn.addEventListener('click', bubbleSort);\n\n    // Generate an initial array\n    generateArray();\n</script>\n\n</body>\n</html>\n```\n\n### Summary:\nThis HTML page demonstrates the bubble sort algorithm interactively, allowing users to generate new arrays, visualize the sorting process with animations, and understand the concept through real-time feedback. With well-organized layout and clear interactions, the module adheres to the specified design plan while maintaining accessibility and responsiveness."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Queue"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the Bubble Sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray",
          "onExit": null,
          "on": {
            "GENERATE_NEW_ARRAY": "array_generated",
            "START_SORT": "sorting"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderBars",
          "onExit": null,
          "on": {
            "START_SORT": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": null,
          "onExit": null,
          "on": {
            "GENERATE_NEW_ARRAY": "array_generated",
            "START_SORT": "sorting"
          }
        }
      ],
      "events": [
        "GENERATE_NEW_ARRAY",
        "START_SORT",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of the application during the bubble sort visualization process, including generating a new array, sorting the array, and completing the sort."
    }
  },
  {
    "id": "4cf75cb0-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:04.283Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Stack",
    "answer": {
      "role": "assistant",
      "content": "Sure! Below is a detailed interactive HTML page designed to help users understand the bubble sort algorithm. The design includes all specified sections, focusing on user interaction, animations, and layout while ensuring accessibility and responsiveness.\n\n### Interactive Bubble Sort Module\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            color: #333;\n            margin: 0;\n            padding: 24px;\n        }\n        h1, h2 {\n            text-align: center;\n        }\n        .container {\n            max-width: 800px;\n            margin: auto;\n            padding: 24px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        #arrayContainer {\n            display: flex;\n            justify-content: center;\n            margin: 16px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 4px;\n            background-color: #4caf50;\n            transition: height 0.5s ease;\n        }\n        .bar.selected {\n            background-color: #ff9800;\n        }\n        .bar.sorted {\n            background-color: #2196f3;\n        }\n        button {\n            display: block;\n            width: 100%;\n            padding: 10px;\n            margin: 16px 0;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n        input[type=\"number\"] {\n            width: 50px;\n            margin: 0 8px;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"container\">\n    <h1>Interactive Bubble Sort</h1>\n    <h2>Sorting Visualization and Interaction</h2>\n    <div id=\"arrayContainer\"></div>\n    <button id=\"generateArray\">Generate Array</button>\n    <button id=\"startSort\">Start Sort</button>\n    <button id=\"reset\">Reset</button>\n    <div>\n        <label for=\"inputSize\">Set Array Size:</label>\n        <input type=\"number\" id=\"inputSize\" min=\"3\" max=\"20\" value=\"10\">\n    </div>\n</div>\n\n<script>\n    const arrayContainer = document.getElementById('arrayContainer');\n    const generateArrayButton = document.getElementById('generateArray');\n    const startSortButton = document.getElementById('startSort');\n    const resetButton = document.getElementById('reset');\n    const inputSize = document.getElementById('inputSize');\n\n    let array = [];\n\n    function generateArray() {\n        const size = Number(inputSize.value);\n        array = Array.from({ length: size }, () => Math.floor(Math.random() * 100) + 1);\n        renderArray();\n    }\n\n    function renderArray() {\n        arrayContainer.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.classList.add('bar');\n            bar.style.height = `${value * 3}px`;\n            bar.style.flexGrow = '1';\n            bar.dataset.value = value;\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        for (let i = 0; i < array.length; i++) {\n            for (let j = 0; j < array.length - 1 - i; j++) {\n                highlightBars(j, j + 1);\n                await new Promise(resolve => setTimeout(resolve, 500));\n                if (array[j] > array[j + 1]) {\n                    swap(j, j + 1);\n                    renderArray();\n                }\n                resetHighlight(j, j + 1);\n            }\n            document.querySelectorAll('.bar')[array.length - 1 - i].classList.add('sorted');\n        }\n    }\n\n    function highlightBars(index1, index2) {\n        const bars = document.querySelectorAll('.bar');\n        bars[index1].classList.add('selected');\n        bars[index2].classList.add('selected');\n    }\n\n    function resetHighlight(index1, index2) {\n        const bars = document.querySelectorAll('.bar');\n        bars[index1].classList.remove('selected');\n        bars[index2].classList.remove('selected');\n    }\n\n    function swap(i, j) {\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    generateArrayButton.addEventListener('click', generateArray);\n    startSortButton.addEventListener('click', () => {\n        bubbleSort();\n    });\n    resetButton.addEventListener('click', () => {\n        array = [];\n        renderArray();\n    });\n\n    window.onload = generateArray;\n</script>\n\n</body>\n</html>\n```\n\n### Module Breakdown\n\n#### Concept Title\n**Interactive Bubble Sort**\n\n#### Learning Objective\nUsers will understand the bubble sort algorithm through visual representation and hands-on interaction. By running the sorting process, they will see how elements are compared and swapped step-by-step.\n\n#### Interaction Design\n- Users can generate an array of random numbers by clicking the \"Generate Array\" button. The animation reflects the heights of the bars representing the numbers.\n- Users can initiate the bubble sort algorithm by clicking the \"Start Sort\" button. As the algorithm runs, the bars change color to indicate the selected elements during comparisons and swaps. The sorted bars will change to a new color at the end.\n- The \"Reset\" button allows users to clear the array and start fresh.\n- Users can input the desired size of the array (between 3 and 20) to customize their experience.\n\n#### Layout Description\n- A `container` is centralized in the viewport, presenting a clean and visually appealing organization of content.\n- The title and headers are centered to provide emphasis and clarity.\n- The `arrayContainer` uses flexbox for easy alignment of bars representing the elements of the array.\n- Each element (buttons, input) is spaced out with margins of at least 16 pixels to enhance the user interface naturally.\n- The page is responsive, as it adjusts to various screen sizes without losing functionality. Safe margins of 24 pixels on all sides accommodate different devices.\n\nThis interactive design engages users actively, promoting a thorough understanding of the bubble sort algorithm while allowing experimentation with different data sets."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Stack"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite State Machine for the Interactive Bubble Sort application, capturing states and transitions during sorting visualization.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateInitialArray",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORT": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray",
          "on": {
            "START_SORT": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startBubbleSort",
          "onExit": "clearSelection",
          "on": {
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "highlightSortedBars",
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORT",
        "RESET",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the main states of the bubble sort process, including generating the array, sorting it, and handling user interactions."
    }
  },
  {
    "id": "4e3ed0d0-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:06.429Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Hash Map",
    "answer": {
      "role": "assistant",
      "content": "Sure! Below is the design for a high-quality interactive HTML page that provides an in-depth, hands-on exploration of the bubble sort algorithm. \n\n### Interactive Bubble Sort Module\n\n#### Concept Title:\n**Understanding Bubble Sort: A Step-by-Step Visualization**\n\n#### Learning Objective:\nAfter interacting with this module, users should understand how the bubble sort algorithm works, observe how it compares and swaps items, and visually comprehend the steps involved in sorting an array.\n\n#### Interaction Design:\n1. **User Interaction:**\n   - **Generate Array Button:** Users can click a button to generate a random array of integers displayed in a horizontal line.\n   - **Start Sorting Button:** Users can click a button to start the bubble sort process. This will begin the sorting animation.\n   - **Speed Slider:** Users can adjust a slider to control the speed of the sorting animation.\n   - **Reset Button:** Users can reset the array to unsorted integers and the visualization.\n\n2. **Visual Changes:**\n   - The array elements will be displayed as colored blocks.\n   - As the sorting occurs, the blocks will change color to indicate the current comparison (e.g., swapping green for the selected blocks).\n   - The blocks move to their sorted position with a simple animation using CSS transitions.\n   - Users will see a visual step-by-step comparison and swap process.\n\n#### Layout Description:\n- **Viewport:** Designed with a minimum width of 600px to ensure an adequate display of the array.\n- **Safe Areas:** 24px margins on all sides.\n- **Sections:**\n    - **Header (24px margin on top):** A title with larger font size centered.\n    - **Interactive Controls (below header, 16px spacing):** \n        - Buttons (Generate Array, Start Sorting, Reset) arranged horizontally with 16px spacing between them.\n        - Speed Slider placed directly below the buttons, with labels to indicate speed values.\n  \n- **Visualization Area (occupies the remaining space):**\n    - A flex container for the array visualizations, displayed in a single row, allowing responsive resizing.\n    - Each block representing an element in the array should have a minimum width for clarity and should adjust dynamically based on the array size.\n  \n- **Footer (24px margin on bottom):** A small note about how bubble sort works.\n\n#### Example Implementation:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            margin: 24px;\n            font-family: Arial, sans-serif;\n        }\n        .header {\n            font-size: 24px;\n            margin-bottom: 16px;\n        }\n        .controls {\n            margin-bottom: 16px;\n        }\n        button {\n            padding: 8px 16px;\n            margin-right: 16px;\n            cursor: pointer;\n        }\n        #speed {\n            width: 200px;\n        }\n        .array-container {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            margin: 24px 0;\n        }\n        .block {\n            width: 40px;\n            margin: 0 4px;\n            background-color: blue;\n            transition: all 0.5s;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"header\">Understanding Bubble Sort: A Step-by-Step Visualization</div>\n    \n    <div class=\"controls\">\n        <button id=\"generate\">Generate Array</button>\n        <button id=\"start\">Start Sorting</button>\n        <button id=\"reset\">Reset</button>\n        <label for=\"speed\">Speed:</label>\n        <input type=\"range\" id=\"speed\" min=\"50\" max=\"1000\" value=\"500\">\n    </div>\n    \n    <div class=\"array-container\" id=\"array-container\"></div>\n    \n    <footer>\n        <p>Visualizing how the bubble sort algorithm works.</p>\n    </footer>\n\n    <script>\n        let array = [];\n        const container = document.getElementById('array-container');\n        const speedInput = document.getElementById('speed');\n\n        function generateArray() {\n            array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100));\n            renderArray();\n        }\n\n        function renderArray() {\n            container.innerHTML = '';\n            array.forEach(num => {\n                const block = document.createElement('div');\n                block.className = 'block';\n                block.style.height = `${num * 2}px`; // scale height for visibility\n                container.appendChild(block);\n            });\n        }\n\n        async function bubbleSort() {\n            const blocks = document.querySelectorAll('.block');\n            for (let i = 0; i < array.length; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    blocks[j].style.backgroundColor = 'red'; // highlight for comparison\n                    blocks[j + 1].style.backgroundColor = 'red'; // highlight for comparison\n                    \n                    await new Promise(resolve => setTimeout(resolve, speedInput.value));\n                    \n                    if (array[j] > array[j + 1]) {\n                        // Swap in array\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                    }\n                    blocks[j].style.backgroundColor = 'blue'; // revert color\n                    blocks[j + 1].style.backgroundColor = 'blue'; // revert color\n                }\n            }\n            alert(\"Sorting Complete!\");\n        }\n\n        document.getElementById('generate').addEventListener('click', generateArray);\n        document.getElementById('start').addEventListener('click', bubbleSort);\n        document.getElementById('reset').addEventListener('click', () => {\n            array = [];\n            renderArray();\n        });\n    </script>\n</body>\n</html>\n```\n\n### Explanation of Features:\n- **Interactivity** allows users to generate random arrays, start the sorting process, adjust the speed of the animation, and reset the experience, enhancing understanding through hands-on interaction.\n- **Animations** provide a visual representation of the bubble sort process, highlighting comparisons and swaps with colors.\n- The layout is designed to maintain clarity and focus, with clear separation of sections and appropriately spaced interactive elements, ensuring accessibility and responsiveness.\n\nFeel free to adjust the design and code as needed to suit any specific requirements or preferences!"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Hash Map"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine modeling the interactive states and transitions of a bubble sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "START_SORTING": "sorting",
            "RESET": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "alert('Sorting Complete!')",
          "onExit": null,
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORTING",
        "RESET",
        "SORT_COMPLETE"
      ],
      "notes": "The 'sorting' state handles the sorting process and transitions to 'done' upon completion. The 'array_generated' state is reached after generating a new array."
    }
  },
  {
    "id": "4ec0d210-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:07.281Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Weighted Graph",
    "answer": {
      "role": "assistant",
      "content": "Here is a high-quality interactive HTML page that provides an in-depth, hands-on exploration of bubble sort. This design incorporates various elements as per your request.\n\n### Interactive Module Design for Bubble Sort\n\n#### Concept Title:\n**Understanding Bubble Sort**\n\n---\n\n#### Learning Objective:\nUsers will understand how the bubble sort algorithm works by visualizing the process of sorting a list of numbers. They will be able to see each step of the algorithm in action, including comparisons and swaps, and will gain an appreciation for the time complexity associated with bubble sort.\n\n---\n\n#### Interaction Design:\n1. **User Interaction:**\n   - Users will click a \"Start Sorting\" button to initiate the bubble sort algorithm.\n   - Users can also change the input array by typing numbers into an input field and clicking an \"Update Array\" button.\n   - A \"Shuffle Array\" button will randomize the order of numbers in the array, allowing users to see different scenarios for the bubble sort.\n\n2. **Visual Feedback and Animations:**\n   - As sorting occurs, the bars representing array elements will animate in height to show comparisons and swaps.\n   - The current comparisons will be highlighted in different colors — green for comparisons made and red for swapped elements.\n\n3. **State Changes:**\n   - An element will change its height based on the value it represents — taller bars for larger numbers.\n   - The number of iterations and swaps will be displayed dynamically to offer feedback on efficiency.\n\n---\n\n#### Layout Description:\n- **Layout Organization:**\n  - The viewport contains a title centered at the top.\n  - Below the title, there will be the input area consisting of an input box for numbers and two buttons (\"Update Array\" and \"Shuffle Array\") laid out horizontally.\n  - The sorting visualization area is below this input section, featuring visual height bars that represent numbers from the array.\n  - Finally, there’s a \"Start Sorting\" button under the visualization area and an area to display the number of iterations and swaps at the bottom.\n\n- **Margins and Spacing:**\n  - Safe area margins of 24px will be observed on all sides.\n  - Minimum spacing of 16px will be kept between any two interactive elements.\n\n- **Accessibility and Responsiveness:**\n  - The layout will be responsive to screen size, adjusting the width of input and button sections accordingly.\n  - Text will have sufficient contrast, and buttons will be keyboard accessible.\n\n---\n\n### Complete HTML Code\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            background-color: #f4f4f4;\n            padding: 24px;\n        }\n        \n        h1 {\n            margin-bottom: 24px;\n        }\n\n        #input-area {\n            margin-bottom: 16px;\n        }\n\n        input[type='text'] {\n            padding: 10px;\n            font-size: 16px;\n            margin-right: 16px;\n        }\n\n        button {\n            padding: 10px 16px;\n            font-size: 16px;\n            cursor: pointer;\n            margin-right: 16px;\n            transition: background-color 0.3s ease;\n        }\n\n        button:hover {\n            background-color: #ddd;\n        }\n\n        #visualization {\n            display: flex;\n            align-items: flex-end;\n            justify-content: space-between;\n            width: 100%;\n            max-width: 600px;\n            height: 300px;\n            margin-bottom: 16px;\n        }\n\n        .bar {\n            width: 10%;\n            background-color: #3498db;\n            transition: height 0.3s ease;\n        }\n\n        #stats {\n            margin-top: 16px;\n            font-size: 18px;\n        }\n    </style>\n</head>\n\n<body>\n    <h1>Understanding Bubble Sort</h1>\n    <div id=\"input-area\">\n        <input type=\"text\" id=\"arrayInput\" placeholder=\"Enter numbers separated by commas\">\n        <button id=\"updateArray\">Update Array</button>\n        <button id=\"shuffleArray\">Shuffle Array</button>\n    </div>\n    <div id=\"visualization\"></div>\n    <button id=\"startSorting\">Start Sorting</button>\n    <div id=\"stats\"></div>\n\n    <script>\n        let array = [];\n        const visualization = document.getElementById('visualization');\n        const stats = document.getElementById('stats');\n\n        document.getElementById('updateArray').addEventListener('click', updateArray);\n        document.getElementById('shuffleArray').addEventListener('click', shuffleArray);\n        document.getElementById('startSorting').addEventListener('click', startSorting);\n\n        function updateArray() {\n            const input = document.getElementById('arrayInput').value;\n            array = input.split(',').map(num => parseInt(num.trim())).filter(num => !isNaN(num));\n            renderArray();\n        }\n\n        function shuffleArray() {\n            array.sort(() => Math.random() - 0.5);\n            renderArray();\n        }\n\n        function renderArray() {\n            visualization.innerHTML = '';\n            array.forEach(num => {\n                const bar = document.createElement('div');\n                bar.classList.add('bar');\n                bar.style.height = `${num * 3}px`; // Scale for better visibility\n                visualization.appendChild(bar);\n            });\n        }\n\n        async function startSorting() {\n            let n = array.length;\n            let iterationCount = 0;\n            let swapCount = 0;\n\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    highlightBars(j, j + 1);\n                    if (array[j] > array[j + 1]) {\n                        swap(array, j, j + 1);\n                        swapCount++;\n                        renderArray();\n                    }\n                    iterationCount++;\n                    await sleep(300);\n                }\n            }\n            stats.innerHTML = `Iterations: ${iterationCount}, Swaps: ${swapCount}`;\n        }\n\n        function highlightBars(index1, index2) {\n            const bars = document.querySelectorAll('.bar');\n            bars[index1].style.backgroundColor = 'green';\n            if(index2 < bars.length) {\n                bars[index2].style.backgroundColor = 'red';\n            }\n            setTimeout(() => {\n                bars[index1].style.backgroundColor = '#3498db';\n                if(index2 < bars.length) {\n                    bars[index2].style.backgroundColor = '#3498db';\n                }\n            }, 300);\n        }\n\n        function swap(arr, indexA, indexB) {\n            [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];           \n        }\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n    </script>\n</body>\n\n</html>\n```\n\n### Summary\nThis interactive HTML page allows users to enter their own numerical arrays, visualize the bubble sort algorithm in action, and understand its mechanics through real-time animations. The layout is user-friendly, ensuring clear separation of elements while remaining responsive and accessible. The self-contained nature of the implementation, using only vanilla HTML, CSS, and JavaScript, meets the project requirements effectively."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Weighted Graph"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the Bubble Sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "UPDATE_ARRAY": "array_updated",
            "SHUFFLE_ARRAY": "array_shuffled",
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "array_updated",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "UPDATE_ARRAY": "array_updated",
            "SHUFFLE_ARRAY": "array_shuffled",
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "array_shuffled",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "UPDATE_ARRAY": "array_updated",
            "SHUFFLE_ARRAY": "array_shuffled",
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startSorting",
          "onExit": null,
          "on": {
            "SORTING_COMPLETE": "idle"
          }
        }
      ],
      "events": [
        "UPDATE_ARRAY",
        "SHUFFLE_ARRAY",
        "START_SORTING",
        "SORTING_COMPLETE"
      ],
      "notes": "The 'sorting' state transitions to 'idle' after sorting is complete. The 'highlightBars' function provides visual feedback during sorting."
    }
  },
  {
    "id": "4f0d9280-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:07.784Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Array",
    "answer": {
      "role": "assistant",
      "content": "Certainly! Below is the design specification for an interactive HTML page that teaches the concept of Bubble Sort. This example will allow users to visualize the sorting process dynamically.\n\n### High-Quality Interactive HTML Page: Bubble Sort\n\n#### Concept Title:\n**Bubble Sort Visualization**\n\n#### Learning Objective:\nUsers will understand how the Bubble Sort algorithm works by observing the process of repeatedly stepping through a list, comparing adjacent elements, and swapping them if they are in the wrong order. At the end of this interaction, users should be able to describe the steps taken by the algorithm and recognize how it reaches a sorted state.\n\n#### Interaction Design:\n1. **Initial Setup**: The page starts with an unsorted array of bars (representing numerical values). Each bar's height represents its value.\n2. **Start Sorting Button**: Users can click on a “Start Sorting” button, triggering an animation sequence that demonstrates the Bubble Sort algorithm in action.\n3. **Pause/Reset System**: Users can pause the sorting at any time to examine steps, or reset the array to try different configurations.\n4. **Visual Feedback**: As the sort progresses:\n   - The currently compared elements will change color to indicate they are active.\n   - After a swap, the bars will animate to their new positions, highlighting the change visually.\n   - A counter will show the number of passes completed.\n5. **Interactivity**: There is an option to input a new unsorted array of numbers (e.g., `5, 3, 8, 1, 2`), and the page will reconfigure the visualization accordingly.\n\n#### Layout Description:\n- **Safe Area Margins**: 24 px on all sides will ensure that content doesn’t feel cramped.\n- **Header**: Title “Bubble Sort Visualization” centered at the top with a medium font size.\n- **Array Visualization**: Centered in the viewport, the unsorted array will be displayed as colorful vertical bars. Each bar has a width of 40px and height based on numerical values, separated by 16px margins.\n- **Control Buttons**: Directly below the array, there will be three buttons labeled “Start Sorting,” “Pause,” and “Reset” spaced with a 16px margin.\n- **Input Field**: Above the buttons, an input field allows users to enter a custom unsorted array (comma-separated).\n- **Counter Display**: To the right of the buttons, a counter shows \"Passes: 0\" which updates as the sort progresses.\n\n### Complete Implementation:\nHere’s a self-contained HTML, CSS, and JavaScript code snippet based on the above description:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            margin: 0;\n            padding: 24px;\n            font-family: Arial, sans-serif;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            margin-bottom: 24px;\n            color: #333;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 16px;\n        }\n        .bar {\n            width: 40px;\n            margin: 0 8px;\n            background-color: #3498db;\n            transition: height 0.5s ease, background-color 0.3s ease;\n        }\n        button {\n            margin: 0 8px;\n            padding: 10px 16px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n        input {\n            padding: 8px;\n            margin-bottom: 16px;\n            width: 200px;\n            font-size: 16px;\n        }\n        #counter {\n            margin-top: 16px;\n            font-size: 18px;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Bubble Sort Visualization</h1>\n    <input type=\"text\" id=\"arrayInput\" placeholder=\"Enter numbers (e.g., 5,3,8,1,2)\">\n    <div id=\"array\"></div>\n    \n    <button id=\"startButton\">Start Sorting</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"resetButton\">Reset</button>\n    \n    <div id=\"counter\">Passes: 0</div>\n\n    <script>\n        const arrayContainer = document.getElementById('array');\n        const startButton = document.getElementById('startButton');\n        const pauseButton = document.getElementById('pauseButton');\n        const resetButton = document.getElementById('resetButton');\n        const counterDisplay = document.getElementById('counter');\n        let array = [];\n        let passes = 0;\n        let interval;\n        let paused = false;\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 10}px`; // height mapped to value\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        function bubbleSort() {\n            let n = array.length;\n            let swapped;\n            passes = 0;\n\n            function sortStep() {\n                if (n <= 0) {\n                    clearInterval(interval);\n                    return;\n                }\n                swapped = false;\n                for (let i = 0; i < n - 1; i++) {\n                    if (array[i] > array[i + 1]) {\n                        // Swap elements\n                        [array[i], array[i + 1]] = [array[i + 1], array[i]];\n                        swapped = true;\n                        renderArray();\n                    }\n                }\n                passes++;\n                counterDisplay.innerText = `Passes: ${passes}`;\n                if (!swapped) {\n                    clearInterval(interval);\n                }\n                n--;\n            }\n\n            interval = setInterval(sortStep, 1000);\n        }\n\n        startButton.addEventListener('click', () => {\n            array = document.getElementById('arrayInput').value.split(',').map(Number);\n            renderArray();\n            if (interval) clearInterval(interval);\n            bubbleSort();\n        });\n\n        pauseButton.addEventListener('click', () => {\n            paused = !paused;\n            paused ? clearInterval(interval) : bubbleSort();\n        });\n\n        resetButton.addEventListener('click', () => {\n            if (interval) clearInterval(interval);\n            array = [];\n            counterDisplay.innerText = `Passes: 0`;\n            arrayContainer.innerHTML = '';\n            document.getElementById('arrayInput').value = '';\n        });\n    </script>\n</body>\n</html>\n```\n\n### Explanation of the Implementation:\n\n- **HTML Structure**: \n  - A header (`h1`) introduces the topic.\n  - An input field for users to enter their custom array.\n  - A div to show the visual representation of the array.\n  - Buttons for starting the sort, pausing, and resetting the interaction.\n  - A counter to visualize progress.\n\n- **Styling**: \n  - Simple CSS for layout and visual appeal.\n  - Animation effects applied to bars during sorting for clarity and engagement.\n\n- **JavaScript Logic**:\n  - A bubble sort function that updates the display based on user input.\n  - Use of intervals for a timed visual representation of the sorting process.\n  - Interactive buttons to allow user control, ensuring engagement with the content.\n\nThis implementation fulfills all outlined requirements and provides a thorough introduction to the Bubble Sort algorithm through an interactive and engaging learning experience."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Array"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for a bubble sort visualization application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "renderArray",
          "onExit": null,
          "on": {
            "START_BUTTON_CLICK": "sorting",
            "RESET_BUTTON_CLICK": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": "clearInterval",
          "on": {
            "PAUSE_BUTTON_CLICK": "paused",
            "RESET_BUTTON_CLICK": "idle"
          }
        },
        {
          "name": "paused",
          "onEnter": null,
          "onExit": null,
          "on": {
            "PAUSE_BUTTON_CLICK": "sorting",
            "RESET_BUTTON_CLICK": "idle"
          }
        }
      ],
      "events": [
        "START_BUTTON_CLICK",
        "PAUSE_BUTTON_CLICK",
        "RESET_BUTTON_CLICK"
      ],
      "notes": "The 'sorting' state handles the bubble sort algorithm and updates the display. The 'paused' state allows the user to resume sorting or reset the application."
    }
  },
  {
    "id": "4f4b5ed0-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:08.189Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Search Tree (BST)",
    "answer": {
      "role": "assistant",
      "content": "Here's a high-quality interactive HTML page design plan that focuses solely on the concept of the **Bubble Sort** algorithm.\n\n### Interactive Module Design for Bubble Sort\n\n#### **1. Concept Title:**\n**Understanding Bubble Sort**\n\n#### **2. Learning Objective:**\nUsers will learn how the Bubble Sort algorithm works by visually sorting a list of numbers, gaining a better understanding of the algorithm's inner workings through interactive animations and real-time feedback.\n\n#### **3. Interaction Design:**\n- **Initial State:** Upon loading the page, a randomized array of numbers (e.g., 10 to 20 integers ranging from 1 to 100) will be displayed in a horizontal bar chart format.\n- **User Interaction:** \n    - Users can click a \"Sort\" button to start the Bubble Sort process.\n    - While sorting, the bars will animate, showing the comparison and swapping of elements.\n    - Users can also click a \"Reset\" button to randomize the numbers again.\n- **Visual Feedback:** \n    - Each time two elements are compared, their corresponding bars will change color (e.g., blue for comparison, red for swap).\n    - At the end of sorting, all bars will turn green to indicate completion.\n\n#### **4. Layout Description:**\n- **Structure:** \n    - The page will be divided into two main sections:\n        - **Top Section:** Contains the title and learning objectives.\n        - **Bottom Section:** Visual representation of the data (bars) and buttons.\n- **Safe area margins:** A 24 px margin on all sides.\n- **Spacing:** Minimum of 16 px between interactive elements (like buttons).\n- **Responsive Design:** The bar chart will resize based on the viewport, ensuring clarity and focus. Text and buttons will be centrally aligned for balance.\n\n---\n\n### HTML Code Implementation\n\nHere’s how to implement this design plan using vanilla HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            margin: 0;\n            padding: 24px;\n            background-color: #f0f0f0;\n        }\n\n        #title {\n            font-size: 24px;\n            margin-bottom: 16px;\n        }\n\n        #objective {\n            font-size: 18px;\n            margin-bottom: 32px;\n        }\n\n        #bar-container {\n            display: flex;\n            align-items: flex-end;\n            justify-content: center;\n            margin-bottom: 32px;\n            width: 100%;\n            height: 300px;\n        }\n\n        .bar {\n            width: 20px;\n            margin: 0 4px;\n            background-color: #3498db;\n            transition: height 0.3s, background-color 0.3s;\n        }\n\n        button {\n            padding: 10px 20px;\n            font-size: 16px;\n            margin: 0 8px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #2980b9;\n            color: white;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"title\">Understanding Bubble Sort</div>\n    <div id=\"objective\">Visualize how Bubble Sort works through real-time animations.</div>\n    <div id=\"bar-container\"></div>\n    <button id=\"sortButton\">Sort</button>\n    <button id=\"resetButton\">Reset</button>\n\n    <script>\n        const barContainer = document.getElementById('bar-container');\n        const sortButton = document.getElementById('sortButton');\n        const resetButton = document.getElementById('resetButton');\n        let bars = [];\n\n        function generateRandomArray(size) {\n            return Array.from({ length: size }, () => Math.floor(Math.random() * 100) + 1);\n        }\n\n        function createBars(array) {\n            barContainer.innerHTML = ''; // Clear previous bars\n            bars = array;\n            bars.forEach(value => {\n                const bar = document.createElement('div');\n                bar.classList.add('bar');\n                bar.style.height = `${value * 3}px`; // Scale height\n                barContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            const len = bars.length;\n            for (let i = 0; i < len - 1; i++) {\n                for (let j = 0; j < len - i - 1; j++) {\n                    const barsElements = document.querySelectorAll('.bar');\n                    barsElements[j].style.backgroundColor = 'blue'; // Comparison color\n                    barsElements[j + 1].style.backgroundColor = 'blue';\n\n                    await new Promise(resolve => setTimeout(resolve, 300)); // Delay for visualization\n\n                    if (bars[j] > bars[j + 1]) {\n                        // Swap\n                        [bars[j], bars[j + 1]] = [bars[j + 1], bars[j]];\n                        barsElements[j].style.height = `${bars[j] * 3}px`;\n                        barsElements[j + 1].style.height = `${bars[j + 1] * 3}px`;\n                        barsElements[j].style.backgroundColor = 'red'; // Swapped color\n                        barsElements[j + 1].style.backgroundColor = 'red';\n\n                        await new Promise(resolve => setTimeout(resolve, 300)); // Delay for visualization\n                    }\n\n                    barsElements[j].style.backgroundColor = ''; // Reset color\n                    barsElements[j + 1].style.backgroundColor = '';\n                }\n                barsElements[len - 1 - i].style.backgroundColor = 'green'; // Sorted position\n            }\n            // Finalize colors\n            bars.forEach((_, index) => {\n                barsElements[index].style.backgroundColor = 'green';\n            });\n        }\n\n        resetButton.addEventListener('click', () => {\n            const randomArray = generateRandomArray(10);\n            createBars(randomArray);\n        });\n\n        sortButton.addEventListener('click', () => {\n            bubbleSort();\n        });\n\n        // Initialize with a random array\n        resetButton.click(); \n    </script>\n</body>\n</html>\n```\n\n### Explanation of the Code:\n\n- The HTML structure contains divs for title, objectives, bar container, and buttons.\n- CSS styles ensure the layout is responsive and visually consistent, with appropriate margins and colors.\n- JavaScript functions handle the generation of random numbers, the creation of bar elements, and the animated sorting process using the Bubble Sort algorithm.\n- The buttons allow users to trigger sorting or reset the visualization.\n\nBy following this plan and code, users will get a thorough, interactive experience that enhances their understanding of the Bubble Sort algorithm."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Binary Search Tree (BST)"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for visualizing the bubble sort algorithm through interactive animations.",
      "states": [
        {
          "name": "idle",
          "onEnter": "initializeBars",
          "onExit": "",
          "on": {
            "RESET_BUTTON_CLICK": "bars_created",
            "SORT_BUTTON_CLICK": "sorting"
          }
        },
        {
          "name": "bars_created",
          "onEnter": "createBars",
          "onExit": "",
          "on": {
            "SORT_BUTTON_CLICK": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startBubbleSort",
          "onExit": "",
          "on": {
            "SORT_COMPLETE": "sorted"
          }
        },
        {
          "name": "sorted",
          "onEnter": "finalizeColors",
          "onExit": "",
          "on": {
            "RESET_BUTTON_CLICK": "bars_created",
            "SORT_BUTTON_CLICK": "sorting"
          }
        }
      ],
      "events": [
        "RESET_BUTTON_CLICK",
        "SORT_BUTTON_CLICK",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of the bubble sort visualization, including idle state, bar creation, sorting process, and completion of sorting."
    }
  },
  {
    "id": "500734c0-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:09.420Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Hash Table",
    "answer": {
      "role": "assistant",
      "content": "Creating an interactive HTML page for the Bubble Sort algorithm involves designing a user-friendly and engaging interface that explains the concept clearly. Below is a detailed design plan that covers all aspects of the module, demonstrating how the bubble sort algorithm works with interactive animations.\n\n---\n\n### Interactive Bubble Sort Module\n\n**Concept Title:** Understanding Bubble Sort Algorithm\n\n**Learning Objective:** After interacting with this module, users should be able to visualize how the bubble sort algorithm works through animations and understand the comparison and swapping process between adjacent elements in an array.\n\n---\n\n### Interaction Design\n\n1. **Interactive Elements:**\n   - **Visual Array:** Users will see a horizontal bar graph representing an array of numbers. Each bar's height corresponds to the number's value.\n   - **Start Button:** A \"Start Sort\" button will initiate the bubble sort process.\n   - **Reset Button:** A \"Reset Array\" button will allow users to generate a new random array of numbers.\n   - **Speed Slider:** A slider to adjust the sorting animation speed.\n   \n2. **User Interactions:**\n   - Clicking the **\"Start Sort\"** button will trigger the bubble sort algorithm and display the sorting process with visual feedback.\n   - Clicking the **\"Reset Array\"** button will shuffle the array and redraw the bars.\n   - Adjusting the **Speed Slider** modifies the delay between each animation step.\n   \n3. **Visual Feedback:**\n   - As the sorting progresses, bars will change colors during comparisons (e.g., blue when comparing and green when swapped).\n   - The bars will animate smoothly to reflect their new heights after each swap.\n   - A counter at the top will display the current step of the algorithm.\n\n---\n\n### Layout Description\n\n- The overall layout will be responsive and structured with a clean interface:\n  \n  - **Viewport:** Establish a 100% width and height container ensuring safe area margins of **24 px** around the viewport.\n  \n  - **Header Section (Top):**\n    - Title: \"Understanding Bubble Sort Algorithm\" centered at the top.\n    - Step Counter: Right below the title, left-aligned to provide feedback on sorting progress.\n  \n  - **Main Visualization Area:**\n    - Full-width area (with 24px margins) displaying the bars representing the array.\n    - Bars will have a minimum width of **40 px** and a maximum of **100 px**, ensuring visibility.\n    \n  - **Control Panel (Bottom):**\n    - A horizontal flexbox containing:\n      - **Start Sort Button:** 16 px spacing from the left edge.\n      - **Reset Array Button:** 16 px spacing from the Start button.\n      - **Speed Slider:** 16 px spacing from the Reset button, with a label \"Speed\".\n\n### Accessibility and Responsiveness\n- The buttons will have accessible labels and be easily clickable.\n- The module will resize according to screen width while maintaining element spacing (using percentages).\n- The color contrast will meet accessibility standards.\n\n---\n\n### Complete Interactive HTML Page Code\n\nHere’s the self-contained implementation using only vanilla HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 0;\n            padding: 24px;\n            font-family: Arial, sans-serif;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            text-align: center;\n        }\n        #array-container {\n            display: flex;\n            align-items: flex-end;\n            margin: 16px 0;\n            width: 100%;\n            max-width: 800px;\n        }\n        .bar {\n            width: 40px;\n            margin: 0 4px;\n            background-color: #3498db;\n            transition: height 0.5s ease;\n        }\n        .comparing {\n            background-color: #e67e22;\n        }\n        .swapped {\n            background-color: #2ecc71;\n        }\n        .control-panel {\n            display: flex;\n            justify-content: center;\n            gap: 16px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Understanding Bubble Sort Algorithm</h1>\n    <div id=\"step-counter\">Step: 0</div>\n    <div id=\"array-container\"></div>\n    <div class=\"control-panel\">\n        <button id=\"start-button\">Start Sort</button>\n        <button id=\"reset-button\">Reset Array</button>\n        <label for=\"speed-slider\">Speed:</label>\n        <input type=\"range\" id=\"speed-slider\" min=\"10\" max=\"1000\" value=\"500\">\n    </div>\n\n    <script>\n        const arrayContainer = document.getElementById('array-container');\n        const stepCounter = document.getElementById('step-counter');\n        const startButton = document.getElementById('start-button');\n        const resetButton = document.getElementById('reset-button');\n        const speedSlider = document.getElementById('speed-slider');\n        let array = [];\n        let timer;\n        \n        function generateRandomArray(size = 10) {\n            array = Array.from({ length: size }, () => Math.floor(Math.random() * 100) + 1);\n            drawBars();\n        }\n\n        function drawBars() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 3}px`; // Scale for visibility\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            let n = array.length;\n            let step = 0;\n\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    step++;\n                    stepCounter.innerText = `Step: ${step}`;\n                    const bars = document.querySelectorAll('.bar');\n\n                    bars[j].classList.add('comparing'); // Mark current bar for comparison\n                    bars[j + 1].classList.add('comparing');\n\n                    await new Promise(resolve => setTimeout(resolve, parseInt(speedSlider.value)));\n\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        bars[j].classList.add('swapped');  // Indicate a swap\n                        bars[j + 1].classList.add('swapped');\n                    }\n\n                    drawBars();\n                    bars[j].classList.remove('comparing', 'swapped');\n                    bars[j + 1].classList.remove('comparing', 'swapped');\n                }\n            }\n        }\n\n        startButton.addEventListener('click', bubbleSort);\n        resetButton.addEventListener('click', generateRandomArray);\n        \n        generateRandomArray(); // Initial array generation\n    </script>\n</body>\n</html>\n```\n\n---\n\n### Code Explanation\n\n1. **HTML Structure:**\n   - Contains a header for the title and a counter, a container for bars, and control elements for interaction.\n\n2. **CSS:**\n   - Styles for layout, colors, and transitions ensuring visibility and responsive design.\n\n3. **JavaScript:**\n   - Functions to create a random array, animate the bubble sort process, and handle user interactions.\n\nThis interactive module serves as an effective educational tool for understanding the bubble sort algorithm through visual representation and feedback. Users can engage directly with the concept, reinforcing their understanding through active participation."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Hash Table"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for visualizing the bubble sort algorithm.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateRandomArray",
          "onExit": null,
          "on": {
            "START_SORT": "sorting",
            "RESET_ARRAY": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": null,
          "onExit": null,
          "on": {
            "RESET_ARRAY": "idle"
          }
        }
      ],
      "events": [
        "START_SORT",
        "RESET_ARRAY",
        "SORT_COMPLETE"
      ],
      "notes": "The 'sorting' state transitions to 'done' when the sorting process is complete. The 'idle' state allows for resetting the array or starting the sort."
    }
  },
  {
    "id": "5018c0f0-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:09.535Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Binary Tree",
    "answer": {
      "role": "assistant",
      "content": "Here's a detailed interactive HTML page design focused on the bubble sort algorithm:\n\n### Interactive HTML Module on Bubble Sort\n\n---\n\n#### **Concept Title:**\n**\"Big Bubbles Rise: Understanding Bubble Sort\"**\n\n#### **Learning Objective:**\nUsers will learn how the bubble sort algorithm works by visually stepping through the sorting process. They will grasp the concept of comparing and swapping numbers in an array until it is fully sorted.\n\n#### **Interaction Design:**\n\n1. **User Interaction:**\n   - **Start Sorting** - A \"Sort\" button that initiates the bubble sort animation.\n   - **Array Generation** - A \"Generate Random Array\" button creates a new random array of numbers for sorting.\n   - **Step-Through Option** - A checkbox that allows users to run the sort step-by-step or in auto-play mode.\n   - **Control Speed** - A slider to control the speed of the sorting animation.\n\n2. **Animation and Visual Feedback:**\n   - As the sorting proceeds, each element being compared will change color (e.g., from gray to red) to signify selection and swapping (the colors will transition smoothly).\n   - After a swap occurs, elements will move (animate) to their new position, providing a visual representation of the sorting process.\n   - A counter indicates the number of iterations completed.\n\n#### **Layout Description:**\n- The interface will have a clear, structured layout maintaining a safe area of 24px on all sides.\n- The top third of the page will feature the **Concept Title** and **Learning Objective** centered and bold for clear visibility.\n- Below, the array will be visually represented using colored divs (bars) that reflect the size of each number visually on a horizontal axis.\n- Controls (buttons and slider) will be organized in a row beneath the array, with a minimum of 16px spacing between each element for clarity and accessibility.\n- The bottom of the viewport will contain explanations or additional context in a sidebar that only shows on hover, maintaining focus on the visualization.\n\n### HTML Code Implementation:\n\nHere is the self-contained implementation of the interactive bubble sort module.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 24px;\n            background-color: #f4f4f9;\n            color: #333;\n        }\n        h1, h2 {\n            text-align: center;\n        }\n        #arrayContainer {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            margin: 24px 0;\n            height: 300px;\n            border: 1px solid #ccc;\n            position: relative;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 8px;\n            background-color: #4CAF50;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        .active {\n            background-color: #ff5722; /* Color for active comparison */\n        }\n        .swapped {\n            background-color: #2196F3; /* Color when swapped */\n        }\n        .controls {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 16px;\n        }\n        button, input[type='range'] {\n            margin: 0 8px;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button {\n            background-color: #6200ea;\n            color: white;\n        }\n        button:hover {\n            background-color: #3700b3;\n        }\n        input[type='range'] {\n            width: 200px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Big Bubbles Rise: Understanding Bubble Sort</h1>\n    <h2>Visualize the bubble sort algorithm in action!</h2>\n    \n    <div id=\"arrayContainer\"></div>\n    \n    <div class=\"controls\">\n        <button id=\"generateArray\">Generate Random Array</button>\n        <button id=\"startSort\">Sort</button>\n        <label for=\"speedControl\">Speed:</label>\n        <input type=\"range\" id=\"speedControl\" min=\"100\" max=\"2000\" step=\"100\" value=\"500\">\n        <label>\n            <input type=\"checkbox\" id=\"stepThrough\"> Step Through\n        </label>\n    </div>\n\n    <script>\n        const arrayContainer = document.getElementById('arrayContainer');\n        const generateButton = document.getElementById('generateArray');\n        const sortButton = document.getElementById('startSort');\n        const speedControl = document.getElementById('speedControl');\n        const stepThrough = document.getElementById('stepThrough');\n\n        let array = [];\n        const arraySize = 15;\n\n        function generateArray() {\n            array = Array.from({ length: arraySize }, () => Math.floor(Math.random() * 100) + 1);\n            renderArray();\n        }\n\n        function renderArray() {\n            arrayContainer.innerHTML = ''; \n            array.forEach(num => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${num * 3}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            const bars = document.querySelectorAll('.bar');\n            const speed = parseInt(speedControl.value);\n            let isSorted;\n            for (let i = 0; i < array.length - 1; i++) {\n                isSorted = true;\n                for (let j = 0; j < array.length - 1 - i; j++) {\n                    bars[j].classList.add('active');\n                    bars[j + 1].classList.add('active');\n                    await sleep(speed);\n\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        isSorted = false;\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                        bars[j].classList.add('swapped');\n                        bars[j + 1].classList.add('swapped');\n                        await sleep(speed);\n                    }\n\n                    // Reset classes\n                    bars[j].classList.remove('active');\n                    bars[j + 1].classList.remove('active');\n                    bars[j].classList.remove('swapped');\n                    bars[j + 1].classList.remove('swapped');\n\n                    if (stepThrough.checked) {\n                        await sleep(speed);\n                    }\n                }\n                if (isSorted) {\n                    break; // No swaps means the array is sorted\n                }\n            }\n        }\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        generateButton.addEventListener('click', generateArray);\n        sortButton.addEventListener('click', () => {\n            bubbleSort();\n        });\n\n        // Initial array generation\n        generateArray();\n    </script>\n</body>\n</html>\n```\n\n### UI Functionality:\n- Users can generate a random array of numbers to sort.\n- Upon pressing the \"Sort\" button, they can visualize the bubble sort process.\n- The adjustable speed slider allows users to control the speed, enhancing understanding.\n- The step-through checkbox slows down the process for detailed observation of each step.\n\n### Accessibility:\n- Text colors and backgrounds are selected to ensure readability.\n- Input elements are clearly labeled for assistive technologies.\n\nThis module provides an engaging and hands-on approach to learning bubble sort, enhancing user comprehension through interaction and visualization."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Binary Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for visualizing the bubble sort algorithm.",
      "states": [
        {
          "name": "idle",
          "onEnter": "generateArray()",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORT": "sorting"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "renderArray()",
          "on": {
            "START_SORT": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort()",
          "onExit": "resetBars()",
          "on": {
            "SORT_COMPLETE": "sorted"
          }
        },
        {
          "name": "sorted",
          "onEnter": "displaySortedMessage()",
          "on": {
            "GENERATE_ARRAY": "array_generated",
            "START_SORT": "sorting"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORT",
        "SORT_COMPLETE"
      ],
      "notes": "The FSM captures the states of the bubble sort visualization, including idle state, array generation, sorting process, and completion. The transitions are triggered by button clicks and the completion of the sorting algorithm."
    }
  },
  {
    "id": "50f0aa60-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:10.951Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Linked List",
    "answer": {
      "role": "assistant",
      "content": "Here is a detailed design for an interactive web module that teaches the concept of \"Bubble Sort\". This module will allow users to visualize how the bubble sort algorithm works through a hands-on interface.\n\n## Interactive Module Design: Bubble Sort\n\n### Concept Title:\n**Visualizing Bubble Sort**\n\n### Learning Objective:\nUsers will understand how the bubble sort algorithm functions by visually sorting an array of numbers, gaining insights into how comparisons and swaps are made in each iteration.\n\n### Interaction Design:\n1. **Array Generation**: Users can initiate the sorting process by clicking a \"Generate Random Array\" button. This will create a new set of random numbers (from 1 to 100) displayed as a series of colored bars representing their values.\n\n2. **Sorting Process**: Once the array is generated, users will click a \"Sort Array\" button to start the bubble sort animation. During the sorting process:\n   - Bars will change colors to indicate the current comparison (e.g., one bar may turn red while it's being compared to another).\n   - When a swap occurs, the bars will animate to visually represent the swap, providing feedback for that action.\n   - A display will show the current state of the array, illustrating which elements have been compared and/or swapped.\n\n3. **Speed Control**: Users can adjust a slider to control the speed of the sorting animation, allowing them to slow down or speed up the visualization for better understanding.\n\n### Layout Description:\n1. **Header**: At the top of the page, the title “Visualizing Bubble Sort” is prominently displayed.\n2. **Controls Section**: Directly beneath the header will be buttons for \"Generate Random Array\" and \"Sort Array\", and a slider labeled \"Animation Speed\". These controls will have a minimum spacing of **16 px** between them.\n3. **Visualization Area**: The main section will consist of an array of bars representing the numbers to be sorted. This area will expand to fill the width of the container, ensuring responsiveness, with the bars structured in a grid. \n4. **Display Area**: Below the visualization area, a text display will indicate messages about the current state of the sort process (e.g., \"Comparing 5 and 10\", \"Swapped 5 and 10\"), giving users real-time feedback.\n5. **Safe Margins**: The entire layout will maintain a **24 px** margin on all sides to ensure the elements are easy to interact with and visually clear.\n\n### Example Code Implementation:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Visualizing Bubble Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f3f4f6;\n            color: #333;\n            margin: 0;\n            padding: 24px;\n        }\n        #header {\n            text-align: center;\n            margin-bottom: 24px;\n        }\n        #controls {\n            text-align: center;\n            margin-bottom: 16px;\n        }\n        button, input[type=\"range\"] {\n            margin: 0 8px;\n            padding: 8px 16px;\n            font-size: 16px;\n        }\n        #array-container {\n            display: flex;\n            align-items: flex-end;\n            height: 300px;\n            margin-bottom: 16px;\n            border: 2px solid #333;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 2px;\n            background-color: #4caf50;\n            transition: background-color 0.3s, transform 0.3s;\n        }\n        #status {\n            text-align: center;\n            margin-top: 24px;\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"header\">\n        <h1>Visualizing Bubble Sort</h1>\n    </div>\n\n    <div id=\"controls\">\n        <button id=\"generate\">Generate Random Array</button>\n        <button id=\"sort\">Sort Array</button>\n        Animation Speed: <input type=\"range\" id=\"speed\" min=\"50\" max=\"1000\" value=\"250\">\n    </div>\n\n    <div id=\"array-container\"></div>\n    \n    <div id=\"status\"></div>\n\n    <script>\n        let array = [];\n        const arrayContainer = document.getElementById('array-container');\n        const statusDisplay = document.getElementById('status');\n        const speedControl = document.getElementById('speed');\n      \n        document.getElementById('generate').onclick = generateArray;\n        document.getElementById('sort').onclick = bubbleSort;\n\n        function generateArray() {\n            array = [];\n            arrayContainer.innerHTML = '';\n            for (let i = 0; i < 20; i++) {\n                array.push(Math.floor(Math.random() * 100) + 1);\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${array[i] * 3}px`;\n                arrayContainer.appendChild(bar);\n            }\n        }\n\n        async function bubbleSort() {\n            for (let i = 0; i < array.length - 1; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    updateBars(j, j + 1, \"Comparing: \" + array[j] + \" and \" + array[j + 1]);\n                    await delay(speedControl.value);\n                    if (array[j] > array[j + 1]) {\n                        updateBars(j, j + 1, \"Swapping: \" + array[j] + \" and \" + array[j + 1]);\n                        await delay(speedControl.value);\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderBars();\n                    }\n                }\n            }\n            statusDisplay.textContent = \"Sorted!\";\n        }\n\n        function updateBars(index1, index2, message) {\n            const bars = document.querySelectorAll('.bar');\n            bars[index1].style.backgroundColor = 'red';\n            bars[index2].style.backgroundColor = 'red';\n            statusDisplay.textContent = message;\n        }\n\n        function renderBars() {\n            const bars = document.querySelectorAll('.bar');\n            bars.forEach((bar, index) => {\n                bar.style.height = `${array[index] * 3}px`;\n            });\n        }\n\n        function delay(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n    </script>\n\n</body>\n</html>\n```\n\n### Explanation of the Code:\n- **HTML Structure**: The structure creates a simple user interface for the bubble sort visualization. It includes buttons, a slider for speed control, a container for the bars (the visual representation of the array), and a status display.\n- **CSS Styling**: Basic styling for layout, spacing, and visual appeal is implemented to ensure clarity and usability. The `flex` display provides a responsive layout for the bars.\n- **JavaScript Logic**: Functions handle array generation, sorting logic, and UI updates. The `bubbleSort` function executes the sorting and includes animations to visually represent comparisons and swaps.\n\n### Accessibility and Responsiveness:\nThe implementation ensures that margins and spacing adhere to the required specifications. The button sizes and text are sufficient for touch targets, facilitating access on various devices. The layout is designed to be responsive through CSS flexbox.\n\nThis interactive module provides users with a clear, engaging way to explore bubble sort, reinforcing their understanding through real-time visual feedback."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Linked List"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for visualizing the bubble sort algorithm with user interactions.",
      "states": [
        {
          "name": "idle",
          "onEnter": "resetStatus",
          "onExit": "",
          "on": {
            "GENERATE_RANDOM_ARRAY": "generating",
            "SORT_ARRAY": "sorting"
          }
        },
        {
          "name": "generating",
          "onEnter": "generateArray",
          "onExit": "renderBars",
          "on": {
            "ARRAY_GENERATED": "idle"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startBubbleSort",
          "onExit": "",
          "on": {
            "COMPARING": "comparing",
            "SWAPPING": "swapping",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "comparing",
          "onEnter": "updateBars",
          "onExit": "",
          "on": {
            "COMPLETE_COMPARISON": "sorting"
          }
        },
        {
          "name": "swapping",
          "onEnter": "updateBars",
          "onExit": "renderBars",
          "on": {
            "SWAP_COMPLETE": "sorting"
          }
        },
        {
          "name": "done",
          "onEnter": "displaySortedStatus",
          "onExit": "",
          "on": {
            "RESET": "idle"
          }
        }
      ],
      "events": [
        "GENERATE_RANDOM_ARRAY",
        "SORT_ARRAY",
        "ARRAY_GENERATED",
        "COMPARING",
        "SWAPPING",
        "COMPLETE_COMPARISON",
        "SWAP_COMPLETE",
        "SORT_COMPLETE",
        "RESET"
      ],
      "notes": "The FSM captures the states of generating a random array, sorting it with bubble sort, and visual feedback during comparisons and swaps."
    }
  },
  {
    "id": "541bab90-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:16.265Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Red-Black Tree",
    "answer": {
      "role": "assistant",
      "content": "## Project Overview: Bubble Sort Interactive Learning Module\n\n### Concept Title:\n**Explore Bubble Sort**\n\n### Learning Objective:\nAfter completing the interactive module, users will understand how the Bubble Sort algorithm works, visualize its sorting process, and appreciate the concept of algorithmic efficiency.\n\n### Interaction Design:\n1. **User Interaction:** \n   - Users will be able to generate a random set of numbers by clicking a \"Generate Numbers\" button.\n   - A \"Start Sorting\" button will then initiate the bubble sort algorithm visually.\n   - Users can control the speed of the sorting animation using a slider.\n   - The users can also pause and resume the sorting process with a \"Pause/Resume\" button.\n   - Each number will be represented as a colored block in a visually pleasing manner, which will animate during the sorting process.\n\n2. **Visual Updates & State Changes:**\n   - The user clicks the \"Generate Numbers\" button which presents a random array of numbers on the screen.\n   - When the user clicks \"Start Sorting,\" the blocks change colors (to visually indicate comparisons and swaps).\n   - Animations will visually represent the swapping of blocks during the sorting process.\n   - The slider dynamically affects the speed of these animations.\n\n### Layout Description:\n- **Viewport Margins:** 24 px safe area margins will be maintained on all sides.\n- **Spacing:** A minimum of 16 px spacing will be applied between interactive elements and blocks.\n- **Site Organization:** The title and learning objective will be on the top, centered. Below it, the controls (buttons and slider) will be aligned horizontally. The visual representation of the numbers will be displayed in a block format below the controls section.\n\nThe layout will be responsive, ensuring that all elements are clearly visible and usable on different screen sizes. Accessibility will be considered by using appropriate color contrast and keyboard navigation. \n\n### Sample Code Implementation:\nHere's how the implementation might look using HTML, CSS, and JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualizer</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 0;\n            padding: 24px;\n        }\n        #controls {\n            margin-bottom: 16px;\n        }\n        button, input {\n            padding: 8px 16px;\n            margin: 0 8px;\n        }\n        .number-container {\n            display: flex;\n            justify-content: center;\n            margin-top: 16px;\n        }\n        .block {\n            background-color: #4CAF50;\n            margin: 0 4px;\n            width: 30px;\n            transition: height 0.4s, background-color 0.4s;\n        }\n    </style>\n</head>\n<body>\n    <h1>Explore Bubble Sort</h1>\n    <p>Understand how Bubble Sort organizes numbers through this interactive module.</p>\n\n    <div id=\"controls\">\n        <button id=\"generate\">Generate Numbers</button>\n        <button id=\"start\">Start Sorting</button>\n        <button id=\"pause\">Pause/Resume</button>\n        <input type=\"range\" id=\"speed\" min=\"100\" max=\"1000\" value=\"500\">\n    </div>\n    <div class=\"number-container\" id=\"numberContainer\"></div>\n\n    <script>\n        let numbers = [];\n        let intervals = [];\n        let isPaused = false;\n\n        const generateNumbers = () => {\n            numbers = Array.from({length: 10}, () => Math.floor(Math.random() * 100));\n            renderNumbers();\n        };\n\n        const renderNumbers = () => {\n            const container = document.getElementById('numberContainer');\n            container.innerHTML = '';\n            numbers.forEach(num => {\n                const block = document.createElement('div');\n                block.className = 'block';\n                block.style.height = `${num * 2}px`;\n                container.appendChild(block);\n            });\n        };\n\n        const bubbleSort = async () => {\n            const blocks = document.querySelectorAll('.block');\n            for(let i = 0; i < numbers.length - 1; i++) {\n                for(let j = 0; j < numbers.length - i - 1; j++) {\n                    if (isPaused) {\n                        await new Promise(resolve => { \n                            setTimeout(() => resolve(), 500); \n                        });\n                    }\n                    if (numbers[j] > numbers[j + 1]) {\n                        // Swap in numbers\n                        [numbers[j], numbers[j + 1]] = [numbers[j + 1], numbers[j]];\n                        // Render\n                        renderNumbers();\n                    }\n                    blocks[j].style.backgroundColor = '#FF5722'; // Changed color for comparison\n                    await new Promise(resolve => setTimeout(resolve, document.getElementById('speed').value));\n                    blocks[j].style.backgroundColor = '#4CAF50'; // Reset color\n                }\n            }\n        };\n\n        document.getElementById('generate').onclick = generateNumbers;\n        document.getElementById('start').onclick = bubbleSort;\n        document.getElementById('pause').onclick = () => {\n            isPaused = !isPaused;\n            const buttonText = isPaused ? \"Resume\" : \"Pause\";\n            document.getElementById('pause').innerText = buttonText;\n        };\n    </script>\n</body>\n</html>\n```\n\n### Summary:\nThis interactive module provides a straightforward yet engaging way to learn about Bubble Sort. Users can manipulate the input and see how the algorithm sorts with visual feedback and interactive controls, making the concept easier to grasp."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Red-Black Tree"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the Bubble Sort visualizer application, capturing states and transitions during sorting.",
      "states": [
        {
          "name": "idle",
          "onEnter": "renderNumbers",
          "onExit": null,
          "on": {
            "GENERATE_NUMBERS": "numbers_generated",
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "numbers_generated",
          "onEnter": "renderNumbers",
          "onExit": null,
          "on": {
            "START_SORTING": "sorting"
          }
        },
        {
          "name": "sorting",
          "onEnter": "bubbleSort",
          "onExit": null,
          "on": {
            "PAUSE": "paused",
            "SORT_COMPLETE": "done"
          }
        },
        {
          "name": "paused",
          "onEnter": null,
          "onExit": null,
          "on": {
            "RESUME": "sorting"
          }
        },
        {
          "name": "done",
          "onEnter": null,
          "onExit": "renderNumbers",
          "on": {
            "GENERATE_NUMBERS": "numbers_generated",
            "START_SORTING": "sorting"
          }
        }
      ],
      "events": [
        "GENERATE_NUMBERS",
        "START_SORTING",
        "PAUSE",
        "RESUME",
        "SORT_COMPLETE"
      ],
      "notes": "The 'sorting' state handles the sorting process, while 'paused' allows for interruption. The 'done' state signifies the completion of sorting."
    }
  },
  {
    "id": "56f22420-b3fe-11f0-842e-352e60ce9dbf",
    "timestamp": "2025-10-28T13:02:21.026Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Set",
    "answer": {
      "role": "assistant",
      "content": "Here's a detailed plan for an interactive HTML page that demonstrates the bubble sort algorithm.\n\n### Interactive HTML Page Design for Bubble Sort\n\n**Concept Title:**\n\"Exploring Bubble Sort: A Hands-On Sorting Experience\"\n\n**Learning Objective:**\nAfter interacting with this module, users will understand how the bubble sort algorithm works, visualize the sorting process step by step, and observe how elements are compared and swapped until the list is fully sorted.\n\n---\n\n### Interaction Design:\n\n1. **User Interactions:**\n   - **Generate Random Array:** Users can click a \"Generate Array\" button to create a new set of random numbers displayed on the page.\n   - **Start Sorting:** Users can initiate the bubble sort process by clicking a \"Start Sorting\" button.\n   - **Step-by-Step Control:** Users can advance through the sorting animation one step at a time using a \"Next Step\" button, allowing them to see how the algorithm works iteratively.\n\n2. **Visual Feedback:**\n   - The array elements will be represented as colored bars (height representing the value).\n   - During sorting, the algorithm will visualize comparisons by changing the color of the bars being compared (e.g., turning them red when they are being compared and green when they are sorted).\n   - A smooth transition animation will accompany each swap so users can clearly see the movement of elements in the array.\n\n3. **State Changes:**\n   - The randomly generated array will dynamically adjust when users generate a new array.\n   - The sort state will change on each step, indicating which elements are being compared and swapped.\n\n---\n\n### Layout Description:\n\nThe layout will be visually straightforward but engaging:\n\n- **Header Section:**\n  - Marked with a `header` tag, containing the title centered at the top of the page.\n  - Below the title will be the learning objective in a slightly smaller font.\n\n- **Main Section:**\n  - **Array Visualization:** A horizontal row of colored divs representing the numbers. This section will be stylized to maintain a clear view of the bars.\n  - **Control Buttons:** Positioned below the visualization section. The buttons (\"Generate Array\", \"Start Sorting\", and \"Next Step\") will be spaced out with at least 16 px between them.\n  \n- **Footer Section:**\n  - A `footer` tag with a simple copyright notice or educational resource links to encourage further learning.\n\n**Spacing and Responsiveness:**\n- The page will maintain a 24 px safe area margin on all sides.\n- Sufficient whitespace (16 px minimum) between elements to avoid clutter.\n- Responsive design will be ensured through relative sizing and flex properties, so elements resize appropriately on different screen sizes.\n\n---\n\n### Example Implementation:\n\nHere’s a self-contained implementation of the bubble sort interactive module:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualizer</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 24px;\n            text-align: center;\n            background-color: #f0f0f0;\n        }\n        #array-container {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 300px;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 6px;\n            background-color: #3498db;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        button {\n            margin: 16px;\n            padding: 10px 20px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n\n    <header>\n        <h1>Exploring Bubble Sort</h1>\n        <p>Learn how bubble sort works by visualizing its sorting process!</p>\n    </header>\n\n    <div id=\"array-container\"></div>\n\n    <div>\n        <button id=\"generate-array\">Generate Array</button>\n        <button id=\"start-sorting\" disabled>Start Sorting</button>\n        <button id=\"next-step\" disabled>Next Step</button>\n    </div>\n\n    <footer>\n        <p>© 2023 Bubble Sort Visualizer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        let array = [];\n        let currentStep = 0;\n\n        const arrayContainer = document.getElementById(\"array-container\");\n        const generateArrayButton = document.getElementById(\"generate-array\");\n        const startSortingButton = document.getElementById(\"start-sorting\");\n        const nextStepButton = document.getElementById(\"next-step\");\n\n        function generateArray() {\n            array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100) + 1);\n            currentStep = 0;\n            updateDisplay();\n            startSortingButton.disabled = false;\n            nextStepButton.disabled = true;\n        }\n\n        function updateDisplay() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 2}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSortStep() {\n            const n = array.length;\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    updateDisplay();\n                    const bars = document.querySelectorAll('.bar');\n                    bars[j].style.backgroundColor = 'red'; // Mark current element\n                    bars[j + 1].style.backgroundColor = 'red'; // Mark next element\n\n                    if (array[j] > array[j + 1]) {\n                        // Swap \n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    }\n\n                    await new Promise(resolve => setTimeout(resolve, 300)); // Delay for visualization\n                    bars[j].style.backgroundColor = '#3498db'; // Reset color\n                    bars[j + 1].style.backgroundColor = '#3498db'; // Reset color\n                }\n            }\n        }\n\n        async function startSorting() {\n            nextStepButton.disabled = false;\n            await bubbleSortStep();\n            startSortingButton.disabled = true;\n            nextStepButton.disabled = true;\n        }\n\n        generateArrayButton.addEventListener('click', generateArray);\n        startSortingButton.addEventListener('click', startSorting);\n\n    </script>\n</body>\n</html>\n```\n\n### Explanation of the Implementation:\n\n- **HTML Structure:** The page consists of header, main content, and footer sections, with clearly defined buttons for interaction.\n- **CSS Styles:** Responsive design with basic styling for visual clarity and separation between elements.\n- **JavaScript Logic:**\n  - The `generateArray` function creates a random array and updates the display.\n  - The `bubbleSortStep` function performs the bubble sort algorithm with visual feedback on sorting steps.\n  - Event listeners are added to buttons for user interactions.\n\nThis interactive module effectively captures the essence of bubble sort and engages users in a learning experience."
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      },
      {
        "role": "user",
        "content": "Set"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "topic": "bubble sort",
    "hasFSM": true,
    "hasTest": false,
    "fsm": {
      "topic": "bubble sort",
      "description": "Finite state machine for the Bubble Sort Visualizer application.",
      "states": [
        {
          "name": "idle",
          "onEnter": "resetUI",
          "onExit": "",
          "on": {
            "GENERATE_ARRAY": "array_generated"
          }
        },
        {
          "name": "array_generated",
          "onEnter": "updateDisplay",
          "onExit": "",
          "on": {
            "START_SORTING": "sorting",
            "GENERATE_ARRAY": "array_generated"
          }
        },
        {
          "name": "sorting",
          "onEnter": "startSorting",
          "onExit": "",
          "on": {
            "SORTING_COMPLETE": "done",
            "NEXT_STEP": "next_step"
          }
        },
        {
          "name": "next_step",
          "onEnter": "bubbleSortStep",
          "onExit": "",
          "on": {
            "NEXT_STEP": "next_step",
            "SORTING_COMPLETE": "done"
          }
        },
        {
          "name": "done",
          "onEnter": "",
          "onExit": "resetButtons",
          "on": {
            "GENERATE_ARRAY": "array_generated"
          }
        }
      ],
      "events": [
        "GENERATE_ARRAY",
        "START_SORTING",
        "NEXT_STEP",
        "SORTING_COMPLETE"
      ],
      "notes": "The FSM captures the states of the Bubble Sort Visualizer, including generating an array, sorting, and handling user interactions."
    }
  }
]