[
  {
    "id": "38c67ed0-a100-11f0-8e0e-d323e75e541f",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T08:57:57.309Z",
    "question": "sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sort Demo</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        input, button {\n            margin-top: 10px;\n            padding: 10px;\n            font-size: 16px;\n        }\n        #result {\n            margin-top: 20px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Simple Sort Demo</h1>\n<p>Enter numbers separated by commas (e.g. 5,3,8,1):</p>\n<input type=\"text\" id=\"numbers\" placeholder=\"Enter numbers here...\">\n<button onclick=\"sortNumbers()\">Sort Numbers</button>\n\n<div id=\"result\"></div>\n\n<script>\n    function sortNumbers() {\n        const input = document.getElementById('numbers').value;\n        const numberArray = input.split(',').map(num => parseFloat(num.trim()));\n        \n        // Check for valid numbers\n        if (numberArray.some(isNaN)) {\n            document.getElementById('result').innerText = \"Please enter valid numbers.\";\n            return;\n        }\n\n        // Sort numbers\n        numberArray.sort((a, b) => a - b);\n        \n        // Display sorted numbers\n        document.getElementById('result').innerText = \"Sorted Numbers: \" + numberArray.join(', ');\n    }\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "1c88a1b0-a238-11f0-9ba3-e1a9cd1a2fd1",
    "timestamp": "2025-10-05T22:10:32.907Z",
    "status": "error",
    "question": "linear regression",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "36725c80-a23b-11f0-bdd6-fd06ca547b28",
    "timestamp": "2025-10-05T22:32:44.872Z",
    "model": "gpt-5",
    "status": "success",
    "question": "linear regression",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Linear Regression Demo (OLS and Gradient Descent)</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f1221;\n      --panel: #171a2b;\n      --text: #e7e9f3;\n      --muted: #a9adc9;\n      --accent: #5dc2ff;\n      --accent2: #ffb74d;\n      --good: #4caf50;\n      --bad: #ef5350;\n    }\n    html, body {\n      margin: 0;\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n    }\n    .app {\n      display: grid;\n      grid-template-columns: 1fr 360px;\n      gap: 12px;\n      height: 100%;\n      padding: 12px;\n      box-sizing: border-box;\n    }\n    .canvas-wrap {\n      background: var(--panel);\n      border-radius: 10px;\n      position: relative;\n      box-shadow: 0 8px 30px rgba(0,0,0,0.25);\n      overflow: hidden;\n    }\n    .toolbar {\n      display: flex;\n      gap: 12px;\n      align-items: center;\n      padding: 10px 12px;\n      border-bottom: 1px solid #272a3f;\n      background: #121427;\n    }\n    .toolbar small {\n      color: var(--muted);\n    }\n    .pane {\n      background: var(--panel);\n      border-radius: 10px;\n      padding: 12px;\n      box-shadow: 0 8px 30px rgba(0,0,0,0.25);\n      overflow: auto;\n    }\n    h1 {\n      margin: 0 0 6px 0;\n      font-size: 20px;\n      font-weight: 700;\n    }\n    h2 {\n      margin: 16px 0 6px;\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--muted);\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 10px;\n    }\n    .group {\n      border: 1px solid #272a3f;\n      border-radius: 8px;\n      padding: 10px;\n    }\n    .row {\n      display: grid;\n      grid-template-columns: 140px 1fr auto;\n      gap: 8px;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n    .row:last-child { margin-bottom: 0; }\n    label {\n      color: var(--muted);\n      font-size: 13px;\n    }\n    input[type=\"number\"],\n    input[type=\"text\"] {\n      width: 100%;\n      padding: 6px 8px;\n      border-radius: 6px;\n      border: 1px solid #30344a;\n      background: #121427;\n      color: var(--text);\n      outline: none;\n    }\n    input[type=\"range\"] {\n      width: 100%;\n    }\n    button {\n      appearance: none;\n      padding: 8px 10px;\n      border-radius: 8px;\n      border: 1px solid #2b2f48;\n      background: #1a1d33;\n      color: var(--text);\n      font-weight: 600;\n      cursor: pointer;\n      transition: transform 0.05s ease, background 0.2s ease, border-color 0.2s ease;\n    }\n    button:hover { background: #222642; }\n    button:active { transform: translateY(1px) scale(0.99); }\n    button.primary {\n      background: linear-gradient(180deg, #258dff, #1f6fe0);\n      border-color: #1f6fe0;\n    }\n    button.warn {\n      background: linear-gradient(180deg, #f25555, #d44444);\n      border-color: #d44444;\n    }\n    .stats {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 10px;\n    }\n    .stat {\n      border: 1px solid #272a3f;\n      border-radius: 8px;\n      padding: 10px;\n      background: #121427;\n    }\n    .stat .k {\n      color: var(--muted);\n      font-size: 12px;\n      letter-spacing: 0.2px;\n    }\n    .stat .v {\n      font-size: 18px;\n      font-weight: 700;\n      margin-top: 2px;\n    }\n    .legend {\n      display: flex;\n      gap: 12px;\n      padding: 6px 12px;\n      font-size: 12px;\n      color: var(--muted);\n      border-top: 1px solid #272a3f;\n      background: #121427;\n    }\n    .dot {\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n      display: inline-block;\n      margin-right: 6px;\n    }\n    .blue { background: var(--accent); }\n    .orange { background: var(--accent2); }\n    .green { background: var(--good); }\n    .red { background: var(--bad); }\n    .note {\n      font-size: 12px;\n      color: var(--muted);\n      margin-top: 8px;\n    }\n    .kbd {\n      display: inline-block;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\";\n      background: #0c0e1a;\n      border: 1px solid #2b2f48;\n      border-radius: 6px;\n      padding: 1px 6px;\n      font-size: 12px;\n      color: var(--text);\n    }\n    canvas {\n      display: block;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"app\">\n    <div class=\"canvas-wrap\">\n      <div class=\"toolbar\">\n        <div style=\"flex: 1;\">\n          <strong>Linear Regression</strong>\n          <small>Click to add points. Drag to move. Right-click to delete.</small>\n        </div>\n        <label><input type=\"checkbox\" id=\"toggleResiduals\"> Show residuals</label>\n        <label style=\"margin-left: 12px;\"><input type=\"checkbox\" id=\"toggleMean\"> Show mean point</label>\n      </div>\n      <canvas id=\"canvas\" width=\"900\" height=\"540\" aria-label=\"Linear Regression Canvas\"></canvas>\n      <div class=\"legend\">\n        <div><span class=\"dot blue\"></span>OLS best-fit line</div>\n        <div><span class=\"dot orange\"></span>Gradient Descent line</div>\n        <div><span class=\"dot green\"></span>Points</div>\n        <div><span class=\"dot red\"></span>Residuals</div>\n      </div>\n    </div>\n\n    <div class=\"pane\">\n      <h1>Controls and Metrics</h1>\n\n      <div class=\"controls\">\n        <div class=\"group\">\n          <h2>Fit method</h2>\n          <div class=\"row\">\n            <label>Method</label>\n            <div>\n              <label><input type=\"radio\" name=\"method\" value=\"ols\" checked> Analytic OLS</label>\n              <label style=\"margin-left: 12px;\"><input type=\"radio\" name=\"method\" value=\"gd\"> Gradient Descent</label>\n            </div>\n            <div></div>\n          </div>\n\n          <div id=\"gdControls\">\n            <div class=\"row\">\n              <label>Learning rate</label>\n              <input type=\"range\" id=\"lr\" min=\"0.0001\" max=\"0.3\" step=\"0.0001\" value=\"0.02\">\n              <div><span id=\"lrVal\">0.02</span></div>\n            </div>\n            <div class=\"row\">\n              <label>Steps per tick</label>\n              <input type=\"range\" id=\"stepsPerTick\" min=\"1\" max=\"200\" step=\"1\" value=\"20\">\n              <div><span id=\"stepsVal\">20</span></div>\n            </div>\n            <div class=\"row\">\n              <label>Initialize</label>\n              <div>\n                <button id=\"initZero\">Reset to 0</button>\n                <button id=\"initOLS\">Snap to OLS</button>\n              </div>\n              <div></div>\n            </div>\n            <div class=\"row\">\n              <label>Training</label>\n              <div>\n                <button class=\"primary\" id=\"toggleTrain\">Start</button>\n                <button id=\"stepOnce\">Step once</button>\n              </div>\n              <div></div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"group\">\n          <h2>Data generator</h2>\n          <div class=\"row\">\n            <label>Number of points</label>\n            <input type=\"number\" id=\"nPts\" min=\"2\" max=\"200\" step=\"1\" value=\"40\">\n            <div></div>\n          </div>\n          <div class=\"row\">\n            <label>True slope (m)</label>\n            <input type=\"number\" id=\"trueM\" min=\"-3\" max=\"3\" step=\"0.1\" value=\"0.8\">\n            <div></div>\n          </div>\n          <div class=\"row\">\n            <label>True intercept (b)</label>\n            <input type=\"number\" id=\"trueB\" min=\"-5\" max=\"5\" step=\"0.1\" value=\"1.2\">\n            <div></div>\n          </div>\n          <div class=\"row\">\n            <label>Noise (σ)</label>\n            <input type=\"number\" id=\"noise\" min=\"0\" max=\"5\" step=\"0.1\" value=\"0.6\">\n            <div></div>\n          </div>\n          <div class=\"row\">\n            <label>Actions</label>\n            <div>\n              <button id=\"generate\" class=\"primary\">Generate linear data</button>\n              <button id=\"clear\" class=\"warn\">Clear</button>\n            </div>\n            <div></div>\n          </div>\n          <div class=\"note\">\n            Points are sampled as y = m⋅x + b + N(0, σ²) for x ∈ [0, 10]. Use the canvas to add, drag, or remove points.\n          </div>\n        </div>\n\n        <div class=\"group\">\n          <h2>Metrics</h2>\n          <div class=\"stats\">\n            <div class=\"stat\">\n              <div class=\"k\">Points</div>\n              <div class=\"v\" id=\"statN\">0</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"k\">Mean (x̄, ȳ)</div>\n              <div class=\"v\" id=\"statMean\">—</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"k\">Slope (m)</div>\n              <div class=\"v\" id=\"statM\">—</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"k\">Intercept (b)</div>\n              <div class=\"v\" id=\"statB\">—</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"k\">MSE</div>\n              <div class=\"v\" id=\"statMSE\">—</div>\n            </div>\n            <div class=\"stat\">\n              <div class=\"k\">R²</div>\n              <div class=\"v\" id=\"statR2\">—</div>\n            </div>\n          </div>\n          <div class=\"note\">\n            OLS uses the closed-form solution m = cov(x,y) / var(x), b = ȳ - m⋅x̄. Gradient Descent minimizes MSE by iteratively updating m and b.\n          </div>\n          <div class=\"note\">\n            Tip: Hold <span class=\"kbd\">Shift</span> while dragging a point to move it only vertically.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Canvas and coordinate system\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Device pixel ratio setup for sharp rendering\n    function setupCanvasScale() {\n      const dpr = window.devicePixelRatio || 1;\n      const cssW = canvas.clientWidth || canvas.width;\n      const cssH = canvas.clientHeight || canvas.height;\n      canvas.width = Math.round(cssW * dpr);\n      canvas.height = Math.round(cssH * dpr);\n      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    }\n\n    // Data domain\n    const domain = { xMin: 0, xMax: 10, yMin: 0, yMax: 10 };\n    // Plot margins (px)\n    const margin = { left: 48, right: 20, top: 20, bottom: 40 };\n\n    // Points store\n    let points = [];\n\n    // OLS results\n    let ols = { m: 0, b: 0, mse: 0, r2: 0, meanX: 0, meanY: 0, valid: false };\n\n    // Gradient Descent state\n    let gd = { m: 0, b: 0, running: false, iter: 0, mse: 0 };\n    let lr = parseFloat(document.getElementById('lr').value);\n    let stepsPerTick = parseInt(document.getElementById('stepsPerTick').value, 10);\n\n    // Toggles\n    const showResidualsEl = document.getElementById('toggleResiduals');\n    const showMeanEl = document.getElementById('toggleMean');\n\n    // Controls\n    const methodRadios = document.querySelectorAll('input[name=\"method\"]');\n    const gdControls = document.getElementById('gdControls');\n    const lrEl = document.getElementById('lr');\n    const lrValEl = document.getElementById('lrVal');\n    const stepsEl = document.getElementById('stepsPerTick');\n    const stepsValEl = document.getElementById('stepsVal');\n    const toggleTrainBtn = document.getElementById('toggleTrain');\n    const stepOnceBtn = document.getElementById('stepOnce');\n    const initZeroBtn = document.getElementById('initZero');\n    const initOLSBtn = document.getElementById('initOLS');\n\n    // Generator controls\n    const nPtsEl = document.getElementById('nPts');\n    const trueMEl = document.getElementById('trueM');\n    const trueBEl = document.getElementById('trueB');\n    const noiseEl = document.getElementById('noise');\n    const generateBtn = document.getElementById('generate');\n    const clearBtn = document.getElementById('clear');\n\n    // Stats display\n    const statN = document.getElementById('statN');\n    const statMean = document.getElementById('statMean');\n    const statM = document.getElementById('statM');\n    const statB = document.getElementById('statB');\n    const statMSE = document.getElementById('statMSE');\n    const statR2 = document.getElementById('statR2');\n\n    // Utilities\n    function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }\n    function nearlyZero(v, eps = 1e-12) { return Math.abs(v) < eps; }\n\n    function dataToPx(x, y) {\n      const plotW = canvas.width / (window.devicePixelRatio || 1) - margin.left - margin.right;\n      const plotH = canvas.height / (window.devicePixelRatio || 1) - margin.top - margin.bottom;\n      const nx = (x - domain.xMin) / (domain.xMax - domain.xMin);\n      const ny = (y - domain.yMin) / (domain.yMax - domain.yMin);\n      const px = margin.left + nx * plotW;\n      const py = margin.top + (1 - ny) * plotH;\n      return { x: px, y: py };\n    }\n\n    function pxToData(px, py) {\n      const plotW = canvas.width / (window.devicePixelRatio || 1) - margin.left - margin.right;\n      const plotH = canvas.height / (window.devicePixelRatio || 1) - margin.top - margin.bottom;\n      const nx = clamp((px - margin.left) / plotW, 0, 1);\n      const ny = clamp(1 - (py - margin.top) / plotH, 0, 1);\n      const x = domain.xMin + nx * (domain.xMax - domain.xMin);\n      const y = domain.yMin + ny * (domain.yMax - domain.yMin);\n      return { x, y };\n    }\n\n    function gaussianNoise(std) {\n      // Box-Muller transform\n      let u = 0, v = 0;\n      while (u === 0) u = Math.random();\n      while (v === 0) v = Math.random();\n      const z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n      return z * std;\n    }\n\n    // OLS Computation\n    function computeOLS() {\n      const n = points.length;\n      if (n === 0) {\n        ols = { m: 0, b: 0, mse: 0, r2: 0, meanX: 0, meanY: 0, valid: false };\n        return;\n      }\n      let sumX = 0, sumY = 0;\n      for (const p of points) { sumX += p.x; sumY += p.y; }\n      const meanX = sumX / n;\n      const meanY = sumY / n;\n\n      let covXY = 0, varX = 0;\n      for (const p of points) {\n        const dx = p.x - meanX;\n        const dy = p.y - meanY;\n        covXY += dx * dy;\n        varX += dx * dx;\n      }\n\n      let m = 0, b = meanY;\n      if (!nearlyZero(varX)) {\n        m = covXY / varX;\n        b = meanY - m * meanX;\n      }\n\n      // Metrics\n      let ssr = 0, sst = 0;\n      for (const p of points) {\n        const yHat = m * p.x + b;\n        const r = p.y - yHat;\n        ssr += r * r;\n        const dy = p.y - meanY;\n        sst += dy * dy;\n      }\n      const mse = n > 0 ? ssr / n : 0;\n      const r2 = nearlyZero(sst) ? 1 : 1 - (ssr / sst);\n\n      ols = { m, b, mse, r2, meanX, meanY, valid: n >= 2 && !nearlyZero(varX) };\n    }\n\n    // Gradient Descent step\n    function gdStep() {\n      const n = points.length;\n      if (n === 0) return;\n      let gradM = 0, gradB = 0, mseAccum = 0;\n      for (const p of points) {\n        const yHat = gd.m * p.x + gd.b;\n        const e = yHat - p.y;\n        gradM += e * p.x;\n        gradB += e;\n        mseAccum += e * e;\n      }\n      gradM = (2 / n) * gradM;\n      gradB = (2 / n) * gradB;\n      gd.m -= lr * gradM;\n      gd.b -= lr * gradB;\n      gd.mse = mseAccum / n;\n      gd.iter++;\n    }\n\n    // Drawing\n    function draw() {\n      const w = canvas.width / (window.devicePixelRatio || 1);\n      const h = canvas.height / (window.devicePixelRatio || 1);\n      ctx.clearRect(0, 0, w, h);\n\n      // Background gradient\n      const g = ctx.createLinearGradient(0, 0, 0, h);\n      g.addColorStop(0, '#151833');\n      g.addColorStop(1, '#10132a');\n      ctx.fillStyle = g;\n      ctx.fillRect(0, 0, w, h);\n\n      drawAxes();\n      drawPoints();\n\n      // Lines\n      const method = getMethod();\n      // Always draw both lines for comparison, with opacity depending on selection\n      const showOLS = true;\n      const showGD = true;\n\n      if (showOLS) drawLine(ols.m, ols.b, 'rgba(93, 194, 255, ' + (method === 'ols' ? '1' : '0.35') + ')', 3);\n      if (showGD) drawLine(gd.m, gd.b, 'rgba(255, 183, 77, ' + (method === 'gd' ? '1' : '0.35') + ')', 3);\n\n      // Residuals\n      if (showResidualsEl.checked) {\n        const m = method === 'ols' ? ols.m : gd.m;\n        const b = method === 'ols' ? ols.b : gd.b;\n        drawResiduals(m, b);\n      }\n\n      // Mean point\n      if (showMeanEl.checked && points.length) {\n        const mx = ols.meanX;\n        const my = ols.meanY;\n        const p = dataToPx(mx, my);\n        ctx.fillStyle = '#a9adc9';\n        ctx.strokeStyle = '#a9adc9';\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, 5, 0, Math.PI * 2);\n        ctx.fill();\n        // crosshair\n        ctx.beginPath();\n        ctx.moveTo(p.x - 8, p.y);\n        ctx.lineTo(p.x + 8, p.y);\n        ctx.moveTo(p.x, p.y - 8);\n        ctx.lineTo(p.x, p.y + 8);\n        ctx.stroke();\n      }\n\n      updateStats();\n    }\n\n    function drawAxes() {\n      const w = canvas.width / (window.devicePixelRatio || 1);\n      const h = canvas.height / (window.devicePixelRatio || 1);\n      const plotW = w - margin.left - margin.right;\n      const plotH = h - margin.top - margin.bottom;\n\n      // Plot area\n      ctx.fillStyle = '#121427';\n      ctx.strokeStyle = '#272a3f';\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.rect(margin.left, margin.top, plotW, plotH);\n      ctx.fill();\n      ctx.stroke();\n\n      // Grid and ticks\n      const ticks = 10;\n      ctx.font = '12px system-ui';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'top';\n\n      for (let i = 0; i <= ticks; i++) {\n        const t = domain.xMin + i * (domain.xMax - domain.xMin) / ticks;\n        const px = margin.left + (i / ticks) * plotW;\n        ctx.strokeStyle = i % 5 === 0 ? '#2b2f48' : '#222642';\n        ctx.beginPath();\n        ctx.moveTo(px, margin.top);\n        ctx.lineTo(px, margin.top + plotH);\n        ctx.stroke();\n        ctx.fillStyle = '#a9adc9';\n        ctx.fillText(t.toFixed(1), px, margin.top + plotH + 6);\n      }\n\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      for (let i = 0; i <= ticks; i++) {\n        const t = domain.yMin + i * (domain.yMax - domain.yMin) / ticks;\n        const py = margin.top + ((ticks - i) / ticks) * plotH;\n        ctx.strokeStyle = i % 5 === 0 ? '#2b2f48' : '#222642';\n        ctx.beginPath();\n        ctx.moveTo(margin.left, py);\n        ctx.lineTo(margin.left + plotW, py);\n        ctx.stroke();\n        ctx.fillStyle = '#a9adc9';\n        ctx.fillText(t.toFixed(1), margin.left - 6, py);\n      }\n\n      // Axis labels\n      ctx.fillStyle = '#a9adc9';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'alphabetic';\n      ctx.fillText('x', margin.left + plotW / 2, h - 8);\n      ctx.save();\n      ctx.translate(16, margin.top + plotH / 2);\n      ctx.rotate(-Math.PI / 2);\n      ctx.fillText('y', 0, 0);\n      ctx.restore();\n    }\n\n    function drawPoints() {\n      ctx.lineWidth = 1.5;\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        const pix = dataToPx(p.x, p.y);\n        ctx.fillStyle = '#4caf50';\n        ctx.strokeStyle = '#1b5e20';\n        ctx.beginPath();\n        ctx.arc(pix.x, pix.y, 5, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n      }\n    }\n\n    function drawLine(m, b, color, width = 2) {\n      const x1 = domain.xMin, x2 = domain.xMax;\n      let y1 = m * x1 + b;\n      let y2 = m * x2 + b;\n\n      // Clip to plot area bounds for visual nicety\n      const yMin = domain.yMin, yMax = domain.yMax;\n      // We still draw even if out of bounds; mapping handles.\n\n      const p1 = dataToPx(x1, y1);\n      const p2 = dataToPx(x2, y2);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n    }\n\n    function drawResiduals(m, b) {\n      ctx.strokeStyle = '#ef5350';\n      ctx.lineWidth = 1.25;\n      ctx.setLineDash([5, 4]);\n      for (const p of points) {\n        const yHat = m * p.x + b;\n        const a = dataToPx(p.x, p.y);\n        const bpx = dataToPx(p.x, yHat);\n        ctx.beginPath();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(bpx.x, bpx.y);\n        ctx.stroke();\n      }\n      ctx.setLineDash([]);\n    }\n\n    function updateStats() {\n      statN.textContent = points.length;\n      statMean.textContent = points.length ? `(${ols.meanX.toFixed(3)}, ${ols.meanY.toFixed(3)})` : '—';\n\n      const method = getMethod();\n      const m = method === 'ols' ? ols.m : gd.m;\n      const b = method === 'ols' ? ols.b : gd.b;\n\n      const mse = method === 'ols' ? ols.mse : gd.mse;\n      const r2 = method === 'ols' ? ols.r2 : computeR2(m, b);\n\n      statM.textContent = points.length ? m.toFixed(5) : '—';\n      statB.textContent = points.length ? b.toFixed(5) : '—';\n      statMSE.textContent = points.length ? mse.toFixed(5) : '—';\n      statR2.textContent = points.length ? r2.toFixed(5) : '—';\n    }\n\n    function computeR2(m, b) {\n      const n = points.length;\n      if (n === 0) return 0;\n      let sumY = 0;\n      for (const p of points) sumY += p.y;\n      const meanY = sumY / n;\n      let ssr = 0, sst = 0;\n      for (const p of points) {\n        const yHat = m * p.x + b;\n        const r = p.y - yHat;\n        ssr += r * r;\n        const dy = p.y - meanY;\n        sst += dy * dy;\n      }\n      return nearlyZero(sst) ? 1 : 1 - ssr / sst;\n    }\n\n    function getMethod() {\n      for (const r of methodRadios) if (r.checked) return r.value;\n      return 'ols';\n    }\n\n    // Interaction: add, drag, delete\n    let draggingIndex = -1;\n    let dragStart = null;\n\n    function findNearestPoint(px, py, radiusPx = 10) {\n      let bestIdx = -1, bestDist = Infinity;\n      for (let i = 0; i < points.length; i++) {\n        const p = dataToPx(points[i].x, points[i].y);\n        const dx = p.x - px, dy = p.y - py;\n        const d = Math.hypot(dx, dy);\n        if (d < radiusPx && d < bestDist) {\n          bestDist = d;\n          bestIdx = i;\n        }\n      }\n      return bestIdx;\n    }\n\n    canvas.addEventListener('mousedown', (ev) => {\n      const rect = canvas.getBoundingClientRect();\n      const px = ev.clientX - rect.left;\n      const py = ev.clientY - rect.top;\n\n      const idx = findNearestPoint(px, py, 9);\n      if (ev.button === 0) {\n        if (idx !== -1) {\n          draggingIndex = idx;\n          dragStart = { x: px, y: py };\n        } else {\n          const d = pxToData(px, py);\n          points.push({ x: d.x, y: d.y });\n          computeOLS();\n          draw();\n        }\n      }\n    });\n\n    window.addEventListener('mousemove', (ev) => {\n      if (draggingIndex !== -1) {\n        const rect = canvas.getBoundingClientRect();\n        const px = ev.clientX - rect.left;\n        const py = ev.clientY - rect.top;\n        const d = pxToData(px, py);\n        if (ev.shiftKey) {\n          // Vertical-only drag\n          points[draggingIndex].y = d.y;\n        } else {\n          points[draggingIndex].x = d.x;\n          points[draggingIndex].y = d.y;\n        }\n        computeOLS();\n        draw();\n      }\n    });\n\n    window.addEventListener('mouseup', () => {\n      draggingIndex = -1;\n      dragStart = null;\n    });\n\n    canvas.addEventListener('contextmenu', (ev) => {\n      ev.preventDefault();\n      const rect = canvas.getBoundingClientRect();\n      const px = ev.clientX - rect.left;\n      const py = ev.clientY - rect.top;\n      const idx = findNearestPoint(px, py, 10);\n      if (idx !== -1) {\n        points.splice(idx, 1);\n        computeOLS();\n        draw();\n      }\n    });\n\n    // Controls logic\n    for (const r of methodRadios) {\n      r.addEventListener('change', () => {\n        const m = getMethod();\n        gdControls.style.display = m === 'gd' ? 'block' : 'block'; // keep visible but method indicates active line\n        draw();\n      });\n    }\n\n    lrEl.addEventListener('input', () => {\n      lr = parseFloat(lrEl.value);\n      lrValEl.textContent = lr.toFixed(4);\n    });\n    stepsEl.addEventListener('input', () => {\n      stepsPerTick = parseInt(stepsEl.value, 10);\n      stepsValEl.textContent = stepsPerTick;\n    });\n\n    toggleTrainBtn.addEventListener('click', () => {\n      gd.running = !gd.running;\n      toggleTrainBtn.textContent = gd.running ? 'Pause' : 'Start';\n    });\n\n    stepOnceBtn.addEventListener('click', () => {\n      if (points.length) {\n        gdStep();\n        draw();\n      }\n    });\n\n    initZeroBtn.addEventListener('click', () => {\n      gd.m = 0;\n      gd.b = 0;\n      gd.iter = 0;\n      gd.mse = computeR2(gd.m, gd.b); // not mse; just trigger update\n      draw();\n    });\n\n    initOLSBtn.addEventListener('click', () => {\n      computeOLS();\n      gd.m = ols.m;\n      gd.b = ols.b;\n      gd.iter = 0;\n      gd.mse = ols.mse;\n      draw();\n    });\n\n    generateBtn.addEventListener('click', () => {\n      const n = clamp(parseInt(nPtsEl.value, 10) || 30, 2, 500);\n      const m = parseFloat(trueMEl.value) || 1;\n      const b = parseFloat(trueBEl.value) || 0;\n      const sigma = clamp(parseFloat(noiseEl.value) || 0, 0, 10);\n      points = [];\n      for (let i = 0; i < n; i++) {\n        const x = Math.random() * (domain.xMax - domain.xMin) + domain.xMin;\n        const y = m * x + b + gaussianNoise(sigma);\n        points.push({ x: clamp(x, domain.xMin, domain.xMax), y: clamp(y, domain.yMin, domain.yMax) });\n      }\n      computeOLS();\n      // Re-init GD to OLS for a fair start\n      gd.m = ols.m;\n      gd.b = ols.b;\n      gd.iter = 0;\n      gd.mse = ols.mse;\n      draw();\n    });\n\n    clearBtn.addEventListener('click', () => {\n      points = [];\n      computeOLS();\n      draw();\n    });\n\n    showResidualsEl.addEventListener('change', draw);\n    showMeanEl.addEventListener('change', draw);\n\n    // Animation loop for GD\n    function tick() {\n      if (gd.running && points.length) {\n        for (let i = 0; i < stepsPerTick; i++) gdStep();\n      }\n      draw();\n      requestAnimationFrame(tick);\n    }\n\n    // Resize handling\n    function onResize() {\n      setupCanvasScale();\n      draw();\n    }\n    window.addEventListener('resize', onResize);\n\n    // Initialize\n    setupCanvasScale();\n    // Seed some data\n    (function seed() {\n      const n = 40, m = 0.8, b = 1.2, sigma = 0.6;\n      for (let i = 0; i < n; i++) {\n        const x = Math.random() * 10;\n        const y = m * x + b + gaussianNoise(sigma);\n        points.push({ x: clamp(x, domain.xMin, domain.xMax), y: clamp(y, domain.yMin, domain.yMax) });\n      }\n      computeOLS();\n      gd.m = ols.m;\n      gd.b = ols.b;\n      gd.iter = 0;\n      gd.mse = ols.mse;\n      draw();\n    })();\n\n    requestAnimationFrame(tick);\n  </script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "linear regression"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "e08eae70-a23c-11f0-9855-3be5a2c2f406",
    "timestamp": "2025-10-05T22:44:39.768Z",
    "status": "error",
    "question": "k nearest neighbors",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]