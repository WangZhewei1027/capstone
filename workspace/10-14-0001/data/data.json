[
  {
    "id": "7b6ef870-a8c1-11f0-b671-bdc8446eb0e6",
    "timestamp": "2025-10-14T05:49:00.151Z",
    "model": "gpt-5",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Visualizer</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bar-gap: 4px;\n      --bar-color: #3b82f6; /* blue-500 */\n      --compare-color: #f59e0b; /* amber-500 */\n      --swap-color: #ef4444; /* red-500 */\n      --sorted-color: #10b981; /* emerald-500 */\n      --bg: #0f172a; /* slate-900 */\n      --panel: #111827; /* gray-900 */\n      --text: #e5e7eb; /* gray-200 */\n      --muted: #9ca3af; /* gray-400 */\n      --accent: #6366f1; /* indigo-500 */\n      --border: #374151; /* gray-700 */\n    }\n    * { box-sizing: border-box; }\n    html, body { height: 100%; margin: 0; background: var(--bg); color: var(--text); font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\"; }\n    header {\n      padding: 16px;\n      background: linear-gradient(90deg, #0b1221, #121a2c);\n      border-bottom: 1px solid var(--border);\n    }\n    header h1 {\n      margin: 0;\n      font-size: 20px;\n      display: flex; align-items: center; gap: 10px;\n    }\n    header h1 .tag {\n      font-size: 12px;\n      padding: 2px 8px;\n      border: 1px solid var(--border);\n      border-radius: 100px;\n      color: var(--muted);\n    }\n    main { padding: 16px; display: grid; gap: 16px; grid-template-columns: 1fr; }\n    .layout {\n      display: grid;\n      grid-template-columns: 320px 1fr;\n      gap: 16px;\n    }\n    @media (max-width: 900px) {\n      .layout { grid-template-columns: 1fr; }\n    }\n    .panel {\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      padding: 14px;\n      box-shadow: 0 0 0 1px rgba(0,0,0,0.05), 0 8px 20px rgba(0,0,0,0.2) inset;\n    }\n    .controls { display: grid; gap: 12px; }\n    .row { display: grid; grid-template-columns: 1fr 1fr; gap: 8px; align-items: center; }\n    .row label { font-size: 12px; color: var(--muted); }\n    .row .value { justify-self: end; font-variant-numeric: tabular-nums; color: #cbd5e1; }\n    .buttons { display: flex; gap: 8px; flex-wrap: wrap; }\n    button {\n      appearance: none; border: 1px solid var(--border); background: #0b1221; color: var(--text);\n      padding: 8px 12px; border-radius: 8px; cursor: pointer; transition: 120ms ease;\n    }\n    button:hover { border-color: #4b5563; background: #0f172a; }\n    button.primary { background: #1f2937; border-color: #475569; }\n    button:disabled { opacity: 0.5; cursor: not-allowed; }\n    .status {\n      display: flex; align-items: center; gap: 8px; font-size: 14px; color: #cbd5e1;\n    }\n    .badge {\n      padding: 2px 8px; border-radius: 999px;\n      border: 1px solid var(--border);\n      color: #e5e7eb; background: #0b1221;\n      font-size: 12px;\n    }\n    .badge.idle { color: #cbd5e1; }\n    .badge.running { color: #f59e0b; border-color: #8b5cf6; }\n    .badge.paused { color: #93c5fd; }\n    .badge.done { color: #10b981; }\n    .viz {\n      display: grid; gap: 12px;\n      grid-template-rows: auto 1fr auto;\n      min-height: 360px;\n    }\n    .bars {\n      position: relative;\n      border: 1px dashed var(--border);\n      border-radius: 12px;\n      padding: 12px 12px 28px 12px;\n      background: radial-gradient(1200px 300px at 50% 120%, rgba(99,102,241,0.06), transparent), #0b1221;\n      min-height: 260px;\n    }\n    .bars-inner {\n      position: absolute; left: 12px; right: 12px; top: 12px; bottom: 40px;\n      display: flex; align-items: end; gap: var(--bar-gap);\n    }\n    .bar {\n      flex: 1 1 0;\n      background: var(--bar-color);\n      border-radius: 6px 6px 0 0;\n      position: relative;\n      transition: height 120ms ease, transform 120ms ease, background 120ms ease, box-shadow 120ms ease;\n      border: 1px solid rgba(255,255,255,0.05);\n      box-shadow: inset 0 1px 0 rgba(255,255,255,0.06);\n    }\n    .bar::after {\n      content: attr(data-value);\n      position: absolute; bottom: -20px; left: 50%; transform: translateX(-50%);\n      font-size: 10px; color: var(--muted);\n    }\n    .bar.comparing { background: var(--compare-color); box-shadow: 0 0 0 2px rgba(245,158,11,0.15); }\n    .bar.sorted { background: var(--sorted-color); }\n    .bar.swapped { animation: flash 250ms ease; }\n    @keyframes flash {\n      0% { background: var(--swap-color); }\n      100% { background: var(--bar-color); }\n    }\n    .legend { display: flex; flex-wrap: wrap; gap: 8px; font-size: 12px; color: var(--muted); }\n    .legend span { display: inline-flex; align-items: center; gap: 6px; }\n    .dot { width: 12px; height: 8px; border-radius: 2px; display: inline-block; }\n    .dot.compare { background: var(--compare-color); }\n    .dot.swap { background: var(--swap-color); }\n    .dot.sorted { background: var(--sorted-color); }\n    .metrics {\n      display: grid; grid-template-columns: repeat(4, minmax(0, 1fr)); gap: 8px; margin-top: 8px;\n    }\n    .metric {\n      background: #0b1221; border: 1px solid var(--border); border-radius: 8px; padding: 8px;\n      display: grid; gap: 2px;\n    }\n    .metric small { color: var(--muted); }\n    .metric strong { font-variant-numeric: tabular-nums; }\n    .desc { color: #cbd5e1; font-size: 14px; line-height: 1.5; }\n    .footer {\n      color: var(--muted); font-size: 12px;\n    }\n    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>\n      Bubble Sort Visualizer\n      <span class=\"tag\">Stable • In-place • O(n²)</span>\n    </h1>\n  </header>\n\n  <main>\n    <div class=\"layout\">\n      <section class=\"panel controls\" aria-label=\"Controls\">\n        <div class=\"status\" aria-live=\"polite\">\n          <span>Status:</span>\n          <span class=\"badge idle\" data-testid=\"status\" aria-label=\"Status\" data-state=\"idle\">Idle</span>\n        </div>\n\n        <div class=\"buttons\">\n          <button class=\"primary\" data-testid=\"generate-btn\" aria-label=\"Generate new array\">Generate</button>\n          <button class=\"primary\" data-testid=\"start-btn\" aria-label=\"Start or resume sorting\">Start</button>\n          <button data-testid=\"pause-btn\" aria-label=\"Pause sorting\" disabled>Pause</button>\n          <button data-testid=\"step-btn\" aria-label=\"Step one operation\">Step</button>\n        </div>\n\n        <div class=\"row\">\n          <label for=\"size\">Size</label>\n          <div class=\"value\"><span data-testid=\"total-count\">20</span></div>\n        </div>\n        <input id=\"size\" type=\"range\" min=\"5\" max=\"80\" value=\"20\" step=\"1\" data-testid=\"size-input\" aria-label=\"Array size\">\n\n        <div class=\"row\">\n          <label for=\"speed\">Speed (ms/step)</label>\n          <div class=\"value\"><span data-testid=\"speed-value\">200</span> ms</div>\n        </div>\n        <input id=\"speed\" type=\"range\" min=\"20\" max=\"1000\" value=\"200\" step=\"10\" data-testid=\"speed-input\" aria-label=\"Speed in milliseconds per step\">\n\n        <div class=\"metrics\" role=\"status\" aria-live=\"polite\">\n          <div class=\"metric\">\n            <small>Comparisons</small>\n            <strong data-testid=\"comparisons\">0</strong>\n          </div>\n          <div class=\"metric\">\n            <small>Swaps</small>\n            <strong data-testid=\"swaps\">0</strong>\n          </div>\n          <div class=\"metric\">\n            <small>Sorted</small>\n            <strong><span data-testid=\"sorted-count\">0</span>/<span data-testid=\"total-count-dup\">20</span></strong>\n          </div>\n          <div class=\"metric\">\n            <small>Current i, j</small>\n            <strong><span data-testid=\"i-index\">-</span>, <span data-testid=\"j-index\">-</span></strong>\n          </div>\n        </div>\n\n        <div class=\"desc\">\n          Bubble sort repeatedly steps through the list, compares adjacent pairs, and swaps them if they are in the wrong order.\n          After each pass, the largest remaining element “bubbles” to its correct position at the end, shrinking the unsorted region.\n        </div>\n        <div class=\"legend\">\n          <span><i class=\"dot compare\"></i> Comparing</span>\n          <span><i class=\"dot swap\"></i> Swapped</span>\n          <span><i class=\"dot sorted\"></i> Sorted</span>\n        </div>\n        <div class=\"footer\">\n          Tip: Use Step to observe individual operations. You can change size and regenerate at any time.\n        </div>\n      </section>\n\n      <section class=\"panel viz\" aria-label=\"Visualization\">\n        <div class=\"bars\" aria-label=\"Array bars\">\n          <div class=\"bars-inner\" data-testid=\"bars\"></div>\n          <div class=\"sr-only\" aria-live=\"polite\" data-testid=\"sr-announce\"></div>\n        </div>\n      </section>\n    </div>\n  </main>\n\n  <script>\n    (function() {\n      const ui = {\n        status: document.querySelector('[data-testid=\"status\"]'),\n        generateBtn: document.querySelector('[data-testid=\"generate-btn\"]'),\n        startBtn: document.querySelector('[data-testid=\"start-btn\"]'),\n        pauseBtn: document.querySelector('[data-testid=\"pause-btn\"]'),\n        stepBtn: document.querySelector('[data-testid=\"step-btn\"]'),\n        sizeInput: document.querySelector('[data-testid=\"size-input\"]'),\n        speedInput: document.querySelector('[data-testid=\"speed-input\"]'),\n        speedValue: document.querySelector('[data-testid=\"speed-value\"]'),\n        bars: document.querySelector('[data-testid=\"bars\"]'),\n        comparisons: document.querySelector('[data-testid=\"comparisons\"]'),\n        swaps: document.querySelector('[data-testid=\"swaps\"]'),\n        sortedCount: document.querySelector('[data-testid=\"sorted-count\"]'),\n        totalCount: document.querySelector('[data-testid=\"total-count\"]'),\n        totalCountDup: document.querySelector('[data-testid=\"total-count-dup\"]'),\n        iIndex: document.querySelector('[data-testid=\"i-index\"]'),\n        jIndex: document.querySelector('[data-testid=\"j-index\"]'),\n        srAnnounce: document.querySelector('[data-testid=\"sr-announce\"]'),\n      };\n\n      const app = {\n        fsmState: 'idle',\n        arr: [],\n        gen: null,\n        timer: null,\n        speed: parseInt(ui.speedInput.value, 10),\n        compares: 0,\n        swaps: 0,\n        sorted: new Set(),\n        comparing: [-1, -1],\n        lastSwap: [-1, -1],\n        n: parseInt(ui.sizeInput.value, 10),\n      };\n\n      function setState(next) {\n        app.fsmState = next;\n        const label = next[0].toUpperCase() + next.slice(1);\n        ui.status.textContent = label;\n        ui.status.dataset.state = next;\n        ui.status.className = `badge ${next}`;\n        ui.startBtn.disabled = !(next === 'idle' || next === 'paused');\n        ui.pauseBtn.disabled = !(next === 'running');\n        ui.stepBtn.disabled = !(next === 'idle' || next === 'paused');\n        ui.generateBtn.disabled = false;\n        announce(`State ${label}`);\n      }\n\n      function randomArray(n) {\n        const arr = Array.from({length: n}, () => Math.floor(Math.random() * 96) + 5); // 5..100\n        return arr;\n      }\n\n      function renderBars() {\n        ui.bars.innerHTML = '';\n        const maxVal = Math.max(100, ...app.arr);\n        const frag = document.createDocumentFragment();\n        app.arr.forEach((v, idx) => {\n          const div = document.createElement('div');\n          const pct = Math.max(2, Math.round((v / maxVal) * 100));\n          div.className = 'bar';\n          if (app.sorted.has(idx)) div.classList.add('sorted');\n          if (idx === app.comparing[0] || idx === app.comparing[1]) div.classList.add('comparing');\n          if (idx === app.lastSwap[0] || idx === app.lastSwap[1]) div.classList.add('swapped');\n          div.style.height = pct + '%';\n          div.setAttribute('data-value', v);\n          div.setAttribute('data-testid', 'bar');\n          div.setAttribute('aria-label', `Index ${idx}, value ${v}${app.sorted.has(idx) ? ', sorted' : ''}`);\n          div.dataset.index = idx;\n          frag.appendChild(div);\n        });\n        ui.bars.appendChild(frag);\n        ui.sortedCount.textContent = String(app.sorted.size);\n        ui.totalCount.textContent = String(app.arr.length);\n        ui.totalCountDup.textContent = String(app.arr.length);\n      }\n\n      function resetStats() {\n        app.compares = 0;\n        app.swaps = 0;\n        ui.comparisons.textContent = '0';\n        ui.swaps.textContent = '0';\n        app.sorted.clear();\n        app.comparing = [-1, -1];\n        app.lastSwap = [-1, -1];\n        ui.iIndex.textContent = '-';\n        ui.jIndex.textContent = '-';\n      }\n\n      function generate() {\n        if (app.timer) { clearTimeout(app.timer); app.timer = null; }\n        app.n = parseInt(ui.sizeInput.value, 10);\n        app.arr = randomArray(app.n);\n        app.gen = null;\n        resetStats();\n        renderBars();\n        setState('idle');\n      }\n\n      function announce(msg) {\n        ui.srAnnounce.textContent = msg;\n      }\n\n      function* bubbleSort(a) {\n        const n = a.length;\n        for (let i = 0; i < n - 1; i++) {\n          let swapped = false;\n          for (let j = 0; j < n - i - 1; j++) {\n            yield { type: 'compare', i: j, j: j + 1 };\n            if (a[j] > a[j + 1]) {\n              yield { type: 'swap', i: j, j: j + 1 };\n              const tmp = a[j];\n              a[j] = a[j + 1];\n              a[j + 1] = tmp;\n              swapped = true;\n            }\n          }\n          yield { type: 'markSorted', idx: n - i - 1 };\n          if (!swapped) {\n            for (let k = 0; k < n - i - 1; k++) {\n              if (!app.sorted.has(k)) yield { type: 'markSorted', idx: k };\n            }\n            return;\n          }\n        }\n        yield { type: 'markSorted', idx: 0 };\n      }\n\n      function applyOp(op) {\n        if (!op) return;\n        switch (op.type) {\n          case 'compare':\n            app.compares++;\n            ui.comparisons.textContent = String(app.compares);\n            app.comparing = [op.i, op.j];\n            ui.iIndex.textContent = String(op.i);\n            ui.jIndex.textContent = String(op.j);\n            announce(`Compare indices ${op.i} and ${op.j}`);\n            break;\n          case 'swap':\n            app.swaps++;\n            ui.swaps.textContent = String(app.swaps);\n            app.lastSwap = [op.i, op.j];\n            announce(`Swap indices ${op.i} and ${op.j}`);\n            break;\n          case 'markSorted':\n            app.sorted.add(op.idx);\n            announce(`Index ${op.idx} is in final position`);\n            break;\n        }\n        renderBars();\n      }\n\n      function finishIfDone(done) {\n        if (done) {\n          // Ensure all indices marked as sorted\n          for (let i = 0; i < app.arr.length; i++) app.sorted.add(i);\n          renderBars();\n          setState('done');\n          return true;\n        }\n        return false;\n      }\n\n      function stepOnce() {\n        if (!app.gen) app.gen = bubbleSort(app.arr);\n        const res = app.gen.next();\n        if (finishIfDone(res.done)) return;\n        applyOp(res.value);\n      }\n\n      function loop() {\n        if (app.fsmState !== 'running') return;\n        stepOnce();\n        app.timer = setTimeout(loop, app.speed);\n      }\n\n      // Wire up UI\n      ui.generateBtn.addEventListener('click', () => {\n        generate();\n      });\n\n      ui.startBtn.addEventListener('click', () => {\n        if (app.fsmState === 'idle' && !app.gen) {\n          app.gen = bubbleSort(app.arr);\n        }\n        if (app.fsmState === 'done') return;\n        setState('running');\n        if (app.timer) clearTimeout(app.timer);\n        loop();\n      });\n\n      ui.pauseBtn.addEventListener('click', () => {\n        if (app.timer) { clearTimeout(app.timer); app.timer = null; }\n        if (app.fsmState === 'running') setState('paused');\n      });\n\n      ui.stepBtn.addEventListener('click', () => {\n        const prev = app.fsmState;\n        stepOnce();\n        if (app.fsmState !== 'done') setState('paused');\n        if (prev === 'running' && app.timer) { clearTimeout(app.timer); app.timer = null; }\n      });\n\n      ui.sizeInput.addEventListener('input', () => {\n        const n = parseInt(ui.sizeInput.value, 10);\n        ui.totalCount.textContent = String(n);\n        ui.totalCountDup.textContent = String(n);\n      });\n      ui.sizeInput.addEventListener('change', () => {\n        generate();\n      });\n\n      ui.speedInput.addEventListener('input', () => {\n        app.speed = parseInt(ui.speedInput.value, 10);\n        ui.speedValue.textContent = String(app.speed);\n      });\n\n      // Init\n      generate();\n    })();\n  </script>\n\n  <script id=\"fsm\" type=\"application/json\">\n{\n  \"concept\": \"bubble sort\",\n  \"machine\": {\n    \"id\": \"bubbleSortUI\",\n    \"initial\": \"idle\",\n    \"states\": {\n      \"idle\": {\n        \"on\": {\n          \"START\": \"running\",\n          \"STEP\": \"paused\",\n          \"GENERATE\": \"idle\"\n        },\n        \"meta\": { \"statusText\": \"Idle\" }\n      },\n      \"running\": {\n        \"on\": {\n          \"PAUSE\": \"paused\",\n          \"FINISH\": \"done\",\n          \"GENERATE\": \"idle\"\n        },\n        \"meta\": { \"statusText\": \"Running\" }\n      },\n      \"paused\": {\n        \"on\": {\n          \"START\": \"running\",\n          \"STEP\": \"paused\",\n          \"FINISH\": \"done\",\n          \"GENERATE\": \"idle\"\n        },\n        \"meta\": { \"statusText\": \"Paused\" }\n      },\n      \"done\": {\n        \"on\": {\n          \"GENERATE\": \"idle\"\n        },\n        \"meta\": { \"statusText\": \"Done\" }\n      }\n    }\n  },\n  \"playwright\": {\n    \"selectors\": {\n      \"start\": \"[data-testid=\\\"start-btn\\\"]\",\n      \"pause\": \"[data-testid=\\\"pause-btn\\\"]\",\n      \"step\": \"[data-testid=\\\"step-btn\\\"]\",\n      \"generate\": \"[data-testid=\\\"generate-btn\\\"]\",\n      \"status\": \"[data-testid=\\\"status\\\"]\",\n      \"bars\": \"[data-testid=\\\"bars\\\"]\",\n      \"bar\": \"[data-testid=\\\"bars\\\"] [data-testid=\\\"bar\\\"]\",\n      \"sortedCount\": \"[data-testid=\\\"sorted-count\\\"]\",\n      \"totalCount\": \"[data-testid=\\\"total-count\\\"]\",\n      \"totalCountDup\": \"[data-testid=\\\"total-count-dup\\\"]\",\n      \"comparisons\": \"[data-testid=\\\"comparisons\\\"]\",\n      \"swaps\": \"[data-testid=\\\"swaps\\\"]\"\n    },\n    \"events\": {\n      \"GENERATE\": { \"type\": \"click\", \"selector\": \"[data-testid=\\\"generate-btn\\\"]\" },\n      \"START\": { \"type\": \"click\", \"selector\": \"[data-testid=\\\"start-btn\\\"]\" },\n      \"PAUSE\": { \"type\": \"click\", \"selector\": \"[data-testid=\\\"pause-btn\\\"]\" },\n      \"STEP\": { \"type\": \"click\", \"selector\": \"[data-testid=\\\"step-btn\\\"]\" }\n    },\n    \"assertions\": {\n      \"idle\": [\n        { \"type\": \"hasAttribute\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"name\": \"data-state\", \"value\": \"idle\" },\n        { \"type\": \"textEquals\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"value\": \"Idle\" }\n      ],\n      \"running\": [\n        { \"type\": \"hasAttribute\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"name\": \"data-state\", \"value\": \"running\" },\n        { \"type\": \"textEquals\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"value\": \"Running\" }\n      ],\n      \"paused\": [\n        { \"type\": \"hasAttribute\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"name\": \"data-state\", \"value\": \"paused\" },\n        { \"type\": \"textEquals\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"value\": \"Paused\" }\n      ],\n      \"done\": [\n        { \"type\": \"hasAttribute\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"name\": \"data-state\", \"value\": \"done\" },\n        { \"type\": \"textEquals\", \"selector\": \"[data-testid=\\\"status\\\"]\", \"value\": \"Done\" },\n        { \"type\": \"textEqualsSelector\", \"selectorA\": \"[data-testid=\\\"sorted-count\\\"]\", \"selectorB\": \"[data-testid=\\\"total-count-dup\\\"]\" }\n      ]\n    },\n    \"scenarios\": [\n      {\n        \"name\": \"generate_and_sort_to_completion\",\n        \"steps\": [\n          { \"event\": \"GENERATE\" },\n          { \"expect\": \"idle\" },\n          { \"event\": \"START\" },\n          { \"expect\": \"running\" },\n          { \"waitForState\": \"done\" },\n          { \"expect\": \"done\" }\n        ]\n      },\n      {\n        \"name\": \"step_then_pause_then_resume\",\n        \"steps\": [\n          { \"event\": \"GENERATE\" },\n          { \"event\": \"STEP\" },\n          { \"expect\": \"paused\" },\n          { \"event\": \"START\" },\n          { \"expect\": \"running\" },\n          { \"event\": \"PAUSE\" },\n          { \"expect\": \"paused\" }\n        ]\n      }\n    ]\n  }\n}\n  </script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\nAt the end of the HTML, automatically insert a <script id=fsm type=application/json> block\nthat contains:\n- The finite state machine (FSM) definition as JSON (matching the concept)\n- A playwright field that includes event-to-action mappings and state assertions\nfor automated E2E testing (use role, aria-label, or testid selectors).\n\nThe HTML should be fully self-contained and runnable in browser.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "cdd38350-a8ea-11f0-8440-3bef8af20c0c",
    "timestamp": "2025-10-14T10:44:47.749Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        #array-container {\n            display: flex;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 20px;\n            background-color: teal;\n            margin-right: 2px;\n            transition: height 0.2s;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n<button id=\"sortButton\">Start Bubble Sort</button>\n<div id=\"array-container\"></div>\n\n<script>\n    const array = [5, 3, 8, 4, 2];\n    const arrayContainer = document.getElementById('array-container');\n\n    function createBars(arr) {\n        arrayContainer.innerHTML = '';\n        arr.forEach(num => {\n            const bar = document.createElement('div');\n            bar.style.height = `${num * 20}px`;\n            bar.className = 'bar';\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort(arr) {\n        let n = arr.length;\n        for (let i = 0; i < n - 1; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                    createBars(arr);\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                }\n            }\n        }\n    }\n\n    document.getElementById('sortButton').onclick = () => {\n        createBars(array);\n        bubbleSort(array);\n    };\n</script>\n\n<script id=\"fsm\" type=\"application/json\">\n{\n    \"states\": {\n        \"initial\": {\n            \"on\": {\n                \"start_sort\": \"sorting\"\n            }\n        },\n        \"sorting\": {\n            \"on\": {\n                \"complete\": \"completed\"\n            }\n        },\n        \"completed\": {\n            \"type\": \"final\"\n        }\n    },\n    \"initial\": \"initial\",\n    \"actions\": {\n        \"start_sort\": {\n            \"event\": \"click\",\n            \"selector\": \"[id='sortButton']\"\n        },\n        \"assert_sort_completed\": {\n            \"state\": \"completed\",\n            \"selector\": \"[id='array-container']\"\n        }\n    }\n}\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\nAt the end of the HTML, automatically insert a <script id=fsm type=application/json> block\nthat contains:\n- The finite state machine (FSM) definition as JSON (matching the concept)\n- A playwright field that includes event-to-action mappings and state assertions\nfor automated E2E testing (use role, aria-label, or testid selectors).\n\nThe HTML should be fully self-contained and runnable in browser.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "e9b68800-a8eb-11f0-b17a-df00c5bd5693",
    "timestamp": "2025-10-14T10:52:44.032Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Demonstration</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            padding: 20px;\n            background-color: #f4f4f4;\n        }\n        #arrayDisplay {\n            display: flex;\n            margin-bottom: 20px;\n        }\n        .number {\n            width: 30px;\n            height: 30px;\n            margin: 2px;\n            color: white;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    <div id=\"arrayDisplay\"></div>\n    <button id=\"startSortBtn\">Start Bubble Sort</button>\n    <script>\n        const array = [5, 2, 9, 1, 5, 6];\n        const arrayDisplay = document.getElementById('arrayDisplay');\n        const startSortBtn = document.getElementById('startSortBtn');\n        \n        function displayArray(arr) {\n            arrayDisplay.innerHTML = '';\n            arr.forEach((num, index) => {\n                const div = document.createElement('div');\n                div.className = 'number';\n                div.id = 'number-' + index;\n                div.style.backgroundColor = 'blue';\n                div.textContent = num;\n                arrayDisplay.appendChild(div);\n            });\n        }\n\n        async function bubbleSort(arr) {\n            const len = arr.length;\n            for (let i = 0; i < len - 1; i++) {\n                for (let j = 0; j < len - i - 1; j++) {\n                    const firstId = 'number-' + j;\n                    const secondId = 'number-' + (j + 1);\n                    \n                    // Highlight the elements being compared\n                    document.getElementById(firstId).style.backgroundColor = 'red';\n                    document.getElementById(secondId).style.backgroundColor = 'red';\n\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Wait for half a second\n\n                    if (arr[j] > arr[j + 1]) {\n                        // Swap elements\n                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                    }\n\n                    // Update display\n                    displayArray(arr);\n\n                    // Reset color after comparison\n                    document.getElementById(firstId).style.backgroundColor = 'blue';\n                    document.getElementById(secondId).style.backgroundColor = 'blue';\n                }\n            }\n        }\n\n        startSortBtn.addEventListener('click', () => {\n            displayArray(array);\n            bubbleSort(array);\n        });\n\n        // Initial display\n        displayArray(array);\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\n\nEvery componet must have a unique id.\n\nThe HTML should be fully self-contained and runnable in browser.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4681df30-a8ec-11f0-9590-e15ffd4f1c36",
    "timestamp": "2025-10-14T10:55:19.715Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        #arrayContainer {\n            display: flex;\n            justify-content: center;\n            margin-top: 20px;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: lightblue;\n            transition: height 0.3s;\n        }\n        #controlPanel {\n            text-align: center;\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n<div id=\"arrayContainer\"></div>\n<div id=\"controlPanel\">\n    <button id=\"startButton\">Start Bubble Sort</button>\n    <button id=\"resetButton\">Reset</button>\n</div>\n\n<script>\n    const arrayContainer = document.getElementById('arrayContainer');\n    const startButton = document.getElementById('startButton');\n    const resetButton = document.getElementById('resetButton');\n\n    let array = [];\n    let bars = [];\n    const arraySize = 10;\n\n    function generateRandomArray() {\n        array = Array.from({length: arraySize}, () => Math.floor(Math.random() * 100) + 1);\n        renderArray();\n    }\n\n    function renderArray() {\n        arrayContainer.innerHTML = '';\n        bars = [];\n        array.forEach((value, index) => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.id = `bar_${index}`;\n            bar.style.height = `${value * 3}px`;\n            arrayContainer.appendChild(bar);\n            bars.push(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        for (let i = 0; i < array.length; i++) {\n            for (let j = 0; j < array.length - i - 1; j++) {\n                if (array[j] > array[j + 1]) {\n                    // Swap\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    await highlightBars(j, j + 1);\n                }\n            }\n        }\n    }\n\n    async function highlightBars(index1, index2) {\n        bars[index1].style.backgroundColor = 'red';\n        bars[index2].style.backgroundColor = 'red';\n        await sleep(300);\n        renderArray();\n        await sleep(100);\n        bars[index1].style.backgroundColor = 'lightblue';\n        bars[index2].style.backgroundColor = 'lightblue';\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    startButton.addEventListener('click', async () => {\n        await bubbleSort();\n    });\n\n    resetButton.addEventListener('click', () => {\n        generateRandomArray();\n    });\n\n    // Initialize\n    generateRandomArray();\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\n\nEvery componet must have a unique id.\n\nIt must have a reset button to reset the demo.\n\nThe HTML should be fully self-contained and runnable in browser.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "01564340-a925-11f0-a3c6-e97af0ee1f6c",
    "timestamp": "2025-10-14T17:41:24.981Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n        }\n        .module {\n            width: calc(100% - 48px);\n            max-width: 600px;\n            background: white;\n            padding: 24px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            margin-bottom: 24px;\n        }\n        .module h2 {\n            margin: 0 0 16px;\n        }\n        .array-visualization {\n            display: flex;\n            justify-content: center;\n            height: 200px;\n            align-items: flex-end;\n            margin-bottom: 16px;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 8px;\n            background-color: teal;\n            transition: height 0.5s;\n        }\n        button {\n            padding: 10px 20px;\n            border: none;\n            background-color: #007bff;\n            color: white;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:disabled {\n            background-color: #ccc;\n        }\n        .info {\n            font-size: 14px;\n            margin-top: 8px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"module\">\n        <h2>Module 1: Introduction to Bubble Sort</h2>\n        <div class=\"info\">Learn the basics of Bubble Sort through this interactive visualization.</div>\n        <button onclick=\"nextModule()\">Next</button>\n    </div>\n    \n    <div class=\"module\" style=\"display:none;\">\n        <h2>Module 2: Visualizing Bubble Sort</h2>\n        <div class=\"array-visualization\" id=\"array-visualization\"></div>\n        <button id=\"start-button\" onclick=\"startBubbleSort()\">Start Sorting</button>\n        <div class=\"info\">Click \"Start Sorting\" to see how Bubble Sort works step by step.</div>\n    </div>\n\n    <script>\n        const randomArray = () => Array.from({length: 10}, () => Math.floor(Math.random() * 100) + 1);\n        let array = randomArray();\n\n        const renderArray = () => {\n            const visualization = document.getElementById('array-visualization');\n            visualization.innerHTML = '';\n            array.forEach(num => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${num * 2}px`;\n                visualization.appendChild(bar);\n            });\n        };\n\n        const bubbleSort = async () => {\n            const n = array.length;\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                        await new Promise(resolve => setTimeout(resolve, 500)); // Delay for visualization\n                    }\n                }\n            }\n            alert('Sorting complete!');\n            document.getElementById('start-button').disabled = false; // Re-enable button\n        };\n\n        const startBubbleSort = () => {\n            document.getElementById('start-button').disabled = true; // Disable button during sort\n            bubbleSort();\n        };\n\n        const nextModule = () => {\n            document.querySelector('.module:not([style*=\"display: none\"])').style.display = 'none';\n            document.querySelector('.module[style=\"display:none;\"]').style.display = 'block';\n            renderArray();\n        };\n\n        renderArray(); // Initial render\n    </script>\n\n    <script id=\"fsm\" type=\"application/json\">\n    {\n        \"topic\": \"Bubble Sort\",\n        \"description\": \"Interactive visualization of the bubble sort algorithm.\",\n        \"modules\": [\n            {\n                \"title\": \"Introduction to Bubble Sort\",\n                \"purpose\": \"Learn the basics of the bubble sort algorithm.\",\n                \"description\": \"Provides an overview of bubble sort and sets up for interactive learning.\",\n                \"layout\": \"Single module with a button to enter the next module.\"\n            },\n            {\n                \"title\": \"Visualizing Bubble Sort\",\n                \"purpose\": \"Understand how bubble sort processes an array.\",\n                \"description\": \"Visualizes the array state during sorting and enables the user to start the sort process interactively.\",\n                \"layout\": \"Container for the array bars and a button for initiating the sort.\"\n            }\n        ]\n    }\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\nAt the end of the HTML, automatically insert a <script id=fsm type=application/json> block\nYou are an expert in interactive web design, front-end pedagogy, and {topic}. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of {topic}.\n\n**Project Overview:**\n\nTopic: {topic}  \nDescription: {description}\n\n**Interactive Structure:**\n\nPlan the HTML interface as a sequence of interactive modules. For each module, please provide the following:\n\n*   **Module Title:** Short, descriptive title (2–5 words).\n*   **Module Purpose:** Learning or interaction goal of this module. How does it connect to the previous one?\n*   **Module Description:** Detailed explanation of the user interactions, what changes occur in response to clicks, drags, or inputs, and how these interactions reinforce understanding.\n*   **Module Layout:** Spatial layout concept for this section — describe element arrangement, interaction zones, and visual hierarchy. Include considerations for responsive design, safe area margins, and minimum spacing between interactive components.\n\n**Spatial Constraints:**\n*   **Safe area margins:** 24 px on all sides of the viewport. *All visual and interactive elements must stay within this region.*\n*   **Minimum spacing:** 16 px between any two interactive elements (buttons, sliders, inputs, visual components). *Maintain sufficient spacing to prevent overlap and accidental interaction.*\n\n**Requirements:**\n1. Modules must build progressively — from basic ideas to advanced or composite interactions — to maintain a coherent and intuitive learning flow.\n2. The total number of modules should be **between 3 and 7**.\n3. Each module should include **interactive feedback** (e.g., visual change, animation, or data update).\n4. The interface should be **self-contained** (no external libraries, assets, or APIs). Use only vanilla HTML, CSS, and JavaScript.\n5. Maintain consistent formatting, indentation, and XML tags as specified.\n6. The final HTML structure will later be implemented with procedural generation; ensure all layout constraints are explicitly stated.\n7. **No external or promotional content.** Focus purely on interactive explanation and conceptual clarity.\n8. Include at least one **dynamic visualization** (canvas, SVG, or DOM animation) illustrating the core principle of {topic}.\n\nNote: This is a high-level interface blueprint. Detailed implementation (HTML, CSS, JavaScript) will be generated later, respecting the safe area and spacing constraints specified above.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "1ac7a120-a925-11f0-aab0-e3392f318d56",
    "timestamp": "2025-10-14T17:42:07.666Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort Exploration</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            background-color: #f7f9fc;\n        }\n        .module {\n            width: 100%;\n            max-width: 800px;\n            padding: 24px;\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n            background: white;\n            margin-bottom: 16px;\n        }\n        .header {\n            margin-bottom: 24px;\n            text-align: center;\n        }\n        .array-container {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            height: 200px;\n            margin-bottom: 24px;\n            border: 2px solid #007BFF;\n            padding: 10px;\n        }\n        .bar {\n            width: 50px;\n            margin: 0 2px;\n            background-color: #007BFF;\n            transition: height 0.3s ease;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 10px;\n            border: none;\n            background-color: #007BFF;\n            color: white;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"module\">\n    <div class=\"header\">\n        <h1>Bubble Sort Visualization</h1>\n        <p>Understanding how Bubble Sort works through interactive exploration.</p>\n    </div>\n    <div class=\"array-container\" id=\"arrayContainer\"></div>\n    <button id=\"generateArray\">Generate Random Array</button>\n    <button id=\"sortArray\">Sort Array</button>\n    <p id=\"statusMessage\"></p>\n</div>\n\n<script>\n    const arrayContainer = document.getElementById(\"arrayContainer\");\n    const generateArrayButton = document.getElementById(\"generateArray\");\n    const sortArrayButton = document.getElementById(\"sortArray\");\n    const statusMessage = document.getElementById(\"statusMessage\");\n\n    let array = [];\n\n    function generateRandomArray() {\n        array = Array.from({ length: 10 }, () => Math.floor(Math.random() * 100) + 1);\n        renderArray();\n        statusMessage.textContent = \"Array generated!\";\n    }\n\n    function renderArray() {\n        arrayContainer.innerHTML = '';\n        array.forEach(num => {\n            const bar = document.createElement(\"div\");\n            bar.className = \"bar\";\n            bar.style.height = `${num * 2}px`; // Scale for visibility\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        const n = array.length;\n        for (let i = 0; i < n - 1; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                const bars = document.querySelectorAll('.bar');\n                bars[j].style.backgroundColor = 'red'; // Current elements being compared\n                bars[j + 1].style.backgroundColor = 'red'; // Current elements being compared\n                \n                if (array[j] > array[j + 1]) {\n                    // Swap\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    renderArray();\n                    await sleep(400); // Pause to visualize swap\n                }\n\n                bars[j].style.backgroundColor = '#007BFF'; // Reset color\n                bars[j + 1].style.backgroundColor = '#007BFF'; // Reset color\n            }\n        }\n        statusMessage.textContent = \"Array sorted!\";\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    generateArrayButton.addEventListener(\"click\", generateRandomArray);\n    sortArrayButton.addEventListener(\"click\", bubbleSort);\n\n</script>\n\n<script id=\"fsm\" type=\"application/json\">\n{\n    \"modules\": [\n        {\n            \"title\": \"Array Initialization\",\n            \"purpose\": \"Generate and display a random array.\",\n            \"description\": \"This module allows users to generate a random array of integers for sorting. Clicking the button displays new bars representing the array values.\",\n            \"layout\": {\n                \"spacing\": \"16px\",\n                \"margins\": \"24px\",\n                \"elements\": [\n                    \"button\",\n                    \"array\",\n                    \"message\"\n                ]\n            }\n        },\n        {\n            \"title\": \"Interactive Sorting\",\n            \"purpose\": \"Visualize the Bubble Sort algorithm.\",\n            \"description\": \"With the generated array, the user can click to sort the array using Bubble Sort, which animates the sorting process, showing comparisons and swaps.\",\n            \"layout\": {\n                \"spacing\": \"16px\",\n                \"margins\": \"24px\",\n                \"elements\": [\n                    \"button\",\n                    \"array\",\n                    \"message\"\n                ]\n            }\n        }\n    ]\n}\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\nAt the end of the HTML, automatically insert a <script id=fsm type=application/json> block\nYou are an expert in interactive web design, front-end pedagogy, and {topic}. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of {topic}.\n\n**Project Overview:**\n\nTopic: {topic}  \nDescription: {description}\n\n**Interactive Structure:**\n\nPlan the HTML interface as a sequence of interactive modules. For each module, please provide the following:\n\n*   **Module Title:** Short, descriptive title (2–5 words).\n*   **Module Purpose:** Learning or interaction goal of this module. How does it connect to the previous one?\n*   **Module Description:** Detailed explanation of the user interactions, what changes occur in response to clicks, drags, or inputs, and how these interactions reinforce understanding.\n*   **Module Layout:** Spatial layout concept for this section — describe element arrangement, interaction zones, and visual hierarchy. Include considerations for responsive design, safe area margins, and minimum spacing between interactive components.\n\n**Spatial Constraints:**\n*   **Safe area margins:** 24 px on all sides of the viewport. *All visual and interactive elements must stay within this region.*\n*   **Minimum spacing:** 16 px between any two interactive elements (buttons, sliders, inputs, visual components). *Maintain sufficient spacing to prevent overlap and accidental interaction.*\n\n**Requirements:**\n1. Modules must build progressively — from basic ideas to advanced or composite interactions — to maintain a coherent and intuitive learning flow.\n2. The total number of modules should be **between 3 and 7**.\n3. Each module should include **interactive feedback** (e.g., visual change, animation, or data update).\n4. The interface should be **self-contained** (no external libraries, assets, or APIs). Use only vanilla HTML, CSS, and JavaScript.\n5. Maintain consistent formatting, indentation, and XML tags as specified.\n6. The final HTML structure will later be implemented with procedural generation; ensure all layout constraints are explicitly stated.\n7. **No external or promotional content.** Focus purely on interactive explanation and conceptual clarity.\n8. Include at least one **dynamic visualization** (canvas, SVG, or DOM animation) illustrating the core principle of {topic}.\n\nNote: This is a high-level interface blueprint. Detailed implementation (HTML, CSS, JavaScript) will be generated later, respecting the safe area and spacing constraints specified above.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "929e0900-a925-11f0-a3b6-71aa9d90c09a",
    "timestamp": "2025-10-14T17:45:28.720Z",
    "model": "gpt-5",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Bubble Sort — Interactive Modules</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root{\n      --safe:24px;\n      --gap:16px;\n      --radius:12px;\n      --bg:#0f172a;\n      --panel:#111827;\n      --ink:#e5e7eb;\n      --muted:#9ca3af;\n      --accent:#60a5fa;\n      --accent-2:#f59e0b;\n      --good:#10b981;\n      --bad:#ef4444;\n      --warn:#f59e0b;\n      --grid:#1f2937;\n      --chip:#1f2937;\n      --card-border:#1f2937;\n      --focus:#8b5cf6;\n    }\n    *{box-sizing:border-box}\n    html,body{height:100%}\n    body{\n      margin:0;\n      background:var(--bg);\n      color:var(--ink);\n      font:16px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, \"Helvetica Neue\", Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\n      -webkit-font-smoothing:antialiased;\n      -moz-osx-font-smoothing:grayscale;\n    }\n    .app{\n      padding:var(--safe);\n      max-width:1200px;\n      margin:0 auto;\n    }\n    header{\n      margin-bottom:24px;\n    }\n    h1{\n      font-size:28px;\n      line-height:1.2;\n      margin:0 0 8px 0;\n    }\n    .subtitle{\n      color:var(--muted);\n      font-size:14px;\n      margin-bottom:8px;\n    }\n    .note{\n      color:var(--muted);\n      font-size:13px;\n    }\n    .module{\n      background:var(--panel);\n      border:1px solid var(--card-border);\n      border-radius:var(--radius);\n      padding:24px;\n      margin-bottom:24px;\n      box-shadow:0 0 0 1px rgba(255,255,255,0.02) inset, 0 6px 24px rgba(0,0,0,0.2);\n    }\n    .module h2{\n      font-size:20px;\n      margin:0 0 8px 0;\n    }\n    .meta{\n      background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);\n      border:1px dashed #243244;\n      border-radius:10px;\n      padding:16px;\n      margin-bottom:16px;\n    }\n    .meta .row{\n      margin-bottom:10px;\n    }\n    .meta .row:last-child{margin-bottom:0}\n    .meta b{\n      display:inline-block;\n      min-width:160px;\n      color:#cbd5e1;\n    }\n    .controls{\n      display:flex;\n      flex-wrap:wrap;\n      gap:var(--gap);\n      align-items:flex-end;\n      margin:16px 0;\n    }\n    .control{\n      display:flex;\n      flex-direction:column;\n      gap:8px;\n      min-width:180px;\n    }\n    .control.inline{\n      min-width:auto;\n    }\n    label{\n      font-size:13px;\n      color:#cbd5e1;\n    }\n    input[type=\"range\"]{\n      width:220px;\n      accent-color:var(--accent);\n    }\n    input[type=\"number\"], select{\n      background:#0b1220;\n      border:1px solid #202b3c;\n      color:var(--ink);\n      padding:10px 12px;\n      border-radius:10px;\n      min-width:120px;\n      outline:none;\n    }\n    button{\n      background:linear-gradient(180deg, #1e293b, #0f172a);\n      border:1px solid #1f2a3c;\n      color:var(--ink);\n      padding:10px 14px;\n      border-radius:10px;\n      cursor:pointer;\n      transition:transform .08s ease, background .2s ease, border-color .2s ease;\n      min-width:120px;\n    }\n    button:hover{transform:translateY(-1px)}\n    button:active{transform:translateY(0)}\n    button[disabled]{\n      opacity:.5;\n      cursor:not-allowed;\n      transform:none;\n    }\n    .btn-accent{\n      background:linear-gradient(180deg, #2563eb, #1d4ed8);\n      border-color:#1e40af;\n    }\n    .btn-ghost{\n      background:transparent;\n      border-color:#253246;\n    }\n    .btn-warn{\n      background:linear-gradient(180deg, #f59e0b, #d97706);\n      border-color:#b45309;\n      color:#0b1220;\n    }\n    .btn-bad{\n      background:linear-gradient(180deg, #ef4444, #dc2626);\n      border-color:#991b1b;\n    }\n    .btn-good{\n      background:linear-gradient(180deg, #10b981, #059669);\n      border-color:#065f46;\n      color:#072113;\n    }\n    .row{\n      display:flex;\n      flex-wrap:wrap;\n      gap:var(--gap);\n    }\n    .badge{\n      display:inline-flex;\n      align-items:center;\n      gap:8px;\n      border-radius:999px;\n      padding:6px 10px;\n      background:var(--chip);\n      border:1px solid #243244;\n      font-size:12px;\n      color:#cbd5e1;\n    }\n    .stat{\n      background:#0b1220;\n      border:1px solid #202b3c;\n      border-radius:10px;\n      padding:10px 12px;\n      min-width:140px;\n    }\n    .stat .v{\n      font-weight:700;\n      font-size:18px;\n    }\n    .vis{\n      width:100%;\n      background:#0b1220;\n      border:1px solid #202b3c;\n      border-radius:12px;\n      padding:12px;\n      overflow:hidden;\n    }\n    svg{\n      display:block;\n      width:100%;\n      height:240px;\n      background:\n        linear-gradient(0deg, rgba(255,255,255,0.02), transparent),\n        repeating-linear-gradient(0deg, transparent, transparent 24px, rgba(255,255,255,0.03) 24px, rgba(255,255,255,0.03) 25px);\n      border-radius:8px;\n    }\n    .legend{\n      display:flex;\n      flex-wrap:wrap;\n      gap:10px;\n      margin-top:8px;\n      color:#cbd5e1;\n      font-size:12px;\n    }\n    .legend .key{\n      display:inline-flex;\n      align-items:center;\n      gap:8px;\n      margin-right:8px;\n    }\n    .dot{\n      width:12px;height:12px;border-radius:3px;display:inline-block;border:1px solid rgba(255,255,255,0.2);\n    }\n    .k-compare{background:linear-gradient(180deg, #f59e0b, #d97706)}\n    .k-swap{background:linear-gradient(180deg, #ef4444, #dc2626)}\n    .k-sorted{background:linear-gradient(180deg, #10b981, #059669)}\n    .k-normal{background:linear-gradient(180deg, #60a5fa, #3b82f6)}\n    .aria-live{\n      position:relative;\n      margin-top:8px;\n      color:#cbd5e1;\n      font-size:13px;\n    }\n    .gbar{transition:transform .28s ease}\n    .bar{rx:4; ry:4; fill:url(#gradBar); stroke:#1b2840; stroke-width:1}\n    .bar-label{font-size:10px; fill:#d1d5db; text-anchor:middle}\n    .bar-tag{font-size:12px; fill:#94a3b8; text-anchor:middle}\n    .bar.compare{filter:drop-shadow(0 0 8px rgba(245,158,11,.6))}\n    .bar.swap{filter:drop-shadow(0 0 8px rgba(239,68,68,.6))}\n    .bar.sorted{filter:drop-shadow(0 0 6px rgba(16,185,129,.6))}\n    .ptr{\n      fill:none; stroke:#8b5cf6; stroke-width:2; stroke-dasharray:6 6\n    }\n    .ptr-tip{\n      fill:#8b5cf6;\n    }\n    .hl{\n      background:rgba(139,92,246,0.12);\n      border:1px solid rgba(139,92,246,0.3);\n      padding:8px 10px;\n      border-radius:8px;\n      font-size:13px;\n      color:#d1d5db;\n    }\n    .timeline{\n      display:flex; gap:8px; flex-wrap:wrap; margin-top:8px;\n    }\n    .tick{\n      height:10px; width:14px; border-radius:4px; background:#122;\n      border:1px solid #223147;\n    }\n    .tick.on{background:#10b981}\n    .chart{\n      width:100%; height:260px; background:#0b1220; border:1px solid #202b3c; border-radius:12px; padding:8px;\n    }\n    canvas{width:100%; height:240px; display:block; background:\n      linear-gradient(0deg, rgba(255,255,255,0.02), transparent),\n      repeating-linear-gradient(0deg, transparent, transparent 24px, rgba(255,255,255,0.03) 24px, rgba(255,255,255,0.03) 25px);\n      border-radius:8px;\n    }\n    .grid-2{\n      display:grid;\n      grid-template-columns:1fr 1fr;\n      gap:var(--gap);\n    }\n    @media (max-width: 900px){\n      .grid-2{grid-template-columns:1fr}\n      input[type=\"range\"]{width:160px}\n    }\n    .sr-only{\n      position:absolute !important;\n      width:1px;height:1px;\n      margin:-1px; border:0; padding:0;\n      white-space:nowrap; clip-path:inset(100%); clip:rect(0 0 0 0); overflow:hidden;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"app\" role=\"application\" aria-label=\"Bubble Sort Interactive Modules\">\n    <header>\n      <h1>Bubble Sort — Hands‑on Exploration</h1>\n      <div class=\"subtitle\">Progressive, interactive modules that build intuition from adjacent comparisons to full algorithm behavior, stability, and complexity.</div>\n      <div class=\"note\">Spatial constraints: all content is contained within a 24 px safe area on all sides. A minimum of 16 px spacing is enforced between interactive elements to prevent overlap or accidental taps.</div>\n    </header>\n\n    <section class=\"module\" id=\"m1\">\n      <h2>1. Compare & Swap</h2>\n      <div class=\"meta\" aria-label=\"Module overview\">\n        <div class=\"row\">\n          <div class=\"hl\">Module Title: Compare & Swap</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Purpose:</b>\n          <div>Understand the fundamental operation of Bubble Sort: comparing adjacent elements and swapping when out of order. This initializes the shared array used by subsequent modules.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Description:</b>\n          <div>Generate an array, then select an adjacent pair. Click Compare to highlight the pair. If out of order, the interface prompts a Swap, animating the exchange and updating counters. This tactile compare-then-swap loop underpins the full algorithm.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Layout:</b>\n          <div>\n            Controls appear above a responsive SVG bar visualization. Controls are grouped in rows with at least 16 px gaps between inputs and buttons. The entire module sits within the 24 px safe area margins. On small screens, controls wrap to new lines to maintain spacing. Interactive elements (buttons, sliders, selectors) maintain a minimum of 16 px separation.\n          </div>\n        </div>\n      </div>\n\n      <div class=\"controls\" aria-label=\"Array setup and comparison controls\">\n        <div class=\"control\">\n          <label for=\"m1-size\">Array size</label>\n          <input type=\"range\" id=\"m1-size\" min=\"5\" max=\"20\" value=\"10\" />\n        </div>\n        <div class=\"control\">\n          <label for=\"m1-dist\">Preset</label>\n          <select id=\"m1-dist\">\n            <option value=\"random\">Random</option>\n            <option value=\"reversed\">Reversed</option>\n            <option value=\"sorted\">Already sorted</option>\n            <option value=\"nearly\">Nearly sorted</option>\n          </select>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m1-generate\" class=\"btn-accent\" aria-label=\"Generate array\">Generate</button>\n        </div>\n        <div class=\"control\">\n          <label for=\"m1-pair\">Pair start index (j)</label>\n          <input type=\"range\" id=\"m1-pair\" min=\"0\" max=\"8\" value=\"0\" />\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m1-compare\" class=\"btn-ghost\" aria-label=\"Compare selected pair\">Compare</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m1-swap\" class=\"btn-bad\" aria-label=\"Swap selected pair if out of order\" disabled>Swap</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m1-broadcast\" class=\"btn-good\" aria-label=\"Share this array with subsequent modules\">Share Array →</button>\n        </div>\n      </div>\n\n      <div class=\"row\" style=\"margin-bottom:var(--gap)\">\n        <div class=\"stat\"><div>Comparisons</div><div class=\"v\" id=\"m1-cmp\">0</div></div>\n        <div class=\"stat\"><div>Swaps</div><div class=\"v\" id=\"m1-swp\">0</div></div>\n      </div>\n\n      <div class=\"vis\">\n        <svg id=\"m1-svg\" viewBox=\"0 0 1000 240\" preserveAspectRatio=\"none\" aria-label=\"Array bars visualization\">\n          <defs>\n            <linearGradient id=\"gradBar\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"0\" stop-color=\"#60a5fa\"/>\n              <stop offset=\"1\" stop-color=\"#3b82f6\"/>\n            </linearGradient>\n          </defs>\n        </svg>\n        <div class=\"legend\" aria-hidden=\"true\">\n          <div class=\"key\"><span class=\"dot k-normal\"></span> normal</div>\n          <div class=\"key\"><span class=\"dot k-compare\"></span> compare</div>\n          <div class=\"key\"><span class=\"dot k-swap\"></span> swap</div>\n        </div>\n        <div class=\"aria-live\" id=\"m1-live\" aria-live=\"polite\"></div>\n      </div>\n    </section>\n\n    <section class=\"module\" id=\"m2\">\n      <h2>2. One Pass Sweep</h2>\n      <div class=\"meta\" aria-label=\"Module overview\">\n        <div class=\"row\">\n          <div class=\"hl\">Module Title: One Pass Sweep</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Purpose:</b>\n          <div>Experience how a single pass bubbles the largest remaining element to the end. Builds directly on the compare-and-swap primitive.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Description:</b>\n          <div>Step through or play a left-to-right sweep comparing adjacent pairs. Swaps occur automatically when needed. The final element of the pass is marked sorted.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Layout:</b>\n          <div>Controls are placed above the SVG timeline and bar visualization, maintaining at least 16 px spacing between each interactive item. The module respects the 24 px safe area. On narrow screens, controls wrap without overlap.</div>\n        </div>\n      </div>\n\n      <div class=\"controls\" aria-label=\"Single pass controls\">\n        <div class=\"control\">\n          <label for=\"m2-speed\">Animation speed (ms)</label>\n          <input type=\"range\" id=\"m2-speed\" min=\"80\" max=\"800\" value=\"280\" />\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m2-use-shared\" class=\"btn-ghost\">Use Shared Array</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m2-step\" class=\"btn-accent\">Step</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m2-play\" class=\"btn-accent\">Play Pass</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m2-reset\" class=\"btn-ghost\">Reset Pass</button>\n        </div>\n      </div>\n\n      <div class=\"row\" style=\"margin-bottom:var(--gap)\">\n        <div class=\"stat\"><div>j index</div><div class=\"v\" id=\"m2-j\">0</div></div>\n        <div class=\"stat\"><div>Comparisons</div><div class=\"v\" id=\"m2-cmp\">0</div></div>\n        <div class=\"stat\"><div>Swaps</div><div class=\"v\" id=\"m2-swp\">0</div></div>\n      </div>\n\n      <div class=\"vis\">\n        <svg id=\"m2-svg\" viewBox=\"0 0 1000 240\" preserveAspectRatio=\"none\" aria-label=\"One pass visualization\"></svg>\n        <div class=\"legend\" aria-hidden=\"true\">\n          <div class=\"key\"><span class=\"dot k-compare\"></span> current pair (j, j+1)</div>\n          <div class=\"key\"><span class=\"dot k-swap\"></span> swapping</div>\n          <div class=\"key\"><span class=\"dot k-sorted\"></span> bubbled element</div>\n        </div>\n        <div class=\"aria-live\" id=\"m2-live\" aria-live=\"polite\"></div>\n      </div>\n    </section>\n\n    <section class=\"module\" id=\"m3\">\n      <h2>3. Full Algorithm Explorer</h2>\n      <div class=\"meta\" aria-label=\"Module overview\">\n        <div class=\"row\">\n          <div class=\"hl\">Module Title: Full Algorithm Explorer</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Purpose:</b>\n          <div>Run Bubble Sort end-to-end with step and play controls. Observe passes, counters, and the shrinking unsorted window.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Description:</b>\n          <div>Control the sorting process: step through individual comparisons or play continuously. After each pass, the rightmost segment is marked sorted. Counters update in real time.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Layout:</b>\n          <div>Controls are arranged above the visualization with 16 px spacing; indicators are grouped as stats. All content remains within the 24 px safe area. The visualization scales to available width.</div>\n        </div>\n      </div>\n\n      <div class=\"controls\" aria-label=\"Full sort controls\">\n        <div class=\"control\">\n          <label for=\"m3-speed\">Animation speed (ms)</label>\n          <input type=\"range\" id=\"m3-speed\" min=\"60\" max=\"800\" value=\"220\" />\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m3-use-shared\" class=\"btn-ghost\">Use Shared Array</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m3-step\" class=\"btn-accent\">Step</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m3-play\" class=\"btn-accent\">Play</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m3-pause\" class=\"btn-ghost\" disabled>Pause</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m3-reset\" class=\"btn-ghost\">Reset</button>\n        </div>\n      </div>\n\n      <div class=\"row\" style=\"margin-bottom:var(--gap)\">\n        <div class=\"stat\"><div>Pass</div><div class=\"v\" id=\"m3-pass\">1</div></div>\n        <div class=\"stat\"><div>j index</div><div class=\"v\" id=\"m3-j\">0</div></div>\n        <div class=\"stat\"><div>Comparisons</div><div class=\"v\" id=\"m3-cmp\">0</div></div>\n        <div class=\"stat\"><div>Swaps</div><div class=\"v\" id=\"m3-swp\">0</div></div>\n      </div>\n\n      <div class=\"vis\">\n        <svg id=\"m3-svg\" viewBox=\"0 0 1000 240\" preserveAspectRatio=\"none\" aria-label=\"Full sort visualization\"></svg>\n        <div class=\"legend\" aria-hidden=\"true\">\n          <div class=\"key\"><span class=\"dot k-compare\"></span> comparing</div>\n          <div class=\"key\"><span class=\"dot k-swap\"></span> swapping</div>\n          <div class=\"key\"><span class=\"dot k-sorted\"></span> sorted region</div>\n        </div>\n        <div class=\"aria-live\" id=\"m3-live\" aria-live=\"polite\"></div>\n      </div>\n    </section>\n\n    <section class=\"module\" id=\"m4\">\n      <h2>4. Early Exit Optimization</h2>\n      <div class=\"meta\" aria-label=\"Module overview\">\n        <div class=\"row\">\n          <div class=\"hl\">Module Title: Early Exit Optimization</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Purpose:</b>\n          <div>See how tracking swaps per pass allows Bubble Sort to stop early when the array is already sorted, improving best-case complexity.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Description:</b>\n          <div>Toggle early exit on/off, pick a preset (e.g., Already sorted or Nearly sorted), then run. The run stops immediately after a pass with no swaps if early exit is enabled.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Layout:</b>\n          <div>Two-column layout on wide screens: controls and stats on the left, visualization on the right; stacked on narrow screens. Controls maintain 16 px spacing; all content sits within 24 px margins.</div>\n        </div>\n      </div>\n\n      <div class=\"grid-2\">\n        <div>\n          <div class=\"controls\" aria-label=\"Early exit controls\">\n            <div class=\"control\">\n              <label for=\"m4-speed\">Animation speed (ms)</label>\n              <input type=\"range\" id=\"m4-speed\" min=\"60\" max=\"800\" value=\"220\" />\n            </div>\n            <div class=\"control\">\n              <label for=\"m4-early\">Early exit</label>\n              <select id=\"m4-early\">\n                <option value=\"on\">On</option>\n                <option value=\"off\">Off</option>\n              </select>\n            </div>\n            <div class=\"control\">\n              <label for=\"m4-preset\">Preset</label>\n              <select id=\"m4-preset\">\n                <option value=\"shared\">Use Shared Array</option>\n                <option value=\"sorted\">Already sorted</option>\n                <option value=\"nearly\">Nearly sorted</option>\n                <option value=\"reversed\">Reversed</option>\n                <option value=\"random\">Random</option>\n              </select>\n            </div>\n            <div class=\"control inline\">\n              <button id=\"m4-run\" class=\"btn-accent\">Run</button>\n            </div>\n            <div class=\"control inline\">\n              <button id=\"m4-reset\" class=\"btn-ghost\">Reset</button>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"stat\"><div>Passes</div><div class=\"v\" id=\"m4-pass\">0</div></div>\n            <div class=\"stat\"><div>Comparisons</div><div class=\"v\" id=\"m4-cmp\">0</div></div>\n            <div class=\"stat\"><div>Swaps</div><div class=\"v\" id=\"m4-swp\">0</div></div>\n            <div class=\"stat\"><div>Early exit</div><div class=\"v\" id=\"m4-exit\">—</div></div>\n          </div>\n          <div class=\"timeline\" id=\"m4-timeline\" aria-label=\"Pass activity timeline\"></div>\n          <div class=\"aria-live\" id=\"m4-live\" aria-live=\"polite\"></div>\n        </div>\n        <div>\n          <div class=\"vis\">\n            <svg id=\"m4-svg\" viewBox=\"0 0 1000 240\" preserveAspectRatio=\"none\" aria-label=\"Early exit visualization\"></svg>\n            <div class=\"legend\" aria-hidden=\"true\">\n              <div class=\"key\"><span class=\"dot k-sorted\"></span> sorted region</div>\n              <div class=\"key\"><span class=\"dot k-compare\"></span> comparing</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"module\" id=\"m5\">\n      <h2>5. Stability with Duplicates</h2>\n      <div class=\"meta\" aria-label=\"Module overview\">\n        <div class=\"row\">\n          <div class=\"hl\">Module Title: Stability with Duplicates</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Purpose:</b>\n          <div>Visualize Bubble Sort’s stability: equal-valued items preserve their original relative order when the algorithm only swaps on greater-than.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Description:</b>\n          <div>Generate pairs of equal values marked with tags (A1, A2, …). Run the stable version (swap only if left > right) and an unstable variant (swap if left ≥ right) to compare outcomes.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Layout:</b>\n          <div>Two runs side-by-side on wide screens: left shows stable behavior, right shows unstable. On small screens, they stack. Controls maintain a minimum of 16 px spacing. Everything remains within 24 px margins.</div>\n        </div>\n      </div>\n\n      <div class=\"controls\" aria-label=\"Stability controls\">\n        <div class=\"control\">\n          <label for=\"m5-pairs\">Duplicate pairs</label>\n          <input type=\"range\" id=\"m5-pairs\" min=\"2\" max=\"6\" value=\"3\" />\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m5-generate\" class=\"btn-accent\">Generate Duplicates</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m5-run\" class=\"btn-accent\">Run Both</button>\n        </div>\n        <div class=\"control inline\">\n          <button id=\"m5-reset\" class=\"btn-ghost\">Reset</button>\n        </div>\n      </div>\n\n      <div class=\"grid-2\">\n        <div>\n          <div class=\"badge\">Stable (swap if > only)</div>\n          <div class=\"vis\">\n            <svg id=\"m5-stable\" viewBox=\"0 0 1000 240\" preserveAspectRatio=\"none\" aria-label=\"Stable sort visualization\"></svg>\n            <div class=\"aria-live\" id=\"m5-live-stable\" aria-live=\"polite\"></div>\n          </div>\n        </div>\n        <div>\n          <div class=\"badge\">Unstable variant (swap if ≥)</div>\n          <div class=\"vis\">\n            <svg id=\"m5-unstable\" viewBox=\"0 0 1000 240\" preserveAspectRatio=\"none\" aria-label=\"Unstable variant visualization\"></svg>\n            <div class=\"aria-live\" id=\"m5-live-unstable\" aria-live=\"polite\"></div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\" style=\"margin-top:var(--gap)\">\n        <div class=\"stat\"><div>Stable preserved?</div><div class=\"v\" id=\"m5-stable-ok\">—</div></div>\n        <div class=\"stat\"><div>Unstable changed?</div><div class=\"v\" id=\"m5-unstable-change\">—</div></div>\n      </div>\n    </section>\n\n    <section class=\"module\" id=\"m6\">\n      <h2>6. Complexity Explorer</h2>\n      <div class=\"meta\" aria-label=\"Module overview\">\n        <div class=\"row\">\n          <div class=\"hl\">Module Title: Complexity Explorer</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Purpose:</b>\n          <div>Relate hands-on observations to time complexity. Contrast best/worst/average cases and the effect of early exit.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Description:</b>\n          <div>Adjust N to see how comparison and swap counts grow. Without early exit, comparisons are always N(N−1)/2. With early exit, best-case comparisons drop to N−1.</div>\n        </div>\n        <div class=\"row\">\n          <b>Module Layout:</b>\n          <div>Controls sit above a responsive canvas line chart. Spacing between inputs is 16 px or more. All elements are contained within the 24 px safe area.</div>\n        </div>\n      </div>\n\n      <div class=\"controls\" aria-label=\"Complexity controls\">\n        <div class=\"control\">\n          <label for=\"m6-n\">N (array size)</label>\n          <input type=\"range\" id=\"m6-n\" min=\"3\" max=\"80\" value=\"20\" />\n        </div>\n        <div class=\"control\">\n          <label for=\"m6-exit-mode\">Show best-case (early exit)</label>\n          <select id=\"m6-exit-mode\">\n            <option value=\"with\">With early exit best-case</option>\n            <option value=\"without\">Without early exit</option>\n            <option value=\"both\">Compare both</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"row\" style=\"margin-bottom:var(--gap)\">\n        <div class=\"stat\"><div>Worst comps</div><div class=\"v\" id=\"m6-worst-c\">—</div></div>\n        <div class=\"stat\"><div>Best comps</div><div class=\"v\" id=\"m6-best-c\">—</div></div>\n        <div class=\"stat\"><div>Avg swaps (≈)</div><div class=\"v\" id=\"m6-avg-s\">—</div></div>\n      </div>\n\n      <div class=\"chart\">\n        <canvas id=\"m6-canvas\" width=\"1000\" height=\"240\" aria-label=\"Complexity line chart\"></canvas>\n      </div>\n    </section>\n\n    <footer class=\"note\" style=\"margin-top:24px\">\n      Interaction guidance: All modules maintain minimum 16 px spacing between interactive elements and stay inside a 24 px safe area margin. Visualizations are dynamic, responsive, and keyboard-operable via buttons and sliders.\n    </footer>\n  </div>\n\n  <script>\n    (function(){\n      const clamp = (n, a, b)=> Math.max(a, Math.min(b, n));\n      const randInt = (a,b)=> Math.floor(Math.random()*(b-a+1))+a;\n      const copy = x => JSON.parse(JSON.stringify(x));\n      const uid = (()=>{let i=0; return ()=>++i})();\n      const dispatch = (name, detail)=> document.dispatchEvent(new CustomEvent(name, {detail}));\n\n      function genArray(n, preset='random'){\n        const arr = Array.from({length:n}, (_,i)=>({ id: uid(), value: randInt(10, 99), tag: null, baseIndex: i }));\n        if(preset==='sorted'){\n          arr.sort((a,b)=>a.value-b.value);\n        }else if(preset==='reversed'){\n          arr.sort((a,b)=>b.value-a.value);\n        }else if(preset==='nearly'){\n          arr.sort((a,b)=>a.value-b.value);\n          // introduce a few local inversions\n          for(let k=0;k<Math.max(1, Math.floor(n/6));k++){\n            const i = randInt(0, n-2);\n            [arr[i], arr[i+1]] = [arr[i+1], arr[i]];\n          }\n        }\n        // reset baseIndex to record initial order for stability checks\n        arr.forEach((x, i)=> x.baseIndex = i);\n        return arr;\n      }\n\n      // Shared array state (originated in Module 1)\n      let sharedArray = genArray(10, 'random');\n\n      // Generic bar renderer for SVG\n      function BarViz(svg){\n        const api = {};\n        let data = [];\n        let sortedRight = 0;\n        let comparePair = null; // [i, j]\n        let labels = false;\n        let showTags = false;\n\n        function clearSVG(){\n          while(svg.firstChild) svg.removeChild(svg.firstChild);\n          const defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n          const lg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"linearGradient\");\n          lg.setAttribute(\"id\",\"gradBar\");\n          lg.setAttribute(\"x1\",\"0\"); lg.setAttribute(\"y1\",\"0\"); lg.setAttribute(\"x2\",\"0\"); lg.setAttribute(\"y2\",\"1\");\n          const s1 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"stop\"); s1.setAttribute(\"offset\",\"0\"); s1.setAttribute(\"stop-color\", \"#60a5fa\");\n          const s2 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"stop\"); s2.setAttribute(\"offset\",\"1\"); s2.setAttribute(\"stop-color\", \"#3b82f6\");\n          lg.appendChild(s1); lg.appendChild(s2); defs.appendChild(lg);\n          svg.appendChild(defs);\n        }\n\n        function layout(){\n          const W = 1000, H = 240, P = 16, base = 220;\n          const n = data.length;\n          const gap = Math.max(4, 1000/(n*8));\n          const barW = (W - 2*P - (n-1)*gap)/n;\n          const maxV = Math.max(...data.map(d=>d.value), 1);\n          const scale = (v)=> (v/maxV)*180 + 12;\n          return {W,H,P,base,barW,gap,scale};\n        }\n\n        function render(){\n          clearSVG();\n          const {W,H,P,base,barW,gap,scale} = layout();\n          const gRoot = document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\");\n          gRoot.setAttribute(\"transform\", `translate(${P},0)`);\n          svg.appendChild(gRoot);\n\n          data.forEach((d, i)=>{\n            const g = document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\");\n            g.classList.add(\"gbar\");\n            g.dataset.id = d.id;\n            const x = i*(barW+gap);\n            const h = scale(d.value);\n            g.setAttribute(\"transform\", `translate(${x}, ${base-h})`);\n\n            const r = document.createElementNS(\"http://www.w3.org/2000/svg\",\"rect\");\n            r.setAttribute(\"class\", \"bar\");\n            r.setAttribute(\"width\", barW);\n            r.setAttribute(\"height\", h);\n            r.setAttribute(\"rx\",\"4\"); r.setAttribute(\"ry\",\"4\");\n\n            if (sortedRight && i >= data.length - sortedRight) r.classList.add(\"sorted\");\n\n            const text = document.createElementNS(\"http://www.w3.org/2000/svg\",\"text\");\n            text.setAttribute(\"x\", barW/2);\n            text.setAttribute(\"y\", h-8);\n            text.setAttribute(\"class\",\"bar-label\");\n            text.textContent = d.value;\n\n            g.appendChild(r);\n            g.appendChild(text);\n\n            if(showTags && d.tag){\n              const tag = document.createElementNS(\"http://www.w3.org/2000/svg\",\"text\");\n              tag.setAttribute(\"x\", barW/2);\n              tag.setAttribute(\"y\", h+14);\n              tag.setAttribute(\"class\",\"bar-tag\");\n              tag.textContent = d.tag;\n              g.appendChild(tag);\n            }\n\n            gRoot.appendChild(g);\n          });\n        }\n\n        function updatePositions(hl = {}){\n          const {P,base,barW,gap,scale} = layout();\n          const groups = [...svg.querySelectorAll(\".gbar\")];\n          groups.forEach((g, i)=>{\n            const d = data[i];\n            const x = i*(barW+gap);\n            const h = scale(d.value);\n            g.style.transform = `translate(${P + x}px, ${base-h}px)`;\n            const rect = g.querySelector(\"rect\");\n            rect.classList.remove(\"compare\",\"swap\",\"sorted\");\n            if(hl.compare && hl.compare.has(i)) rect.classList.add(\"compare\");\n            if(hl.swap && hl.swap.has(i)) rect.classList.add(\"swap\");\n            if(sortedRight && i >= data.length - sortedRight) rect.classList.add(\"sorted\");\n            const lbl = g.querySelector(\".bar-label\");\n            lbl.setAttribute(\"y\", h-8);\n            lbl.textContent = d.value;\n            const tag = g.querySelector(\".bar-tag\");\n            if(tag){ tag.setAttribute(\"y\", h+14); tag.textContent = d.tag || \"\"; }\n          });\n        }\n\n        function setData(arr, opts={}){\n          data = copy(arr);\n          sortedRight = 0;\n          showTags = !!opts.showTags;\n          render();\n        }\n\n        function setSortedRight(k){\n          sortedRight = k;\n          updatePositions();\n        }\n\n        function swap(i, j){\n          [data[i], data[j]] = [data[j], data[i]];\n          updatePositions({swap:new Set([i,j])});\n        }\n\n        function highlight(i, j, kind='compare'){\n          const s = {}; s[kind] = new Set([i,j]);\n          updatePositions(s);\n        }\n\n        function clearHighlight(){\n          updatePositions();\n        }\n\n        function getData(){ return data; }\n\n        api.setData = setData;\n        api.getData = getData;\n        api.setSortedRight = setSortedRight;\n        api.swap = swap;\n        api.highlight = highlight;\n        api.clearHighlight = clearHighlight;\n        api.update = ()=> updatePositions();\n        api.enableTags = (flag)=> { showTags = !!flag; render(); };\n        return api;\n      }\n\n      // Module 1: Compare & Swap\n      const m1 = (function(){\n        const svg = document.getElementById(\"m1-svg\");\n        const viz = BarViz(svg);\n        const sz = document.getElementById(\"m1-size\");\n        const dist = document.getElementById(\"m1-dist\");\n        const generate = document.getElementById(\"m1-generate\");\n        const pair = document.getElementById(\"m1-pair\");\n        const btnCompare = document.getElementById(\"m1-compare\");\n        const btnSwap = document.getElementById(\"m1-swap\");\n        const btnShare = document.getElementById(\"m1-broadcast\");\n        const live = document.getElementById(\"m1-live\");\n        const cmpEl = document.getElementById(\"m1-cmp\");\n        const swpEl = document.getElementById(\"m1-swp\");\n\n        let arr = copy(sharedArray);\n        let comparisons = 0, swaps = 0;\n        let lastCompareOutOfOrder = false;\n\n        function updatePairRange(){\n          pair.max = Math.max(0, arr.length - 2);\n          pair.value = Math.min(pair.value, pair.max);\n        }\n        function render(){\n          viz.setData(arr);\n          viz.update();\n          updatePairRange();\n          cmpEl.textContent = comparisons;\n          swpEl.textContent = swaps;\n        }\n        function announce(msg){\n          live.textContent = msg;\n        }\n        function regen(){\n          arr = genArray(+sz.value, dist.value);\n          comparisons = 0; swaps = 0;\n          lastCompareOutOfOrder = false;\n          btnSwap.disabled = true;\n          render();\n          announce(\"New array generated.\");\n        }\n        function compare(){\n          const j = +pair.value;\n          const a = arr[j], b = arr[j+1];\n          viz.highlight(j, j+1, 'compare');\n          comparisons++;\n          cmpEl.textContent = comparisons;\n          if(a.value > b.value){\n            lastCompareOutOfOrder = true;\n            btnSwap.disabled = false;\n            announce(`Out of order: ${a.value} > ${b.value}. Swap suggested.`);\n          }else{\n            lastCompareOutOfOrder = false;\n            btnSwap.disabled = true;\n            announce(`In order: ${a.value} ≤ ${b.value}. No swap needed.`);\n          }\n        }\n        function doSwap(){\n          const j = +pair.value;\n          [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n          viz.swap(j, j+1);\n          swaps++;\n          swpEl.textContent = swaps;\n          btnSwap.disabled = true;\n          announce(`Swapped positions ${j} and ${j+1}.`);\n          setTimeout(()=>viz.clearHighlight(), 300);\n        }\n\n        generate.addEventListener(\"click\", regen);\n        btnCompare.addEventListener(\"click\", compare);\n        btnSwap.addEventListener(\"click\", doSwap);\n        sz.addEventListener(\"input\", regen);\n        dist.addEventListener(\"change\", regen);\n        btnShare.addEventListener(\"click\", ()=>{\n          sharedArray = copy(arr);\n          dispatch(\"baseArrayChanged\", { array: copy(sharedArray) });\n          announce(\"Shared array broadcast to subsequent modules.\");\n        });\n\n        // init\n        arr = genArray(+sz.value, dist.value);\n        render();\n      })();\n\n      // Module 2: One Pass\n      const m2 = (function(){\n        const svg = document.getElementById(\"m2-svg\");\n        const viz = BarViz(svg);\n        const live = document.getElementById(\"m2-live\");\n        const speed = document.getElementById(\"m2-speed\");\n        const btnUse = document.getElementById(\"m2-use-shared\");\n        const btnStep = document.getElementById(\"m2-step\");\n        const btnPlay = document.getElementById(\"m2-play\");\n        const btnReset = document.getElementById(\"m2-reset\");\n\n        const jEl = document.getElementById(\"m2-j\");\n        const cmpEl = document.getElementById(\"m2-cmp\");\n        const swpEl = document.getElementById(\"m2-swp\");\n\n        let arr = copy(sharedArray);\n        let j = 0, n = arr.length, cmps=0, swps=0, playing=false;\n\n        function announce(msg){ live.textContent = msg; }\n        function reset(){\n          arr = copy(sharedArray);\n          viz.setData(arr);\n          viz.setSortedRight(0);\n          j=0; n=arr.length; cmps=0; swps=0; playing=false;\n          jEl.textContent = j; cmpEl.textContent = cmps; swpEl.textContent = swps;\n          announce(\"Pass reset.\");\n        }\n        function step(){\n          if(j >= n-1){\n            viz.setSortedRight(1);\n            announce(\"Pass complete. Rightmost element is now sorted.\");\n            return;\n          }\n          viz.highlight(j, j+1, 'compare');\n          cmps++; cmpEl.textContent = cmps;\n          if(arr[j].value > arr[j+1].value){\n            [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n            viz.swap(j, j+1);\n            swps++; swpEl.textContent = swps;\n            announce(`Swap at j=${j}: ${arr[j+1].value} moved right.`);\n          }else{\n            announce(`No swap at j=${j}.`);\n          }\n          j++;\n          jEl.textContent = j;\n          if(j === n-1) {\n            viz.setSortedRight(1);\n            announce(\"Pass complete. Largest bubbled to the end.\");\n          }\n        }\n        function playLoop(){\n          if(playing===false) return;\n          if(j >= n-1){\n            playing=false;\n            btnPlay.disabled=false;\n            announce(\"Pass complete.\");\n            return;\n          }\n          step();\n          setTimeout(playLoop, +speed.value);\n        }\n\n        btnUse.addEventListener(\"click\", ()=>{\n          reset();\n          announce(\"Loaded shared array for a new single pass.\");\n        });\n        btnStep.addEventListener(\"click\", step);\n        btnPlay.addEventListener(\"click\", ()=>{\n          if(j>=n-1){ announce(\"Pass already complete.\"); return; }\n          playing = true; btnPlay.disabled=true;\n          playLoop();\n        });\n        btnReset.addEventListener(\"click\", reset);\n\n        document.addEventListener(\"baseArrayChanged\", (e)=>{\n          // preserve if user wishes to use\n          // no auto reset; provide a hint\n          announce(\"Shared array updated. Click 'Use Shared Array' to load.\");\n        });\n\n        // init\n        viz.setData(arr);\n        reset();\n      })();\n\n      // Module 3: Full Algorithm Explorer\n      const m3 = (function(){\n        const svg = document.getElementById(\"m3-svg\");\n        const viz = BarViz(svg);\n        const live = document.getElementById(\"m3-live\");\n        const speed = document.getElementById(\"m3-speed\");\n        const btnUse = document.getElementById(\"m3-use-shared\");\n        const btnStep = document.getElementById(\"m3-step\");\n        const btnPlay = document.getElementById(\"m3-play\");\n        const btnPause = document.getElementById(\"m3-pause\");\n        const btnReset = document.getElementById(\"m3-reset\");\n        const passEl = document.getElementById(\"m3-pass\");\n        const jEl = document.getElementById(\"m3-j\");\n        const cmpEl = document.getElementById(\"m3-cmp\");\n        const swpEl = document.getElementById(\"m3-swp\");\n\n        let arr = copy(sharedArray);\n        let n = arr.length, pass=1, j=0, sortedRight=0, cmps=0, swps=0, playing=false;\n\n        function announce(msg){ live.textContent = msg; }\n\n        function render(){\n          viz.setData(arr);\n          viz.setSortedRight(sortedRight);\n          passEl.textContent = pass;\n          jEl.textContent = j;\n          cmpEl.textContent = cmps;\n          swpEl.textContent = swps;\n        }\n\n        function reset(){\n          arr = copy(sharedArray);\n          n = arr.length;\n          pass=1; j=0; sortedRight=0; cmps=0; swps=0; playing=false;\n          btnPause.disabled=true; btnPlay.disabled=false;\n          render();\n          announce(\"Sorting state reset.\");\n        }\n\n        function step(){\n          if(sortedRight >= n-1){\n            announce(\"Array already sorted.\");\n            return true;\n          }\n          if(j >= n-1-sortedRight){\n            // pass complete\n            sortedRight++;\n            pass++;\n            j=0;\n            viz.setSortedRight(sortedRight);\n            passEl.textContent = pass;\n            jEl.textContent = j;\n            announce(\"Pass complete. Sorted region expanded.\");\n            return false;\n          }\n          viz.highlight(j, j+1, 'compare');\n          cmps++; cmpEl.textContent = cmps;\n          if(arr[j].value > arr[j+1].value){\n            [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n            viz.swap(j, j+1);\n            swps++; swpEl.textContent = swps;\n            announce(`Swap at j=${j}.`);\n          }else{\n            announce(`No swap at j=${j}.`);\n          }\n          j++;\n          jEl.textContent = j;\n          if(sortedRight >= n-1) {\n            announce(\"Sorting complete.\");\n            return true;\n          }\n          return false;\n        }\n\n        function playLoop(){\n          if(!playing) return;\n          const done = step();\n          if(done){ playing=false; btnPause.disabled=true; btnPlay.disabled=false; announce(\"Done.\"); return; }\n          setTimeout(playLoop, +speed.value);\n        }\n\n        btnUse.addEventListener(\"click\", ()=>{\n          reset();\n          announce(\"Loaded shared array for full sort.\");\n        });\n        btnStep.addEventListener(\"click\", step);\n        btnPlay.addEventListener(\"click\", ()=>{\n          if(playing) return;\n          playing=true; btnPlay.disabled=true; btnPause.disabled=false;\n          playLoop();\n        });\n        btnPause.addEventListener(\"click\", ()=>{\n          playing=false; btnPause.disabled=true; btnPlay.disabled=false;\n          announce(\"Paused.\");\n        });\n        btnReset.addEventListener(\"click\", reset);\n\n        document.addEventListener(\"baseArrayChanged\", ()=>{\n          announce(\"Shared array updated. Click 'Use Shared Array' to load.\");\n        });\n\n        viz.setData(arr);\n        reset();\n      })();\n\n      // Module 4: Early Exit\n      const m4 = (function(){\n        const svg = document.getElementById(\"m4-svg\");\n        const viz = BarViz(svg);\n        const live = document.getElementById(\"m4-live\");\n        const speed = document.getElementById(\"m4-speed\");\n        const selEarly = document.getElementById(\"m4-early\");\n        const selPreset = document.getElementById(\"m4-preset\");\n        const btnRun = document.getElementById(\"m4-run\");\n        const btnReset = document.getElementById(\"m4-reset\");\n\n        const passEl = document.getElementById(\"m4-pass\");\n        const cmpEl = document.getElementById(\"m4-cmp\");\n        const swpEl = document.getElementById(\"m4-swp\");\n        const exitEl = document.getElementById(\"m4-exit\");\n        const timeline = document.getElementById(\"m4-timeline\");\n\n        let arr = copy(sharedArray), n = arr.length;\n        let cmps=0, swps=0, pass=0, sortedRight=0, running=false;\n\n        function announce(msg){ live.textContent = msg; }\n\n        function loadPreset(){\n          const p = selPreset.value;\n          if(p === 'shared') arr = copy(sharedArray);\n          else arr = genArray(Math.max(5, Math.min(20, sharedArray.length)), p);\n          n = arr.length;\n          viz.setData(arr);\n          viz.setSortedRight(0);\n          clearStats();\n        }\n\n        function clearStats(){\n          cmps=0; swps=0; pass=0; sortedRight=0;\n          passEl.textContent = pass;\n          cmpEl.textContent = cmps;\n          swpEl.textContent = swps;\n          exitEl.textContent = \"—\";\n          timeline.innerHTML = \"\";\n        }\n        function addTick(on){\n          const t = document.createElement(\"div\");\n          t.className = \"tick\" + (on ? \" on\" : \"\");\n          timeline.appendChild(t);\n        }\n\n        async function run(){\n          if(running) return;\n          running = true;\n          btnRun.disabled = true;\n          btnReset.disabled = true;\n          const early = selEarly.value === 'on';\n          let swapped = false;\n          pass = 0; sortedRight = 0;\n          outer: for(pass=1; pass<=n-1; pass++){\n            swapped = false;\n            for(let j=0; j<n-pass; j++){\n              viz.highlight(j, j+1, 'compare');\n              cmps++; cmpEl.textContent = cmps;\n              if(arr[j].value > arr[j+1].value){\n                [arr[j], arr[j+1]] = [arr[j+1], arr[j]];\n                viz.swap(j, j+1);\n                swps++; swpEl.textContent = swps;\n                swapped = true;\n                announce(`Pass ${pass}: swapped at j=${j}`);\n              }else{\n                announce(`Pass ${pass}: no swap at j=${j}`);\n              }\n              await new Promise(r=> setTimeout(r, +speed.value));\n            }\n            viz.setSortedRight(pass);\n            addTick(swapped);\n            if(early && !swapped){\n              exitEl.textContent = `Exited after pass ${pass}`;\n              announce(`Early exit at pass ${pass} (no swaps).`);\n              break outer;\n            }\n            await new Promise(r=> setTimeout(r, Math.max(60, +speed.value*0.6)));\n          }\n          btnRun.disabled = false;\n          btnReset.disabled = false;\n          running = false;\n        }\n\n        btnRun.addEventListener(\"click\", run);\n        btnReset.addEventListener(\"click\", ()=>{\n          loadPreset();\n          announce(\"Reset visualization.\");\n        });\n        selPreset.addEventListener(\"change\", loadPreset);\n\n        document.addEventListener(\"baseArrayChanged\", ()=>{\n          if(selPreset.value==='shared'){\n            arr = copy(sharedArray);\n            loadPreset();\n            announce(\"Shared array updated.\");\n          }\n        });\n\n        // init\n        loadPreset();\n      })();\n\n      // Module 5: Stability\n      const m5 = (function(){\n        const svgStable = document.getElementById(\"m5-stable\");\n        const svgUnstable = document.getElementById(\"m5-unstable\");\n        const vizStable = BarViz(svgStable);\n        const vizUnstable = BarViz(svgUnstable);\n        const pairs = document.getElementById(\"m5-pairs\");\n        const btnGen = document.getElementById(\"m5-generate\");\n        const btnRun = document.getElementById(\"m5-run\");\n        const btnReset = document.getElementById(\"m5-reset\");\n        const liveS = document.getElementById(\"m5-live-stable\");\n        const liveU = document.getElementById(\"m5-live-unstable\");\n        const resStable = document.getElementById(\"m5-stable-ok\");\n        const resUnstable = document.getElementById(\"m5-unstable-change\");\n\n        let arr = [];\n\n        function makeDuplicates(k){\n          const items = [];\n          const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n          let idx=0;\n          for(let i=0;i<k;i++){\n            const v = randInt(20, 80);\n            const tag1 = letters[i%letters.length] + \"1\";\n            const tag2 = letters[i%letters.length] + \"2\";\n            items.push({ id: uid(), value: v, tag: tag1, baseIndex: idx++ });\n            items.push({ id: uid(), value: v, tag: tag2, baseIndex: idx++ });\n            // sprinkle some singles\n            if(randInt(0,1)===1){\n              items.push({ id: uid(), value: randInt(10,99), tag: null, baseIndex: idx++ });\n            }\n          }\n          // shuffle for randomness\n          for(let i=items.length-1;i>0;i--){\n            const j = randInt(0, i);\n            [items[i], items[j]] = [items[j], items[i]];\n          }\n          // normalize baseIndex after shuffle\n          items.forEach((d,i)=> d.baseIndex=i);\n          return items;\n        }\n\n        function render(){\n          vizStable.enableTags(true);\n          vizUnstable.enableTags(true);\n          vizStable.setData(arr, {showTags: true});\n          vizUnstable.setData(arr, {showTags: true});\n          vizStable.update();\n          vizUnstable.update();\n          resStable.textContent = \"—\";\n          resUnstable.textContent = \"—\";\n        }\n\n        async function sortVariant(viz, swapOnEqual=false){\n          const a = copy(arr);\n          const n = a.length;\n          let sortedRight = 0;\n          for(let pass=1; pass<=n-1; pass++){\n            let swapped = false;\n            for(let j=0; j<n-pass; j++){\n              viz.highlight(j, j+1, 'compare');\n              await new Promise(r=> setTimeout(r, 150));\n              const cond = swapOnEqual ? (a[j].value >= a[j+1].value) : (a[j].value > a[j+1].value);\n              if(cond){\n                [a[j], a[j+1]] = [a[j+1], a[j]];\n                viz.swap(j, j+1);\n                swapped = true;\n              }\n              await new Promise(r=> setTimeout(r, 120));\n            }\n            sortedRight++;\n            viz.setSortedRight(sortedRight);\n            if(!swapped) break;\n            await new Promise(r=> setTimeout(r, 120));\n          }\n          return a;\n        }\n\n        function isStable(original, sorted){\n          // For each equal-valued group, verify original relative order (by baseIndex) preserved\n          const groups = {};\n          original.forEach((d, i)=>{\n            groups[d.value] = groups[d.value] || [];\n            groups[d.value].push({ tag: d.tag, baseIndex: d.baseIndex });\n          });\n          // Map tag -> original order index among equals\n          const orderMap = {};\n          Object.keys(groups).forEach(v=>{\n            groups[v].forEach((g, idx)=>{\n              orderMap[g.tag||(\"id\"+v+\"-\"+idx)] = idx;\n            });\n          });\n          // Build sorted order among equals and check non-decreasing\n          const lastSeen = {};\n          for(const d of sorted){\n            if(d.tag){\n              const groupKey = d.value;\n              const rank = orderMap[d.tag];\n              if(lastSeen[groupKey] == null) lastSeen[groupKey] = -1;\n              if(rank < lastSeen[groupKey]) return false;\n              lastSeen[groupKey] = rank;\n            }\n          }\n          return true;\n        }\n\n        btnGen.addEventListener(\"click\", ()=>{\n          arr = makeDuplicates(+pairs.value);\n          render();\n          liveS.textContent = \"Generated duplicate pairs.\";\n          liveU.textContent = \"Generated duplicate pairs.\";\n        });\n\n        btnRun.addEventListener(\"click\", async ()=>{\n          liveS.textContent = \"Running stable variant…\";\n          liveU.textContent = \"Running unstable variant…\";\n          const outS = await sortVariant(vizStable, false);\n          const outU = await sortVariant(vizUnstable, true);\n          const stableOk = isStable(arr, outS);\n          const unstableChanged = !isStable(arr, outU);\n          resStable.textContent = stableOk ? \"Yes\" : \"No\";\n          resUnstable.textContent = unstableChanged ? \"Yes\" : \"No\";\n          liveS.textContent = stableOk ? \"Stable: duplicate tags preserved order.\" : \"Unexpected: order changed.\";\n          liveU.textContent = unstableChanged ? \"Unstable variant changed duplicate order.\" : \"Unstable variant did not alter order (rare input).\";\n        });\n\n        btnReset.addEventListener(\"click\", ()=>{\n          render();\n          liveS.textContent = \"Reset.\";\n          liveU.textContent = \"Reset.\";\n        });\n\n        // init\n        arr = makeDuplicates(+pairs.value);\n        render();\n      })();\n\n      // Module 6: Complexity\n      const m6 = (function(){\n        const canvas = document.getElementById(\"m6-canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        const nEl = document.getElementById(\"m6-n\");\n        const modeEl = document.getElementById(\"m6-exit-mode\");\n        const worstC = document.getElementById(\"m6-worst-c\");\n        const bestC = document.getElementById(\"m6-best-c\");\n        const avgS = document.getElementById(\"m6-avg-s\");\n\n        function compsWorst(n){ return n*(n-1)/2; }\n        function compsBestEarly(n){ return Math.max(0, n-1); }\n        function swapsWorst(n){ return n*(n-1)/2; } // reversed\n        function swapsAvg(n){ return n*(n-1)/4; }   // approx random\n        function px(v, maxV, H, P){ return H - P - (v/maxV)*(H-2*P); }\n\n        function draw(){\n          const W = canvas.width, H = canvas.height;\n          const P = 28;\n          ctx.clearRect(0,0,W,H);\n          ctx.save();\n          // axes\n          ctx.strokeStyle = \"#223147\";\n          ctx.lineWidth = 1;\n          ctx.strokeRect(P, P, W-2*P, H-2*P);\n          // grid\n          ctx.setLineDash([4,4]);\n          ctx.beginPath();\n          for(let i=1;i<=4;i++){\n            const y = P + i*(H-2*P)/5;\n            ctx.moveTo(P, y); ctx.lineTo(W-P, y);\n          }\n          ctx.stroke();\n          ctx.setLineDash([]);\n\n          const n = +nEl.value;\n          const mode = modeEl.value;\n\n          const xs = Array.from({length:n-2}, (_,i)=> i+3); // from 3..n\n          const worstCData = xs.map(x=> compsWorst(x));\n          const bestCData = xs.map(x=> compsBestEarly(x));\n          const avgSData = xs.map(x=> swapsAvg(x));\n\n          const maxY = Math.max(...worstCData, ...avgSData, ...(mode==='both' ? bestCData : [0]))*1.1;\n\n          function plot(data, color){\n            ctx.beginPath();\n            data.forEach((y,i)=>{\n              const x = P + (i/(data.length-1))*(W-2*P);\n              const yy = px(y, maxY, H, P);\n              if(i===0) ctx.moveTo(x, yy); else ctx.lineTo(x, yy);\n            });\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            ctx.stroke();\n          }\n\n          // draw series\n          plot(worstCData, \"#ef4444\"); // worst comps\n          plot(avgSData, \"#60a5fa\");   // avg swaps\n          if(mode !== 'without'){\n            plot(bestCData, \"#10b981\"); // best comps with early exit\n          }\n\n          // labels\n          ctx.fillStyle = \"#cbd5e1\";\n          ctx.font = \"12px system-ui\";\n          ctx.fillText(\"N\", W-P-12, H-P+16);\n          ctx.fillText(\"Operations\", P-4, P-8);\n          ctx.fillStyle = \"#ef4444\"; ctx.fillText(\"Worst comps: n(n-1)/2\", P+6, P+14);\n          ctx.fillStyle = \"#60a5fa\"; ctx.fillText(\"Avg swaps ≈ n(n-1)/4\", P+6, P+30);\n          if(mode !== 'without'){\n            ctx.fillStyle = \"#10b981\"; ctx.fillText(\"Best comps (early exit): n−1\", P+6, P+46);\n          }\n\n          // stats for current n\n          worstC.textContent = compsWorst(n).toLocaleString();\n          bestC.textContent = (mode==='without' ? compsWorst(n) : compsBestEarly(n)).toLocaleString();\n          avgS.textContent = Math.round(swapsAvg(n)).toLocaleString();\n\n          ctx.restore();\n        }\n\n        nEl.addEventListener(\"input\", draw);\n        modeEl.addEventListener(\"change\", draw);\n        draw();\n      })();\n\n      // Ensure keyboard focus styles are visible for accessibility\n      document.addEventListener(\"keydown\", (e)=>{\n        if(e.key === \"Tab\") document.body.classList.add(\"show-focus\");\n      });\n\n    })();\n  </script>\n\n  <script id=\"fsm\" type=\"application/json\">\n    {\n      \"topic\": \"Bubble Sort\",\n      \"description\": \"Finite-state outline for interactive bubble sort steps used across modules.\",\n      \"states\": [\n        {\n          \"name\": \"idle\",\n          \"on\": { \"GENERATE\": \"ready\", \"LOAD_SHARED\": \"ready\" }\n        },\n        {\n          \"name\": \"ready\",\n          \"on\": { \"COMPARE\": \"comparing\", \"PLAY\": \"playing\", \"RESET\": \"ready\", \"STEP\": \"step\" }\n        },\n        {\n          \"name\": \"comparing\",\n          \"onEnter\": \"highlightPair\",\n          \"on\": { \"DECIDE\": \"swapDecision\" }\n        },\n        {\n          \"name\": \"swapDecision\",\n          \"on\": { \"SWAP_NEEDED\": \"swapping\", \"NO_SWAP\": \"advance\" }\n        },\n        {\n          \"name\": \"swapping\",\n          \"onEnter\": \"animateSwap\",\n          \"on\": { \"SWAP_DONE\": \"advance\" }\n        },\n        {\n          \"name\": \"advance\",\n          \"onEnter\": \"incrementIndex\",\n          \"on\": { \"PASS_END\": \"passComplete\", \"CONTINUE\": \"ready\" }\n        },\n        {\n          \"name\": \"passComplete\",\n          \"onEnter\": \"markSortedRight\",\n          \"on\": { \"NO_SWAPS_AND_EARLY\": \"done\", \"MORE_PASSES\": \"ready\" }\n        },\n        {\n          \"name\": \"playing\",\n          \"onEnter\": \"loopUntilDoneOrPaused\",\n          \"on\": { \"PAUSE\": \"ready\", \"DONE\": \"done\" }\n        },\n        {\n          \"name\": \"done\",\n          \"onEnter\": \"announceDone\",\n          \"on\": { \"RESET\": \"ready\" }\n        }\n      ],\n      \"events\": [\n        \"GENERATE\", \"LOAD_SHARED\", \"COMPARE\", \"DECIDE\",\n        \"SWAP_NEEDED\", \"NO_SWAP\", \"SWAP_DONE\", \"STEP\",\n        \"PASS_END\", \"MORE_PASSES\", \"NO_SWAPS_AND_EARLY\",\n        \"PLAY\", \"PAUSE\", \"DONE\", \"RESET\"\n      ],\n      \"notes\": \"This abstract FSM informs UI behavior in Modules 1–4: idle -> ready -> comparing -> swapDecision -> swapping -> advance -> passComplete -> done. Early-exit triggers NO_SWAPS_AND_EARLY at passComplete.\"\n    }\n  </script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept.\nAt the end of the HTML, automatically insert a <script id=fsm type=application/json> block\nYou are an expert in interactive web design, front-end pedagogy, and {topic}. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of {topic}.\n\n**Project Overview:**\n\nTopic: {topic}  \nDescription: {description}\n\n**Interactive Structure:**\n\nPlan the HTML interface as a sequence of interactive modules. For each module, please provide the following:\n\n*   **Module Title:** Short, descriptive title (2–5 words).\n*   **Module Purpose:** Learning or interaction goal of this module. How does it connect to the previous one?\n*   **Module Description:** Detailed explanation of the user interactions, what changes occur in response to clicks, drags, or inputs, and how these interactions reinforce understanding.\n*   **Module Layout:** Spatial layout concept for this section — describe element arrangement, interaction zones, and visual hierarchy. Include considerations for responsive design, safe area margins, and minimum spacing between interactive components.\n\n**Spatial Constraints:**\n*   **Safe area margins:** 24 px on all sides of the viewport. *All visual and interactive elements must stay within this region.*\n*   **Minimum spacing:** 16 px between any two interactive elements (buttons, sliders, inputs, visual components). *Maintain sufficient spacing to prevent overlap and accidental interaction.*\n\n**Requirements:**\n1. Modules must build progressively — from basic ideas to advanced or composite interactions — to maintain a coherent and intuitive learning flow.\n2. The total number of modules should be **between 3 and 7**.\n3. Each module should include **interactive feedback** (e.g., visual change, animation, or data update).\n4. The interface should be **self-contained** (no external libraries, assets, or APIs). Use only vanilla HTML, CSS, and JavaScript.\n5. Maintain consistent formatting, indentation, and XML tags as specified.\n6. The final HTML structure will later be implemented with procedural generation; ensure all layout constraints are explicitly stated.\n7. **No external or promotional content.** Focus purely on interactive explanation and conceptual clarity.\n8. Include at least one **dynamic visualization** (canvas, SVG, or DOM animation) illustrating the core principle of {topic}.\n\nNote: This is a high-level interface blueprint. Detailed implementation (HTML, CSS, JavaScript) will be generated later, respecting the safe area and spacing constraints specified above.\nOnly respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "b470fed0-a974-11f0-a38b-73cd415f8778",
    "timestamp": "2025-10-15T03:11:55.709Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "answer": {
      "role": "assistant",
      "content": "Creating an interactive HTML page that provides an in-depth exploration of the Bubble Sort algorithm is a great way to engage users and enhance their learning experience. Below is a complete HTML code snippet illustrating how to put together such a webpage.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort Explorer</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            color: #333;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            margin: 0;\n        }\n        h1 {\n            margin-bottom: 20px;\n        }\n        #arrayContainer {\n            display: flex;\n            margin-bottom: 20px;\n        }\n        .bar {\n            width: 30px;\n            background-color: #4CAF50;\n            margin: 0 2px;\n            transition: height 0.3s;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 5px;\n            font-size: 16px;\n            cursor: pointer;\n            border: none;\n            border-radius: 5px;\n            background-color: #2196F3;\n            color: white;\n            transition: background-color 0.3s;\n        }\n        button:hover {\n            background-color: #1976D2;\n        }\n        #info {\n            margin-top: 20px;\n            text-align: center;\n        }\n        #inputArea {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Interactive Bubble Sort Explorer</h1>\n<div id=\"arrayContainer\"></div>\n<div id=\"inputArea\">\n    <input type=\"text\" id=\"arrayInput\" placeholder=\"Enter numbers separated by commas\" />\n    <button id=\"generateArrayBtn\">Generate Array</button>\n    <button id=\"sortBtn\" disabled>Start Sorting</button>\n</div>\n<div id=\"info\"></div>\n\n<script>\n    let array = [];\n    const arrayContainer = document.getElementById('arrayContainer');\n    const arrayInput = document.getElementById('arrayInput');\n    const generateArrayBtn = document.getElementById('generateArrayBtn');\n    const sortBtn = document.getElementById('sortBtn');\n    const info = document.getElementById('info');\n\n    generateArrayBtn.addEventListener('click', generateArray);\n    sortBtn.addEventListener('click', bubbleSort);\n\n    function generateArray() {\n        const input = arrayInput.value.split(',').map(Number);\n        array = input.filter(num => !isNaN(num));\n        displayArray();\n        sortBtn.disabled = false;\n        info.innerHTML = \"Click 'Start Sorting' to visualize the Bubble Sort!\";\n    }\n\n    function displayArray() {\n        arrayContainer.innerHTML = '';\n        for (let num of array) {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${num * 10}px`;\n            bar.style.backgroundColor = '#4CAF50';\n            arrayContainer.appendChild(bar);\n        }\n    }\n\n    async function bubbleSort() {\n        let len = array.length;\n        for (let i = 0; i < len - 1; i++) {\n            for (let j = 0; j < len - i - 1; j++) {\n                if (array[j] > array[j + 1]) {\n                    // Swap\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    displayArray();\n                    await new Promise(resolve => setTimeout(resolve, 500)); // pause for visualization\n                }\n            }\n        }\n        info.innerHTML = \"Sorting completed!\";\n        sortBtn.disabled = true;\n    }\n</script>\n\n</body>\n</html>\n```\n\n### Explanation of the Code:\n\n1. **Structure and Style**: The HTML structure consists of:\n   - A title and header (`h1`).\n   - A container (`div`) for visualizing the array as bars.\n   - An input area for users to input their numbers and two buttons for functionality.\n   - A panel to display information about the user's actions and sorting status.\n\n2. **CSS**: \n   - Basic styling is applied to make the page visually appealing. \n   - Flexbox is used for layout, and some simple animations are applied to button states to enhance user experience.\n\n3. **JavaScript Logic**:\n   - An array is made interactive through a combination of user input and dynamically rendered bars corresponding to array elements.\n   - The `generateArray` function takes user input, splits it by commas, converts it into numbers, and displays it visually. It also activates the sort button.\n   - The `bubbleSort` function implements the sorting logic with visual feedback at each swap, using asynchronous delays to allow users to see the sorting in action.\n\n### Usage:\n1. Users enter a series of numbers separated by commas in the input field.\n2. Upon clicking \"Generate Array,\" the numbers are displayed as bars.\n3. Clicking \"Start Sorting\" activates the bubble sort algorithm, showing how elements are sorted in real-time.\n\nFeel free to modify styles or functions according to your needs! This interactive experience can make learning algorithms fun and engaging.\n",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n"
      },
      {
        "role": "user",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "1125f260-a976-11f0-ba29-1bd8c16f5dfe",
    "timestamp": "2025-10-15T03:21:40.743Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "answer": {
      "role": "assistant",
      "content": "Certainly! Below is an example of an interactive HTML page designed for a hands-on exploration of the Bubble Sort algorithm. This page features a visual representation of the sorting process, along with controls for the user to see how the algorithm works step-by-step.\n\n### Interactive Bubble Sort HTML Page\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Bubble Sort</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        #arrayContainer {\n            display: flex;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin-right: 5px;\n            background-color: #4CAF50;\n            display: inline-block;\n            transition: height 0.5s, background-color 0.5s;\n        }\n        #controls {\n            margin: 20px 0;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Interactive Bubble Sort Visualizer</h1>\n<div id=\"arrayContainer\"></div>\n<div id=\"controls\">\n    <button onclick=\"generateArray()\">Generate Array</button>\n    <button onclick=\"startSort()\">Start Bubble Sort</button>\n</div>\n\n<script>\n    let array = [];\n    const ARRAY_SIZE = 10;\n\n    function generateArray() {\n        array = [];\n        for (let i = 0; i < ARRAY_SIZE; i++) {\n            array.push(Math.floor(Math.random() * 100) + 1);\n        }\n        drawArray();\n    }\n\n    function drawArray() {\n        const container = document.getElementById('arrayContainer');\n        container.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${value * 3}px`; // Scale height for better visibility\n            container.appendChild(bar);\n        });\n    }\n\n    async function startSort() {\n        let len = array.length;\n        for (let i = 0; i < len - 1; i++) {\n            for (let j = 0; j < len - i - 1; j++) {\n                drawArray();\n                if (array[j] > array[j + 1]) {\n                    // Change colors for comparison\n                    document.querySelectorAll('.bar')[j].style.backgroundColor = 'red';\n                    document.querySelectorAll('.bar')[j + 1].style.backgroundColor = 'red';\n\n                    await sleep(500); // Pause for visibility\n\n                    // Swap\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    drawArray();\n\n                    // Reset colors after swap\n                    document.querySelectorAll('.bar')[j].style.backgroundColor = '#4CAF50';\n                    document.querySelectorAll('.bar')[j + 1].style.backgroundColor = '#4CAF50';\n                }\n                await sleep(500); // Pause for visibility\n            }\n        }\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Initialize with a random array\n    window.onload = generateArray;\n\n</script>\n\n</body>\n</html>\n```\n\n### Explanation of the Code\n\n1. **HTML Structure**: The page consists of a title, a container for the array visualization, and buttons for generating the array and starting the Bubble Sort process.\n\n2. **CSS Styles**: Basic styling is applied for aesthetics, making bars representing array values in a flexible container.\n\n3. **JavaScript Logic**:\n   - `generateArray()`: This function generates a random array of integers and calls `drawArray()` to visualize it.\n   - `drawArray()`: Creates bar elements based on the values in the array and appends them to the `arrayContainer`.\n   - `startSort()`: Implements the Bubble Sort algorithm, with visual updates at each step. The bars change color when being compared or swapped for better visual understanding.\n   - `sleep(ms)`: A helper function that returns a promise to create a delay, helping with the visualization process.\n\n### How to Use\n1. Open the HTML file in a web browser.\n2. Click the \"Generate Array\" button to see a new random array visualization.\n3. Click the \"Start Bubble Sort\" button to see how the Bubble Sort algorithm processes and sorts the array step by step.\n\nThis interactive page serves as an educational tool for understanding Bubble Sort through visualization and hands-on experience. Feel free to customize styles and functionalities to enhance learning!",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy"
      },
      {
        "role": "user",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "25e2eef0-a981-11f0-a6f3-034770db001c",
    "timestamp": "2025-10-15T04:40:59.999Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "answer": {
      "role": "assistant",
      "content": "Creating an engaging and interactive HTML page for the bubble sort algorithm involves providing users with both a visual representation of the sorting process and an opportunity to interact with the algorithm themselves. Below is a basic structure for such a page, complete with HTML, CSS, and JavaScript. This example features an interactive bubble sort implementation and explanations of key concepts.\n\n### HTML Structure\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Interactive Exploration</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Explore Bubble Sort</h1>\n        <div>\n            <label for=\"array-input\">Enter Numbers (comma separated):</label>\n            <input id=\"array-input\" type=\"text\" value=\"64,34,25,12,22,11,90\">\n            <button id=\"sort-button\">Sort</button>\n        </div>\n        <div id=\"visualization\" class=\"visualization\"></div>\n        <div id=\"explanation\" class=\"explanation\">\n            <h2>What is Bubble Sort?</h2>\n            <p>Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them\n            if they are in the wrong order. The pass through the list is repeated until the list is sorted.</p>\n            <h3>Time Complexity</h3>\n            <ul>\n                <li>Best: O(n)</li>\n                <li>Average: O(n²)</li>\n                <li>Worst: O(n²)</li>\n            </ul>\n        </div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### CSS (styles.css)\n\n```css\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 20px;\n}\n\n.container {\n    max-width: 600px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1, h2, h3 {\n    color: #333;\n}\n\ninput {\n    width: calc(100% - 22px);\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\nbutton {\n    padding: 10px;\n    background: #5cb85c;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background: #4cae4c;\n}\n\n.visualization {\n    height: 200px;\n    margin: 20px 0;\n    display: flex;\n    align-items: flex-end;\n}\n\n.bar {\n    background-color: #428bca;\n    margin: 0 2px;\n    flex: 1;\n    text-align: center;\n    color: white;\n    font-weight: bold;\n}\n```\n\n### JavaScript (script.js)\n\n```javascript\ndocument.getElementById(\"sort-button\").addEventListener(\"click\", function() {\n    const input = document.getElementById(\"array-input\").value;\n    const arr = input.split(\",\").map(Number);\n    bubbleSort(arr);\n});\n\nfunction bubbleSort(arr) {\n    const visualization = document.getElementById(\"visualization\");\n    visualization.innerHTML = ''; // Clear previous visualization\n    const n = arr.length;\n\n    // Render initial state\n    arr.forEach(value => {\n        const bar = document.createElement(\"div\");\n        bar.className = \"bar\";\n        bar.style.height = `${value * 2}px`; // Scale for better visibility\n        bar.innerText = value;\n        visualization.appendChild(bar);\n    });\n\n    let sorted = false;\n    let i = 0;\n\n    const sortStep = () => {\n        if (i < n - 1) {\n            let j = 0;\n            sorted = true;\n\n            const bars = document.querySelectorAll('.bar');\n\n            const innerStep = () => {\n                if (j < n - 1 - i) {\n                    if (arr[j] > arr[j + 1]) {\n                        // Swap\n                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                        sorted = false;\n                    }\n                    // Update visual state\n                    bars[j].style.height = `${arr[j] * 2}px`;\n                    bars[j + 1].style.height = `${arr[j + 1] * 2}px`;\n                    j++;\n                    setTimeout(innerStep, 100); // Time delay for visualization\n                } else {\n                    i++;\n                    sortStep();\n                }\n            };\n            innerStep();\n        } else if (sorted) {\n            alert(\"Sorting complete!\");\n        }\n    };\n\n    sortStep();\n}\n```\n\n### How to Use\n\n1. **Create three files**: Create `index.html`, `styles.css`, and `script.js` and copy the relevant code into each file.\n2. **Open the HTML file in a browser**: Simply double-click on the `index.html` file or right-click and open it with your browser.\n3. **Enter numbers**: Type a set of numbers separated by commas (like `64,34,25,12,22,11,90`) and click \"Sort\" to visualize the bubble sort process.\n\nThis code provides an interactive experience that allows users to enter their own sets of numbers and visualize the sorting process step-by-step. Adjust the height of the bars by modifying their properties in the CSS if needed. You can also enhance the explanations and add more detail to better educate users about the bubble sort algorithm.",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "user",
        "content": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "85e55fd0-a982-11f0-951c-0f7f4effdfc3",
    "timestamp": "2025-10-15T04:50:50.574Z",
    "status": "error",
    "question": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "16569bb0-a983-11f0-83a4-5d22e917b6b6",
    "timestamp": "2025-10-15T04:54:52.908Z",
    "status": "error",
    "question": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "b3fabf90-a983-11f0-a805-23157a911203",
    "timestamp": "2025-10-15T04:59:17.385Z",
    "model": "gpt-5",
    "status": "success",
    "question": "You are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Visualizer</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f172a;         /* slate-900 */\n      --panel: #111827;      /* gray-900 */\n      --text: #e5e7eb;       /* gray-200 */\n      --muted: #9ca3af;      /* gray-400 */\n      --accent: #22d3ee;     /* cyan-400 */\n      --compareA: #f59e0b;   /* amber-500 */\n      --compareB: #3b82f6;   /* blue-500 */\n      --swap: #ef4444;       /* red-500 */\n      --sorted: #10b981;     /* emerald-500 */\n      --bar: #64748b;        /* slate-500 */\n      --barHover: #94a3b8;   /* slate-400 */\n      --btn: #1f2937;        /* gray-800 */\n      --btnHover: #374151;   /* gray-700 */\n      --inp: #0b1220;        /* darker bg */\n      --focus: #22d3ee;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0;\n      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, \"Helvetica Neue\", Arial;\n      background: linear-gradient(180deg, #0b1020 0%, #0f172a 100%);\n      color: var(--text);\n      min-height: 100vh;\n      display: grid;\n      grid-template-rows: auto auto 1fr auto;\n      gap: 12px;\n    }\n    header {\n      padding: 16px 20px;\n      border-bottom: 1px solid #1f2937;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      gap: 12px;\n    }\n    header h1 {\n      margin: 0;\n      font-size: 20px;\n      letter-spacing: 0.3px;\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n    header h1 .dot {\n      width: 12px; height: 12px; border-radius: 50%;\n      background: var(--accent);\n      box-shadow: 0 0 12px var(--accent);\n    }\n    header .subtitle {\n      font-size: 12px;\n      color: var(--muted);\n    }\n\n    .controls {\n      padding: 8px 20px 0 20px;\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 10px;\n    }\n    .panel {\n      background: var(--panel);\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      padding: 12px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.35);\n    }\n    .row {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 10px;\n      align-items: center;\n    }\n    .row .group {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      flex-wrap: wrap;\n    }\n    button {\n      appearance: none;\n      border: 1px solid #283241;\n      background: var(--btn);\n      color: var(--text);\n      padding: 8px 12px;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: background 0.15s ease, transform 0.04s ease;\n      font-weight: 600;\n      font-size: 14px;\n    }\n    button:hover { background: var(--btnHover); }\n    button:active { transform: translateY(1px); }\n    button.primary {\n      background: #0ea5e9; /* sky-500 */\n      border-color: #0284c7;\n      color: #0b1220;\n    }\n    button.primary:hover { background: #38bdf8; }\n    button.danger {\n      background: #ef4444;\n      border-color: #b91c1c;\n      color: #0b1220;\n    }\n    button[disabled], button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .input {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      border: 1px solid #263146;\n      background: var(--inp);\n      padding: 8px 10px;\n      border-radius: 8px;\n      min-width: 220px;\n    }\n    .input input[type=\"text\"] {\n      background: transparent;\n      border: none;\n      outline: none;\n      color: var(--text);\n      width: 300px;\n      font-size: 14px;\n    }\n    .hint {\n      font-size: 11px;\n      color: var(--muted);\n    }\n\n    .slider-group {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 8px 10px;\n      border-radius: 8px;\n      border: 1px solid #263146;\n      background: var(--inp);\n    }\n    .slider-group input[type=\"range\"] {\n      accent-color: var(--focus);\n    }\n    .label {\n      font-size: 12px;\n      color: var(--muted);\n    }\n\n    .stats {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n      gap: 10px;\n      margin-top: 8px;\n    }\n    .stat {\n      background: #0c1324;\n      border: 1px solid #1f2937;\n      border-radius: 10px;\n      padding: 10px;\n      display: flex;\n      flex-direction: column;\n      gap: 4px;\n    }\n    .stat .title {\n      font-size: 11px;\n      color: var(--muted);\n    }\n    .stat .value {\n      font-size: 16px;\n      font-weight: 700;\n      color: var(--text);\n    }\n\n    .visualizer {\n      padding: 8px 20px 20px 20px;\n    }\n    .canvas {\n      height: 360px;\n      min-height: 260px;\n      background: linear-gradient(180deg, #0d1426 0%, #0b1220 100%);\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      position: relative;\n      overflow: hidden;\n      box-shadow: inset 0 0 30px rgba(0,0,0,0.35);\n    }\n    .bars {\n      position: absolute;\n      inset: 12px;\n      display: flex;\n      align-items: flex-end;\n      gap: 4px;\n      padding: 0 8px;\n    }\n    .bar {\n      flex: 1 1 auto;\n      min-width: 8px;\n      background: var(--bar);\n      border-radius: 6px 6px 0 0;\n      transition: height 0.18s cubic-bezier(.25,.8,.25,1), background 0.12s ease, transform 0.1s ease;\n      position: relative;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.25);\n    }\n    .bar:hover {\n      background: var(--barHover);\n      transform: translateY(-2px);\n    }\n    .bar .value {\n      position: absolute;\n      bottom: -22px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 11px;\n      color: var(--muted);\n      background: rgba(0,0,0,0.25);\n      padding: 2px 6px;\n      border-radius: 6px;\n      white-space: nowrap;\n      pointer-events: none;\n    }\n    .bar.compareA { background: var(--compareA); }\n    .bar.compareB { background: var(--compareB); }\n    .bar.swap { background: var(--swap); }\n    .bar.sorted { background: var(--sorted); }\n    .bar.currentPass { outline: 2px dashed rgba(34, 211, 238, 0.35); outline-offset: -2px; }\n\n    .legend {\n      padding: 10px 20px 0 20px;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 10px;\n      font-size: 12px;\n      color: var(--muted);\n    }\n    .legend .item { display: inline-flex; align-items: center; gap: 6px; }\n    .legend .swatch {\n      width: 14px; height: 14px; border-radius: 4px;\n    }\n    .swatch.compareA { background: var(--compareA); }\n    .swatch.compareB { background: var(--compareB); }\n    .swatch.swap { background: var(--swap); }\n    .swatch.sorted { background: var(--sorted); }\n    .swatch.default { background: var(--bar); }\n\n    .code-panel {\n      padding: 0 20px 20px 20px;\n    }\n    pre {\n      margin: 0;\n      overflow: auto;\n      background: var(--panel);\n      border: 1px solid #1f2937;\n      border-radius: 12px;\n      padding: 12px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size: 12px;\n      line-height: 1.4;\n      color: #cbd5e1;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.35);\n    }\n\n    footer {\n      padding: 10px 20px 20px 20px;\n      font-size: 12px;\n      color: var(--muted);\n    }\n    a { color: var(--accent); text-decoration: none; }\n    a:hover { text-decoration: underline; }\n    .error {\n      color: #fca5a5;\n      font-size: 12px;\n      margin-left: 6px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1><span class=\"dot\"></span> Bubble Sort Visualizer</h1>\n    <div class=\"subtitle\">Step through comparisons and swaps to see how Bubble Sort works.</div>\n  </header>\n\n  <div class=\"controls\">\n    <div class=\"panel\">\n      <div class=\"row\">\n        <div class=\"group\">\n          <button id=\"btnPlay\" class=\"primary\">Play</button>\n          <button id=\"btnPause\">Pause</button>\n          <button id=\"btnStep\">Step</button>\n          <button id=\"btnReset\">Reset</button>\n          <button id=\"btnRandom\">Randomize</button>\n        </div>\n        <div class=\"group\">\n          <div class=\"slider-group\">\n            <span class=\"label\">Speed</span>\n            <input id=\"speed\" type=\"range\" min=\"10\" max=\"1000\" step=\"10\" value=\"300\" />\n            <span id=\"speedLabel\" class=\"label\">300 ms/step</span>\n          </div>\n          <div class=\"slider-group\">\n            <span class=\"label\">Size</span>\n            <input id=\"size\" type=\"range\" min=\"5\" max=\"60\" step=\"1\" value=\"20\" />\n            <span id=\"sizeLabel\" class=\"label\">20</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top:8px\">\n        <div class=\"input\" style=\"flex:1;\">\n          <input id=\"arrayInput\" type=\"text\" placeholder=\"Enter numbers (e.g., 5, 3, 8, 2, 9)\" />\n          <button id=\"btnSet\">Set Input</button>\n        </div>\n        <span id=\"inputError\" class=\"error\"></span>\n        <span class=\"hint\">Tip: Use commas or spaces. Values should be integers between 1 and 99.</span>\n      </div>\n      <div class=\"stats\">\n        <div class=\"stat\">\n          <div class=\"title\">Comparisons</div>\n          <div id=\"statComparisons\" class=\"value\">0</div>\n        </div>\n        <div class=\"stat\">\n          <div class=\"title\">Swaps</div>\n          <div id=\"statSwaps\" class=\"value\">0</div>\n        </div>\n        <div class=\"stat\">\n          <div class=\"title\">Pass</div>\n          <div id=\"statPass\" class=\"value\">0</div>\n        </div>\n        <div class=\"stat\">\n          <div class=\"title\">Status</div>\n          <div id=\"statStatus\" class=\"value\">Ready</div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"visualizer\">\n    <div class=\"canvas\">\n      <div id=\"bars\" class=\"bars\" aria-label=\"Bubble sort bars\"></div>\n    </div>\n  </div>\n\n  <div class=\"legend\">\n    <div class=\"item\"><span class=\"swatch default\"></span> Unsorted</div>\n    <div class=\"item\"><span class=\"swatch compareA\"></span> Compare (left)</div>\n    <div class=\"item\"><span class=\"swatch compareB\"></span> Compare (right)</div>\n    <div class=\"item\"><span class=\"swatch swap\"></span> Swapped</div>\n    <div class=\"item\"><span class=\"swatch sorted\"></span> Sorted tail</div>\n  </div>\n\n  <div class=\"code-panel\">\n    <pre>// Bubble Sort (ascending)\n// Repeatedly step through the list, compare adjacent items,\n// and swap them if they are in the wrong order.\n// After each pass, the largest remaining element \"bubbles\" to the end.\n\nfunction bubbleSort(arr) {\n  const a = arr.slice();\n  for (let i = 0; i &lt; a.length - 1; i++) {\n    let swapped = false;\n    for (let j = 0; j &lt; a.length - i - 1; j++) {\n      if (a[j] &gt; a[j + 1]) {\n        [a[j], a[j + 1]] = [a[j + 1], a[j]];\n        swapped = true;\n      }\n    }\n    if (!swapped) break; // Optimization: stop early if already sorted\n  }\n  return a;\n}</pre>\n  </div>\n\n  <footer>\n    Bubble Sort has average and worst-case time complexity O(n²) and is stable. It’s simple to implement and useful as an educational example, but generally inefficient for large datasets.\n  </footer>\n\n  <script>\n    // Utility: sleep\n    const sleep = (ms) => new Promise(res => setTimeout(res, ms));\n\n    // State\n    let baseArray = [];\n    let currentArray = [];\n    let gen = null;\n    let playing = false;\n    let speedMs = 300;\n    let sizeN = 20;\n    let currentStep = null;\n    let comparisons = 0;\n    let swaps = 0;\n    let pass = 0;\n\n    // Elements\n    const barsEl = document.getElementById('bars');\n    const statComparisonsEl = document.getElementById('statComparisons');\n    const statSwapsEl = document.getElementById('statSwaps');\n    const statPassEl = document.getElementById('statPass');\n    const statStatusEl = document.getElementById('statStatus');\n\n    const btnPlay = document.getElementById('btnPlay');\n    const btnPause = document.getElementById('btnPause');\n    const btnStep = document.getElementById('btnStep');\n    const btnReset = document.getElementById('btnReset');\n    const btnRandom = document.getElementById('btnRandom');\n    const btnSet = document.getElementById('btnSet');\n\n    const speedRange = document.getElementById('speed');\n    const speedLabel = document.getElementById('speedLabel');\n    const sizeRange = document.getElementById('size');\n    const sizeLabel = document.getElementById('sizeLabel');\n\n    const arrayInput = document.getElementById('arrayInput');\n    const inputError = document.getElementById('inputError');\n\n    // Random array generator\n    function randomArray(n) {\n      const arr = [];\n      for (let i = 0; i < n; i++) {\n        arr.push(Math.floor(5 + Math.random() * 95)); // 5..99\n      }\n      return arr;\n    }\n\n    // Bubble Sort generator producing detailed steps\n    function* bubbleSortGenerator(arr) {\n      const a = arr.slice();\n      const n = a.length;\n      let comps = 0;\n      let swps = 0;\n      // i passes completed = number of elements in sorted tail\n      for (let i = 0; i < n - 1; i++) {\n        let swappedInPass = false;\n        for (let j = 0; j < n - i - 1; j++) {\n          comps++;\n          yield {\n            type: 'compare',\n            array: a.slice(),\n            i,\n            j,\n            comparisons: comps,\n            swaps: swps,\n            sortedFromIndex: n - i, // tail of size i is sorted from here\n          };\n          if (a[j] > a[j + 1]) {\n            const left = j, right = j + 1;\n            [a[j], a[j + 1]] = [a[j + 1], a[j]];\n            swps++;\n            swappedInPass = true;\n            yield {\n              type: 'swap',\n              array: a.slice(),\n              i,\n              j,\n              swapped: [left, right],\n              comparisons: comps,\n              swaps: swps,\n              sortedFromIndex: n - i,\n            };\n          }\n        }\n        // End of pass i: the largest among first n-i items moved to position n-i-1\n        yield {\n          type: 'pass_end',\n          array: a.slice(),\n          i,\n          j: null,\n          comparisons: comps,\n          swaps: swps,\n          sortedFromIndex: n - (i + 1),\n        };\n        if (!swappedInPass) {\n          // Early exit: already sorted\n          yield {\n            type: 'done',\n            array: a.slice(),\n            i,\n            j: null,\n            comparisons: comps,\n            swaps: swps,\n            sortedFromIndex: 0,\n          };\n          return;\n        }\n      }\n      yield {\n        type: 'done',\n        array: a.slice(),\n        i: n - 1,\n        j: null,\n        comparisons: comps,\n        swaps: swps,\n        sortedFromIndex: 0,\n      };\n    }\n\n    // Rendering\n    function render(step) {\n      if (!step) {\n        // Initial state render\n        barsEl.innerHTML = '';\n        const max = Math.max(...currentArray, 100);\n        currentArray.forEach((v, idx) => {\n          const bar = document.createElement('div');\n          bar.className = 'bar';\n          bar.style.height = `${Math.round((v / max) * 100)}%`;\n          const label = document.createElement('div');\n          label.className = 'value';\n          label.textContent = v;\n          bar.appendChild(label);\n          barsEl.appendChild(bar);\n        });\n        statComparisonsEl.textContent = '0';\n        statSwapsEl.textContent = '0';\n        statPassEl.textContent = '0';\n        statStatusEl.textContent = 'Ready';\n        return;\n      }\n\n      currentArray = step.array.slice();\n      comparisons = step.comparisons ?? comparisons;\n      swaps = step.swaps ?? swaps;\n      pass = step.type === 'pass_end' ? (step.i + 1) : pass;\n\n      barsEl.innerHTML = '';\n      const max = Math.max(...currentArray, 100);\n\n      for (let idx = 0; idx < currentArray.length; idx++) {\n        const v = currentArray[idx];\n        const bar = document.createElement('div');\n        bar.className = 'bar';\n        bar.style.height = `${Math.round((v / max) * 100)}%`;\n\n        // Sorted tail\n        if (idx >= (step.sortedFromIndex ?? currentArray.length + 1)) {\n          bar.classList.add('sorted');\n        }\n\n        // Compare highlighting\n        if (step.type === 'compare' && (idx === step.j || idx === step.j + 1)) {\n          bar.classList.add(idx === step.j ? 'compareA' : 'compareB');\n        }\n\n        // Swap highlighting (after swap)\n        if (step.type === 'swap' && step.swapped && step.swapped.includes(idx)) {\n          bar.classList.add('swap');\n        }\n\n        // Optional outline for current pass (elements still in play)\n        const stillUnsortedMaxIndex = (step.sortedFromIndex ?? currentArray.length) - 1;\n        if (idx <= stillUnsortedMaxIndex) {\n          bar.classList.add('currentPass');\n        }\n\n        const label = document.createElement('div');\n        label.className = 'value';\n        label.textContent = v;\n        // Hide labels if too many bars to avoid clutter\n        if (currentArray.length > 40) {\n          label.style.display = 'none';\n        }\n        bar.appendChild(label);\n        barsEl.appendChild(bar);\n      }\n\n      statComparisonsEl.textContent = String(comparisons);\n      statSwapsEl.textContent = String(swaps);\n      statPassEl.textContent = String(pass);\n      statStatusEl.textContent =\n        step.type === 'compare' ? `Comparing indices ${step.j} and ${step.j + 1}` :\n        step.type === 'swap' ? `Swapped indices ${step.swapped[0]} and ${step.swapped[1]}` :\n        step.type === 'pass_end' ? `End of pass ${step.i + 1}` :\n        step.type === 'done' ? `Done` : `Ready`;\n    }\n\n    // Controls logic\n    async function play() {\n      if (!gen) gen = bubbleSortGenerator(baseArray);\n      if (playing) return;\n      playing = true;\n      btnPlay.disabled = true;\n      btnPause.disabled = false;\n      btnStep.disabled = true;\n\n      while (playing) {\n        const next = gen.next();\n        if (next.done) {\n          render({ type: 'done', array: currentArray.slice(), comparisons, swaps, sortedFromIndex: 0 });\n          playing = false;\n          btnPlay.disabled = false;\n          btnPause.disabled = true;\n          btnStep.disabled = false;\n          statStatusEl.textContent = 'Done';\n          break;\n        }\n        currentStep = next.value;\n        render(currentStep);\n        await sleep(speedMs);\n      }\n    }\n\n    function pause() {\n      playing = false;\n      btnPlay.disabled = false;\n      btnPause.disabled = true;\n      btnStep.disabled = false;\n      statStatusEl.textContent = 'Paused';\n    }\n\n    function step() {\n      if (!gen) gen = bubbleSortGenerator(baseArray);\n      const next = gen.next();\n      if (next.done) {\n        render({ type: 'done', array: currentArray.slice(), comparisons, swaps, sortedFromIndex: 0 });\n        statStatusEl.textContent = 'Done';\n        btnPlay.disabled = false;\n        btnPause.disabled = true;\n        btnStep.disabled = true;\n        playing = false;\n        return;\n      }\n      currentStep = next.value;\n      render(currentStep);\n    }\n\n    function reset() {\n      pause();\n      currentArray = baseArray.slice();\n      gen = bubbleSortGenerator(baseArray);\n      comparisons = 0;\n      swaps = 0;\n      pass = 0;\n      currentStep = null;\n      render(null);\n    }\n\n    function randomize() {\n      pause();\n      baseArray = randomArray(sizeN);\n      currentArray = baseArray.slice();\n      gen = bubbleSortGenerator(baseArray);\n      comparisons = 0;\n      swaps = 0;\n      pass = 0;\n      currentStep = null;\n      inputError.textContent = '';\n      arrayInput.value = '';\n      render(null);\n    }\n\n    function setInputFromText() {\n      const raw = arrayInput.value.trim();\n      inputError.textContent = '';\n      if (!raw) {\n        inputError.textContent = 'Please enter some numbers.';\n        return;\n      }\n      const tokens = raw.split(/[\\s,]+/).filter(Boolean);\n      const arr = [];\n      for (const t of tokens) {\n        if (!/^[-+]?\\d+$/.test(t)) {\n          inputError.textContent = `Invalid number: \"${t}\"`;\n          return;\n        }\n        const num = parseInt(t, 10);\n        if (num < 1 || num > 99) {\n          inputError.textContent = `Numbers must be between 1 and 99.`;\n          return;\n        }\n        arr.push(num);\n      }\n      if (arr.length < 2) {\n        inputError.textContent = 'Need at least 2 numbers.';\n        return;\n      }\n      if (arr.length > 100) {\n        inputError.textContent = 'Too many numbers (max 100).';\n        return;\n      }\n      pause();\n      baseArray = arr.slice();\n      sizeN = arr.length;\n      sizeRange.value = String(sizeN);\n      sizeLabel.textContent = String(sizeN);\n      currentArray = baseArray.slice();\n      gen = bubbleSortGenerator(baseArray);\n      comparisons = 0;\n      swaps = 0;\n      pass = 0;\n      currentStep = null;\n      render(null);\n    }\n\n    // Event bindings\n    btnPlay.addEventListener('click', play);\n    btnPause.addEventListener('click', pause);\n    btnStep.addEventListener('click', step);\n    btnReset.addEventListener('click', reset);\n    btnRandom.addEventListener('click', randomize);\n    btnSet.addEventListener('click', setInputFromText);\n\n    speedRange.addEventListener('input', () => {\n      speedMs = Number(speedRange.value);\n      speedLabel.textContent = `${speedMs} ms/step`;\n    });\n\n    sizeRange.addEventListener('input', () => {\n      sizeN = Number(sizeRange.value);\n      sizeLabel.textContent = String(sizeN);\n    });\n    sizeRange.addEventListener('change', () => {\n      // Recreate random array with new size\n      randomize();\n    });\n\n    // Keyboard shortcuts\n    window.addEventListener('keydown', (e) => {\n      // Space: Play/Pause, Enter: Step, Escape: Reset\n      if (e.key === ' ') {\n        e.preventDefault();\n        if (playing) pause(); else play();\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        step();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        reset();\n      }\n    });\n\n    // Initial setup\n    function init() {\n      baseArray = randomArray(sizeN);\n      currentArray = baseArray.slice();\n      speedMs = Number(speedRange.value);\n      sizeN = Number(sizeRange.value);\n      sizeLabel.textContent = String(sizeN);\n      speedLabel.textContent = `${speedMs} ms/step`;\n      gen = bubbleSortGenerator(baseArray);\n      render(null);\n      btnPause.disabled = true;\n    }\n\n    init();\n  </script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "0c3d3340-a984-11f0-9a9c-29be89fbabac",
    "timestamp": "2025-10-15T05:01:45.460Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "answer": {
      "role": "assistant",
      "content": "Creating an interactive HTML page for teaching bubble sort is a great way to engage users and help them understand how the algorithm works. Below is a complete HTML template that includes CSS for styling, JavaScript for the logic of the bubble sort algorithm, and an interactive section that allows users to input their own numbers and visualize the sorting process.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f9;\n            margin: 0;\n            padding: 20px;\n        }\n\n        h1 {\n            text-align: center;\n            color: #333;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n        }\n\n        #array {\n            display: flex;\n            align-items: flex-end;\n            margin: 20px 0;\n        }\n\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: #3498db;\n            transition: height 0.3s ease;\n            display: inline-block;\n        }\n\n        .active {\n            background-color: #e74c3c;\n        }\n\n        .sorted {\n            background-color: #2ecc71;\n        }\n\n        input[type=\"text\"], button {\n            padding: 10px;\n            width: 80%;\n            margin: 5px auto;\n            display: block;\n            font-size: 16px;\n        }\n\n        button {\n            background-color: #3498db;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #2980b9;\n        }\n\n        #visualization {\n            text-align: center;\n            font-size: 18px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <h1>Bubble Sort Visualization</h1>\n        \n        <input type=\"text\" id=\"inputArray\" placeholder=\"Enter numbers separated by commas (e.g., 5,3,8,4)\">\n        <button id=\"sortButton\">Sort</button>\n        \n        <div id=\"array\"></div>\n        \n        <div id=\"visualization\"></div>\n    </div>\n\n    <script>\n        let array = [];\n\n        // Function to create and render the bars\n        function renderArray(array) {\n            const arrayContainer = document.getElementById('array');\n            arrayContainer.innerHTML = ''; // Clear previous bars\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = value * 10 + 'px'; // scale for better visibility\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        // The Bubble Sort Algorithm\n        async function bubbleSort(array) {\n            const bars = document.getElementsByClassName('bar');\n            let n = array.length;\n            let swapped;\n\n            do {\n                swapped = false;\n                for (let i = 0; i < n - 1; i++) {\n                    // Highlight the bars being compared\n                    bars[i].classList.add('active');\n                    bars[i + 1].classList.add('active');\n\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Wait for 500ms\n\n                    if (array[i] > array[i + 1]) {\n                        // Swap\n                        [array[i], array[i + 1]] = [array[i + 1], array[i]];\n                        renderArray(array);\n                        swapped = true;\n                    }\n\n                    // Remove active class after comparison\n                    bars[i].classList.remove('active');\n                    bars[i + 1].classList.remove('active');\n                }\n                n--; // Reduce the range of comparison\n            } while (swapped);\n            \n            // Color the sorted elements\n            for (let i = 0; i < array.length; i++) {\n                bars[i].classList.add('sorted');\n            }\n        }\n\n        // Handling the sorting process\n        document.getElementById('sortButton').addEventListener('click', () => {\n            const input = document.getElementById('inputArray').value;\n            array = input.split(',').map(Number);\n            renderArray(array);\n            bubbleSort(array);\n            document.getElementById('visualization').innerText = 'Sorting in progress...';\n        });\n\n    </script>\n</body>\n\n</html>\n```\n\n### Features Explained:\n1. **Input Field**: Users can enter a series of numbers separated by commas. This allows for a hands-on experience.\n   \n2. **Bubble Sort Implementation**: The JavaScript bubble sort function sorts the array and visually updates the page in real-time.\n\n3. **Interactive Visualization**: Each number in the array is represented as a vertical bar. During sorting, the bars being compared are highlighted, making the sorting process easy to follow.\n\n4. **Styling**: Simple CSS is used to create an attractive and user-friendly interface. Button hover effects and active states for bars enhance the user experience.\n\n### How to Use:\n- Simply copy the HTML code into an `.html` file, and open it in a web browser. \n- Enter numbers in the specified input format and hit the \"Sort\" button. You’ll see the bubble sort algorithm in action!",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy"
      },
      {
        "role": "user",
        "content": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a159cec0-a984-11f0-922f-4ddea816eac3",
    "timestamp": "2025-10-15T05:05:55.628Z",
    "status": "error",
    "question": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "861106e0-a986-11f0-8771-1dba1e9da671",
    "timestamp": "2025-10-15T05:19:28.846Z",
    "status": "error",
    "question": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "d4454040-a988-11f0-8931-85fbae509b4e",
    "timestamp": "2025-10-15T05:35:59.045Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Bubble Sort Lab — Interactive Visualization and Practice</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root{\n      --bg: #0e1116;\n      --panel: #171b21;\n      --accent: #4cc9f0;\n      --accent-2: #bde0fe;\n      --green: #59d48e;\n      --red: #ff6b6b;\n      --yellow: #ffd166;\n      --text: #eaeef3;\n      --muted: #c6ced9;\n      --border: #242c36;\n      --highlight: #2e3440;\n      --bar: #6fa8dc;\n      --bar2: #80ed99;\n      --barDup: #cdb4db;\n      --sortedShade: rgba(89, 212, 142, 0.18);\n    }\n\n    * { box-sizing: border-box; }\n    html, body {\n      height: 100%;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n    }\n    a { color: var(--accent); text-decoration: none; }\n    a:hover { text-decoration: underline; }\n\n    .page {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 24px;\n      display: grid;\n      gap: 16px;\n      grid-template-columns: 1fr;\n    }\n\n    header h1 {\n      margin: 0 0 6px 0;\n      font-weight: 700;\n      letter-spacing: 0.3px;\n    }\n    header p {\n      margin: 0;\n      color: var(--muted);\n    }\n\n    .layout {\n      display: grid;\n      grid-template-columns: 1fr 320px;\n      gap: 16px;\n    }\n    @media (max-width: 980px) {\n      .layout { grid-template-columns: 1fr; }\n    }\n\n    .panel {\n      background: var(--panel);\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 14px;\n    }\n    .panel h2 {\n      margin: 0 0 8px 0;\n      font-size: 1rem;\n      color: var(--accent-2);\n    }\n\n    .controls {\n      display: grid;\n      gap: 10px;\n    }\n\n    .control-row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 10px;\n    }\n    @media (max-width: 640px) {\n      .control-row { grid-template-columns: 1fr; }\n    }\n\n    .group {\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 10px;\n      background: #12161c;\n    }\n    .group h3 {\n      margin: 0 0 8px 0;\n      font-size: 0.95rem;\n      color: var(--muted);\n      font-weight: 600;\n    }\n\n    .row { display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }\n    .row label { font-size: 0.9rem; color: var(--muted); }\n    .row input[type=\"number\"], .row input[type=\"text\"], .row select {\n      background: #0b0f14;\n      border: 1px solid var(--border);\n      border-radius: 6px;\n      color: var(--text);\n      padding: 6px 8px;\n      min-width: 0;\n    }\n    .row input[type=\"range\"] {\n      width: 160px;\n    }\n\n    .btn {\n      background: #18202a;\n      color: var(--text);\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      padding: 8px 12px;\n      cursor: pointer;\n      font-weight: 600;\n    }\n    .btn:hover { background: #202836; }\n    .btn.primary { background: var(--accent); color: #001018; border: none; }\n    .btn.primary:hover { filter: brightness(1.1); }\n    .btn.danger { background: #2a1616; color: #ffb3b3; border: 1px solid #522; }\n    .btn.success { background: #122218; color: #9ff0c1; border: 1px solid #1f3e2c; }\n    .btn.ghost { background: transparent; border: 1px dashed var(--border); }\n    .btn.small { padding: 6px 10px; font-size: 0.9rem; }\n    .btn:disabled { opacity: 0.5; cursor: default; }\n\n    .viz-panel {\n      display: grid;\n      grid-template-rows: auto auto 1fr auto;\n      gap: 8px;\n      min-height: 420px;\n    }\n\n    .legend {\n      display: flex;\n      align-items: center;\n      gap: 14px;\n      flex-wrap: wrap;\n      font-size: 0.9rem;\n    }\n    .badge { display: inline-flex; align-items: center; gap: 6px; }\n    .dot { width: 12px; height: 12px; border-radius: 50%; display: inline-block; }\n    .dot.compare { background: var(--yellow); }\n    .dot.swap { background: var(--red); }\n    .dot.sorted { background: var(--green); }\n    .dot.boundary { background: var(--accent); }\n\n    .array-container {\n      position: relative;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      background: linear-gradient(180deg, #0d1217 0, #0a0f14 100%);\n      padding: 16px 16px 24px 16px;\n      overflow: hidden;\n      min-height: 280px;\n    }\n\n    .bars {\n      position: relative;\n      display: grid;\n      grid-auto-flow: column;\n      grid-auto-columns: minmax(24px, 1fr);\n      gap: 8px;\n      align-items: end;\n      height: 100%;\n    }\n\n    .bar {\n      position: relative;\n      border-radius: 6px 6px 0 0;\n      background: linear-gradient(160deg, var(--bar) 0, #4d7eb3 100%);\n      transition: background 0.2s ease;\n      outline: 1px solid rgba(255,255,255,0.04);\n      will-change: transform, background;\n    }\n    .bar.dup {\n      background: linear-gradient(160deg, var(--barDup) 0, #a98fb6 100%);\n    }\n    .bar.compare {\n      box-shadow: 0 0 0 2px var(--yellow) inset, 0 0 12px rgba(255, 209, 102, 0.4);\n    }\n    .bar.swapping {\n      box-shadow: 0 0 0 2px var(--red) inset, 0 0 12px rgba(255, 107, 107, 0.5);\n    }\n    .bar.sorted-tail {\n      background: linear-gradient(160deg, var(--bar2) 0, #52b788 100%);\n      box-shadow: 0 0 0 2px var(--green) inset;\n      opacity: 0.9;\n    }\n\n    .bar .value {\n      position: absolute;\n      top: -18px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 0.9rem;\n      color: var(--muted);\n      user-select: none;\n    }\n    .bar .label {\n      position: absolute;\n      bottom: 6px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 0.8rem;\n      font-weight: 700;\n      color: rgba(0, 0, 0, 0.7);\n      background: rgba(255,255,255,0.8);\n      padding: 2px 6px;\n      border-radius: 999px;\n      user-select: none;\n    }\n\n    .unsorted-boundary {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      pointer-events: none;\n      height: 100%;\n    }\n    .unsorted-boundary::after {\n      content: \"\";\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      width: var(--boundary-width, 0%);\n      height: 100%;\n      background: linear-gradient(90deg, transparent 0, transparent 60%, var(--sortedShade) 90%);\n    }\n\n    .timeline {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      flex-wrap: wrap;\n    }\n    .timeline input[type=\"range\"] { width: 240px; }\n    .key {\n      font-size: 0.8rem;\n      color: var(--muted);\n    }\n\n    .side {\n      display: grid;\n      gap: 12px;\n    }\n\n    .stats {\n      display: grid;\n      gap: 6px;\n      font-size: 0.95rem;\n    }\n    .stats .kv {\n      display: flex; justify-content: space-between; align-items: baseline;\n      border-bottom: 1px dotted var(--border);\n      padding-bottom: 6px;\n    }\n    .stats .kv .k { color: var(--muted); }\n    .stats .kv .v { font-weight: 700; }\n\n    .code {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, \"Liberation Mono\", monospace;\n      background: #0b0f14;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 10px;\n      line-height: 1.4;\n      font-size: 0.9rem;\n      position: relative;\n    }\n    .line { padding: 2px 6px; border-left: 4px solid transparent; }\n    .line.active { background: #141a21; border-left-color: var(--accent); }\n    .line.comment { color: #9aa7b4; }\n\n    .explain {\n      background: #10151b;\n      border: 1px solid var(--border);\n      border-radius: 10px;\n      padding: 12px;\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n    .explain ul {\n      margin: 6px 0 0 18px;\n    }\n\n    .footer {\n      color: var(--muted);\n      font-size: 0.9rem;\n    }\n    .kbd {\n      display: inline-block;\n      background: #0b0f14;\n      border: 1px solid var(--border);\n      border-radius: 6px;\n      padding: 2px 6px;\n      font-family: monospace;\n      margin: 0 2px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"page\">\n    <header>\n      <h1>Bubble Sort Lab</h1>\n      <p>Hands-on exploration of Bubble Sort with step-by-step visualization, controls, and guided practice.</p>\n    </header>\n\n    <div class=\"layout\">\n      <div class=\"panel viz-panel\">\n        <div class=\"legend\">\n          <span class=\"badge\"><span class=\"dot compare\"></span> comparing</span>\n          <span class=\"badge\"><span class=\"dot swap\"></span> swapping</span>\n          <span class=\"badge\"><span class=\"dot sorted\"></span> sorted tail</span>\n          <span class=\"badge\"><span class=\"dot boundary\"></span> unsorted boundary</span>\n        </div>\n\n        <div class=\"array-container\" id=\"arrayContainer\" aria-label=\"Array visualization\">\n          <div class=\"unsorted-boundary\" id=\"boundary\"></div>\n          <div class=\"bars\" id=\"bars\"></div>\n        </div>\n\n        <div class=\"timeline\">\n          <button class=\"btn small\" id=\"prevBtn\" title=\"Previous step (Left arrow)\">⟵ Prev</button>\n          <button class=\"btn small primary\" id=\"playBtn\" title=\"Play/Pause (Space)\">▶ Play</button>\n          <button class=\"btn small\" id=\"nextBtn\" title=\"Next step (Right arrow)\">Next ⟶</button>\n          <button class=\"btn small ghost\" id=\"resetBtn\" title=\"Reset to step 0 (R)\">⟲ Reset</button>\n          <label class=\"key\">Speed</label>\n          <input type=\"range\" min=\"0.2\" max=\"3\" step=\"0.1\" value=\"1\" id=\"speedRange\" />\n          <label class=\"key\">Step</label>\n          <input type=\"range\" min=\"0\" max=\"0\" value=\"0\" id=\"stepRange\" />\n        </div>\n\n        <div class=\"controls panel\">\n          <div class=\"control-row\">\n            <div class=\"group\">\n              <h3>Data</h3>\n              <div class=\"row\">\n                <label>Length</label>\n                <input type=\"number\" id=\"lenInput\" min=\"3\" max=\"40\" value=\"12\" />\n                <label>Min</label>\n                <input type=\"number\" id=\"minInput\" min=\"-99\" max=\"99\" value=\"1\" />\n                <label>Max</label>\n                <input type=\"number\" id=\"maxInput\" min=\"-99\" max=\"99\" value=\"99\" />\n                <label><input type=\"checkbox\" id=\"dupsInput\" checked /> allow duplicates</label>\n              </div>\n              <div class=\"row\">\n                <button class=\"btn small\" id=\"randBtn\">Random</button>\n                <button class=\"btn small\" id=\"nearlyBtn\">Nearly sorted</button>\n                <button class=\"btn small\" id=\"sortedBtn\">Sorted</button>\n                <button class=\"btn small\" id=\"reversedBtn\">Reversed</button>\n              </div>\n              <div class=\"row\">\n                <label>Values (CSV)</label>\n                <input type=\"text\" id=\"csvInput\" placeholder=\"e.g., 5,1,4,2,8\" style=\"flex: 1;\" />\n                <button class=\"btn small\" id=\"applyCsvBtn\">Apply</button>\n              </div>\n            </div>\n\n            <div class=\"group\">\n              <h3>Algorithm</h3>\n              <div class=\"row\">\n                <label>Order</label>\n                <select id=\"orderSelect\">\n                  <option value=\"asc\">Ascending</option>\n                  <option value=\"desc\">Descending</option>\n                </select>\n                <label>Variant</label>\n                <select id=\"variantSelect\">\n                  <option value=\"classic\">Classic</option>\n                  <option value=\"optimized\">Optimized (last swap boundary)</option>\n                </select>\n              </div>\n              <div class=\"row\">\n                <label><input type=\"checkbox\" id=\"stableToggle\" checked /> stable (no swap on equals)</label>\n                <label><input type=\"checkbox\" id=\"predictToggle\" /> practice: predict next step</label>\n              </div>\n              <div class=\"row\" id=\"predictRow\" style=\"display:none;\">\n                <button class=\"btn small success\" id=\"predictSwapBtn\">I think it swaps</button>\n                <button class=\"btn small danger\" id=\"predictNoSwapBtn\">No swap</button>\n                <span id=\"predictFeedback\" style=\"margin-left:8px;\"></span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"explain\">\n          Bubble Sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are out of order. After each pass, the largest remaining element \"bubbles\" to its correct position at the end.\n          Try:\n          <ul>\n            <li>Generate a nearly-sorted array and enable the optimized variant. Observe the shrinking boundary.</li>\n            <li>Add duplicates and keep \"stable\" checked. Watch labels to confirm equal items preserve order.</li>\n            <li>Switch to descending order. Bubble sort works the same with a reversed comparison.</li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"side\">\n        <div class=\"panel\">\n          <h2>Stats</h2>\n          <div class=\"stats\">\n            <div class=\"kv\"><span class=\"k\">Pass</span><span class=\"v\" id=\"passStat\">0</span></div>\n            <div class=\"kv\"><span class=\"k\">Inner index j</span><span class=\"v\" id=\"jStat\">–</span></div>\n            <div class=\"kv\"><span class=\"k\">Comparisons</span><span class=\"v\" id=\"cmpStat\">0</span></div>\n            <div class=\"kv\"><span class=\"k\">Swaps</span><span class=\"v\" id=\"swapStat\">0</span></div>\n            <div class=\"kv\"><span class=\"k\">Early exit</span><span class=\"v\" id=\"exitStat\">no</span></div>\n            <div class=\"kv\"><span class=\"k\">Boundary</span><span class=\"v\" id=\"boundaryStat\">–</span></div>\n            <div class=\"kv\"><span class=\"k\">Stable check</span><span class=\"v\" id=\"stableStat\">ok</span></div>\n          </div>\n        </div>\n\n        <div class=\"panel\">\n          <h2>Pseudocode</h2>\n          <div class=\"code\" id=\"codeBlock\">\n            <div class=\"line comment\">// Classic bubble sort with early exit</div>\n            <div class=\"line\" data-line=\"c1\">repeat</div>\n            <div class=\"line\" data-line=\"c2\">  swapped ← false</div>\n            <div class=\"line\" data-line=\"c3\">  for j ← 0 to n - 2</div>\n            <div class=\"line\" data-line=\"c4\">    if needsSwap(a[j], a[j+1])</div>\n            <div class=\"line\" data-line=\"c5\">      swap(a[j], a[j+1])</div>\n            <div class=\"line\" data-line=\"c6\">      swapped ← true</div>\n            <div class=\"line\" data-line=\"c7\">until swapped = false</div>\n            <div style=\"height:8px\"></div>\n            <div class=\"line comment\">// Optimized: shrink inner loop to last swap index</div>\n            <div class=\"line\" data-line=\"o1\">end ← n - 1</div>\n            <div class=\"line\" data-line=\"o2\">repeat</div>\n            <div class=\"line\" data-line=\"o3\">  swapped ← false</div>\n            <div class=\"line\" data-line=\"o4\">  lastSwap ← 0</div>\n            <div class=\"line\" data-line=\"o5\">  for j ← 0 to end - 1</div>\n            <div class=\"line\" data-line=\"o6\">    if needsSwap(a[j], a[j+1])</div>\n            <div class=\"line\" data-line=\"o7\">      swap; swapped ← true</div>\n            <div class=\"line\" data-line=\"o8\">      lastSwap ← j + 1</div>\n            <div class=\"line\" data-line=\"o9\">  end ← lastSwap</div>\n            <div class=\"line\" data-line=\"o10\">until swapped = false</div>\n          </div>\n        </div>\n\n        <div class=\"panel explain\">\n          Complexity:\n          <ul>\n            <li>Worst case: O(n²) comparisons, O(n²) swaps</li>\n            <li>Best case (already sorted, early exit): O(n) comparisons, 0 swaps</li>\n            <li>Stable when equal elements are not swapped</li>\n          </ul>\n          Keyboard:\n          <ul>\n            <li>Space: Play/Pause</li>\n            <li>Left/Right: Prev/Next step</li>\n            <li>R: Reset timeline</li>\n            <li>S: Random data</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"footer\">\n      Built for learning: experiment, predict, and observe the bubble effect, boundary shrinking, and stability with duplicates.\n    </div>\n  </div>\n\n  <script>\n    // Bubble Sort Lab: interactive, step-by-step visualization\n    // Data model: each item { id, value, label }\n    // Steps: sequence of { pass, j, willSwap, boundaryAfterPass, variantContext, arraySnapshot }\n\n    const barsEl = document.getElementById('bars');\n    const boundaryEl = document.getElementById('boundary');\n    const passStat = document.getElementById('passStat');\n    const jStat = document.getElementById('jStat');\n    const cmpStat = document.getElementById('cmpStat');\n    const swapStat = document.getElementById('swapStat');\n    const exitStat = document.getElementById('exitStat');\n    const boundaryStat = document.getElementById('boundaryStat');\n    const stableStat = document.getElementById('stableStat');\n\n    const lenInput = document.getElementById('lenInput');\n    const minInput = document.getElementById('minInput');\n    const maxInput = document.getElementById('maxInput');\n    const dupsInput = document.getElementById('dupsInput');\n    const csvInput = document.getElementById('csvInput');\n\n    const randBtn = document.getElementById('randBtn');\n    const nearlyBtn = document.getElementById('nearlyBtn');\n    const sortedBtn = document.getElementById('sortedBtn');\n    const reversedBtn = document.getElementById('reversedBtn');\n    const applyCsvBtn = document.getElementById('applyCsvBtn');\n\n    const orderSelect = document.getElementById('orderSelect');\n    const variantSelect = document.getElementById('variantSelect');\n    const stableToggle = document.getElementById('stableToggle');\n    const predictToggle = document.getElementById('predictToggle');\n    const predictRow = document.getElementById('predictRow');\n    const predictSwapBtn = document.getElementById('predictSwapBtn');\n    const predictNoSwapBtn = document.getElementById('predictNoSwapBtn');\n    const predictFeedback = document.getElementById('predictFeedback');\n\n    const prevBtn = document.getElementById('prevBtn');\n    const playBtn = document.getElementById('playBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const resetBtn = document.getElementById('resetBtn');\n    const stepRange = document.getElementById('stepRange');\n    const speedRange = document.getElementById('speedRange');\n    const codeBlock = document.getElementById('codeBlock');\n\n    let data = []; // array of items\n    let baseOrderLabels = []; // track base labels order by value to check stability\n    let steps = []; // array of step objects\n    let stepIndex = 0;\n    let playing = false;\n    let speed = 1.0;\n    let order = 'asc';\n    let variant = 'classic';\n    let stableEquals = true;\n\n    let comparisonsSoFar = 0;\n    let swapsSoFar = 0;\n\n    const sleep = ms => new Promise(r => setTimeout(r, ms));\n\n    function randInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function generateRandomData(len, min, max, allowDups) {\n      const arr = [];\n      const used = new Set();\n      let id = 1;\n      while (arr.length < len) {\n        const v = randInt(min, max);\n        if (allowDups || !used.has(v)) {\n          used.add(v);\n          arr.push({ id: id++, value: v, label: idToLabel(id-1) });\n        }\n      }\n      return arr;\n    }\n\n    function generateNearlySorted(len, min, max) {\n      // create sorted and perform a few random small swaps\n      const values = [];\n      for (let i=0;i<len;i++) values.push(randInt(min, max));\n      values.sort((a,b)=>a-b);\n      const arr = values.map((v, idx)=>({ id: idx+1, value: v, label: idToLabel(idx+1) }));\n      for (let k=0;k<Math.min(5, Math.floor(len/2));k++) {\n        const i = randInt(0, len-2);\n        const j = i+1;\n        const tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp;\n      }\n      return arr;\n    }\n\n    function generateSorted(len, min, max, descending=false) {\n      const values = [];\n      for (let i=0;i<len;i++) values.push(randInt(min, max));\n      values.sort((a,b)=>descending ? b-a : a-b);\n      return values.map((v, idx)=>({ id: idx+1, value: v, label: idToLabel(idx+1) }));\n    }\n\n    function generateReversed(len, min, max) {\n      const arr = generateSorted(len, min, max, true);\n      return arr; // already reversed\n    }\n\n    function idToLabel(id) {\n      // A, B, C ... Z, AA, AB ...\n      const letters = [];\n      id--;\n      do {\n        letters.push(String.fromCharCode(65 + (id % 26)));\n        id = Math.floor(id / 26) - 1;\n      } while (id >= 0);\n      return letters.reverse().join('');\n    }\n\n    function drawArray(items) {\n      barsEl.innerHTML = '';\n      const maxVal = Math.max(...items.map(x=>x.value));\n      const countPerValue = {};\n      items.forEach(it => { countPerValue[it.value] = (countPerValue[it.value]||0)+1; });\n\n      items.forEach((item, idx) => {\n        const bar = document.createElement('div');\n        bar.className = 'bar' + (countPerValue[item.value] > 1 ? ' dup' : '');\n        bar.dataset.id = String(item.id);\n        const heightPct = maxVal === 0 ? 5 : Math.max(5, Math.round((item.value / maxVal) * 100));\n        bar.style.height = heightPct + '%';\n\n        const v = document.createElement('div');\n        v.className = 'value';\n        v.textContent = item.value;\n\n        const label = document.createElement('div');\n        label.className = 'label';\n        label.textContent = item.label;\n\n        bar.appendChild(v);\n        bar.appendChild(label);\n        barsEl.appendChild(bar);\n      });\n    }\n\n    function compareValues(a, b) {\n      if (order === 'asc') {\n        if (stableEquals) return a.value > b.value;\n        return a.value >= b.value; // intentionally unstable if equals\n      } else {\n        if (stableEquals) return a.value < b.value;\n        return a.value <= b.value;\n      }\n    }\n\n    function computeSteps(items) {\n      // Build steps for the chosen variant; we copy the input to a working array\n      const arr = items.map(x => ({...x}));\n      const N = arr.length;\n      const outSteps = [];\n      let comparisons = 0;\n      let swaps = 0;\n      let earlyExit = false;\n      let pass = 0;\n\n      if (variant === 'classic') {\n        while (true) {\n          let swapped = false;\n          for (let j = 0; j <= N - 2; j++) {\n            const willSwap = compareValues(arr[j], arr[j+1]);\n            comparisons++;\n            outSteps.push({\n              pass,\n              j,\n              willSwap,\n              variant: 'classic',\n              boundary: N - pass - 1, // after this pass, last element fixed\n              snapshotBefore: arr.map(x => ({...x})),\n            });\n            if (willSwap) {\n              swaps++;\n              const tmp = arr[j];\n              arr[j] = arr[j+1];\n              arr[j+1] = tmp;\n              outSteps[outSteps.length-1].snapshotAfter = arr.map(x => ({...x}));\n            }\n          }\n          if (!swapped) {\n            // check the pass last step to see if any willSwap happened\n            const stepsThisPass = outSteps.filter(s => s.pass === pass);\n            swapped = stepsThisPass.some(s => s.willSwap);\n          }\n          if (!swapped) { earlyExit = true; break; }\n          pass++;\n          if (pass >= N-1) break;\n        }\n      } else {\n        let end = N - 1;\n        while (true) {\n          let swapped = false;\n          let lastSwap = 0;\n          for (let j = 0; j < end; j++) {\n            const willSwap = compareValues(arr[j], arr[j+1]);\n            comparisons++;\n            outSteps.push({\n              pass,\n              j,\n              willSwap,\n              variant: 'optimized',\n              boundary: end, // unsorted boundary at 'end'\n              snapshotBefore: arr.map(x => ({...x})),\n            });\n            if (willSwap) {\n              swaps++;\n              const tmp = arr[j];\n              arr[j] = arr[j+1];\n              arr[j+1] = tmp;\n              swapped = true;\n              lastSwap = j + 1;\n              outSteps[outSteps.length-1].snapshotAfter = arr.map(x => ({...x}));\n            }\n          }\n          end = lastSwap;\n          pass++;\n          if (!swapped) { earlyExit = true; break; }\n          if (end <= 0) break;\n        }\n      }\n\n      // Append summary to the last step\n      if (outSteps.length > 0) {\n        const last = outSteps[outSteps.length-1];\n        last.summary = { comparisons, swaps, earlyExit };\n      }\n      return outSteps;\n    }\n\n    function setBoundaryUI(step) {\n      // For classic: boundary is N - pass - 1 (sorted tail size = pass+1)\n      // For optimized: boundary = 'end' (unsorted boundary)\n      const N = data.length;\n      let sortedCount = 0;\n      let boundaryIndex = null;\n\n      if (!step) {\n        boundaryEl.style.setProperty('--boundary-width', '0%');\n        boundaryStat.textContent = '–';\n        return;\n      }\n\n      if (step.variant === 'classic') {\n        sortedCount = Math.max(0, step.pass);\n        boundaryIndex = N - step.pass - 1;\n        boundaryStat.textContent = `tail size: ${sortedCount}`;\n      } else {\n        boundaryIndex = step.boundary;\n        sortedCount = N - boundaryIndex - 1;\n        boundaryStat.textContent = `end: ${step.boundary}`;\n      }\n      const pct = Math.max(0, Math.min(100, ((sortedCount) / N) * 100));\n      boundaryEl.style.setProperty('--boundary-width', pct + '%');\n    }\n\n    function clearHighlights() {\n      Array.from(barsEl.children).forEach(bar => {\n        bar.classList.remove('compare', 'swapping', 'sorted-tail');\n        bar.style.transform = '';\n      });\n    }\n\n    function applySnapshot(snapshot) {\n      // Reorder DOM to match snapshot order; animate with FLIP\n      const currentMap = {};\n      Array.from(barsEl.children).forEach(el => {\n        currentMap[el.dataset.id] = el;\n      });\n\n      const firstRects = {};\n      Array.from(barsEl.children).forEach(el => {\n        firstRects[el.dataset.id] = el.getBoundingClientRect();\n      });\n\n      // Rebuild DOM in new order\n      const frag = document.createDocumentFragment();\n      snapshot.forEach(item => {\n        const el = currentMap[String(item.id)];\n        frag.appendChild(el);\n      });\n      barsEl.appendChild(frag);\n\n      const duration = 400 / speed; // ms\n      Array.from(barsEl.children).forEach(el => {\n        const lastRect = el.getBoundingClientRect();\n        const firstRect = firstRects[el.dataset.id];\n        const deltaX = firstRect.left - lastRect.left;\n        el.style.transform = `translateX(${deltaX}px)`;\n        el.style.transition = `transform ${duration}ms ease`;\n        requestAnimationFrame(() => {\n          el.style.transform = 'translateX(0)';\n        });\n      });\n\n      setTimeout(() => {\n        Array.from(barsEl.children).forEach(el => {\n          el.style.transform = '';\n          el.style.transition = '';\n        });\n      }, duration + 20);\n    }\n\n    async function renderStep(idx, runAnimation=true) {\n      if (steps.length === 0) return;\n      const step = steps[idx];\n      const N = data.length;\n\n      // Update stats\n      const cmpCount = idx + 1; // each step is a comparison\n      const swapCount = steps.slice(0, idx+1).filter(s => s.willSwap).length;\n      comparisonsSoFar = cmpCount;\n      swapsSoFar = swapCount;\n\n      passStat.textContent = step.pass;\n      jStat.textContent = step.j;\n      cmpStat.textContent = comparisonsSoFar;\n      swapStat.textContent = swapsSoFar;\n      exitStat.textContent = (step.summary && step.summary.earlyExit && idx === steps.length-1) ? 'yes' : 'no';\n\n      setBoundaryUI(step);\n      clearHighlights();\n\n      // Compare highlight\n      const aEl = barsEl.children[step.j];\n      const bEl = barsEl.children[step.j + 1];\n      if (aEl && bEl) {\n        aEl.classList.add('compare');\n        bEl.classList.add('compare');\n      }\n\n      highlightPseudocode(step, 'compare');\n\n      const comparePause = runAnimation ? (250 / speed) : 0;\n      if (comparePause > 0) await sleep(comparePause);\n\n      // Swap if needed\n      if (step.willSwap) {\n        if (aEl && bEl) {\n          aEl.classList.add('swapping');\n          bEl.classList.add('swapping');\n        }\n        highlightPseudocode(step, 'swap');\n\n        if (runAnimation) {\n          applySnapshot(step.snapshotAfter || step.snapshotBefore);\n          await sleep(420 / speed);\n        } else {\n          // immediate reorder\n          applySnapshot(step.snapshotAfter || step.snapshotBefore);\n        }\n      }\n\n      // Mark sorted tail for classic after pass; for optimized, mark tail by boundary\n      Array.from(barsEl.children).forEach((el, i) => {\n        el.classList.remove('sorted-tail');\n      });\n      if (step.variant === 'classic') {\n        const tailStart = N - step.pass - 1; // index that is last compared, tail is beyond it\n        for (let i = tailStart+1; i < N; i++) {\n          barsEl.children[i]?.classList.add('sorted-tail');\n        }\n      } else {\n        const end = step.boundary;\n        for (let i = end+1; i < N; i++) {\n          barsEl.children[i]?.classList.add('sorted-tail');\n        }\n      }\n\n      stepRange.value = idx;\n      stepIndex = idx;\n\n      // Stability check if finished\n      if (idx === steps.length - 1) {\n        const final = steps[idx].snapshotAfter || steps[idx].snapshotBefore;\n        const stableOK = checkStability(final);\n        stableStat.textContent = stableOK ? 'ok' : 'violated';\n        stableStat.style.color = stableOK ? '#9ff0c1' : '#ffb3b3';\n      } else {\n        stableStat.textContent = 'ok';\n        stableStat.style.color = '';\n      }\n    }\n\n    function highlightPseudocode(step, phase) {\n      Array.from(codeBlock.querySelectorAll('.line')).forEach(l => l.classList.remove('active'));\n      if (step.variant === 'classic') {\n        codeBlock.querySelector('[data-line=\"c1\"]').classList.add('active');\n        codeBlock.querySelector('[data-line=\"c2\"]').classList.add('active');\n        codeBlock.querySelector('[data-line=\"c3\"]').classList.add('active');\n        if (phase === 'compare') {\n          codeBlock.querySelector('[data-line=\"c4\"]').classList.add('active');\n        } else {\n          codeBlock.querySelector('[data-line=\"c5\"]').classList.add('active');\n          codeBlock.querySelector('[data-line=\"c6\"]').classList.add('active');\n        }\n      } else {\n        codeBlock.querySelector('[data-line=\"o1\"]').classList.add('active');\n        codeBlock.querySelector('[data-line=\"o2\"]').classList.add('active');\n        codeBlock.querySelector('[data-line=\"o3\"]').classList.add('active');\n        codeBlock.querySelector('[data-line=\"o4\"]').classList.add('active');\n        codeBlock.querySelector('[data-line=\"o5\"]').classList.add('active');\n        if (phase === 'compare') {\n          codeBlock.querySelector('[data-line=\"o6\"]').classList.add('active');\n        } else {\n          codeBlock.querySelector('[data-line=\"o7\"]').classList.add('active');\n          codeBlock.querySelector('[data-line=\"o8\"]').classList.add('active');\n          codeBlock.querySelector('[data-line=\"o9\"]').classList.add('active');\n        }\n      }\n    }\n\n    function computeBaseOrderLabels(items) {\n      // For each value, record labels in original order to verify stability later\n      const map = new Map();\n      items.forEach(it => {\n        const list = map.get(it.value) || [];\n        list.push(it.label);\n        map.set(it.value, list);\n      });\n      return map;\n    }\n\n    function checkStability(sortedItems) {\n      if (!stableEquals) return false; // if unstable mode, we expect violation\n      // For each value, collect labels in final order and compare to base\n      const now = new Map();\n      sortedItems.forEach(it => {\n        const list = now.get(it.value) || [];\n        list.push(it.label);\n        now.set(it.value, list);\n      });\n      for (const [value, labels] of now.entries()) {\n        const orig = baseOrderLabels.get(value) || [];\n        // Only check values with duplicates\n        if (orig.length > 1) {\n          const same = labels.join('|') === orig.join('|');\n          if (!same) return false;\n        }\n      }\n      return true;\n    }\n\n    function updateStepRange() {\n      stepRange.min = 0;\n      stepRange.max = Math.max(0, steps.length - 1);\n      stepRange.value = 0;\n    }\n\n    function stopPlaying() {\n      playing = false;\n      playBtn.textContent = '▶ Play';\n    }\n\n    async function playFromCurrent() {\n      if (steps.length === 0) return;\n      playing = true;\n      playBtn.textContent = '⏸ Pause';\n      while (playing && stepIndex < steps.length) {\n        await renderStep(stepIndex, true);\n        stepIndex++;\n        if (predictToggle.checked) {\n          // pause before next comparison to allow prediction\n          await sleep(120 / speed);\n          stopPlaying();\n          break;\n        }\n        await sleep(100 / speed);\n      }\n      if (stepIndex >= steps.length) {\n        stopPlaying();\n      }\n    }\n\n    function rebuild() {\n      // Recompute steps from current data and controls\n      order = orderSelect.value;\n      variant = variantSelect.value;\n      stableEquals = stableToggle.checked;\n\n      drawArray(data);\n      baseOrderLabels = computeBaseOrderLabels(data);\n      steps = computeSteps(data);\n      comparisonsSoFar = 0; swapsSoFar = 0;\n      updateStepRange();\n      stepIndex = 0;\n      renderStep(0, false);\n    }\n\n    function parseCsv(str) {\n      const vals = str.split(/[\\s,]+/).map(s => s.trim()).filter(s => s.length);\n      const numbers = vals.map(v => Number(v)).filter(v => Number.isFinite(v));\n      return numbers;\n    }\n\n    function loadCsvValues() {\n      const nums = parseCsv(csvInput.value);\n      if (!nums.length) return;\n      data = nums.map((v, idx)=>({ id: idx+1, value: v, label: idToLabel(idx+1) }));\n      lenInput.value = data.length;\n      rebuild();\n    }\n\n    function init() {\n      data = generateRandomData(Number(lenInput.value), Number(minInput.value), Number(maxInput.value), dupsInput.checked);\n      rebuild();\n    }\n\n    // Controls wiring\n    randBtn.addEventListener('click', () => {\n      data = generateRandomData(Number(lenInput.value), Number(minInput.value), Number(maxInput.value), dupsInput.checked);\n      rebuild();\n    });\n    nearlyBtn.addEventListener('click', () => {\n      data = generateNearlySorted(Number(lenInput.value), Number(minInput.value), Number(maxInput.value));\n      rebuild();\n    });\n    sortedBtn.addEventListener('click', () => {\n      data = generateSorted(Number(lenInput.value), Number(minInput.value), Number(maxInput.value), false);\n      rebuild();\n    });\n    reversedBtn.addEventListener('click', () => {\n      data = generateSorted(Number(lenInput.value), Number(minInput.value), Number(maxInput.value), true);\n      rebuild();\n    });\n    applyCsvBtn.addEventListener('click', loadCsvValues);\n    csvInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') loadCsvValues();\n    });\n\n    lenInput.addEventListener('change', () => {\n      const len = Math.max(3, Math.min(40, Number(lenInput.value)));\n      lenInput.value = len;\n      data = generateRandomData(len, Number(minInput.value), Number(maxInput.value), dupsInput.checked);\n      rebuild();\n    });\n    minInput.addEventListener('change', () => { rebuildDataIfRangeValid(); });\n    maxInput.addEventListener('change', () => { rebuildDataIfRangeValid(); });\n    dupsInput.addEventListener('change', () => { data = generateRandomData(Number(lenInput.value), Number(minInput.value), Number(maxInput.value), dupsInput.checked); rebuild(); });\n\n    function rebuildDataIfRangeValid() {\n      const min = Number(minInput.value);\n      const max = Number(maxInput.value);\n      if (min > max) { const tmp = min; minInput.value = max; maxInput.value = tmp; }\n      data = generateRandomData(Number(lenInput.value), Number(minInput.value), Number(maxInput.value), dupsInput.checked);\n      rebuild();\n    }\n\n    orderSelect.addEventListener('change', () => { stopPlaying(); rebuild(); });\n    variantSelect.addEventListener('change', () => { stopPlaying(); rebuild(); });\n    stableToggle.addEventListener('change', () => { stopPlaying(); rebuild(); });\n\n    predictToggle.addEventListener('change', () => {\n      predictRow.style.display = predictToggle.checked ? 'flex' : 'none';\n      predictFeedback.textContent = '';\n    });\n    predictSwapBtn.addEventListener('click', () => handlePrediction(true));\n    predictNoSwapBtn.addEventListener('click', () => handlePrediction(false));\n    function handlePrediction(userThinksSwap) {\n      if (steps.length === 0) return;\n      const idx = stepIndex;\n      if (idx >= steps.length) return;\n      const step = steps[idx];\n      const correct = step.willSwap === userThinksSwap;\n      predictFeedback.textContent = correct ? 'Correct!' : 'Not this time.';\n      predictFeedback.style.color = correct ? '#9ff0c1' : '#ffb3b3';\n      // Execute the step after prediction\n      renderStep(idx, true).then(()=>{\n        stepIndex = Math.min(steps.length, stepIndex+1);\n        if (stepIndex >= steps.length) stopPlaying();\n      });\n    }\n\n    prevBtn.addEventListener('click', async () => {\n      stopPlaying();\n      stepIndex = Math.max(0, stepIndex - 1);\n      await renderStep(stepIndex, false);\n    });\n    nextBtn.addEventListener('click', async () => {\n      stopPlaying();\n      if (stepIndex >= steps.length) return;\n      await renderStep(stepIndex, true);\n      stepIndex = Math.min(steps.length, stepIndex + 1);\n    });\n    resetBtn.addEventListener('click', async () => {\n      stopPlaying();\n      stepIndex = 0;\n      await renderStep(stepIndex, false);\n    });\n    playBtn.addEventListener('click', async () => {\n      if (playing) {\n        stopPlaying();\n      } else {\n        await playFromCurrent();\n      }\n    });\n\n    stepRange.addEventListener('input', async (e) => {\n      stopPlaying();\n      stepIndex = Number(e.target.value);\n      await renderStep(stepIndex, false);\n    });\n\n    speedRange.addEventListener('input', () => {\n      speed = Number(speedRange.value);\n    });\n\n    // Keyboard shortcuts\n    window.addEventListener('keydown', async (e) => {\n      const tag = (e.target.tagName || '').toLowerCase();\n      if (tag === 'input' || tag === 'select' || tag === 'textarea') return;\n\n      if (e.key === ' ') {\n        e.preventDefault();\n        if (playing) stopPlaying(); else await playFromCurrent();\n      }\n      if (e.key === 'ArrowLeft') {\n        e.preventDefault();\n        prevBtn.click();\n      }\n      if (e.key === 'ArrowRight') {\n        e.preventDefault();\n        nextBtn.click();\n      }\n      if (e.key.toLowerCase() === 'r') {\n        e.preventDefault();\n        resetBtn.click();\n      }\n      if (e.key.toLowerCase() === 's') {\n        e.preventDefault();\n        randBtn.click();\n      }\n    });\n\n    // Initialize\n    init();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy"
      },
      {
        "role": "user",
        "content": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "9d935ea0-a989-11f0-aaae-85cdce0aa1db",
    "timestamp": "2025-10-15T05:41:36.779Z",
    "model": "gpt-5",
    "status": "success",
    "question": "\nYou are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation.",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Bubble Sort Interactive Lab</title>\n<style>\n  :root {\n    --safe-margin: 24px;\n    --gap: 16px;\n    --bar-gap: 8px;\n    --bg: #0f172a;\n    --panel: #111827;\n    --muted: #9ca3af;\n    --text: #e5e7eb;\n    --accent: #60a5fa;\n    --accent-2: #34d399;\n    --danger: #f87171;\n    --warning: #fbbf24;\n    --focus: #f97316;\n    --border: #1f2937;\n    --code-bg: #0b1327;\n    --code-border: #17223a;\n    --bar: #3b82f6;\n    --bar-compare: #f59e0b;\n    --bar-swap: #ef4444;\n    --bar-sorted: #10b981;\n    --shadow: rgba(0,0,0,0.35);\n  }\n\n  * { box-sizing: border-box; }\n  html, body {\n    height: 100%;\n    background: linear-gradient(180deg, #0b1020 0%, #0e152d 100%);\n    color: var(--text);\n    font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    line-height: 1.5;\n  }\n  body { margin: 0; }\n\n  main.container {\n    padding: var(--safe-margin);\n    max-width: 1200px;\n    margin: 0 auto;\n  }\n\n  h1, h2 {\n    margin: 0 0 8px 0;\n    line-height: 1.25;\n  }\n  h1 {\n    font-size: 28px;\n    letter-spacing: 0.2px;\n  }\n  h2 {\n    font-size: 20px;\n    color: #dbeafe;\n  }\n  p, li {\n    color: var(--text);\n  }\n\n  .grid {\n    display: grid;\n    grid-template-columns: minmax(280px, 1.15fr) 2fr;\n    gap: 24px;\n  }\n  @media (max-width: 880px) {\n    .grid { grid-template-columns: 1fr; }\n  }\n\n  .panel {\n    background: var(--panel);\n    border: 1px solid var(--border);\n    border-radius: 12px;\n    box-shadow: 0 8px 24px var(--shadow);\n  }\n  .panel .section {\n    padding: 16px 16px 0 16px;\n  }\n  .panel .section:last-child { padding-bottom: 16px; }\n\n  .meta {\n    display: grid;\n    gap: 16px;\n  }\n  .meta .card {\n    background: #0f1a33;\n    border: 1px solid var(--border);\n    border-radius: 12px;\n    padding: 16px;\n  }\n  .meta ul {\n    margin: 8px 0 0 18px;\n  }\n  .meta code, pre {\n    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  }\n  .meta .layout-note {\n    color: var(--muted);\n  }\n\n  .controls {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--gap);\n    align-items: center;\n  }\n\n  .control-group {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--gap);\n    align-items: center;\n  }\n\n  .field {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    min-width: 240px;\n  }\n  .field label {\n    font-size: 13px;\n    color: var(--muted);\n  }\n  .field input[type=\"text\"] {\n    width: 100%;\n    height: 40px;\n    padding: 10px 12px;\n    border-radius: 8px;\n    border: 1px solid var(--border);\n    background: #0c142a;\n    color: var(--text);\n    outline: none;\n  }\n  .field input[type=\"text\"]::placeholder {\n    color: #64748b;\n  }\n  .field input[type=\"range\"] {\n    width: 220px;\n  }\n\n  .btn {\n    height: 40px;\n    padding: 0 14px;\n    border-radius: 10px;\n    border: 1px solid var(--border);\n    background: #132041;\n    color: var(--text);\n    cursor: pointer;\n    transition: transform 120ms ease, box-shadow 120ms ease, background 120ms ease;\n  }\n  .btn:hover { transform: translateY(-1px); box-shadow: 0 6px 18px rgba(0,0,0,0.2); }\n  .btn:active { transform: translateY(0); }\n  .btn.primary { background: #1d4ed8; border-color: #1d4ed8; }\n  .btn.green { background: #059669; border-color: #059669; }\n  .btn.red { background: #b91c1c; border-color: #b91c1c; }\n  .btn.secondary { background: #0c1833; }\n  .btn[disabled] { opacity: 0.55; cursor: not-allowed; }\n\n  .toggle {\n    display: inline-flex;\n    align-items: center;\n    gap: 10px;\n    user-select: none;\n  }\n  .toggle input { width: 20px; height: 20px; }\n\n  .bar-area-wrap {\n    padding: 16px;\n  }\n  .bar-area {\n    position: relative;\n    height: 280px;\n    background: #0b1327;\n    border: 1px solid var(--code-border);\n    border-radius: 12px;\n    overflow: hidden;\n  }\n\n  .bar {\n    position: absolute;\n    bottom: 0;\n    width: 48px; /* will be resized dynamically */\n    border-radius: 8px 8px 0 0;\n    background: var(--bar);\n    color: #0b1020;\n    text-align: center;\n    transform: translateX(0);\n    transition: transform var(--anim-ms, 350ms) ease, background-color 180ms ease, box-shadow 180ms ease, outline-color 180ms ease;\n    outline: 3px solid transparent;\n  }\n  .bar .label {\n    position: absolute;\n    top: -26px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: max-content;\n    padding: 2px 6px;\n    border-radius: 6px;\n    font-size: 13px;\n    color: #dbeafe;\n    background: rgba(37, 99, 235, 0.15);\n    border: 1px solid rgba(59, 130, 246, 0.35);\n    backdrop-filter: blur(3px);\n  }\n  .bar.compare { background: var(--bar-compare); outline-color: rgba(251, 191, 36, 0.6); }\n  .bar.swap { background: var(--bar-swap); outline-color: rgba(239, 68, 68, 0.6); }\n  .bar.sorted { background: var(--bar-sorted); outline-color: rgba(16, 185, 129, 0.5); }\n\n  .legend {\n    display: flex;\n    gap: 16px;\n    flex-wrap: wrap;\n    margin-top: 12px;\n  }\n  .legend .chip {\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    border-radius: 999px;\n    padding: 6px 12px;\n    background: #0c1b36;\n    border: 1px solid var(--border);\n    font-size: 13px;\n    color: var(--muted);\n  }\n  .legend .dot {\n    width: 14px;\n    height: 14px;\n    border-radius: 50%;\n    display: inline-block;\n  }\n  .dot.compare { background: var(--bar-compare); }\n  .dot.swap { background: var(--bar-swap); }\n  .dot.sorted { background: var(--bar-sorted); }\n\n  .status-row {\n    display: grid;\n    grid-template-columns: repeat(3, minmax(140px, 1fr));\n    gap: 16px;\n    margin-top: 16px;\n  }\n  .stat {\n    background: #0c1a34;\n    border: 1px solid var(--border);\n    border-radius: 10px;\n    padding: 12px;\n  }\n  .stat .label { color: var(--muted); font-size: 12px; }\n  .stat .value { font-weight: 700; font-size: 18px; margin-top: 6px; }\n\n  .code {\n    background: var(--code-bg);\n    border: 1px solid var(--code-border);\n    border-radius: 12px;\n    padding: 12px;\n    margin-top: 16px;\n    overflow: auto;\n    max-height: 180px;\n  }\n  .code pre {\n    margin: 0;\n    color: #c7d2fe;\n    font-size: 14px;\n  }\n  .code .line { padding: 3px 8px; border-radius: 6px; }\n  .code .active { background: rgba(96, 165, 250, 0.15); border: 1px solid rgba(96, 165, 250, 0.35); }\n\n  .prompt {\n    margin-top: 12px;\n    padding: 12px;\n    background: #081128;\n    border: 1px solid var(--code-border);\n    border-radius: 10px;\n  }\n  .prompt .question { color: #fde68a; }\n  .prompt .feedback { margin-top: 8px; font-size: 14px; }\n\n  .kbd {\n    display: inline-block;\n    border: 1px solid var(--border);\n    background: #0a1328;\n    padding: 2px 6px;\n    border-radius: 6px;\n    font-size: 12px;\n    color: #c7d2fe;\n  }\n\n  /* Focus styles for accessibility */\n  .btn:focus, input:focus, .toggle input:focus {\n    outline: 3px solid rgba(249, 115, 22, 0.5);\n    outline-offset: 2px;\n  }\n\n  /* Responsive tweaks */\n  @media (max-width: 640px) {\n    .status-row { grid-template-columns: 1fr; }\n    .field { min-width: 100%; }\n  }\n</style>\n</head>\n<body>\n<main class=\"container\">\n  <div class=\"grid\">\n    <!-- Left column: Pedagogical description -->\n    <section class=\"panel\" aria-labelledby=\"title\">\n      <div class=\"section\">\n        <h1 id=\"title\">Bubble Sort — Visual, Step-by-Step Interactive Module</h1>\n        <p class=\"layout-note\">Safe area margins: 24 px on all sides. Minimum spacing: 16 px between interactive controls. The interface is responsive and keyboard-accessible.</p>\n      </div>\n      <div class=\"section meta\">\n        <div class=\"card\" aria-labelledby=\"learning-objective\">\n          <h2 id=\"learning-objective\">Learning Objective</h2>\n          <ul>\n            <li>Understand how bubble sort compares adjacent elements and moves the largest unsorted value to the end on each pass.</li>\n            <li>Recognize the shrinking inner loop and the “sorted tail” region after each pass.</li>\n            <li>Relate algorithm steps to real-time visual feedback: comparisons, condition checks, and swaps.</li>\n          </ul>\n        </div>\n        <div class=\"card\" aria-labelledby=\"interaction-design\">\n          <h2 id=\"interaction-design\">Interaction Design</h2>\n          <ul>\n            <li>Input data: Type a comma-separated list or generate random values. Load to visualize bars.</li>\n            <li>Play/Pause: Automatically run the bubble sort with animated comparisons and swaps. Speed slider adjusts animation duration in real time.</li>\n            <li>Step: Advance one algorithm step (one adjacent comparison and possible swap) to observe the process carefully.</li>\n            <li>Challenge mode: For each comparison, choose “Swap” or “Keep.” You receive immediate feedback and the animation shows the result. This reinforces the comparison rule A[j] &gt; A[j+1] → swap.</li>\n            <li>Pseudocode mapping: Lines highlight dynamically to match the current phase (new pass, comparison, swap) and create a strong mental model.</li>\n            <li>Keyboard: Space toggles Play/Pause, Right Arrow performs Step, R resets to the initial dataset.</li>\n          </ul>\n        </div>\n        <div class=\"card\" aria-labelledby=\"layout-description\">\n          <h2 id=\"layout-description\">Layout Description</h2>\n          <p>\n            Spatial organization maintains clarity, focus, and balance:\n          </p>\n          <ul>\n            <li>Left pane: The concept title and explanatory sections (Learning Objective, Interaction Design, Layout Description).</li>\n            <li>Right pane: The interactive lab containing data controls at the top, the animated bar visualization centrally, and status, legend, and pseudocode below.</li>\n            <li>Safe area: 24 px padding on the main container. Interactive controls are arranged with at least 16 px gap to prevent accidental clicks and to improve scanability.</li>\n            <li>Accessibility: Clear labels, visible focus outlines, ARIA live status region, keyboard shortcuts, and high-contrast colors ensure inclusive interaction.</li>\n            <li>Responsiveness: The grid collapses into a single column on small screens; bars and controls scale to maintain readability and usability.</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n\n    <!-- Right column: Interactive module -->\n    <section class=\"panel\" aria-labelledby=\"module-title\">\n      <div class=\"section\">\n        <h2 id=\"module-title\">Interactive Lab</h2>\n        <div class=\"controls\" role=\"group\" aria-label=\"Dataset controls\">\n          <div class=\"field\">\n            <label for=\"dataset\">Dataset (comma-separated integers)</label>\n            <input id=\"dataset\" type=\"text\" placeholder=\"e.g., 7, 3, 2, 9, 1\" aria-describedby=\"dataset-help\" />\n            <small id=\"dataset-help\" class=\"layout-note\">Example: 10,4,7,2,5 — values from 0–999 supported.</small>\n          </div>\n          <div class=\"control-group\" aria-label=\"Dataset actions\">\n            <button id=\"loadBtn\" class=\"btn primary\" aria-label=\"Load dataset\">Load</button>\n            <button id=\"randomBtn\" class=\"btn secondary\" aria-label=\"Generate random dataset\">Randomize</button>\n            <button id=\"resetBtn\" class=\"btn red\" aria-label=\"Reset to initial dataset\" disabled>Reset</button>\n          </div>\n        </div>\n\n        <div class=\"controls\" role=\"group\" aria-label=\"Run controls\" style=\"margin-top:16px;\">\n          <label class=\"toggle\" for=\"challengeToggle\">\n            <input id=\"challengeToggle\" type=\"checkbox\" aria-label=\"Toggle challenge mode\" />\n            Challenge mode (you decide swap/keep)\n          </label>\n\n          <div class=\"control-group\" aria-label=\"Playback controls\">\n            <button id=\"playPauseBtn\" class=\"btn green\" aria-label=\"Play or pause\" disabled>Play</button>\n            <button id=\"stepBtn\" class=\"btn\" aria-label=\"Step one comparison\" disabled>Step</button>\n          </div>\n\n          <div class=\"field\" style=\"min-width:200px;\">\n            <label for=\"speed\">Speed</label>\n            <input id=\"speed\" type=\"range\" min=\"0.2\" max=\"2.5\" value=\"1\" step=\"0.1\" aria-label=\"Animation speed\" />\n            <small class=\"layout-note\">Slower ← → Faster</small>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"bar-area-wrap\">\n        <div id=\"barArea\" class=\"bar-area\" aria-label=\"Bubble sort visualization\"></div>\n        <div class=\"legend\" aria-label=\"Legend\">\n          <span class=\"chip\"><span class=\"dot compare\" aria-hidden=\"true\"></span> comparing pair</span>\n          <span class=\"chip\"><span class=\"dot swap\" aria-hidden=\"true\"></span> swapped</span>\n          <span class=\"chip\"><span class=\"dot sorted\" aria-hidden=\"true\"></span> sorted tail</span>\n        </div>\n\n        <div class=\"status-row\" aria-label=\"Status\">\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"label\">Comparisons</div>\n            <div id=\"comparisons\" class=\"value\">0</div>\n          </div>\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"label\">Swaps</div>\n            <div id=\"swaps\" class=\"value\">0</div>\n          </div>\n          <div class=\"stat\" aria-live=\"polite\">\n            <div class=\"label\">Pass</div>\n            <div id=\"pass\" class=\"value\">0</div>\n          </div>\n        </div>\n\n        <div class=\"prompt\" id=\"prompt\" style=\"display:none;\" aria-live=\"polite\">\n          <div class=\"question\" id=\"promptQuestion\">Should we swap the highlighted pair?</div>\n          <div class=\"control-group\" style=\"margin-top:8px;\">\n            <button id=\"chooseSwap\" class=\"btn primary\" aria-label=\"Choose swap\">Swap</button>\n            <button id=\"chooseKeep\" class=\"btn secondary\" aria-label=\"Choose keep\">Keep</button>\n          </div>\n          <div class=\"feedback\" id=\"promptFeedback\"></div>\n        </div>\n\n        <div class=\"code\" aria-label=\"Pseudocode\">\n          <pre id=\"pseudo\">\n<span class=\"line\" data-line=\"1\">1  for i from 0 to n-1:              // outer pass: largest bubble goes right</span>\n<span class=\"line\" data-line=\"2\">2    for j from 0 to n-2-i:          // inner loop shrinks as tail becomes sorted</span>\n<span class=\"line\" data-line=\"3\">3      compare A[j] and A[j+1]</span>\n<span class=\"line\" data-line=\"4\">4      if A[j] > A[j+1]: swap(A[j], A[j+1])</span>\n          </pre>\n        </div>\n\n        <div class=\"section\">\n          <p id=\"ariaStatus\" aria-live=\"polite\" class=\"layout-note\">Status: Ready. Load a dataset to begin.</p>\n          <p class=\"layout-note\">\n            Tips: Press <span class=\"kbd\">Space</span> to Play/Pause, <span class=\"kbd\">→</span> to Step, <span class=\"kbd\">R</span> to Reset. Challenge mode requires you to decide whether the current pair should swap.\n          </p>\n        </div>\n      </div>\n    </section>\n  </div>\n</main>\n\n<script>\n(function() {\n  // State\n  const state = {\n    items: [],          // { id, value, index }\n    original: [],\n    n: 0,\n    i: 0,               // pass index\n    j: 0,               // inner index\n    comparisons: 0,\n    swaps: 0,\n    running: false,\n    challenge: false,\n    waitingDecision: false,\n    speed: 1,           // multiplier\n    animMs: 350,        // base ms\n    justLoaded: false\n  };\n\n  // Elements\n  const barArea = document.getElementById('barArea');\n  const datasetInput = document.getElementById('dataset');\n  const loadBtn = document.getElementById('loadBtn');\n  const randomBtn = document.getElementById('randomBtn');\n  const resetBtn = document.getElementById('resetBtn');\n  const playPauseBtn = document.getElementById('playPauseBtn');\n  const stepBtn = document.getElementById('stepBtn');\n  const speedInput = document.getElementById('speed');\n  const comparisonsEl = document.getElementById('comparisons');\n  const swapsEl = document.getElementById('swaps');\n  const passEl = document.getElementById('pass');\n  const pseudo = document.getElementById('pseudo');\n  const ariaStatus = document.getElementById('ariaStatus');\n  const challengeToggle = document.getElementById('challengeToggle');\n  const prompt = document.getElementById('prompt');\n  const promptQuestion = document.getElementById('promptQuestion');\n  const promptFeedback = document.getElementById('promptFeedback');\n  const chooseSwap = document.getElementById('chooseSwap');\n  const chooseKeep = document.getElementById('chooseKeep');\n\n  // Utility\n  const sleep = (ms) => new Promise(res => setTimeout(res, ms));\n  function clamp(n, min, max) { return Math.max(min, Math.min(max, n)); }\n\n  function updateStatusText(txt) {\n    ariaStatus.textContent = \"Status: \" + txt;\n  }\n\n  function highlightLine(n) {\n    [...pseudo.querySelectorAll('.line')].forEach(line => {\n      line.classList.toggle('active', Number(line.dataset.line) === n);\n    });\n  }\n\n  // Data helpers\n  function parseDataset(text) {\n    const nums = text.split(',')\n      .map(s => s.trim())\n      .filter(s => s.length)\n      .map(s => {\n        const v = Number(s);\n        if (!Number.isFinite(v)) throw new Error(\"All values must be numbers.\");\n        return clamp(Math.round(v), -999, 999);\n      });\n    if (nums.length < 2) throw new Error(\"Please provide at least two numbers.\");\n    return nums;\n  }\n\n  function generateRandom(len = 8) {\n    const n = clamp(len, 5, 14);\n    const arr = [];\n    for (let k = 0; k < n; k++) {\n      arr.push(Math.floor(Math.random() * 90) + 10);\n    }\n    return arr;\n  }\n\n  // Layout / render\n  function computeBarLayout() {\n    const gap = 8;\n    const padding = 12;\n    const width = barArea.clientWidth;\n    const n = state.n;\n    const maxBarWidth = 64;\n    const minBarWidth = 32;\n    let w = Math.floor((width - padding * 2 - gap * (n - 1)) / n);\n    w = clamp(w, minBarWidth, maxBarWidth);\n    const totalW = w * n + gap * (n - 1);\n    const leftOffset = Math.floor((width - totalW) / 2);\n    return { barWidth: w, gap, leftOffset };\n  }\n\n  function maxAbsValue() {\n    if (!state.items.length) return 1;\n    const max = Math.max(...state.items.map(i => Math.abs(i.value)));\n    return Math.max(1, max);\n  }\n\n  function itemX(index, layout) {\n    return layout.leftOffset + index * (layout.barWidth + layout.gap);\n  }\n\n  function itemHeight(value) {\n    // Map value magnitude to height with minimum; negative values supported\n    const max = maxAbsValue();\n    const minH = 28;\n    const maxH = 220;\n    const norm = Math.abs(value) / max;\n    return Math.floor(minH + norm * (maxH - minH));\n  }\n\n  function clearBars() {\n    barArea.innerHTML = '';\n  }\n\n  function renderBars(initial = false) {\n    clearBars();\n    const layout = computeBarLayout();\n    state.items.forEach(item => {\n      const bar = document.createElement('div');\n      bar.className = 'bar';\n      bar.setAttribute('role', 'img');\n      bar.setAttribute('aria-label', `Value ${item.value}`);\n      bar.style.setProperty('--anim-ms', `${Math.round(state.animMs / state.speed)}ms`);\n      bar.style.width = `${layout.barWidth}px`;\n      bar.style.height = `${itemHeight(item.value)}px`;\n      bar.style.transform = `translateX(${itemX(item.index, layout)}px)`;\n      bar.dataset.id = String(item.id);\n\n      const label = document.createElement('div');\n      label.className = 'label';\n      label.textContent = String(item.value);\n      bar.appendChild(label);\n      barArea.appendChild(bar);\n    });\n    highlightSortedTail();\n  }\n\n  function updateBarPositions() {\n    const layout = computeBarLayout();\n    document.querySelectorAll('.bar').forEach(bar => {\n      const id = Number(bar.dataset.id);\n      const item = state.items.find(i => i.id === id);\n      bar.style.setProperty('--anim-ms', `${Math.round(state.animMs / state.speed)}ms`);\n      bar.style.width = `${layout.barWidth}px`;\n      bar.style.transform = `translateX(${itemX(item.index, layout)}px)`;\n      bar.style.height = `${itemHeight(item.value)}px`;\n    });\n  }\n\n  function markCompare(leftIndex, rightIndex, on = true) {\n    document.querySelectorAll('.bar').forEach(bar => {\n      const id = Number(bar.dataset.id);\n      const item = state.items.find(i => i.id === id);\n      if (item.index === leftIndex || item.index === rightIndex) {\n        bar.classList.toggle('compare', on);\n      } else {\n        bar.classList.remove('compare');\n      }\n      bar.classList.remove('swap'); // cleanup\n    });\n  }\n\n  function markSwap(leftIndex, rightIndex) {\n    document.querySelectorAll('.bar').forEach(bar => {\n      const id = Number(bar.dataset.id);\n      const item = state.items.find(i => i.id === id);\n      const isPair = item.index === leftIndex || item.index === rightIndex;\n      bar.classList.toggle('swap', isPair);\n    });\n  }\n\n  function highlightSortedTail() {\n    const sortedStart = state.n - state.i;\n    document.querySelectorAll('.bar').forEach(bar => {\n      const id = Number(bar.dataset.id);\n      const item = state.items.find(i => i.id === id);\n      const isSortedTail = item.index >= sortedStart;\n      bar.classList.toggle('sorted', isSortedTail);\n    });\n  }\n\n  function setControlsEnabled(enabled) {\n    playPauseBtn.disabled = !enabled || state.challenge;\n    stepBtn.disabled = !enabled;\n    resetBtn.disabled = !enabled;\n  }\n\n  // Algorithm control\n  function resetStats() {\n    state.i = 0;\n    state.j = 0;\n    state.comparisons = 0;\n    state.swaps = 0;\n    comparisonsEl.textContent = '0';\n    swapsEl.textContent = '0';\n    passEl.textContent = '0';\n    updateStatusText('Ready. Press Play or Step to begin.');\n    highlightLine(0);\n  }\n\n  function loadArray(arr) {\n    state.original = arr.slice();\n    state.items = arr.map((v, idx) => ({ id: idx + 1, value: v, index: idx }));\n    state.n = state.items.length;\n    state.running = false;\n    resetStats();\n    renderBars(true);\n    setControlsEnabled(true);\n    playPauseBtn.textContent = 'Play';\n    state.justLoaded = true;\n  }\n\n  function shuffleToOriginal() {\n    // Reset to original order\n    const arr = state.original.slice();\n    state.items.forEach((item, idx) => {\n      item.value = arr[idx];\n      item.index = idx;\n    });\n    resetStats();\n    renderBars(true);\n  }\n\n  function swapIndices(aIdx, bIdx) {\n    // Swap positions of items with index aIdx and bIdx\n    const itemA = state.items.find(i => i.index === aIdx);\n    const itemB = state.items.find(i => i.index === bIdx);\n    if (!itemA || !itemB) return;\n    const tmp = itemA.index;\n    itemA.index = itemB.index;\n    itemB.index = tmp;\n\n    // Also swap values in logical order array perspective: maintain a virtual array by index mapping\n    // For bubble sort correctness, we rely on visual indices only; values remain attached to bars.\n  }\n\n  function sorted() {\n    return state.i >= state.n - 1;\n  }\n\n  async function prepareNextComparison() {\n    if (sorted()) return false;\n\n    // If inner loop finished, advance pass\n    const limit = state.n - 1 - state.i;\n    if (state.j >= limit) {\n      state.i += 1;\n      state.j = 0;\n      passEl.textContent = String(state.i);\n      highlightSortedTail();\n      updateStatusText(`New pass: i = ${state.i}`);\n      highlightLine(1);\n      await sleep(Math.round(220 / state.speed));\n    }\n\n    if (sorted()) return false;\n\n    const left = state.j;\n    const right = state.j + 1;\n    markCompare(left, right, true);\n    highlightLine(3);\n    updateStatusText(`Comparing A[${left}] and A[${right}]`);\n    return true;\n  }\n\n  async function applyDecision(doSwap) {\n    const left = state.j;\n    const right = state.j + 1;\n\n    state.comparisons += 1;\n    comparisonsEl.textContent = String(state.comparisons);\n\n    if (doSwap) {\n      state.swaps += 1;\n      swapsEl.textContent = String(state.swaps);\n      highlightLine(4);\n      markSwap(left, right);\n      // Animate swap by updating indices and positions\n      swapIndices(left, right);\n      updateBarPositions();\n      await sleep(Math.round(state.animMs / state.speed));\n    }\n\n    // Cleanup pair highlights\n    markCompare(left, right, false);\n    document.querySelectorAll('.bar').forEach(b => b.classList.remove('swap'));\n\n    state.j += 1;\n    highlightSortedTail();\n    return true;\n  }\n\n  async function stepGuided() {\n    const ok = await prepareNextComparison();\n    if (!ok) {\n      finishRun();\n      return false;\n    }\n    const left = state.j;\n    const right = state.j + 1;\n    const a = valueAtIndex(left);\n    const b = valueAtIndex(right);\n    const doSwap = a > b;\n    await sleep(Math.round(260 / state.speed)); // short pause so learner can see the comparison\n    await applyDecision(doSwap);\n    return true;\n  }\n\n  function finishRun() {\n    state.running = false;\n    playPauseBtn.textContent = 'Play';\n    setControlsEnabled(true);\n    highlightLine(0);\n    updateStatusText('All passes complete. Array sorted.');\n  }\n\n  function valueAtIndex(idx) {\n    const item = state.items.find(i => i.index === idx);\n    return item ? item.value : undefined;\n  }\n\n  // Challenge mode handlers\n  async function stepChallenge() {\n    promptFeedback.textContent = '';\n    const ok = await prepareNextComparison();\n    if (!ok) { finishRun(); prompt.style.display = 'none'; return; }\n    state.waitingDecision = true;\n    prompt.style.display = 'block';\n\n    const left = state.j;\n    const right = state.j + 1;\n    const a = valueAtIndex(left);\n    const b = valueAtIndex(right);\n    promptQuestion.textContent = `Should we swap? Left = ${a}, Right = ${b}`;\n\n    // Disable Play while in challenge mode\n    playPauseBtn.disabled = true;\n  }\n\n  async function handleDecision(choiceSwap) {\n    if (!state.waitingDecision) return;\n    const left = state.j;\n    const right = state.j + 1;\n    const a = valueAtIndex(left);\n    const b = valueAtIndex(right);\n    const shouldSwap = a > b;\n    const correct = (choiceSwap === shouldSwap);\n\n    promptFeedback.textContent = correct\n      ? `Correct: ${a} ${shouldSwap ? '>' : '<='} ${b}${shouldSwap ? ' → swap.' : ' → keep.'}`\n      : `Not quite: ${a} ${shouldSwap ? '>' : '<='} ${b}${shouldSwap ? ' so we should swap.' : ' so we should keep.'}`;\n\n    await applyDecision(shouldSwap); // Perform the algorithmically correct action\n    state.waitingDecision = false;\n    prompt.style.display = 'none';\n\n    if (sorted()) {\n      finishRun();\n    }\n  }\n\n  async function runLoop() {\n    state.running = true;\n    playPauseBtn.textContent = 'Pause';\n    setControlsEnabled(false);\n    updateStatusText('Running...');\n    while (state.running && !sorted()) {\n      const progressed = await stepGuided();\n      if (!progressed) break;\n      // Gentle pacing between steps\n      await sleep(Math.round(140 / state.speed));\n    }\n    if (sorted()) finishRun();\n  }\n\n  function togglePlay() {\n    if (state.challenge) {\n      updateStatusText('Challenge mode on: use Step and your decisions.');\n      return;\n    }\n    if (!state.running) runLoop();\n    else {\n      state.running = false;\n      playPauseBtn.textContent = 'Play';\n      setControlsEnabled(true);\n      updateStatusText('Paused.');\n    }\n  }\n\n  function setSpeed(mult) {\n    state.speed = mult;\n    updateBarPositions();\n  }\n\n  // Event bindings\n  loadBtn.addEventListener('click', () => {\n    try {\n      const arr = parseDataset(datasetInput.value);\n      loadArray(arr);\n      updateStatusText('Dataset loaded. Ready to sort.');\n    } catch (e) {\n      updateStatusText((e && e.message) ? e.message : 'Invalid input.');\n    }\n  });\n\n  randomBtn.addEventListener('click', () => {\n    const arr = generateRandom(Math.floor(Math.random() * 6) + 8);\n    datasetInput.value = arr.join(', ');\n    loadArray(arr);\n    updateStatusText('Random dataset loaded.');\n  });\n\n  resetBtn.addEventListener('click', () => {\n    state.running = false;\n    shuffleToOriginal();\n    playPauseBtn.textContent = 'Play';\n    prompt.style.display = 'none';\n  });\n\n  playPauseBtn.addEventListener('click', togglePlay);\n  stepBtn.addEventListener('click', async () => {\n    if (state.challenge) {\n      await stepChallenge();\n    } else {\n      await stepGuided();\n      if (sorted()) finishRun();\n    }\n  });\n\n  speedInput.addEventListener('input', (e) => {\n    const mult = Number(e.target.value);\n    setSpeed(mult);\n  });\n\n  challengeToggle.addEventListener('change', (e) => {\n    state.challenge = e.target.checked;\n    if (state.challenge) {\n      updateStatusText('Challenge mode enabled. Decide swap/keep for each comparison.');\n      prompt.style.display = 'none';\n      playPauseBtn.disabled = true;\n      playPauseBtn.textContent = 'Play';\n      state.running = false;\n    } else {\n      updateStatusText('Challenge mode disabled. You can Play or Step.');\n      prompt.style.display = 'none';\n      playPauseBtn.disabled = false;\n    }\n  });\n\n  chooseSwap.addEventListener('click', () => handleDecision(true));\n  chooseKeep.addEventListener('click', () => handleDecision(false));\n\n  // Keyboard shortcuts\n  window.addEventListener('keydown', async (e) => {\n    const tag = (e.target && e.target.tagName) || '';\n    const editingInput = tag === 'INPUT' || tag === 'TEXTAREA';\n    if (editingInput) return;\n\n    if (e.code === 'Space') {\n      e.preventDefault();\n      if (!playPauseBtn.disabled) togglePlay();\n    } else if (e.code === 'ArrowRight') {\n      e.preventDefault();\n      if (!stepBtn.disabled) {\n        if (state.challenge) await stepChallenge();\n        else await stepGuided();\n      }\n    } else if (e.key.toLowerCase() === 'r') {\n      e.preventDefault();\n      if (!resetBtn.disabled) resetBtn.click();\n    }\n  });\n\n  // Resize listener to keep bars centered/responsive\n  window.addEventListener('resize', () => {\n    updateBarPositions();\n  });\n\n  // Initial demo dataset\n  const defaultArr = [7, 3, 2, 9, 1, 5, 4];\n  datasetInput.value = defaultArr.join(', ');\n  loadArray(defaultArr);\n})();\n</script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "\nYou are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "044bc1a0-a98a-11f0-8cb3-5fb06690c62f",
    "timestamp": "2025-10-15T05:44:29.115Z",
    "model": "gpt-5",
    "status": "success",
    "question": "\nYou are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation.",
    "answer": {
      "role": "assistant",
      "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Bubble Sort — Interactive Visual Exploration</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    :root{\n      --safe:24px;\n      --gap:16px;\n      --control-radius:10px;\n      --bar-gap:16px;\n      --bar-focus:3px;\n      --bg:#f7f9fc;\n      --text:#0f172a;\n      --muted:#475569;\n      --accent:#2563eb;\n      --accent-2:#ef4444;\n      --accent-3:#22c55e;\n      --accent-4:#f59e0b;\n      --border:#e2e8f0;\n      --bar:#64748b;\n      --bar-compare:#f59e0b;\n      --bar-swap:#ef4444;\n      --bar-sorted:#22c55e;\n      --bar-drag:#7c3aed;\n      --focus:#7c3aed;\n      --control-bg:#ffffff;\n      --shadow:0 8px 30px rgba(2, 6, 23, 0.08);\n      --speed-ms:600;\n      --easing:cubic-bezier(.25,.8,.25,1);\n    }\n    /* Safe area and global layout */\n    html,body{height:100%;}\n    body{\n      margin:0;\n      background:var(--bg);\n      color:var(--text);\n      font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif;\n      line-height:1.35;\n    }\n    .safe{\n      padding:var(--safe);\n      box-sizing:border-box;\n      max-width:1100px;\n      margin:0 auto;\n    }\n\n    /* Headings */\n    h1,h2{margin:0 0 8px 0; line-height:1.2;}\n    h1{font-size:1.6rem;}\n    h2{font-size:1.25rem;}\n    p{margin:0 0 12px 0; color:var(--muted);}\n\n    /* Sections container */\n    .section{\n      background:var(--control-bg);\n      border:1px solid var(--border);\n      border-radius:16px;\n      padding:20px;\n      box-shadow:var(--shadow);\n      margin-bottom:24px;\n    }\n\n    /* Controls */\n    .controls{\n      display:flex;\n      flex-wrap:wrap;\n      gap:var(--gap);\n      align-items:center;\n      margin-top:8px;\n    }\n    .control{\n      display:flex;\n      flex-direction:column;\n      gap:8px;\n      min-width:180px;\n      flex:1 1 220px;\n    }\n    .control label{\n      font-size:.9rem;\n      color:var(--muted);\n    }\n    input[type=\"text\"]{\n      height:44px;\n      padding:0 12px;\n      border:1px solid var(--border);\n      border-radius:var(--control-radius);\n      background:var(--control-bg);\n      color:var(--text);\n      font-size:1rem;\n      outline:none;\n    }\n    input[type=\"text\"]:focus, input[type=\"range\"]:focus{\n      box-shadow:0 0 0 3px color-mix(in oklab, var(--focus) 25%, transparent);\n      border-color:color-mix(in oklab, var(--focus) 35%, var(--border));\n    }\n    .btns{\n      display:flex;\n      flex-wrap:wrap;\n      gap:var(--gap);\n    }\n    button{\n      height:44px;\n      padding:0 14px;\n      border-radius:var(--control-radius);\n      border:1px solid var(--border);\n      background:var(--control-bg);\n      color:var(--text);\n      cursor:pointer;\n      font-weight:600;\n    }\n    button.primary{\n      background:var(--accent);\n      color:white;\n      border-color:color-mix(in oklab, var(--accent) 40%, var(--border));\n    }\n    button.danger{\n      background:var(--accent-2);\n      color:white;\n      border-color:color-mix(in oklab, var(--accent-2) 40%, var(--border));\n    }\n    button:disabled{\n      opacity:.6;\n      cursor:not-allowed;\n    }\n    button:focus-visible{\n      outline:none;\n      box-shadow:0 0 0 3px color-mix(in oklab, var(--focus) 30%, transparent);\n    }\n\n    .inline{\n      display:flex;\n      align-items:center;\n      gap:12px;\n    }\n    .range-wrap{\n      display:flex;\n      align-items:center;\n      gap:12px;\n    }\n    input[type=\"range\"]{width:180px;}\n    .toggle{\n      display:flex;\n      align-items:center;\n      gap:8px;\n      padding:8px 12px;\n      border:1px solid var(--border);\n      border-radius:var(--control-radius);\n      height:44px;\n      background:var(--control-bg);\n    }\n\n    /* Visualization area */\n    .viz{\n      display:grid;\n      grid-template-columns: 2fr 1fr;\n      gap:24px;\n    }\n    @media (max-width: 900px){\n      .viz{grid-template-columns: 1fr;}\n    }\n\n    .canvas-wrap{\n      background:var(--control-bg);\n      border:1px solid var(--border);\n      border-radius:16px;\n      padding:16px;\n      box-shadow:var(--shadow);\n      display:flex;\n      flex-direction:column;\n      gap:16px;\n    }\n    .status{\n      display:flex;\n      flex-wrap:wrap;\n      gap:var(--gap);\n      align-items:center;\n      font-size:.95rem;\n      color:var(--muted);\n    }\n    .badge{\n      display:inline-flex;\n      align-items:center;\n      gap:8px;\n      padding:8px 12px;\n      border:1px solid var(--border);\n      border-radius:999px;\n      background:#fafbff;\n    }\n    .legend{\n      display:flex;\n      flex-wrap:wrap;\n      gap:12px;\n      font-size:.9rem;\n    }\n    .k{\n      display:inline-flex; align-items:center; gap:6px;\n    }\n    .swatch{\n      width:14px; height:14px; border-radius:3px; border:1px solid var(--border);\n    }\n    .swatch.c{background:var(--bar-compare);}\n    .swatch.s{background:var(--bar-swap);}\n    .swatch.d{background:var(--bar-sorted);}\n\n    .canvas{\n      position:relative;\n      height:320px;\n      border:1px dashed var(--border);\n      border-radius:12px;\n      background:linear-gradient(to top, #ffffff, #f9fbff);\n      overflow:hidden;\n    }\n\n    .bar{\n      position:absolute;\n      bottom:0;\n      display:flex;\n      align-items:flex-end;\n      justify-content:center;\n      transform:translateX(0);\n      transition: transform calc(var(--speed-ms) * 1ms) var(--easing),\n                  background-color 250ms ease,\n                  box-shadow 250ms ease;\n      width:40px; /* placeholder; JS computes actual width */\n      background:var(--bar);\n      border-radius:8px 8px 0 0;\n      color:white;\n      font-weight:700;\n      box-shadow:0 2px 12px rgba(2,6,23,.06);\n      outline:none;\n    }\n    .bar .label{\n      margin-bottom:8px;\n      padding:4px 6px;\n      border-radius:6px;\n      background:rgba(255,255,255,0.18);\n      font-size:.9rem;\n    }\n    .bar.compare{ background:var(--bar-compare); }\n    .bar.swap{ background:var(--bar-swap); }\n    .bar.sorted{ background:var(--bar-sorted); }\n    .bar.dragging{\n      background:var(--bar-drag);\n      box-shadow:0 14px 30px rgba(124,58,237,.25);\n      z-index:3;\n    }\n    .bar:focus-visible{\n      box-shadow:0 0 0 var(--bar-focus) color-mix(in oklab, var(--focus) 40%, transparent);\n    }\n    .drop-indicator{\n      position:absolute;\n      bottom:0;\n      width:2px;\n      height:85%;\n      background:var(--focus);\n      box-shadow:0 0 0 3px color-mix(in oklab, var(--focus) 30%, transparent);\n      display:none;\n    }\n\n    /* Pseudocode panel */\n    .code{\n      background:var(--control-bg);\n      border:1px solid var(--border);\n      border-radius:16px;\n      padding:16px;\n      box-shadow:var(--shadow);\n      font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n      font-size:.95rem;\n      line-height:1.5;\n    }\n    .code .line{\n      padding:6px 8px;\n      border-radius:8px;\n      margin:2px 0;\n    }\n    .code .hl{\n      background:color-mix(in oklab, var(--accent) 18%, transparent);\n      color:var(--text);\n      border-left:3px solid var(--accent);\n    }\n    .code .comment{ color:#64748b; font-style:italic; }\n\n    /* Helper / accessibility */\n    .sr-only{\n      position:absolute !important;\n      height:1px; width:1px; overflow:hidden;\n      clip:rect(1px,1px,1px,1px);\n      white-space:nowrap;\n      border:0; padding:0; margin:-1px;\n    }\n    .help{\n      font-size:.9rem;\n      color:var(--muted);\n    }\n  </style>\n</head>\n<body>\n  <main class=\"safe\" role=\"main\" aria-labelledby=\"title\">\n    <header class=\"section\">\n      <h1 id=\"title\">Concept Title: Bubble Sort — Visual Comparison and Swapping</h1>\n      <p>Explore how bubble sort repeatedly compares adjacent elements, swapping them when out of order, so larger values “bubble” to the end. Interact by typing or dragging values, then watch the algorithm unfold step-by-step or in real time.</p>\n    </header>\n\n    <section class=\"section\" aria-labelledby=\"objective\">\n      <h2 id=\"objective\">Learning Objective</h2>\n      <ul>\n        <li>Understand the bubble sort mechanism: adjacent comparison, conditional swap, and pass-by-pass progression.</li>\n        <li>Observe why the largest element settles at the end of each pass and how a sorted suffix grows.</li>\n        <li>Relate visual actions to algorithm steps via pseudocode highlighting and live counters.</li>\n        <li>Practice configuring inputs and pacing to cement the concept with hands-on control.</li>\n      </ul>\n    </section>\n\n    <section class=\"section\" aria-labelledby=\"interaction\">\n      <h2 id=\"interaction\">Interaction Design</h2>\n      <ul>\n        <li>Typing: Enter a list of integers (comma or space separated). Press Apply to render bars whose heights match values.</li>\n        <li>Dragging: Grab a bar and drag it horizontally to a new position; a drop indicator appears. Release to reorder and update the array.</li>\n        <li>Clicking:\n          <ul>\n            <li>Play/Pause to run or pause the algorithm with animated comparisons and swaps.</li>\n            <li>Step to perform a single comparison (and swap if needed).</li>\n            <li>Randomize to generate new values for quick experimentation; Reset to restore the initial state.</li>\n            <li>Toggle “Early Exit” to enable the common optimization that stops once a pass makes no swaps.</li>\n            <li>Adjust Speed to control animation duration and pacing.</li>\n          </ul>\n        </li>\n        <li>Keyboard: Tab to focus bars or buttons. While a bar is focused, press Alt+← or Alt+→ to move it left or right by one position. Space toggles Play/Pause; Enter triggers the focused control; Right Arrow triggers Step.</li>\n        <li>Visual Feedback: Comparing bars highlight amber; a swap highlights red with smooth motion; sorted suffix turns green. Pseudocode lines highlight in sync with the current step. Counters update live (passes, comparisons, swaps).</li>\n      </ul>\n    </section>\n\n    <section class=\"section\" aria-labelledby=\"layout\">\n      <h2 id=\"layout\">Layout Description</h2>\n      <ul>\n        <li>Spatial organization:\n          <ul>\n            <li>Top: Title and overview.</li>\n            <li>Middle: Controls in a responsive wrap (Apply, Randomize, Play/Pause, Step, Reset, Early Exit, Speed) with at least 16 px spacing.</li>\n            <li>Main: Visualization canvas on the left with bars; synchronized pseudocode on the right. On small screens, pseudocode stacks below the canvas.</li>\n          </ul>\n        </li>\n        <li>Safe area: 24 px padding on all sides ensures content doesn’t touch viewport edges.</li>\n        <li>Accessibility:\n          <ul>\n            <li>High-contrast color cues; focus outlines; buttons sized to at least 44 px height.</li>\n            <li>ARIA labels and a live region announce algorithm progress and reorders.</li>\n            <li>Keyboard shortcuts and focusable bars for non-pointer interaction.</li>\n          </ul>\n        </li>\n        <li>Responsiveness: Flexible layout adapts to narrow screens, keeping controls accessible and readable. Bars resize and reposition on window resize while maintaining minimum 16 px spacing.</li>\n      </ul>\n    </section>\n\n    <section class=\"section\" aria-labelledby=\"module\">\n      <h2 id=\"module\">Interactive Bubble Sort Module</h2>\n\n      <div class=\"controls\" aria-label=\"Bubble sort controls\">\n        <div class=\"control\">\n          <label for=\"numbers\">Numbers (comma or space separated)</label>\n          <input id=\"numbers\" type=\"text\" inputmode=\"numeric\" placeholder=\"e.g., 12, 7, 5, 9, 3\" aria-describedby=\"numbers-help\">\n          <div id=\"numbers-help\" class=\"help\">Range 1–99. Invalid entries are ignored with feedback.</div>\n        </div>\n        <div class=\"btns\" role=\"group\" aria-label=\"Array actions\">\n          <button id=\"apply\" class=\"primary\" aria-label=\"Apply typed numbers\">Apply</button>\n          <button id=\"randomize\" aria-label=\"Randomize values\">Randomize</button>\n          <button id=\"reset\" class=\"danger\" aria-label=\"Reset to initial values\">Reset</button>\n        </div>\n        <div class=\"btns\" role=\"group\" aria-label=\"Run controls\">\n          <button id=\"play\" class=\"primary\" aria-label=\"Play or pause\">Play</button>\n          <button id=\"step\" aria-label=\"Step once\">Step</button>\n        </div>\n        <div class=\"toggle\" role=\"group\" aria-label=\"Options\">\n          <input id=\"earlyExit\" type=\"checkbox\" checked aria-label=\"Enable early exit optimization\">\n          <label for=\"earlyExit\">Early Exit</label>\n        </div>\n        <div class=\"range-wrap\" role=\"group\" aria-label=\"Speed control\">\n          <label for=\"speed\">Speed</label>\n          <input id=\"speed\" type=\"range\" min=\"0.25\" max=\"2\" step=\"0.05\" value=\"1\" aria-valuemin=\"0.25\" aria-valuemax=\"2\" aria-valuenow=\"1\">\n          <span id=\"speedLabel\" aria-live=\"polite\">1.0×</span>\n        </div>\n      </div>\n\n      <div class=\"viz\" aria-label=\"Visualization and pseudocode\">\n        <div class=\"canvas-wrap\" role=\"region\" aria-label=\"Bubble sort visualization\">\n          <div class=\"status\" aria-live=\"polite\">\n            <div class=\"badge\" id=\"passBadge\">Pass: 0</div>\n            <div class=\"badge\" id=\"indexBadge\">Comparing: —</div>\n            <div class=\"badge\" id=\"compBadge\">Comparisons: 0</div>\n            <div class=\"badge\" id=\"swapBadge\">Swaps: 0</div>\n            <div class=\"badge\" id=\"stateBadge\">State: Idle</div>\n          </div>\n          <div class=\"legend\" aria-hidden=\"true\">\n            <div class=\"k\"><span class=\"swatch c\"></span> Comparing</div>\n            <div class=\"k\"><span class=\"swatch s\"></span> Swapping</div>\n            <div class=\"k\"><span class=\"swatch d\"></span> Sorted suffix</div>\n          </div>\n          <div class=\"canvas\" id=\"canvas\" aria-label=\"Draggable bars representing values\">\n            <div id=\"dropIndicator\" class=\"drop-indicator\" aria-hidden=\"true\"></div>\n          </div>\n          <div class=\"help\">Tip: Drag bars to reorder. Keyboard: Alt+←/Alt+→ moves the focused bar; Space toggles Play/Pause; → steps.</div>\n        </div>\n\n        <aside class=\"code\" role=\"region\" aria-label=\"Pseudocode\">\n          <div class=\"comment\">// Bubble sort with early-exit optimization</div>\n          <pre id=\"codeBlock\" aria-label=\"Bubble sort pseudocode\">\n<span class=\"line\" data-line=\"1\">for i = 0 to n - 1:</span>\n<span class=\"line\" data-line=\"2\">    swapped = false</span>\n<span class=\"line\" data-line=\"3\">    for j = 0 to n - i - 2:</span>\n<span class=\"line\" data-line=\"4\">        if A[j] > A[j + 1]:</span>\n<span class=\"line\" data-line=\"5\">            swap(A[j], A[j + 1])</span>\n<span class=\"line\" data-line=\"6\">            swapped = true</span>\n<span class=\"line\" data-line=\"7\">    if (not swapped): break</span>\n          </pre>\n        </aside>\n      </div>\n    </section>\n\n    <div id=\"live\" class=\"sr-only\" aria-live=\"polite\"></div>\n  </main>\n\n  <script>\n    (function(){\n      // State and configuration\n      const state = {\n        array: [12, 7, 5, 9, 3, 16, 4, 10],\n        initial: null,\n        i: 0,            // current pass\n        j: 0,            // current index\n        comparisons: 0,\n        swaps: 0,\n        playing: false,\n        earlyExit: true,\n        swappedThisPass: false,\n        sortedStop: null, // index where sorted suffix starts\n        speed: 1.0,\n        inTransition: false\n      };\n\n      // DOM references\n      const canvas = document.getElementById('canvas');\n      const dropIndicator = document.getElementById('dropIndicator');\n      const numbersInput = document.getElementById('numbers');\n      const applyBtn = document.getElementById('apply');\n      const randomizeBtn = document.getElementById('randomize');\n      const resetBtn = document.getElementById('reset');\n      const playBtn = document.getElementById('play');\n      const stepBtn = document.getElementById('step');\n      const earlyExitCheckbox = document.getElementById('earlyExit');\n      const speedRange = document.getElementById('speed');\n      const speedLabel = document.getElementById('speedLabel');\n\n      const passBadge = document.getElementById('passBadge');\n      const indexBadge = document.getElementById('indexBadge');\n      const compBadge = document.getElementById('compBadge');\n      const swapBadge = document.getElementById('swapBadge');\n      const stateBadge = document.getElementById('stateBadge');\n      const live = document.getElementById('live');\n\n      const codeBlock = document.getElementById('codeBlock');\n\n      // Layout metrics\n      const metrics = {\n        width: 0,\n        height: 0,\n        barWidth: 0,\n        gap: parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bar-gap')) || 16,\n        maxValue: 99,\n      };\n\n      let bars = [];\n\n      function clamp(v, min, max){ return Math.max(min, Math.min(max, v)); }\n      function setSpeed(multiplier){\n        state.speed = multiplier;\n        speedLabel.textContent = multiplier.toFixed(2) + '×';\n        document.documentElement.style.setProperty('--speed-ms', String(Math.round(600 / multiplier)));\n      }\n      setSpeed(1);\n\n      function announce(msg){\n        live.textContent = msg;\n      }\n\n      function parseNumbers(text){\n        const parts = text.split(/[\\s,]+/).filter(Boolean);\n        const result = [];\n        for(const p of parts){\n          const n = parseInt(p, 10);\n          if(Number.isFinite(n)){\n            result.push(clamp(n, 1, metrics.maxValue));\n          }\n        }\n        return result;\n      }\n\n      function randomArray(len){\n        const arr = [];\n        for(let i=0;i<len;i++){\n          arr.push(Math.floor(5 + Math.random()*94)); // range 5–99\n        }\n        return arr;\n      }\n\n      function measure(){\n        const rect = canvas.getBoundingClientRect();\n        metrics.width = rect.width;\n        metrics.height = rect.height;\n        metrics.barWidth = Math.floor((metrics.width - (state.array.length - 1) * metrics.gap) / state.array.length);\n        // min width for touch targets\n        metrics.barWidth = Math.max(metrics.barWidth, 32);\n      }\n\n      function buildBars(){\n        canvas.innerHTML = '';\n        canvas.appendChild(dropIndicator);\n        bars = state.array.map((val, idx) => {\n          const el = document.createElement('button');\n          el.className = 'bar';\n          el.setAttribute('role','button');\n          el.setAttribute('aria-label', `Value ${val}, position ${idx+1} of ${state.array.length}`);\n          el.tabIndex = 0;\n          el.dataset.index = String(idx);\n          const label = document.createElement('div');\n          label.className = 'label';\n          label.textContent = String(val);\n          el.appendChild(label);\n          canvas.appendChild(el);\n          attachBarEvents(el);\n          return el;\n        });\n        measure();\n        layoutBars();\n        updateStatus();\n        updateSortedClasses();\n      }\n\n      function layoutBars(){\n        const maxVal = Math.max(...state.array, 1);\n        bars.forEach((bar, i) => {\n          const v = state.array[i];\n          const x = i * (metrics.barWidth + metrics.gap);\n          const h = Math.max(24, Math.round((v / maxVal) * (metrics.height - 24)));\n          bar.style.width = metrics.barWidth + 'px';\n          bar.style.height = h + 'px';\n          bar.style.transform = `translateX(${x}px)`;\n          const label = bar.querySelector('.label');\n          label.textContent = String(v);\n          bar.setAttribute('aria-label', `Value ${v}, position ${i+1} of ${state.array.length}`);\n        });\n        // position drop indicator off\n        dropIndicator.style.display = 'none';\n      }\n\n      function highlightBars(indices, cls){\n        indices.forEach(i => {\n          if(bars[i]) bars[i].classList.add(cls);\n        });\n      }\n      function clearHighlights(){\n        bars.forEach(b => {\n          b.classList.remove('compare','swap');\n        });\n      }\n\n      function updateStatus(){\n        passBadge.textContent = `Pass: ${state.i}`;\n        if(state.j < state.array.length - state.i - 1){\n          indexBadge.textContent = `Comparing: j=${state.j} & j+1=${state.j+1}`;\n        } else {\n          indexBadge.textContent = `Comparing: —`;\n        }\n        compBadge.textContent = `Comparisons: ${state.comparisons}`;\n        swapBadge.textContent = `Swaps: ${state.swaps}`;\n        stateBadge.textContent = `State: ${state.playing ? 'Playing' : 'Idle'}`;\n      }\n\n      function resetAlgo(resetToInitial = true){\n        state.i = 0;\n        state.j = 0;\n        state.comparisons = 0;\n        state.swaps = 0;\n        state.playing = false;\n        state.swappedThisPass = false;\n        state.sortedStop = null;\n        playBtn.textContent = 'Play';\n        stateBadge.textContent = 'State: Idle';\n        clearHighlights();\n        updateSortedClasses(true);\n        if(resetToInitial && state.initial){\n          state.array = state.initial.slice();\n        }\n        measure();\n        layoutBars();\n        updateStatus();\n        unhighlightCode();\n      }\n\n      function setArray(arr){\n        state.array = arr.slice();\n        state.initial = arr.slice();\n        resetAlgo(false);\n        buildBars();\n        announce(`Array set to ${arr.join(', ')}`);\n      }\n\n      function randomize(){\n        const len = clamp(state.array.length, 4, 16);\n        setArray(randomArray(len));\n      }\n\n      function updateSortedClasses(clear=false){\n        bars.forEach(b => b.classList.remove('sorted'));\n        if(clear) return;\n        // sorted suffix size equals state.i elements at the end\n        const sortedFrom = state.array.length - state.i;\n        for(let k=sortedFrom; k<state.array.length; k++){\n          if(bars[k]) bars[k].classList.add('sorted');\n        }\n      }\n\n      // Pseudocode highlighting\n      function unhighlightCode(){\n        codeBlock.querySelectorAll('.line').forEach(l => l.classList.remove('hl'));\n      }\n      function hl(line){\n        unhighlightCode();\n        const el = codeBlock.querySelector(`.line[data-line=\"${line}\"]`);\n        if(el) el.classList.add('hl');\n      }\n      function hlCompare(){ hl(4); }\n      function hlSwap(){ hl(5); }\n      function hlOuter(){ hl(1); }\n      function hlInner(){ hl(3); }\n      function hlSwappedSet(){ hl(2); }\n      function hlBreak(){ hl(7); }\n\n      // Algorithm stepping\n      function done(){\n        state.playing = false;\n        playBtn.textContent = 'Play';\n        stateBadge.textContent = 'State: Done';\n        unhighlightCode();\n        announce('Sorting complete.');\n      }\n\n      function lockUI(locked){\n        const disabled = locked;\n        numbersInput.disabled = disabled;\n        applyBtn.disabled = disabled;\n        randomizeBtn.disabled = disabled;\n        resetBtn.disabled = disabled;\n        earlyExitCheckbox.disabled = disabled;\n        bars.forEach(b => b.disabled = disabled);\n      }\n\n      function wait(ms){\n        return new Promise(res => setTimeout(res, ms));\n      }\n\n      async function stepOnce(){\n        if(state.inTransition) return;\n        // if complete\n        if(state.i >= state.array.length - 1){\n          done();\n          return;\n        }\n        hlOuter();\n        hlSwappedSet();\n\n        // if inner loop done, finalize pass\n        const innerLimit = state.array.length - state.i - 1;\n        if(state.j >= innerLimit){\n          // early exit check\n          updateSortedClasses();\n          if(state.earlyExit && !state.swappedThisPass){\n            hlBreak();\n            // mark all remaining unsorted as sorted (since already sorted)\n            state.i = state.array.length - 1;\n            updateSortedClasses();\n            await wait(300 / state.speed);\n            done();\n            return;\n          }\n          state.j = 0;\n          state.i++;\n          state.swappedThisPass = false;\n          updateSortedClasses();\n          updateStatus();\n          return;\n        }\n\n        // Compare j and j+1\n        hlInner();\n        hlCompare();\n        clearHighlights();\n        highlightBars([state.j, state.j+1], 'compare');\n        state.comparisons++;\n        updateStatus();\n        announce(`Comparing positions ${state.j+1} and ${state.j+2}`);\n\n        await wait(300 / state.speed);\n\n        if(state.array[state.j] > state.array[state.j+1]){\n          // swap needed\n          hlSwap();\n          clearHighlights();\n          highlightBars([state.j, state.j+1], 'swap');\n          state.inTransition = true;\n\n          // Perform swap in data\n          const a = state.array[state.j];\n          state.array[state.j] = state.array[state.j+1];\n          state.array[state.j+1] = a;\n\n          state.swaps++;\n          state.swappedThisPass = true;\n\n          // Animate positions by re-layout\n          layoutBars();\n\n          await wait(Math.max(300, 600 / state.speed));\n          state.inTransition = false;\n        } else {\n          // keep compare highlight briefly\n          await wait(200 / state.speed);\n        }\n\n        clearHighlights();\n        state.j++;\n        updateStatus();\n      }\n\n      async function playLoop(){\n        lockUI(true);\n        stateBadge.textContent = 'State: Playing';\n        while(state.playing){\n          await stepOnce();\n          // break if done\n          if(state.i >= state.array.length - 1 || !state.playing){\n            break;\n          }\n          // pacing gap\n          await wait(200 / state.speed);\n        }\n        lockUI(false);\n      }\n\n      // Drag & drop and keyboard reordering\n      function attachBarEvents(bar){\n        let startX = 0;\n        let dragging = false;\n        let startIndex = 0;\n\n        function pointerDown(e){\n          if(state.playing) return; // disable while playing\n          dragging = true;\n          bar.classList.add('dragging');\n          startX = (e.touches ? e.touches[0].clientX : e.clientX);\n          startIndex = parseInt(bar.dataset.index, 10);\n          dropIndicator.style.display = 'block';\n          bar.setPointerCapture && bar.setPointerCapture(e.pointerId || 0);\n          e.preventDefault();\n        }\n\n        function pointerMove(e){\n          if(!dragging) return;\n          const x = (e.touches ? e.touches[0].clientX : e.clientX);\n          const dx = x - startX;\n          const baseX = startIndex * (metrics.barWidth + metrics.gap);\n          const newX = baseX + dx;\n          bar.style.transform = `translateX(${newX}px)`;\n          // compute nearest index\n          const idx = clamp(Math.round(newX / (metrics.barWidth + metrics.gap)), 0, state.array.length - 1);\n          const indicatorX = idx * (metrics.barWidth + metrics.gap);\n          dropIndicator.style.left = (indicatorX - 1) + 'px';\n        }\n\n        function pointerUp(e){\n          if(!dragging) return;\n          dragging = false;\n          bar.classList.remove('dragging');\n          dropIndicator.style.display = 'none';\n          const currentX = parseFloat(bar.style.transform.replace('translateX(','').replace('px)','')) || 0;\n          let targetIndex = clamp(Math.round(currentX / (metrics.barWidth + metrics.gap)), 0, state.array.length - 1);\n\n          const from = startIndex;\n          const to = targetIndex;\n          if(from !== to){\n            // reorder array\n            const val = state.array.splice(from, 1)[0];\n            state.array.splice(to, 0, val);\n            announce(`Moved value ${val} from position ${from+1} to ${to+1}`);\n          }\n          // relayout bars with new order\n          buildBars();\n        }\n\n        // Pointer events\n        bar.addEventListener('mousedown', pointerDown);\n        bar.addEventListener('touchstart', pointerDown, {passive:false});\n        window.addEventListener('mousemove', pointerMove);\n        window.addEventListener('touchmove', pointerMove, {passive:false});\n        window.addEventListener('mouseup', pointerUp);\n        window.addEventListener('touchend', pointerUp);\n\n        // Keyboard: Alt+Left/Right to move\n        bar.addEventListener('keydown', (e) => {\n          if(state.playing) return;\n          const idx = parseInt(bar.dataset.index, 10);\n          if(e.altKey && (e.key === 'ArrowLeft' || e.key === 'ArrowRight')){\n            e.preventDefault();\n            const dir = e.key === 'ArrowLeft' ? -1 : 1;\n            const to = clamp(idx + dir, 0, state.array.length - 1);\n            if(to !== idx){\n              const val = state.array.splice(idx, 1)[0];\n              state.array.splice(to, 0, val);\n              announce(`Moved value ${val} from position ${idx+1} to ${to+1}`);\n              buildBars();\n              // focus the moved bar at new index\n              bars[to].focus();\n            }\n          }\n        });\n      }\n\n      // Controls event wiring\n      applyBtn.addEventListener('click', () => {\n        const vals = parseNumbers(numbersInput.value);\n        if(vals.length >= 2){\n          setArray(vals);\n        } else {\n          announce('Please enter at least two valid integers.');\n          numbersInput.focus();\n        }\n      });\n\n      numbersInput.addEventListener('input', () => {\n        const vals = parseNumbers(numbersInput.value);\n        if(vals.length){\n          numbersInput.setAttribute('aria-invalid','false');\n        } else {\n          numbersInput.setAttribute('aria-invalid','true');\n        }\n      });\n\n      randomizeBtn.addEventListener('click', () => {\n        randomize();\n      });\n\n      resetBtn.addEventListener('click', () => {\n        resetAlgo(true);\n      });\n\n      earlyExitCheckbox.addEventListener('change', () => {\n        state.earlyExit = earlyExitCheckbox.checked;\n        announce(`Early exit ${state.earlyExit ? 'enabled' : 'disabled'}.`);\n      });\n\n      playBtn.addEventListener('click', async () => {\n        state.playing = !state.playing;\n        playBtn.textContent = state.playing ? 'Pause' : 'Play';\n        updateStatus();\n        if(state.playing){\n          playLoop();\n        }\n      });\n\n      stepBtn.addEventListener('click', async () => {\n        await stepOnce();\n      });\n\n      speedRange.addEventListener('input', () => {\n        const mult = parseFloat(speedRange.value);\n        setSpeed(mult);\n      });\n\n      // Keyboard shortcuts\n      window.addEventListener('keydown', (e) => {\n        if(e.key === ' '){\n          e.preventDefault();\n          playBtn.click();\n        } else if(e.key === 'ArrowRight' && !state.playing){\n          e.preventDefault();\n          stepBtn.click();\n        }\n      });\n\n      window.addEventListener('resize', () => {\n        measure();\n        layoutBars();\n      });\n\n      // Initialize\n      (function init(){\n        numbersInput.value = state.array.join(', ');\n        setArray(state.array);\n      })();\n    })();\n  </script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "\nYou are an expert in interactive web design and front-end pedagogy. Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort.\n\n**Project Overview:**\nTopic: bubble sort  \n\n**Interactive Design Plan:**\n\nPlease plan the HTML interface as a **single interactive module** that teaches or demonstrates this concept.\n\nFor this module, include the following sections:\n\n*   **Concept Title:** A concise title describing the main idea.\n*   **Learning Objective:** What users should understand or experience after interacting with the module.\n*   **Interaction Design:** Describe in detail how the user interacts with the page (clicking, dragging, typing, etc.), what changes occur in response (animations, visual updates, state changes), and how these reinforce understanding of the concept.\n*   **Layout Description:** Explain the spatial organization — placement of text, controls, and visuals — including how you will maintain clarity, focus, and balance.  \n    - Safe area margins: **24 px** on all sides of the viewport.  \n    - Minimum spacing: **16 px** between any two interactive elements.  \n    - Ensure accessibility and responsiveness.\n\n**Requirements:**\n1. The design should explain **only one concept** clearly and interactively.  \n2. The page must include **at least one form of visual feedback or animation** responding to user input.  \n3. The implementation must be **self-contained** — using only vanilla HTML, CSS, and JavaScript (no external libraries or assets).  \n4. Maintain consistent code formatting and indentation."
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]