[
  {
    "id": "08362470-a135-11f0-b541-21f394e5f9f1",
    "timestamp": "2025-10-04T15:15:59.159Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            background-color: #f3f4f6;\n            padding: 20px;\n        }\n        #array-container {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: teal;\n            transition: height 0.3s;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n<div id=\"array-container\"></div>\n<button onclick=\"startBubbleSort()\">Start Bubble Sort</button>\n\n<script>\n    let array = [25, 10, 15, 30, 5, 20, 35, 40, 45];\n\n    function drawArray() {\n        const container = document.getElementById('array-container');\n        container.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${value * 5}px`; // Scale the bar height\n            container.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        const arrayLength = array.length;\n\n        for (let i = 0; i < arrayLength - 1; i++) {\n            for (let j = 0; j < arrayLength - i - 1; j++) {\n                if (array[j] > array[j + 1]) {\n                    // Swap the elements\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    drawArray();\n                    await new Promise(resolve => setTimeout(resolve, 300));\n                }\n            }\n        }\n    }\n\n    function startBubbleSort() {\n        bubbleSort();\n    }\n\n    // Initial draw\n    drawArray();\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "0c28bb60-a135-11f0-8191-991ab9d19f6c",
    "timestamp": "2025-10-04T15:16:05.783Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "quick sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quick Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f4f4f4;\n        }\n        #arrayContainer {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: #3498db;\n            display: inline-block;\n            transition: height 0.3s, background-color 0.3s;\n        }\n        .pivot {\n            background-color: #e74c3c;\n        }\n        .sorted {\n            background-color: #2ecc71;\n        }\n        button {\n            padding: 10px 20px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n\n<h2>Quick Sort Visualization</h2>\n<div id=\"arrayContainer\"></div>\n<button onclick=\"initArray()\">Generate Random Array</button>\n<button onclick=\"quickSort()\">Sort Array</button>\n\n<script>\n    let array = [];\n\n    function initArray() {\n        array = Array.from({length: 20}, () => Math.floor(Math.random() * 100) + 1);\n        drawArray();\n    }\n\n    function drawArray() {\n        const container = document.getElementById('arrayContainer');\n        container.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = value * 3 + 'px';\n            container.appendChild(bar);\n        });\n    }\n\n    async function quickSort(start = 0, end = array.length - 1) {\n        if (start < end) {\n            const pivotIndex = await partition(start, end);\n            await Promise.all([\n                quickSort(start, pivotIndex - 1),\n                quickSort(pivotIndex + 1, end)\n            ]);\n        } else {\n            // Mark sorted elements\n            const bars = document.querySelectorAll('.bar');\n            for (let i = 0; i < array.length; i++) {\n                bars[i].classList.add('sorted');\n            }\n        }\n    }\n\n    async function partition(start, end) {\n        const pivValue = array[end];\n        let pivotIndex = start;\n        const bars = document.querySelectorAll('.bar');\n\n        for (let i = start; i < end; i++) {\n            bars[i].classList.add('pivot');\n            if (array[i] < pivValue) {\n                [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\n                pivotIndex++;\n                drawArray();\n                await sleep(300);\n            }\n            bars[i].classList.remove('pivot');\n        }\n\n        [array[pivotIndex], array[end]] = [array[end], array[pivotIndex]];\n        drawArray();\n        await sleep(300);\n        return pivotIndex;\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Initialize with a random array on load\n    window.onload = initArray;\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "quick sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "0f9cac70-a135-11f0-96a7-3f521d5e53ad",
    "timestamp": "2025-10-04T15:16:11.576Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "linked list demo",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linked List Demo</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        #list {\n            list-style-type: none;\n            padding: 0;\n        }\n        #list li {\n            padding: 10px;\n            background: #fff;\n            border: 1px solid #ccc;\n            margin: 5px 0;\n            display: flex;\n            justify-content: space-between;\n        }\n        input, button {\n            margin: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Linked List Demo</h1>\n    <div>\n        <input type=\"text\" id=\"nodeValue\" placeholder=\"Enter node value\" />\n        <button id=\"addButton\">Add Node</button>\n        <button id=\"removeButton\">Remove Last Node</button>\n    </div>\n    <ul id=\"list\"></ul>\n\n    <script>\n        class Node {\n            constructor(value) {\n                this.value = value;\n                this.next = null;\n            }\n        }\n\n        class LinkedList {\n            constructor() {\n                this.head = null;\n            }\n\n            add(value) {\n                const newNode = new Node(value);\n                if (!this.head) {\n                    this.head = newNode;\n                } else {\n                    let current = this.head;\n                    while (current.next) {\n                        current = current.next;\n                    }\n                    current.next = newNode;\n                }\n                this.render();\n            }\n\n            removeLast() {\n                if (!this.head) return;\n                if (!this.head.next) {\n                    this.head = null;\n                } else {\n                    let current = this.head;\n                    while (current.next && current.next.next) {\n                        current = current.next;\n                    }\n                    current.next = null;\n                }\n                this.render();\n            }\n\n            render() {\n                const listElement = document.getElementById('list');\n                listElement.innerHTML = '';\n                let current = this.head;\n                while (current) {\n                    const li = document.createElement('li');\n                    li.textContent = current.value;\n                    listElement.appendChild(li);\n                    current = current.next;\n                }\n            }\n        }\n\n        const linkedList = new LinkedList();\n\n        document.getElementById('addButton').addEventListener('click', () => {\n            const nodeValue = document.getElementById('nodeValue').value;\n            if (nodeValue) {\n                linkedList.add(nodeValue);\n                document.getElementById('nodeValue').value = '';\n            } else {\n                alert('Please enter a value');\n            }\n        });\n\n        document.getElementById('removeButton').addEventListener('click', () => {\n            linkedList.removeLast();\n        });\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "linked list demo"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]