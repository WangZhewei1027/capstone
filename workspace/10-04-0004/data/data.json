[
  {
    "id": "b1bfe4a0-a189-11f0-a566-a9852b30f7f8",
    "timestamp": "2025-10-05T01:22:01.322Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }\n        .bar { display: inline-block; width: 20px; margin: 1px; background-color: teal; }\n        #arrayContainer { display: inline-block; }\n        button { margin-top: 20px; padding: 10px 20px; font-size: 16px; cursor: pointer; }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n<div id=\"arrayContainer\"></div>\n<button onclick=\"startBubbleSort()\">Start Bubble Sort</button>\n\n<script>\n    const array = [5, 3, 8, 4, 2];\n    const arrayContainer = document.getElementById(\"arrayContainer\");\n\n    function drawArray(arr) {\n        arrayContainer.innerHTML = \"\";\n        arr.forEach(value => {\n            const bar = document.createElement(\"div\");\n            bar.className = \"bar\";\n            bar.style.height = value * 20 + \"px\";\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function startBubbleSort() {\n        const arr = [...array]; // Copy original array to sort\n        drawArray(arr);\n\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = 0; j < arr.length - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // Swap\n                    const temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n\n                    drawArray(arr);\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Pause for visualization\n                }\n            }\n        }\n    }\n\n    // Initial draw\n    drawArray(array);\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "d2997830-a189-11f0-b1f9-41f8e898d46b",
    "timestamp": "2025-10-05T01:22:56.436Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "quick sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quick Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin: 20px;\n        }\n        #array-container {\n            display: flex;\n            justify-content: center;\n            margin: 20px;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 2px;\n            background-color: #4CAF50;\n        }\n    </style>\n</head>\n<body>\n    <h1>Quick Sort Visualization</h1>\n    <button id=\"generate-array\">Generate Random Array</button>\n    <button id=\"start-sort\" disabled>Start Quick Sort</button>\n    <div id=\"array-container\"></div>\n    <script>\n        let array = [];\n\n        function generateRandomArray(size = 10) {\n            array = Array.from({ length: size }, () => Math.floor(Math.random() * 100));\n            drawArray();\n        }\n\n        function drawArray() {\n            const container = document.getElementById('array-container');\n            container.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.style.height = `${value * 3}px`; // Scale for better visibility\n                bar.classList.add('bar');\n                container.appendChild(bar);\n            });\n        }\n\n        async function quickSort(arr, left = 0, right = arr.length - 1) {\n            if (left < right) {\n                const pivotIndex = await partition(arr, left, right);\n                await quickSort(arr, left, pivotIndex - 1);\n                await quickSort(arr, pivotIndex + 1, right);\n            }\n            drawArray();\n        }\n\n        async function partition(arr, left, right) {\n            const pivot = arr[right];\n            let i = left - 1;\n\n            for (let j = left; j < right; j++) {\n                if (arr[j] < pivot) {\n                    i++;\n                    [arr[i], arr[j]] = [arr[j], arr[i]];\n                    drawArray(); // Update visualization\n                    await sleep(100); // Control speed of visualization\n                }\n            }\n\n            [arr[i + 1], arr[right]] = [arr[right], arr[i + 1]];\n            drawArray(); // Update visualization\n            await sleep(100); // Control speed of visualization\n            return i + 1;\n        }\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        document.getElementById('generate-array').addEventListener('click', () => {\n            generateRandomArray();\n            document.getElementById('start-sort').disabled = false;\n        });\n\n        document.getElementById('start-sort').addEventListener('click', () => {\n            quickSort([...array]); // Spread to avoid modifying original array\n            document.getElementById('start-sort').disabled = true;\n        });\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "quick sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "f623acd0-a189-11f0-99d7-b9655456bd36",
    "timestamp": "2025-10-05T01:23:56.061Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "linked list demo",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linked List Demo</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .node {\n            border: 1px solid #333;\n            border-radius: 5px;\n            display: inline-block;\n            padding: 10px;\n            margin: 5px;\n            position: relative;\n        }\n        .arrow {\n            position: absolute;\n            width: 20px;\n            height: 2px;\n            background: #333;\n            transform: translate(-50%, -50%) rotate(0deg);\n            top: 30px;\n            left: 50%;\n        }\n        .list-container {\n            display: flex;\n            align-items: start;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Linked List Visualization</h1>\n<div>\n    <input type=\"text\" id=\"nodeValue\" placeholder=\"Enter node value\">\n    <button onclick=\"addNode()\">Add Node</button>\n    <button onclick=\"removeNode()\">Remove Last Node</button>\n</div>\n<div id=\"list\" class=\"list-container\"></div>\n\n<script>\n    function Node(value) {\n        this.value = value;\n        this.next = null;\n    }\n\n    function LinkedList() {\n        this.head = null;\n    }\n\n    LinkedList.prototype.add = function(value) {\n        const newNode = new Node(value);\n        if (!this.head) {\n            this.head = newNode;\n        } else {\n            let current = this.head;\n            while (current.next) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    };\n\n    LinkedList.prototype.remove = function() {\n        if (!this.head) return;\n        if (!this.head.next) {\n            this.head = null;\n            return;\n        }\n        let current = this.head;\n        while (current.next && current.next.next) {\n            current = current.next;\n        }\n        current.next = null;\n    };\n\n    const linkedList = new LinkedList();\n\n    function renderList() {\n        const listDiv = document.getElementById('list');\n        listDiv.innerHTML = '';\n        let current = linkedList.head;\n        while (current) {\n            const nodeDiv = document.createElement('div');\n            nodeDiv.classList.add('node');\n            nodeDiv.innerText = current.value;\n            listDiv.appendChild(nodeDiv);\n\n            if (current.next) {\n                const arrowDiv = document.createElement('div');\n                arrowDiv.classList.add('arrow');\n                listDiv.appendChild(arrowDiv);\n            }\n            current = current.next;\n        }\n    }\n\n    function addNode() {\n        const value = document.getElementById('nodeValue').value;\n        if (value) {\n           linkedList.add(value);\n           renderList();\n           document.getElementById('nodeValue').value = '';\n        } else {\n            alert(\"Please enter a node value\");\n        }\n    }\n\n    function removeNode() {\n        linkedList.remove();\n        renderList();\n    }\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "linked list demo"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]