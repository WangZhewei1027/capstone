[
  {
    "id": "42cc69d0-a100-11f0-9264-4313b84f379e",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T08:58:14.126Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            background-color: #f4f4f4;\n        }\n        #array-container {\n            display: flex;\n            justify-content: center;\n            margin-top: 20px;\n        }\n        .bar {\n            width: 20px;\n            margin: 0 2px;\n            background-color: #3498db;\n            display: inline-block;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    <button onclick=\"startSort()\">Start Bubble Sort</button>\n    <div id=\"array-container\"></div>\n\n    <script>\n        let array = [5, 3, 8, 1, 2, 7];\n        const container = document.getElementById('array-container');\n\n        function renderArray() {\n            container.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 30}px`;\n                container.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            const len = array.length;\n            for (let i = 0; i < len; i++) {\n                for (let j = 0; j < len - i - 1; j++) {\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        renderArray();\n                        await new Promise(resolve => setTimeout(resolve, 500));\n                    }\n                }\n            }\n        }\n\n        function startSort() {\n            bubbleSort();\n        }\n\n        // Initial Render\n        renderArray();\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "65765090-a100-11f0-97ee-c3f55dc09386",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T08:59:12.281Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            background-color: #f4f4f4;\n        }\n        #array {\n            display: flex;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: #4CAF50;\n            transition: height 0.2s;\n        }\n        #controls {\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Bubble Sort Visualization</h1>\n    <div id=\"array\"></div>\n    <div id=\"controls\">\n        <input type=\"text\" id=\"inputArray\" placeholder=\"Enter numbers separated by commas\" />\n        <button onclick=\"startBubbleSort()\">Sort</button>\n    </div>\n\n    <script>\n        function createArray(arr) {\n            const container = document.getElementById('array');\n            container.innerHTML = '';\n            arr.forEach(num => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = num * 5 + 'px';  // Scale for visualization\n                container.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort(arr) {\n            let n = arr.length;\n\n            for (let i = 0; i < n - 1; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    createArray(arr);  // Visualize the current state\n                    await new Promise(resolve => setTimeout(resolve, 100)); // Wait for a moment\n                    if (arr[j] > arr[j + 1]) {\n                        // Swap elements\n                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                    }\n                }\n            }\n            createArray(arr);  // Final state\n        }\n\n        function startBubbleSort() {\n            const input = document.getElementById('inputArray').value;\n            const arr = input.split(',').map(Number);\n            createArray(arr);\n            bubbleSort(arr);\n        }\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "a8d6a090-a102-11f0-99db-99b04d7894d0",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T09:15:24.313Z",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            font-family: Arial, sans-serif;\n        }\n        .bar {\n            width: 30px;\n            margin: 2px;\n            display: inline-block;\n            background-color: #4CAF50;\n        }\n        #array {\n            margin: 20px 0;\n        }\n        button {\n            padding: 10px 20px;\n            font-size: 16px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <h1>冒泡排序演示</h1>\n    <div id=\"array\"></div>\n    <button onclick=\"startSorting()\">开始排序</button>\n\n    <script>\n        let array = [5, 3, 8, 4, 2];\n        let bars = [];\n\n        function drawArray() {\n            const arrayDiv = document.getElementById('array');\n            arrayDiv.innerHTML = '';\n            bars = [];\n            for (let i = 0; i < array.length; i++) {\n                const bar = document.createElement('div');\n                bar.style.height = `${array[i] * 20}px`;\n                bar.className = 'bar';\n                bars.push(bar);\n                arrayDiv.appendChild(bar);\n            }\n        }\n\n        async function bubbleSort() {\n            const n = array.length;\n            for (let i = 0; i < n; i++) {\n                for (let j = 0; j < n - i - 1; j++) {\n                    // Highlight the bars being compared\n                    bars[j].style.backgroundColor = 'red';\n                    bars[j + 1].style.backgroundColor = 'red';\n\n                    // Compare and swap if necessary\n                    if (array[j] > array[j + 1]) {\n                        await new Promise(resolve => setTimeout(resolve, 500)); // Adding delay for visualization\n                        let temp = array[j];\n                        array[j] = array[j + 1];\n                        array[j + 1] = temp;\n                        drawArray();\n                    }\n\n                    // Reset color after comparison\n                    bars[j].style.backgroundColor = '#4CAF50';\n                    bars[j + 1].style.backgroundColor = '#4CAF50';\n                }\n            }\n        }\n\n        function startSorting() {\n            drawArray();\n            bubbleSort();\n        }\n\n        window.onload = drawArray;\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "852e3bf0-a10a-11f0-bba3-abff570095b0",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T10:11:40.463Z",
    "question": "创建一个时钟",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>时钟</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #282c34;\n            color: white;\n            font-family: Arial, sans-serif;\n            font-size: 3em;\n        }\n        #clock {\n            border: 2px solid #61dafb;\n            padding: 20px;\n            border-radius: 10px;\n            background-color: rgba(255, 255, 255, 0.1);\n        }\n    </style>\n</head>\n<body>\n\n    <div id=\"clock\">00:00:00</div>\n\n    <script>\n        function updateClock() {\n            const now = new Date();\n            const hours = String(now.getHours()).padStart(2, '0');\n            const minutes = String(now.getMinutes()).padStart(2, '0');\n            const seconds = String(now.getSeconds()).padStart(2, '0');\n            document.getElementById('clock').textContent = `${hours}:${minutes}:${seconds}`;\n        }\n\n        setInterval(updateClock, 1000);\n        updateClock(); // Initial call to set the clock immediately\n    </script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个时钟"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "d0c06520-a10a-11f0-9cdf-03b98df435c4",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T10:13:47.251Z",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "当然可以！以下是一个简单的冒泡排序的演示，首先我们来介绍一下什么是冒泡排序。\n\n### 冒泡排序简介\n冒泡排序是一种简单的排序算法，它通过重复地遍历待排序的数列，比较相邻的元素并交换它们的顺序，直到没有需要交换的元素为止，从而将数列排序。\n\n### 冒泡排序的步骤\n1. 从头到尾遍历数组。\n2. 比较相邻的两个元素，如果第一个比第二个大，则交换它们。\n3. 一次重复这个过程，直到没有需要交换的元素为止。\n4. 以上过程会使得每次遍历最大的元素“冒泡”到数组的末尾。\n\n### 冒泡排序的示例代码（Python语言）\n下面是一个简单的冒泡排序算法的实现：\n\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    # 外层循环控制遍历次数\n    for i in range(n):\n        # 内层循环进行相邻元素比较\n        for j in range(0, n-i-1):\n            # 如果当前元素大于下一个元素，则交换\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# 测试冒泡排序\nunsorted_list = [64, 34, 25, 12, 22, 11, 90]\nsorted_list = bubble_sort(unsorted_list)\nprint(\"排序后的列表:\", sorted_list)\n```\n\n### 输出结果\n运行上述代码后，输出将会是：\n```\n排序后的列表: [11, 12, 22, 25, 34, 64, 90]\n```\n\n### 冒泡排序的可视化演示\n如果你想要一个可视化的冒泡排序演示，可以利用一些在线工具或编程语言的图形库进行绘制。以下是一个简单的想法，你可以使用 `matplotlib` 在 Python 中进行可视化。\n\n```python\nimport matplotlib.pyplot as plt\nimport time\n\ndef bubble_sort_visual(arr):\n    n = len(arr)\n    plt.figure(figsize=(10, 6))\n    \n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            \n            plt.bar(range(len(arr)), arr)\n            plt.ylim(0, max(arr) + 10)\n            plt.pause(0.5)  # 暂停以创建动画效果\n    \n    plt.show()\n\n# 示例数组\nunsorted_list = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort_visual(unsorted_list)\n```\n\n在这个可视化版本中，你会看到排序过程中的数组变化。只需在支持图形显示的环境中运行以上代码。\n\n希望这些对你理解冒泡排序有所帮助！如果你有其他问题，欢迎继续提问。",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "da651d50-a10a-11f0-822a-f1c24f3f5fb1",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T10:14:03.429Z",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin: 20px;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 5px;\n            background-color: teal;\n            display: inline-block;\n            transition: height 0.5s;\n        }\n    </style>\n</head>\n<body>\n\n<h1>冒泡排序演示</h1>\n<button id=\"startBtn\">开始排序</button>\n<div id=\"array\"></div>\n\n<script>\n    let array = [5, 3, 8, 4, 2];\n    const arrayContainer = document.getElementById('array');\n\n    function drawArray() {\n        arrayContainer.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = value * 30 + 'px';\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort() {\n        let length = array.length;\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length - i - 1; j++) {\n                if (array[j] > array[j + 1]) {\n                    // 交换\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    drawArray();\n                    await new Promise(resolve => setTimeout(resolve, 500));  // 等待动画完成\n                }\n            }\n        }\n    }\n\n    document.getElementById('startBtn').onclick = function() {\n        drawArray();\n        bubbleSort();\n    };\n\n    drawArray();  // 初始绘制\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "e54e6370-a10a-11f0-bb88-93ddd255e65d",
    "model": "gpt-4o-mini",
    "timestamp": "2025-10-04T10:14:21.735Z",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            background-color: #f4f4f4;\n        }\n        #array-container {\n            display: flex;\n            margin-bottom: 20px;\n        }\n        .bar {\n            width: 40px;\n            margin: 0 2px;\n            background-color: #4caf50;\n            display: inline-block;\n            transition: height 0.3s;\n        }\n    </style>\n</head>\n<body>\n    <h1>冒泡排序演示</h1>\n    <div id=\"array-container\"></div>\n    <button id=\"start-button\">开始排序</button>\n\n    <script>\n        const array = [5, 3, 8, 4, 2];\n        const container = document.getElementById('array-container');\n\n        function renderArray(arr) {\n            container.innerHTML = '';\n            arr.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 20}px`;\n                container.appendChild(bar);\n            });\n        }\n\n        function bubbleSort(arr) {\n            const len = arr.length;\n            for (let i = 0; i < len - 1; i++) {\n                for (let j = 0; j < len - 1 - i; j++) {\n                    if (arr[j] > arr[j + 1]) {\n                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]; // 交换\n                        renderArray(arr);\n                        awaitDelay(300); // 等待\n                    }\n                }\n            }\n            return arr;\n        }\n\n        function awaitDelay(time) {\n            return new Promise(resolve => setTimeout(resolve, time));\n        }\n\n        document.getElementById('start-button').addEventListener('click', async () => {\n            await bubbleSort(array.slice());\n        });\n\n        renderArray(array);\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "ca394700-a112-11f0-9386-a31e355243c4",
    "model": "gemini-2.5-pro",
    "timestamp": "2025-10-04T11:10:52.273Z",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        :root {\n            --bar-color: #3498db;          /* Blue */\n            --comparing-color: #f1c40f;    /* Yellow */\n            --swapping-color: #e74c3c;     /* Red */\n            --sorted-color: #2ecc71;      /* Green */\n            --text-color: #ffffff;\n            --background-color: #f4f7f6;\n            --container-bg-color: #ffffff;\n            --border-color: #dcdcdc;\n            --header-color: #2c3e50;\n            --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            font-family: var(--font-family);\n            background-color: var(--background-color);\n            color: var(--header-color);\n            margin: 0;\n            padding: 20px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        h1 {\n            color: var(--header-color);\n            margin-bottom: 20px;\n        }\n\n        .container {\n            background-color: var(--container-bg-color);\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            padding: 20px;\n            margin-bottom: 20px;\n            width: 90%;\n            max-width: 900px;\n        }\n\n        #controls {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n            align-items: center;\n            justify-content: center;\n            margin-bottom: 20px;\n        }\n\n        #controls input[type=\"text\"] {\n            flex-grow: 1;\n            padding: 10px;\n            border: 1px solid var(--border-color);\n            border-radius: 4px;\n            font-size: 16px;\n        }\n\n        #controls button {\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            background-color: var(--bar-color);\n            color: white;\n            cursor: pointer;\n            font-size: 16px;\n            transition: background-color 0.3s ease;\n        }\n\n        #controls button:hover {\n            background-color: #2980b9;\n        }\n        \n        #controls button:disabled {\n            background-color: #bdc3c7;\n            cursor: not-allowed;\n        }\n\n        #visualization-container {\n            height: 350px;\n            border: 1px solid var(--border-color);\n            display: flex;\n            align-items: flex-end;\n            padding: 10px;\n            background-color: #ecf0f1;\n            overflow: hidden;\n            border-radius: 4px;\n        }\n\n        .bar {\n            flex-grow: 1;\n            margin: 0 1px;\n            background-color: var(--bar-color);\n            color: var(--text-color);\n            text-align: center;\n            font-weight: bold;\n            transition: height 0.3s ease, background-color 0.3s ease;\n            display: flex;\n            align-items: flex-end;\n            justify-content: center;\n            padding-bottom: 5px;\n            box-sizing: border-box;\n            border-radius: 4px 4px 0 0;\n            font-size: 12px;\n        }\n        \n        .bar.comparing {\n            background-color: var(--comparing-color);\n        }\n        \n        .bar.swapping {\n            background-color: var(--swapping-color);\n        }\n\n        .bar.sorted {\n            background-color: var(--sorted-color);\n        }\n        \n        #status-container {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 15px;\n        }\n\n        #status {\n            font-size: 1.2em;\n            font-weight: bold;\n            color: var(--header-color);\n        }\n        \n        #array-display {\n            font-family: 'Courier New', Courier, monospace;\n            font-size: 1.1em;\n            color: #7f8c8d;\n        }\n        \n        #pseudocode {\n            background-color: #2c3e50;\n            color: white;\n            padding: 15px;\n            border-radius: 5px;\n            font-family: 'Courier New', Courier, monospace;\n            white-space: pre;\n            line-height: 1.5;\n            margin-top: 20px;\n        }\n\n        .highlight-line {\n            background-color: rgba(241, 196, 15, 0.5); /* Semi-transparent yellow */\n            display: block;\n            border-radius: 3px;\n        }\n\n    </style>\n</head>\n<body>\n\n    <h1>Bubble Sort Visualization</h1>\n\n    <div class=\"container\">\n        <div id=\"controls\">\n            <input type=\"text\" id=\"arrayInput\" placeholder=\"Enter comma-separated numbers (e.g., 5,3,8,4,2)\">\n            <button id=\"generateBtn\">Random Array</button>\n            <button id=\"sortBtn\">Sort</button>\n        </div>\n        <div id=\"visualization-container\"></div>\n         <div id=\"status-container\">\n            <div id=\"status\">Enter an array or generate a random one to begin.</div>\n            <div id=\"array-display\"></div>\n        </div>\n    </div>\n    \n    <div class=\"container\">\n        <h2>Pseudocode</h2>\n        <div id=\"pseudocode\">\n            <span data-line=\"1\">procedure bubbleSort( A : list of sortable items )</span>\n            <span data-line=\"2\">  n = length(A)</span>\n            <span data-line=\"3\">  repeat</span>\n            <span data-line=\"4\">    swapped = false</span>\n            <span data-line=\"5\">    for i = 1 to n-1 inclusive do</span>\n            <span data-line=\"6\">      /* if this pair is out of order */</span>\n            <span data-line=\"7\">      if A[i-1] > A[i] then</span>\n            <span data-line=\"8\">        /* swap them and remember something changed */</span>\n            <span data-line=\"9\">        swap( A[i-1], A[i] )</span>\n            <span data-line=\"10\">       swapped = true</span>\n            <span data-line=\"11\">     end if</span>\n            <span data-line=\"12\">   end for</span>\n            <span data-line=\"13\">   n = n - 1</span>\n            <span data-line=\"14\"> until not swapped</span>\n            <span data-line=\"15\">end procedure</span>\n        </div>\n    </div>\n\n\n    <script>\n        const arrayInput = document.getElementById('arrayInput');\n        const generateBtn = document.getElementById('generateBtn');\n        const sortBtn = document.getElementById('sortBtn');\n        const visualizationContainer = document.getElementById('visualization-container');\n        const statusEl = document.getElementById('status');\n        const arrayDisplayEl = document.getElementById('array-display');\n        const pseudocodeLines = document.querySelectorAll('#pseudocode span');\n        \n        let array = [];\n        const ANIMATION_SPEED_MS = 300;\n\n        // --- Utility Functions ---\n\n        function sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        function disableControls() {\n            sortBtn.disabled = true;\n            generateBtn.disabled = true;\n            arrayInput.disabled = true;\n        }\n\n        function enableControls() {\n            sortBtn.disabled = false;\n            generateBtn.disabled = false;\n            arrayInput.disabled = false;\n        }\n\n        function highlightPseudocodeLine(lineNumber) {\n            pseudocodeLines.forEach(line => line.classList.remove('highlight-line'));\n            if (lineNumber > 0) {\n                const lineEl = document.querySelector(`#pseudocode span[data-line=\"${lineNumber}\"]`);\n                if(lineEl) lineEl.classList.add('highlight-line');\n            }\n        }\n\n        // --- Core Logic ---\n\n        function generateRandomArray() {\n            const newArray = [];\n            const size = Math.floor(Math.random() * 10) + 10; // Size between 10 and 19\n            for (let i = 0; i < size; i++) {\n                newArray.push(Math.floor(Math.random() * 91) + 10); // Numbers between 10 and 100\n            }\n            arrayInput.value = newArray.join(',');\n            parseInput();\n        }\n\n        function parseInput() {\n            const inputText = arrayInput.value.trim();\n            if (inputText === '') {\n                array = [];\n            } else {\n                array = inputText.split(',')\n                    .map(item => parseInt(item.trim(), 10))\n                    .filter(num => !isNaN(num) && num > 0);\n            }\n            renderArray();\n            statusEl.textContent = 'Ready to sort.';\n            enableControls();\n        }\n\n        function renderArray(comparingIndices = [], swappingIndices = [], sortedIndex = array.length) {\n            visualizationContainer.innerHTML = '';\n            const maxValue = Math.max(...array, 1); // Avoid division by zero for empty array\n\n            array.forEach((value, index) => {\n                const bar = document.createElement('div');\n                bar.classList.add('bar');\n                const barHeight = (value / maxValue) * 100;\n                bar.style.height = `${barHeight}%`;\n                bar.textContent = value;\n                \n                if (index >= sortedIndex) {\n                    bar.classList.add('sorted');\n                } else if (swappingIndices.includes(index)) {\n                    bar.classList.add('swapping');\n                } else if (comparingIndices.includes(index)) {\n                    bar.classList.add('comparing');\n                }\n\n                visualizationContainer.appendChild(bar);\n            });\n            \n            arrayDisplayEl.textContent = `[${array.join(', ')}]`;\n        }\n\n        async function bubbleSort() {\n            disableControls();\n            statusEl.textContent = 'Sorting...';\n            let n = array.length;\n            let swapped;\n            \n            highlightPseudocodeLine(1);\n            await sleep(ANIMATION_SPEED_MS * 2);\n\n            highlightPseudocodeLine(2);\n            await sleep(ANIMATION_SPEED_MS);\n\n            do {\n                swapped = false;\n                highlightPseudocodeLine(3);\n                await sleep(ANIMATION_SPEED_MS);\n\n                highlightPseudocodeLine(4);\n                await sleep(ANIMATION_SPEED_MS);\n\n                highlightPseudocodeLine(5);\n                await sleep(ANIMATION_SPEED_MS);\n\n                for (let i = 0; i < n - 1; i++) {\n                    // Highlight elements being compared\n                    renderArray([i, i + 1], [], n);\n                    statusEl.textContent = `Comparing ${array[i]} and ${array[i+1]}`;\n                    highlightPseudocodeLine(7);\n                    await sleep(ANIMATION_SPEED_MS);\n\n                    if (array[i] > array[i + 1]) {\n                        // Highlight elements being swapped\n                        swapped = true;\n                        highlightPseudocodeLine(9);\n                        statusEl.textContent = `Swapping ${array[i]} and ${array[i+1]}`;\n                        renderArray([], [i, i + 1], n);\n                        await sleep(ANIMATION_SPEED_MS);\n                        \n                        // Perform the swap\n                        [array[i], array[i + 1]] = [array[i + 1], array[i]];\n                        \n                        // Re-render to show the result of the swap\n                        renderArray([i, i + 1], [], n);\n                        highlightPseudocodeLine(10);\n                        await sleep(ANIMATION_SPEED_MS);\n                    }\n                }\n                n--; // The last element of the unsorted part is now sorted\n                renderArray([], [], n); // Mark the newly sorted element\n                highlightPseudocodeLine(13);\n                await sleep(ANIMATION_SPEED_MS * 2);\n\n            } while (swapped);\n            \n            highlightPseudocodeLine(14);\n            await sleep(ANIMATION_SPEED_MS);\n\n            statusEl.textContent = 'Array is sorted!';\n            renderArray([], [], 0); // Mark all as sorted\n            highlightPseudocodeLine(15);\n            await sleep(ANIMATION_SPEED_MS * 2);\n            highlightPseudocodeLine(0); // Clear highlight\n            enableControls();\n        }\n\n        // --- Event Listeners ---\n        window.addEventListener('load', generateRandomArray);\n        generateBtn.addEventListener('click', generateRandomArray);\n        sortBtn.addEventListener('click', () => {\n            parseInput(); // Ensure the array is up-to-date\n            if(array.length > 1) {\n                bubbleSort();\n            } else {\n                statusEl.textContent = \"Array is too small to sort.\";\n            }\n        });\n        arrayInput.addEventListener('change', parseInput);\n\n    </script>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "4ea2fb80-a113-11f0-9464-655177493a77",
    "model": "gpt-5",
    "timestamp": "2025-10-04T11:14:34.425Z",
    "question": "bubble sort",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Bubble Sort Visualization</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <style>\n    :root {\n      --bg: #0f1420;\n      --panel: #161b29;\n      --text: #e8ecf1;\n      --muted: #9aa7b7;\n      --accent: #4ac1ff;\n      --accent-2: #7cff83;\n      --warning: #ffc857;\n      --danger: #ff6b6b;\n      --bar: #5a76ff;\n      --bar-hover: #7d93ff;\n    }\n\n    * { box-sizing: border-box; }\n    html, body {\n      height: 100%;\n      margin: 0;\n      background: radial-gradient(1200px 600px at 20% 0%, #141a28 0%, #0f1420 40%, #0b101a 100%);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n    }\n\n    header {\n      padding: 16px 20px 4px;\n      display: flex;\n      align-items: baseline;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n    header h1 {\n      font-size: 1.25rem;\n      margin: 0;\n      letter-spacing: 0.3px;\n    }\n    header .subtitle {\n      color: var(--muted);\n      font-size: 0.95rem;\n    }\n\n    .toolbar {\n      background: rgba(255,255,255,0.02);\n      border: 1px solid rgba(255,255,255,0.07);\n      border-radius: 12px;\n      margin: 12px 20px;\n      padding: 12px;\n      display: grid;\n      grid-template-columns: 1fr auto;\n      gap: 10px;\n    }\n    .controls {\n      display: grid;\n      grid-template-columns: repeat(3, minmax(220px, 1fr));\n      gap: 10px;\n    }\n    .control-group {\n      background: var(--panel);\n      border: 1px solid rgba(255,255,255,0.07);\n      border-radius: 10px;\n      padding: 10px;\n    }\n    .control-group h3 {\n      margin: 0 0 8px 0;\n      font-size: 0.9rem;\n      color: var(--muted);\n      font-weight: 600;\n      letter-spacing: 0.2px;\n    }\n    .row {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n      flex-wrap: wrap;\n    }\n    label {\n      font-size: 0.9rem;\n      color: var(--text);\n    }\n    input[type=\"range\"] {\n      width: 160px;\n    }\n    input[type=\"number\"] {\n      width: 80px;\n      background: #0e1421;\n      border: 1px solid rgba(255,255,255,0.12);\n      color: var(--text);\n      border-radius: 8px;\n      padding: 6px 8px;\n    }\n    select {\n      background: #0e1421;\n      border: 1px solid rgba(255,255,255,0.12);\n      color: var(--text);\n      border-radius: 8px;\n      padding: 8px;\n      min-width: 160px;\n    }\n    .buttons {\n      display: flex;\n      gap: 8px;\n      align-items: center;\n      justify-content: flex-end;\n    }\n    button {\n      appearance: none;\n      background: var(--accent);\n      color: #06111a;\n      border: none;\n      border-radius: 10px;\n      font-weight: 700;\n      padding: 10px 14px;\n      cursor: pointer;\n      transition: transform 120ms ease, filter 120ms ease;\n    }\n    button.secondary {\n      background: #26314b;\n      color: var(--text);\n      border: 1px solid rgba(255,255,255,0.1);\n      font-weight: 600;\n    }\n    button.warning { background: var(--warning); }\n    button.danger { background: var(--danger); color: #1b0a0a; }\n    button:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    button:hover { filter: brightness(1.05); transform: translateY(-1px); }\n\n    .viz-wrap {\n      margin: 12px 20px;\n      background: var(--panel);\n      border: 1px solid rgba(255,255,255,0.07);\n      border-radius: 12px;\n      padding: 12px;\n    }\n\n    .stats {\n      display: flex;\n      gap: 18px;\n      flex-wrap: wrap;\n      padding: 8px 4px 14px;\n      border-bottom: 1px dashed rgba(255,255,255,0.1);\n      font-size: 0.95rem;\n    }\n    .stat {\n      display: flex;\n      gap: 6px;\n      align-items: baseline;\n    }\n    .stat .label { color: var(--muted); }\n    .stat .value { font-weight: 700; color: var(--accent-2); }\n\n    .bars {\n      position: relative;\n      height: 320px;\n      display: flex;\n      align-items: flex-end;\n      gap: 2px;\n      padding: 14px 6px 12px;\n      border-radius: 10px;\n      background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));\n      overflow: hidden;\n    }\n    .bar {\n      position: relative;\n      flex: 1 1 auto;\n      min-width: 4px;\n      background: linear-gradient(180deg, var(--bar), #4b61e6);\n      border-radius: 5px 5px 0 0;\n      transition: height 180ms ease, filter 120ms ease, transform 120ms ease, background 120ms ease;\n    }\n    .bar:hover {\n      filter: brightness(1.12);\n      transform: translateY(-2px);\n    }\n    .bar::after {\n      content: attr(data-value);\n      position: absolute;\n      bottom: -22px;\n      left: 50%;\n      transform: translateX(-50%);\n      font-size: 11px;\n      color: var(--muted);\n      opacity: 0.75;\n      pointer-events: none;\n    }\n    .bar.compare {\n      background: linear-gradient(180deg, #f6c76e, #e8b249);\n      box-shadow: 0 0 0 2px rgba(255, 200, 87, 0.4);\n    }\n    .bar.swap {\n      background: linear-gradient(180deg, #ff6b6b, #f04646);\n      box-shadow: 0 0 0 2px rgba(255, 107, 107, 0.4);\n    }\n    .bar.sorted {\n      background: linear-gradient(180deg, #59d987, #3ac16c);\n      box-shadow: 0 0 0 1px rgba(92, 217, 135, 0.35);\n      opacity: 0.95;\n    }\n    .bar.equal {\n      outline: 1px dashed rgba(255,255,255,0.25);\n    }\n\n    .legend {\n      display: flex;\n      gap: 16px;\n      flex-wrap: wrap;\n      padding: 8px 4px 0;\n      font-size: 0.9rem;\n      color: var(--muted);\n    }\n    .legend .chip {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 6px 8px;\n      background: rgba(255,255,255,0.04);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: 8px;\n    }\n    .legend .color {\n      width: 14px;\n      height: 14px;\n      border-radius: 4px;\n      box-shadow: inset 0 0 0 1px rgba(255,255,255,0.2);\n    }\n    .color.compare { background: #f6c76e; }\n    .color.swap { background: #ff6b6b; }\n    .color.sorted { background: #3ac16c; }\n\n    details {\n      margin: 14px 20px 24px;\n      background: rgba(255,255,255,0.03);\n      border: 1px solid rgba(255,255,255,0.08);\n      border-radius: 12px;\n      padding: 12px 14px;\n    }\n    summary {\n      cursor: pointer;\n      font-weight: 700;\n      color: var(--text);\n    }\n    .explain {\n      color: var(--muted);\n      line-height: 1.6;\n      margin-top: 8px;\n      font-size: 0.95rem;\n    }\n\n    .note {\n      font-size: 0.9rem;\n      color: var(--muted);\n      padding-left: 4px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Bubble Sort</h1>\n    <div class=\"subtitle\">Interactive visualization with step-by-step actions</div>\n  </header>\n\n  <section class=\"toolbar\">\n    <div class=\"controls\">\n      <div class=\"control-group\">\n        <h3>Array</h3>\n        <div class=\"row\">\n          <label for=\"size\">Size</label>\n          <input id=\"size\" type=\"range\" min=\"5\" max=\"120\" value=\"40\" />\n          <input id=\"sizeNumber\" type=\"number\" min=\"5\" max=\"120\" value=\"40\" />\n        </div>\n        <div class=\"row\" style=\"margin-top: 8px;\">\n          <label for=\"dataset\">Distribution</label>\n          <select id=\"dataset\">\n            <option value=\"random\" selected>Random</option>\n            <option value=\"nearly\">Nearly sorted</option>\n            <option value=\"reversed\">Reversed</option>\n            <option value=\"few-unique\">Few unique values (duplicates)</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"control-group\">\n        <h3>Sorting</h3>\n        <div class=\"row\">\n          <label for=\"order\">Order</label>\n          <select id=\"order\">\n            <option value=\"asc\" selected>Ascending</option>\n            <option value=\"desc\">Descending</option>\n          </select>\n        </div>\n        <div class=\"row\" style=\"margin-top: 8px;\">\n          <label for=\"speed\">Speed</label>\n          <input id=\"speed\" type=\"range\" min=\"0\" max=\"100\" value=\"60\" />\n          <span class=\"note\" id=\"speedNote\">Medium</span>\n        </div>\n      </div>\n\n      <div class=\"control-group\">\n        <h3>Controls</h3>\n        <div class=\"row\">\n          <button id=\"generate\" class=\"secondary\">Generate Array</button>\n          <button id=\"start\">Start</button>\n          <button id=\"pause\" class=\"warning\" disabled>Pause</button>\n          <button id=\"step\" class=\"secondary\">Step</button>\n          <button id=\"reset\" class=\"danger\">Reset</button>\n        </div>\n        <div class=\"row\" style=\"margin-top: 8px;\">\n          <span class=\"note\">Tip: Use Step to advance one action (compare/swap/mark) at a time.</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"legend\">\n      <span class=\"chip\"><span class=\"color compare\"></span>Comparing</span>\n      <span class=\"chip\"><span class=\"color swap\"></span>Swap</span>\n      <span class=\"chip\"><span class=\"color sorted\"></span>Sorted</span>\n    </div>\n  </section>\n\n  <section class=\"viz-wrap\">\n    <div class=\"stats\">\n      <div class=\"stat\"><span class=\"label\">Status:</span><span class=\"value\" id=\"status\">Ready</span></div>\n      <div class=\"stat\"><span class=\"label\">Pass:</span><span class=\"value\" id=\"pass\">0</span></div>\n      <div class=\"stat\"><span class=\"label\">Comparisons:</span><span class=\"value\" id=\"comparisons\">0</span></div>\n      <div class=\"stat\"><span class=\"label\">Swaps:</span><span class=\"value\" id=\"swaps\">0</span></div>\n      <div class=\"stat\"><span class=\"label\">Array Size:</span><span class=\"value\" id=\"sizeStat\">40</span></div>\n      <div class=\"stat\"><span class=\"label\">Complexity:</span><span class=\"value\">O(n^2)</span></div>\n      <div class=\"stat\"><span class=\"label\">Stability:</span><span class=\"value\">Stable</span></div>\n    </div>\n    <div class=\"bars\" id=\"bars\" aria-label=\"Bubble sort array visualization\"></div>\n  </section>\n\n  <details>\n    <summary>What is Bubble Sort?</summary>\n    <div class=\"explain\">\n      Bubble Sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. Each pass pushes the largest (or smallest) unsorted element towards its final position, like bubbles rising to the top.\n      - Time complexity: Best O(n) (already sorted, with early-exit), Average/Worst O(n^2).\n      - Space complexity: O(1) in-place.\n      - Stability: Yes — equal elements keep their relative order.\n      This demo shows each compare and swap, highlights the sorted boundary after each pass, and allows you to step through the algorithm interactively.\n    </div>\n  </details>\n\n  <script>\n    // Bubble Sort Visualization\n    // Core state\n    let arr = [];\n    let maxValue = 100;\n    let playing = false;\n    let gen = null;\n    let actionTimer = null;\n    let comparisons = 0;\n    let swaps = 0;\n    let passes = 0;\n    let ascending = true;\n\n    // Elements\n    const barsEl = document.getElementById('bars');\n    const sizeRange = document.getElementById('size');\n    const sizeNumber = document.getElementById('sizeNumber');\n    const datasetSelect = document.getElementById('dataset');\n    const orderSelect = document.getElementById('order');\n    const speedRange = document.getElementById('speed');\n    const speedNote = document.getElementById('speedNote');\n    const btnGenerate = document.getElementById('generate');\n    const btnStart = document.getElementById('start');\n    const btnPause = document.getElementById('pause');\n    const btnStep = document.getElementById('step');\n    const btnReset = document.getElementById('reset');\n\n    const statusEl = document.getElementById('status');\n    const passEl = document.getElementById('pass');\n    const compEl = document.getElementById('comparisons');\n    const swapsEl = document.getElementById('swaps');\n    const sizeStatEl = document.getElementById('sizeStat');\n\n    // Utility: speed mapping\n    function getDelayFromSpeed() {\n      const v = Number(speedRange.value); // 0..100\n      // Map: 0 (instant) to 100 (slow). Use non-linear to give more control in mid range\n      if (v === 0) return 0;\n      const ms = 10 + Math.pow(v, 1.7) * 0.08; // approx 10.. ~800ms\n      return Math.round(ms);\n    }\n    function updateSpeedNote() {\n      const v = Number(speedRange.value);\n      let note = 'Instant';\n      if (v <= 15) note = 'Very fast';\n      else if (v <= 35) note = 'Fast';\n      else if (v <= 60) note = 'Medium';\n      else if (v <= 80) note = 'Slow';\n      else note = 'Very slow';\n      speedNote.textContent = note;\n    }\n\n    // Data generation\n    function randomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    function generateArray(size, type = 'random') {\n      const a = new Array(size);\n      maxValue = Math.max(20, Math.round(size * 2.2)); // scale values with size to keep bar distribution nice\n      if (type === 'random') {\n        for (let i = 0; i < size; i++) a[i] = randomInt(5, maxValue);\n      } else if (type === 'reversed') {\n        for (let i = 0; i < size; i++) a[i] = Math.round(((size - i) / size) * maxValue);\n      } else if (type === 'nearly') {\n        // Start sorted ascending then perform a few random swaps\n        for (let i = 0; i < size; i++) a[i] = Math.round(((i + 1) / size) * maxValue);\n        const swaps = Math.max(1, Math.round(size * 0.08));\n        for (let s = 0; s < swaps; s++) {\n          const i = randomInt(0, size - 1);\n          const j = randomInt(0, size - 1);\n          [a[i], a[j]] = [a[j], a[i]];\n        }\n      } else if (type === 'few-unique') {\n        // Only a handful of unique values to show stability with duplicates\n        const uniq = [10, 25, 40, 55, 70, 85, maxValue];\n        for (let i = 0; i < size; i++) a[i] = uniq[randomInt(0, uniq.length - 1)];\n      } else {\n        for (let i = 0; i < size; i++) a[i] = randomInt(5, maxValue);\n      }\n      return a;\n    }\n\n    // Rendering\n    function renderBars(array) {\n      barsEl.innerHTML = '';\n      const n = array.length;\n      const max = Math.max(...array, maxValue);\n      for (let i = 0; i < n; i++) {\n        const bar = document.createElement('div');\n        bar.className = 'bar';\n        bar.style.height = `${Math.round((array[i] / max) * 100)}%`;\n        bar.dataset.value = array[i];\n        bar.title = `Index ${i} • Value ${array[i]}`;\n        barsEl.appendChild(bar);\n      }\n    }\n    function updateBarHeight(index, value) {\n      const bar = barsEl.children[index];\n      if (!bar) return;\n      const max = Math.max(...arr, maxValue);\n      bar.style.height = `${Math.round((value / max) * 100)}%`;\n      bar.dataset.value = value;\n      bar.title = `Index ${index} • Value ${value}`;\n    }\n    function clearHighlights() {\n      for (const el of barsEl.children) {\n        el.classList.remove('compare', 'swap', 'equal');\n      }\n    }\n    function markSorted(index) {\n      const bar = barsEl.children[index];\n      if (bar) bar.classList.add('sorted');\n    }\n    function clearSorted() {\n      for (const el of barsEl.children) el.classList.remove('sorted');\n    }\n\n    // Generator for bubble sort steps\n    function* bubbleSortGenerator(a, asc = true) {\n      const n = a.length;\n      if (n <= 1) {\n        yield { type: 'done' };\n        return;\n      }\n      for (let i = 0; i < n - 1; i++) {\n        let swapped = false;\n        for (let j = 0; j < n - 1 - i; j++) {\n          const left = a[j], right = a[j + 1];\n          yield { type: 'compare', i, j, indices: [j, j + 1], values: [left, right] };\n          const inOrder = asc ? left <= right : left >= right;\n          if (!inOrder) {\n            // swap in data\n            [a[j], a[j + 1]] = [a[j + 1], a[j]];\n            swapped = true;\n            yield { type: 'swap', i, j, indices: [j, j + 1], values: [a[j], a[j + 1]] };\n          }\n        }\n        // pass complete: the boundary at n-1-i is now sorted\n        yield { type: 'passComplete', pass: i + 1, boundaryIndex: n - 1 - i };\n        yield { type: 'markSorted', index: n - 1 - i };\n        if (!swapped) {\n          // Already sorted. Mark remaining as sorted and finish.\n          for (let k = 0; k < n - 1 - i; k++) {\n            yield { type: 'markSorted', index: k };\n          }\n          break;\n        }\n      }\n      // Ensure all sorted (in case of final element not marked)\n      for (let k = 0; k < a.length; k++) {\n        yield { type: 'markSorted', index: k };\n      }\n      yield { type: 'done' };\n    }\n\n    // Apply an action to the UI/state\n    function applyAction(action, instant = false) {\n      const delay = instant ? 0 : getDelayFromSpeed();\n      clearHighlights();\n\n      if (action.type === 'compare') {\n        comparisons++;\n        compEl.textContent = String(comparisons);\n        const [i1, i2] = action.indices;\n        const b1 = barsEl.children[i1];\n        const b2 = barsEl.children[i2];\n        if (b1 && b2) {\n          b1.classList.add('compare');\n          b2.classList.add('compare');\n          if (action.values && action.values[0] === action.values[1]) {\n            b1.classList.add('equal');\n            b2.classList.add('equal');\n          }\n        }\n        statusEl.textContent = `Comparing indices ${i1} and ${i2}`;\n      }\n\n      if (action.type === 'swap') {\n        swaps++;\n        swapsEl.textContent = String(swaps);\n        const [i1, i2] = action.indices;\n        const [v1, v2] = action.values;\n        const b1 = barsEl.children[i1];\n        const b2 = barsEl.children[i2];\n        if (b1 && b2) {\n          b1.classList.add('swap');\n          b2.classList.add('swap');\n        }\n        // Update heights to reflect new values\n        updateBarHeight(i1, v1);\n        updateBarHeight(i2, v2);\n        statusEl.textContent = `Swapped indices ${i1} and ${i2}`;\n      }\n\n      if (action.type === 'passComplete') {\n        passes = action.pass;\n        passEl.textContent = String(passes);\n        statusEl.textContent = `Pass ${passes} complete (sorted boundary at index ${action.boundaryIndex})`;\n      }\n\n      if (action.type === 'markSorted') {\n        markSorted(action.index);\n      }\n\n      if (action.type === 'done') {\n        playing = false;\n        btnPause.disabled = true;\n        btnStart.disabled = false;\n        btnStep.disabled = false;\n        statusEl.textContent = 'Sorted!';\n      }\n\n      return new Promise(res => setTimeout(res, delay));\n    }\n\n    async function runAuto() {\n      if (!gen) gen = bubbleSortGenerator(arr.slice(), ascending);\n      playing = true;\n      btnStart.disabled = true;\n      btnPause.disabled = false;\n      btnStep.disabled = true;\n      statusEl.textContent = 'Sorting...';\n      for (;;) {\n        if (!playing) break;\n        const { value: action, done } = gen.next();\n        if (done || !action) {\n          await applyAction({ type: 'done' }, false);\n          break;\n        }\n        await applyAction(action, false);\n      }\n    }\n\n    async function stepOnce() {\n      if (!gen) gen = bubbleSortGenerator(arr.slice(), ascending);\n      const { value: action, done } = gen.next();\n      if (done || !action) {\n        await applyAction({ type: 'done' }, true);\n        return;\n      }\n      await applyAction(action, true);\n    }\n\n    // Reset state\n    function resetState() {\n      playing = false;\n      gen = null;\n      comparisons = 0;\n      swaps = 0;\n      passes = 0;\n      compEl.textContent = '0';\n      swapsEl.textContent = '0';\n      passEl.textContent = '0';\n      clearHighlights();\n      clearSorted();\n      statusEl.textContent = 'Ready';\n      btnStart.disabled = false;\n      btnPause.disabled = true;\n      btnStep.disabled = false;\n    }\n\n    // Init array\n    function initArray() {\n      const size = Number(sizeRange.value);\n      arr = generateArray(size, datasetSelect.value);\n      sizeStatEl.textContent = String(size);\n      renderBars(arr);\n      clearSorted();\n    }\n\n    // Event wiring\n    sizeRange.addEventListener('input', () => {\n      sizeNumber.value = sizeRange.value;\n      sizeStatEl.textContent = sizeRange.value;\n    });\n    sizeRange.addEventListener('change', () => {\n      resetState();\n      initArray();\n    });\n    sizeNumber.addEventListener('change', () => {\n      let v = Number(sizeNumber.value);\n      v = Math.max(Number(sizeNumber.min), Math.min(Number(sizeNumber.max), v));\n      sizeNumber.value = String(v);\n      sizeRange.value = String(v);\n      sizeStatEl.textContent = String(v);\n      resetState();\n      initArray();\n    });\n\n    datasetSelect.addEventListener('change', () => {\n      resetState();\n      initArray();\n    });\n\n    orderSelect.addEventListener('change', () => {\n      ascending = orderSelect.value === 'asc';\n      // no automatic sort start; just update state\n      statusEl.textContent = `Order: ${ascending ? 'Ascending' : 'Descending'}`;\n      // Reset generator to reflect the new order if sorting hasn't started\n      gen = null;\n    });\n\n    speedRange.addEventListener('input', updateSpeedNote);\n\n    btnGenerate.addEventListener('click', () => {\n      resetState();\n      initArray();\n    });\n\n    btnStart.addEventListener('click', () => {\n      if (playing) return;\n      runAuto();\n    });\n\n    btnPause.addEventListener('click', () => {\n      playing = false;\n      btnPause.disabled = true;\n      btnStart.disabled = false;\n      btnStep.disabled = false;\n      statusEl.textContent = 'Paused';\n    });\n\n    btnStep.addEventListener('click', () => {\n      if (playing) return;\n      stepOnce();\n    });\n\n    btnReset.addEventListener('click', () => {\n      resetState();\n      initArray();\n    });\n\n    // Bootstrap\n    updateSpeedNote();\n    ascending = orderSelect.value === 'asc';\n    initArray();\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if (e.key === ' ') { // space toggles start/pause\n        e.preventDefault();\n        if (playing) btnPause.click();\n        else btnStart.click();\n      } else if (e.key.toLowerCase() === 's') {\n        e.preventDefault();\n        btnStep.click();\n      } else if (e.key.toLowerCase() === 'r') {\n        e.preventDefault();\n        btnReset.click();\n      } else if (e.key.toLowerCase() === 'g') {\n        e.preventDefault();\n        btnGenerate.click();\n      }\n    });\n\n    // Accessibility note in status\n    statusEl.textContent = 'Ready';\n  </script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    },
    "tags": [
      "test"
    ]
  },
  {
    "id": "bece72d0-a128-11f0-9f69-672d4d989e26",
    "timestamp": "2025-10-04T13:48:02.046Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 20px;\n        }\n        .bar {\n            width: 40px;\n            background-color: teal;\n            margin: 0 2px;\n            display: inline-block;\n            transition: height 0.5s, background-color 0.5s;\n        }\n        .active {\n            background-color: orange;\n        }\n    </style>\n</head>\n<body>\n\n<h1>冒泡排序演示</h1>\n<div id=\"array\"></div>\n<button onclick=\"bubbleSort()\">开始排序</button>\n\n<script>\n    // 生成随机数组\n    const arrayLength = 10;\n    let array = [];\n    for (let i = 0; i < arrayLength; i++) {\n        array.push(Math.floor(Math.random() * 100) + 1);\n    }\n\n    // 显示数组\n    function displayArray() {\n        const arrayDiv = document.getElementById(\"array\");\n        arrayDiv.innerHTML = \"\"; // 清空当前显示\n        array.forEach(value => {\n            const bar = document.createElement(\"div\");\n            bar.className = \"bar\";\n            bar.style.height = value * 2 + \"px\"; // 将值转为高度\n            arrayDiv.appendChild(bar);\n        });\n    }\n\n    // 冒泡排序算法\n    async function bubbleSort() {\n        const bars = document.querySelectorAll(\".bar\");\n        for (let i = 0; i < array.length - 1; i++) {\n            for (let j = 0; j < array.length - 1 - i; j++) {\n                if (array[j] > array[j + 1]) {\n                    // 高亮当前比较的两个元素\n                    bars[j].classList.add(\"active\");\n                    bars[j + 1].classList.add(\"active\");\n\n                    // 交换值\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n\n                    // 更新显示\n                    displayArray();\n                    await new Promise(resolve => setTimeout(resolve, 500)); // 暂停一段时间\n\n                    // 移除高亮\n                    bars[j].classList.remove(\"active\");\n                    bars[j + 1].classList.remove(\"active\");\n                }\n            }\n        }\n    }\n\n    // 初始化显示\n    displayArray();\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "ebf6f700-a128-11f0-b27c-d1e50aeb1977",
    "timestamp": "2025-10-04T13:49:17.809Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            text-align: center;\n            padding: 50px;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 20px;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: #3498db;\n            display: inline-block;\n            color: white;\n            text-align: center;\n            line-height: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>冒泡排序演示</h1>\n    <div id=\"array\"></div>\n    <button onclick=\"startBubbleSort()\">开始排序</button>\n\n    <script>\n        const array = [5, 3, 8, 4, 2];\n\n        function displayArray(arr) {\n            const arrayContainer = document.getElementById('array');\n            arrayContainer.innerHTML = '';\n            arr.forEach((value) => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = value * 20 + 'px';\n                bar.textContent = value;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort(arr) {\n            let len = arr.length;\n            for (let i = 0; i < len; i++) {\n                for (let j = 0; j < len - 1 - i; j++) {\n                    displayArray(arr);\n                    if (arr[j] > arr[j + 1]) {\n                        // 交换元素\n                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                    }\n                    // 等待一段时间，以便观察排序过程\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                }\n            }\n            displayArray(arr); // 最后显示已排序的数组\n        }\n\n        function startBubbleSort() {\n            displayArray(array);\n            bubbleSort(array.slice());\n        }\n\n        window.onload = function() {\n            displayArray(array);\n        }\n    </script>\n</body>\n</html>\n```\n\n这个HTML文件实现了一个简单的冒泡排序演示。它显示了一组数字并通过按钮触发排序过程，让用户观察每一步的变化。",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "05c445a0-a12b-11f0-9710-514008e92ff0",
    "timestamp": "2025-10-04T14:04:20.090Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin: 50px;\n        }\n        #array-container {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: teal;\n            display: inline-block;\n            transition: height 0.3s;\n        }\n    </style>\n</head>\n<body>\n\n<h1>冒泡排序演示</h1>\n<div id=\"array-container\"></div>\n<button id=\"start-button\">开始排序</button>\n\n<script>\n    const arrayContainer = document.getElementById('array-container');\n    const startButton = document.getElementById('start-button');\n\n    function generateRandomArray(size) {\n        return Array.from({length: size}, () => Math.floor(Math.random() * 100) + 1);\n    }\n\n    function renderArray(array) {\n        arrayContainer.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.classList.add('bar');\n            bar.style.height = `${value * 3}px`; // Scale height for visibility\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    async function bubbleSort(array) {\n        const bars = document.querySelectorAll('.bar');\n        for(let i = 0; i < array.length - 1; i++) {\n            for(let j = 0; j < array.length - 1 - i; j++) {\n                if(array[j] > array[j + 1]) {\n                    // Swap the elements\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    renderArray(array);\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Delay for visualization\n                }\n            }\n        }\n    }\n    \n    startButton.addEventListener('click', async () => {\n        const array = generateRandomArray(10);\n        renderArray(array);\n        await bubbleSort(array);\n    });\n\n    // Initialize with a random array\n    renderArray(generateRandomArray(10));\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "3bbcf3f0-a12b-11f0-a300-ff9c944a1424",
    "timestamp": "2025-10-04T14:05:50.640Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin: 20px;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 20px;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 5px;\n            background-color: teal;\n            display: inline-block;\n        }\n    </style>\n</head>\n<body>\n\n<h1>冒泡排序演示</h1>\n<div id=\"array\"></div>\n<button id=\"sortButton\">开始排序</button>\n\n<script>\n    const array = [5, 3, 8, 4, 2];\n    const arrayContainer = document.getElementById('array');\n    const sortButton = document.getElementById('sortButton');\n\n    function createBars(arr) {\n        arrayContainer.innerHTML = '';\n        arr.forEach(num => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${num * 20}px`;\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    function bubbleSort(arr) {\n        const len = arr.length;\n        let swapped;\n        do {\n            swapped = false;\n            for (let i = 0; i < len - 1; i++) {\n                if (arr[i] > arr[i + 1]) {\n                    // Swap the elements\n                    [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n                    swapped = true;\n                    createBars(arr); // Update the visualization\n                    await sleep(500); // Wait for a moment to visualize the swap\n                }\n            }\n        } while (swapped);\n        return arr;\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    sortButton.addEventListener('click', async () => {\n        await bubbleSort(array.slice()); // Sort a copy of the array\n    });\n\n    createBars(array);\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4d9cc230-a12b-11f0-a5a8-119dd030d1c3",
    "timestamp": "2025-10-04T14:06:20.627Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个冒泡排序演示",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>冒泡排序演示</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        #array {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: steelblue;\n            transition: height 0.5s;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>冒泡排序演示</h1>\n    <div id=\"array\"></div>\n    <button onclick=\"bubbleSort()\">开始排序</button>\n\n    <script>\n        const arrayLength = 10;\n        const array = Array.from({ length: arrayLength }, () => Math.floor(Math.random() * 100));\n\n        function drawArray() {\n            const arrayContainer = document.getElementById('array');\n            arrayContainer.innerHTML = '';\n            array.forEach((value) => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            for (let i = 0; i < array.length; i++) {\n                for (let j = 0; j < array.length - i - 1; j++) {\n                    if (array[j] > array[j + 1]) {\n                        // 交换\n                        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                        drawArray();\n                        await new Promise(resolve => setTimeout(resolve, 500));\n                    }\n                }\n            }\n        }\n\n        // 初始绘制\n        drawArray();\n    </script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个冒泡排序演示"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "96caa020-a12c-11f0-a1ad-c107384c00a7",
    "timestamp": "2025-10-04T14:15:32.899Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            background-color: #f4f4f4;\n        }\n        .bar {\n            display: inline-block;\n            width: 30px;\n            margin: 2px;\n            background-color: #3498db;\n            transition: height 0.3s ease;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    <div id=\"array-container\"></div>\n    <br>\n    <button id=\"start\">Start Sorting</button>\n\n    <script>\n        const array = [5, 3, 8, 4, 2];\n        const arrayContainer = document.getElementById('array-container');\n\n        function renderArray(array) {\n            arrayContainer.innerHTML = '';\n            array.forEach((value) => {\n                const bar = document.createElement('div');\n                bar.classList.add('bar');\n                bar.style.height = `${value * 20}px`; // Scale for better visibility\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort(arr) {\n            const len = arr.length;\n            for (let i = 0; i < len - 1; i++) {\n                for (let j = 0; j < len - i - 1; j++) {\n                    if (arr[j] > arr[j + 1]) {\n                        // Swap\n                        let temp = arr[j];\n                        arr[j] = arr[j + 1];\n                        arr[j + 1] = temp;\n                    }\n                    renderArray(arr);\n                    await new Promise(resolve => setTimeout(resolve, 500)); // Delay for visualization\n                }\n            }\n        }\n\n        document.getElementById('start').onclick = () => {\n            bubbleSort([...array]);\n        };\n\n        // Initial rendering of the array\n        renderArray(array);\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "a9111f70-a12c-11f0-8dea-5bfd2f3ee82e",
    "timestamp": "2025-10-04T14:16:03.559Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "Bubble Sort is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. \n\nHere's a step-by-step explanation of how the Bubble Sort algorithm works:\n\n1. Start at the beginning of the list.\n2. Compare the first two adjacent elements.\n   - If the first element is greater than the second, swap them.\n3. Move to the next pair of adjacent elements and repeat the comparison and swap if necessary.\n4. Continue this process for the entire list; after each pass, the largest unsorted element will 'bubble up' to its correct position.\n5. Repeat the process for the entire list until no swaps are needed, which means the list is sorted.\n\n### Example:\n\nConsider the following list: `[5, 3, 8, 4, 2]`.\n\n**Pass 1:**\n- Compare 5 and 3: swap → `[3, 5, 8, 4, 2]`\n- Compare 5 and 8: no swap → `[3, 5, 8, 4, 2]`\n- Compare 8 and 4: swap → `[3, 5, 4, 8, 2]`\n- Compare 8 and 2: swap → `[3, 5, 4, 2, 8]`\n\n**Pass 2:**\n- Compare 3 and 5: no swap → `[3, 5, 4, 2, 8]`\n- Compare 5 and 4: swap → `[3, 4, 5, 2, 8]`\n- Compare 5 and 2: swap → `[3, 4, 2, 5, 8]`\n- Compare 5 and 8: no swap → `[3, 4, 2, 5, 8]`\n\n**Pass 3:**\n- Compare 3 and 4: no swap → `[3, 4, 2, 5, 8]`\n- Compare 4 and 2: swap → `[3, 2, 4, 5, 8]`\n- Compare 4 and 5: no swap → `[3, 2, 4, 5, 8]`\n- Compare 5 and 8: no swap → `[3, 2, 4, 5, 8]`\n\n**Pass 4:**\n- Compare 3 and 2: swap → `[2, 3, 4, 5, 8]`\n- Compare 3 and 4: no swap → `[2, 3, 4, 5, 8]`\n- Compare 4 and 5: no swap → `[2, 3, 4, 5, 8]`\n- Compare 5 and 8: no swap → `[2, 3, 4, 5, 8]`\n\nNow the list is sorted: `[2, 3, 4, 5, 8]`.\n\n### Pseudo Code:\n\nHere's a simple pseudo code for Bubble Sort:\n\n```\nfunction bubbleSort(array):\n    n = length(array)\n    for i from 0 to n-1:\n        for j from 0 to n-i-2:\n            if array[j] > array[j+1]:\n                swap(array[j], array[j+1])\n```\n\n### Complexity:\n\n- **Time Complexity**: O(n^2) in the average and worst cases, where n is the number of items being sorted. O(n) in the best case (when the array is already sorted).\n- **Space Complexity**: O(1) because it only requires a small amount of additional memory space.\n\nDespite its simplicity, Bubble Sort is generally not suitable for large datasets as its average and worst-case time complexity is quite high compared to more efficient algorithms like Quick Sort, Merge Sort, or Heap Sort.",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "sdf"
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "bc268780-a12c-11f0-97d1-bd5db03095dd",
    "timestamp": "2025-10-04T14:16:35.576Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个时钟",
    "answer": {
      "role": "assistant",
      "content": "要创建一个美观的数字时钟，我们可以使用HTML、CSS和JavaScript。以下是一个简单的实现方案，包括当前日期和多个时区的支持。\n\n### HTML\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>数字时钟</title>\n</head>\n<body>\n    <div class=\"clock\">\n        <div id=\"digitalClock\">00:00:00</div>\n        <div id=\"date\">YYYY-MM-DD</div>\n    </div>\n    <div class=\"timezones\">\n        <div class=\"timezone\" id=\"timezone1\">时区1: 00:00</div>\n        <div class=\"timezone\" id=\"timezone2\">时区2: 00:00</div>\n        <div class=\"timezone\" id=\"timezone3\">时区3: 00:00</div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### CSS (styles.css)\n```css\nbody {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background-color: #282c34;\n    color: white;\n    font-family: 'Arial', sans-serif;\n}\n\n.clock {\n    text-align: center;\n    font-size: 48px;\n}\n\n#digitalClock {\n    font-size: 3em;\n}\n\n#date {\n    font-size: 1.5em;\n}\n\n.timezones {\n    margin-top: 20px;\n    font-size: 24px;\n}\n\n.timezone {\n    margin: 5px 0;\n}\n```\n\n### JavaScript (script.js)\n```javascript\nfunction updateClock() {\n    const now = new Date();\n    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n    document.getElementById('date').innerText = now.toLocaleDateString('zh-CN', options);\n    \n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    const seconds = String(now.getSeconds()).padStart(2, '0');\n    document.getElementById('digitalClock').innerText = `${hours}:${minutes}:${seconds}`;\n    \n    const timezones = {\n        'timezone1': 'UTC+0',\n        'timezone2': 'UTC+8',\n        'timezone3': 'UTC-5',\n    };\n    \n    for (const [key, offset] of Object.entries(timezones)) {\n        const utcDate = new Date(now.getTime() + (parseInt(offset.substring(4)) * 60 * 60 * 1000));\n        const tzHours = String(utcDate.getHours()).padStart(2, '0');\n        const tzMinutes = String(utcDate.getMinutes()).padStart(2, '0');\n        document.getElementById(key).innerText = `${offset}: ${tzHours}:${tzMinutes}`;\n    }\n}\n\nsetInterval(updateClock, 1000);\nupdateClock();\n```\n\n### 说明：\n1. **HTML结构**：用于构建时钟和日期显示部件。\n2. **CSS样式**：定义了背景颜色、字体样式和整体布局，使页面看起来更美观。\n3. **JavaScript功能**：定时更新时钟、日期和各个时区的时间显示。\n\n### 如何使用：\n1. 将HTML、CSS和JavaScript代码分别保存在 `.html`、`.css` 和 `.js` 文件中。\n2. 在浏览器中打开HTML文件即可查看数字时钟并自动更新时间。\n\n这样，你就可以得到一个功能齐全的数字时钟，支持日期显示和多个时区的时间显示。",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "生成一个美观的数字时钟，包含日期显示和多个时区支持"
      },
      {
        "role": "user",
        "content": "创建一个时钟"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "cb05bff0-a12c-11f0-981c-b947cc035b99",
    "timestamp": "2025-10-04T14:17:00.527Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "创建一个时钟",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>时钟</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            font-family: Arial, sans-serif;\n            background-color: #f0f0f0;\n        }\n        #clock {\n            font-size: 48px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n    </style>\n</head>\n<body>\n\n<div id=\"clock\">00:00:00</div>\n\n<script>\n    function updateClock() {\n        const now = new Date();\n        const hours = String(now.getHours()).padStart(2, '0');\n        const minutes = String(now.getMinutes()).padStart(2, '0');\n        const seconds = String(now.getSeconds()).padStart(2, '0');\n        \n        document.getElementById('clock').textContent = `${hours}:${minutes}:${seconds}`;\n    }\n\n    setInterval(updateClock, 1000);\n    updateClock(); // 初始化时钟\n</script>\n\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "创建一个时钟"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "042095d0-a12d-11f0-8383-1da83bf16d0b",
    "timestamp": "2025-10-04T14:18:36.333Z",
    "status": "error",
    "question": "bubble sort",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "1c908940-a12d-11f0-8ba7-4b449bd292bc",
    "timestamp": "2025-10-04T14:19:17.332Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Demo</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 10px;\n            max-width: 600px;\n        }\n        #array {\n            display: flex;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin-right: 5px;\n            background-color: lightblue;\n            border: 1px solid #000;\n            text-align: center;\n        }\n        .active {\n            background-color: orange;\n        }\n        .sorted {\n            background-color: lightgreen;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    <div id=\"array\"></div>\n    <button onclick=\"startSorting()\">Start Bubble Sort</button>\n\n    <script>\n        const arraySize = 10;\n        let array = Array.from({length: arraySize}, () => Math.floor(Math.random() * 100));\n        const arrayContainer = document.getElementById('array');\n\n        function renderArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach(value => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value}px`;\n                bar.innerText = value;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        function bubbleSort(delay) {\n            let n = array.length;\n            let swapped;\n            return new Promise((resolve) => {\n                const sort = async () => {\n                    do {\n                        swapped = false;\n                        for (let i = 0; i < n - 1; i++) {\n                            const bars = arrayContainer.children;\n                            bars[i].classList.add('active');\n                            bars[i + 1].classList.add('active');\n\n                            if (array[i] > array[i + 1]) {\n                                [array[i], array[i + 1]] = [array[i + 1], array[i]];\n                                swapped = true;\n                            }\n\n                            renderArray();\n                            await new Promise(r => setTimeout(r, delay));\n\n                            bars[i].classList.remove('active');\n                            bars[i + 1].classList.remove('active');\n                        }\n                        n--;\n                    } while (swapped);\n                    resolve();\n                };\n                sort();\n            });\n        }\n\n        function startSorting() {\n            bubbleSort(500).then(() => {\n                const bars = arrayContainer.children;\n                for (let i = 0; i < bars.length; i++) {\n                    bars[i].classList.add('sorted');\n                }\n            });\n        }\n\n        renderArray();\n    </script>\n</body>\n</html>\n```",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "83486cd0-a23a-11f0-9257-d50f2523f383",
    "timestamp": "2025-10-05T22:27:44.285Z",
    "status": "error",
    "question": "bubble sort",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "cb80e3b0-a23a-11f0-8f79-19c9f0fd91e0",
    "timestamp": "2025-10-05T22:29:45.451Z",
    "status": "error",
    "question": "bubble sort",
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "f7e3a6e0-a23a-11f0-b2c2-a7e72da316be",
    "timestamp": "2025-10-05T22:30:59.919Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            text-align: center;\n            padding: 20px;\n        }\n        #arrayContainer {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        .bar {\n            width: 30px;\n            margin: 0 2px;\n            background-color: #4CAF50;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Bubble Sort Visualization</h1>\n<div id=\"arrayContainer\"></div>\n<button id=\"sortButton\">Sort Array</button>\n\n<script>\n    const arrayContainer = document.getElementById('arrayContainer');\n    const sortButton = document.getElementById('sortButton');\n\n    let array = [64, 34, 25, 12, 22, 11, 90];\n\n    function displayArray() {\n        arrayContainer.innerHTML = '';\n        array.forEach(value => {\n            const bar = document.createElement('div');\n            bar.className = 'bar';\n            bar.style.height = `${value * 5}px`; // Scale the bar height\n            arrayContainer.appendChild(bar);\n        });\n    }\n\n    function bubbleSort() {\n        let n = array.length;\n        let swapped;\n        let delay = 100; // milliseconds\n\n        function sortStep(i, j) {\n            if (j < n - i - 1) {\n                if (array[j] > array[j + 1]) {\n                    // Swap the elements\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\n                    displayArray(); // Update the display\n                }\n                setTimeout(() => sortStep(i, j + 1), delay);\n            } else if (i < n - 1) {\n                setTimeout(() => sortStep(i + 1, 0), delay);\n            }\n        }\n\n        sortStep(0, 0);\n    }\n\n    sortButton.addEventListener('click', () => {\n        // Resetting the array and displaying it\n        array = [64, 34, 25, 12, 22, 11, 90];\n        displayArray();\n        bubbleSort();\n    });\n\n    // Initial display\n    displayArray();\n</script>\n\n</body>\n</html>\n```\n\nThis HTML file includes a simple visualization of the Bubble Sort algorithm. It features a button to start sorting a predefined array and shows the sorting process in progress. The heights of the bars represent the values within the array, and they update visually as the sort proceeds.",
      "refusal": null,
      "annotations": []
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "4bda6b50-a987-11f0-8e7e-2d344294779a",
    "timestamp": "2025-10-15T05:25:00.677Z",
    "model": "gpt-4o-mini",
    "status": "success",
    "question": "bubble sort",
    "answer": {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bubble Sort Visualization</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n            height: 100vh;\n            background-color: #f0f0f0;\n        }\n        #array {\n            display: flex;\n            align-items: flex-end;\n            margin: 20px;\n        }\n        .bar {\n            width: 30px;\n            margin: 2px;\n            background-color: #3498db;\n            transition: height 0.3s ease;\n        }\n    </style>\n</head>\n<body>\n    <h1>Bubble Sort Visualization</h1>\n    <div id=\"array\"></div>\n    <button onclick=\"bubbleSort()\">Sort Array</button>\n\n    <script>\n        const arrayContainer = document.getElementById('array');\n        let array = [5, 3, 8, 4, 2];\n        \n        function drawArray() {\n            arrayContainer.innerHTML = '';\n            array.forEach((value) => {\n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${value * 40}px`;\n                arrayContainer.appendChild(bar);\n            });\n        }\n\n        async function bubbleSort() {\n            const len = array.length;\n            for (let i = 0; i < len - 1; i++) {\n                for (let j = 0; j < len - i - 1; j++) {\n                    drawArray();\n                    await new Promise(resolve => setTimeout(resolve, 300)); // Pause for visualization\n                    if (array[j] > array[j + 1]) {\n                        // Swap\n                        let temp = array[j];\n                        array[j] = array[j + 1];\n                        array[j + 1] = temp;\n                    }\n                }\n            }\n            drawArray(); // Final display\n        }\n\n        drawArray(); // Initial display\n    </script>\n</body>\n</html>\n```"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "f5551b80-a987-11f0-a379-59c76a79f877",
    "timestamp": "2025-10-15T05:29:45.017Z",
    "model": "gpt-5",
    "status": "success",
    "question": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort",
    "answer": {
      "role": "assistant",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Bubble Sort Interactive Lab</title>\n<style>\n  :root{\n    --bg:#0f1420;\n    --panel:#131a28;\n    --accent:#5cb3ff;\n    --accent2:#ff7e6b;\n    --text:#e6edf5;\n    --muted:#9fb2c9;\n    --good:#4ad97b;\n    --warn:#ffc65c;\n    --danger:#ff5a7a;\n    --bar:#4c6dd8;\n    --barAlt:#7ab0ff;\n    --sorted:#3cc884;\n    --compare:#ffd54d;\n    --swap:#ff6f61;\n  }\n  html, body{\n    height:100%;\n    margin:0;\n    background: radial-gradient(1200px 600px at 70% 0%, #1b2b46 0%, var(--bg) 60%);\n    color: var(--text);\n    font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n  }\n  .wrap{\n    display:grid;\n    grid-template-columns: 1.4fr 1fr;\n    grid-template-rows:auto auto 1fr;\n    gap:16px;\n    padding:16px;\n    max-width:1400px;\n    margin:0 auto;\n  }\n  .panel{\n    background: linear-gradient(180deg, #172132 0%, var(--panel) 100%);\n    border-radius:12px;\n    box-shadow: 0 8px 24px rgba(0,0,0,0.35), inset 0 1px 0 rgba(255,255,255,0.06);\n    border:1px solid rgba(255,255,255,0.06);\n  }\n  .panel h2{\n    font-size:18px;\n    margin:0;\n    padding:12px 16px;\n    border-bottom:1px solid rgba(255,255,255,0.06);\n    color:#cde5ff;\n    letter-spacing:0.3px;\n  }\n  .controls{\n    display:flex;\n    flex-wrap:wrap;\n    align-items:center;\n    gap:10px 14px;\n    padding:12px 16px;\n  }\n  .controls .group{\n    display:flex;\n    align-items:center;\n    gap:8px;\n    padding:8px 12px;\n    background: rgba(255,255,255,0.04);\n    border:1px solid rgba(255,255,255,0.06);\n    border-radius:10px;\n  }\n  .controls label{\n    font-size:12px; color:var(--muted);\n  }\n  .controls input[type=\"range\"]{ width:160px; }\n  .controls select, .controls input[type=\"text\"]{\n    background:#0f1728; color:var(--text);\n    border:1px solid rgba(255,255,255,0.12);\n    padding:6px 8px; border-radius:6px;\n  }\n  .btn{\n    background: linear-gradient(180deg, #2962e2 0%, #204fc0 100%);\n    border: none;\n    color: white;\n    padding:10px 14px;\n    border-radius:10px;\n    cursor:pointer;\n    font-weight:600;\n    box-shadow: 0 4px 12px rgba(41,98,226,0.4);\n    transition: transform .06s ease, box-shadow .2s ease;\n  }\n  .btn:active{ transform: translateY(1px); box-shadow: 0 2px 8px rgba(41,98,226,0.35); }\n  .btn.secondary{\n    background: linear-gradient(180deg, #2b374e 0%, #1c2638 100%);\n    color:#cfe3ff; box-shadow:none; border:1px solid rgba(255,255,255,0.08);\n  }\n  .btn.warn{\n    background: linear-gradient(180deg, #ff8a4d 0%, #e06c1c 100%);\n    box-shadow: 0 4px 12px rgba(255,138,77,0.4);\n  }\n  .btn.good{\n    background: linear-gradient(180deg, #2cc76a 0%, #1fa85b 100%);\n    box-shadow: 0 4px 12px rgba(44,199,106,0.35);\n  }\n  .viz{\n    grid-column: 1 / 3;\n    grid-row: 2 / 4;\n    display:grid;\n    grid-template-columns: 3fr 2fr;\n    gap:16px;\n  }\n  .stage{\n    position:relative;\n    padding:16px;\n    display:flex;\n    flex-direction:column;\n  }\n  .barArea{\n    position:relative;\n    flex: 1 1 auto;\n    margin-top:8px;\n    background: radial-gradient(800px 300px at 70% 0%, #10182b 0%, #0c1220 60%);\n    border:1px solid rgba(255,255,255,0.06);\n    border-radius:12px;\n    padding:16px;\n    overflow:hidden;\n  }\n  .bars{\n    display:flex; align-items:flex-end; height:100%;\n    gap:6px;\n  }\n  .bar{\n    width: calc((100% - 6px * 49) / 50);\n    min-width: 12px;\n    background: linear-gradient(180deg, var(--barAlt) 0%, var(--bar) 100%);\n    border-radius: 6px 6px 2px 2px;\n    position:relative;\n    transition: filter .2s ease, box-shadow .2s ease;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.45);\n    will-change: transform;\n  }\n  .bar .label{\n    position:absolute; bottom:4px; left:50%; transform:translateX(-50%);\n    font-size:11px; color:#eef5ff; text-shadow: 0 1px 2px rgba(0,0,0,0.6);\n    pointer-events:none;\n  }\n  .bar.compare{ outline: 2px solid var(--compare); filter:brightness(1.2); }\n  .bar.swap{ outline: 2px solid var(--swap); filter:brightness(1.25); }\n  .bar.sorted{ background: linear-gradient(180deg, #58e2a0 0%, #2fb873 100%); }\n  .stageFooter{\n    display:flex; gap:12px; align-items:center; justify-content:space-between;\n    margin-top:12px;\n  }\n  .legend{ display:flex; gap:10px; flex-wrap:wrap; padding:4px 8px; background:rgba(255,255,255,0.04); border-radius:8px;border:1px solid rgba(255,255,255,0.06);}\n  .legend span{ font-size:12px; color:#cfe3ff; display:flex; align-items:center; gap:6px; }\n  .key{ width:14px; height:14px; border-radius:3px; display:inline-block; }\n  .key.compare{ background: var(--compare); }\n  .key.swap{ background: var(--swap); }\n  .key.sorted{ background: var(--sorted); }\n  .pointer{\n    position:absolute; top:4px; transform: translateX(-50%);\n    color:#d7e7ff; font-size:12px; text-align:center; pointer-events:none;\n  }\n  .pointer .arrow{\n    width:0;height:0; border-left:6px solid transparent; border-right:6px solid transparent; border-top:8px solid var(--accent);\n    margin:4px auto 0;\n  }\n  .stats{\n    padding:12px 16px; display:grid; grid-template-columns: repeat(2,1fr);\n    gap:10px;\n  }\n  .stat{\n    background: rgba(255,255,255,0.04); border:1px solid rgba(255,255,255,0.06);\n    border-radius:10px; padding:10px 12px;\n  }\n  .stat .big{ font-size:22px; font-weight:700; color:#ffffff; }\n  .stat .label{ font-size:12px; color:var(--muted); }\n  .explain{\n    padding:12px 16px; font-size:14px; color:#e9f2ff;\n    border-top:1px solid rgba(255,255,255,0.06);\n    min-height: 56px;\n  }\n  .code{\n    padding:0;\n    display:flex; flex-direction:column;\n  }\n  .code pre{\n    margin:0; padding:12px 16px; font-size:13px; line-height:1.55;\n    color:#cfe3ff; overflow:auto; max-height:260px;\n    background: #0e1626;\n    border-bottom:1px solid rgba(255,255,255,0.06);\n  }\n  .code .line{\n    display:block; padding:2px 8px; border-radius:6px;\n  }\n  .code .hl{\n    background: rgba(92,179,255,0.16); border-left:3px solid var(--accent);\n  }\n  .footnotes{\n    padding:12px 16px; font-size:13px; color:#b6c6dc;\n  }\n  .footnotes b{ color:#e9f2ff;}\n  .options{\n    display:flex; gap:10px; align-items:center; padding:10px 16px; border-top:1px solid rgba(255,255,255,0.06);\n  }\n  .toggle{\n    display:inline-flex; align-items:center; gap:8px; padding:6px 8px;\n    border:1px solid rgba(255,255,255,0.12); border-radius:20px; background:#0d172b;\n    font-size:12px; color:#cfe3ff; cursor:pointer;\n  }\n  .toggle input{ accent-color: var(--accent); }\n  .small{\n    font-size:12px; color:#b8cce6;\n  }\n  .divider{\n    height:1px; background:rgba(255,255,255,0.08); margin:12px 0;\n  }\n  .note{\n    padding:8px 12px; border-left:3px solid var(--accent); background: rgba(92,179,255,0.12);\n    border-radius:8px; color:#eaf5ff;\n  }\n  .title{\n    grid-column: 1 / 3;\n    padding:16px 20px; display:flex; align-items:center; justify-content:space-between;\n  }\n  .title h1{ margin:0; font-size:24px; letter-spacing:.2px; color:#daf0ff; }\n  .title .sub{ color:#b6c6dc; font-size:13px; }\n  @media (max-width: 1100px){\n    .viz{ grid-template-columns: 1fr; }\n    .wrap{ grid-template-columns: 1fr; }\n  }\n</style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <div class=\"panel title\">\n      <div>\n        <h1>Bubble Sort Interactive Lab</h1>\n        <div class=\"sub\">Explore comparisons, swaps, passes, and the optimized early-exit variant with live animation.</div>\n      </div>\n      <div>\n        <button class=\"btn\" id=\"playBtn\">Play</button>\n        <button class=\"btn secondary\" id=\"stepBtn\">Step</button>\n        <button class=\"btn secondary\" id=\"resetBtn\">Reset</button>\n      </div>\n    </div>\n\n    <div class=\"panel\">\n      <h2>Dataset & Controls</h2>\n      <div class=\"controls\">\n        <div class=\"group\">\n          <label>Size</label>\n          <input type=\"range\" min=\"5\" max=\"50\" value=\"20\" id=\"sizeRange\"/>\n          <span id=\"sizeLabel\">20</span>\n        </div>\n        <div class=\"group\">\n          <label>Distribution</label>\n          <select id=\"distribution\">\n            <option value=\"random\">Random</option>\n            <option value=\"reversed\">Reversed</option>\n            <option value=\"nearly\">Nearly Sorted</option>\n            <option value=\"few\">Few Unique (duplicates)</option>\n          </select>\n        </div>\n        <div class=\"group\" style=\"flex:1\">\n          <label>Custom (comma or space-separated)</label>\n          <input type=\"text\" id=\"customInput\" placeholder=\"e.g. 5, 3, 9, 2, 2, 8\"/>\n        </div>\n        <div class=\"group\">\n          <button class=\"btn good\" id=\"generateBtn\">Generate</button>\n          <button class=\"btn secondary\" id=\"shuffleBtn\">Shuffle</button>\n        </div>\n        <div class=\"group\">\n          <label>Speed</label>\n          <input type=\"range\" min=\"0\" max=\"100\" value=\"55\" id=\"speedRange\"/>\n          <span id=\"speedLabel\">1.0x</span>\n        </div>\n        <div class=\"group\">\n          <label>Algorithm</label>\n          <select id=\"algoSelect\">\n            <option value=\"standard\">Standard Bubble Sort</option>\n            <option value=\"optimized\">Optimized (early exit)</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"options\">\n        <label class=\"toggle\"><input type=\"checkbox\" id=\"showValues\" checked/> Show bar values</label>\n        <label class=\"toggle\"><input type=\"checkbox\" id=\"showPointers\" checked/> Show loop pointer j</label>\n        <label class=\"toggle\"><input type=\"checkbox\" id=\"autoFocus\" checked/> Auto-focus current bars</label>\n      </div>\n    </div>\n\n    <div class=\"viz\">\n      <div class=\"panel stage\">\n        <h2>Visualization</h2>\n        <div class=\"barArea\">\n          <div id=\"pointerJ\" class=\"pointer\" style=\"display:none;\">\n            j\n            <div class=\"arrow\"></div>\n          </div>\n          <div class=\"bars\" id=\"bars\"></div>\n        </div>\n        <div class=\"stageFooter\">\n          <div class=\"legend\">\n            <span><i class=\"key compare\"></i> Compare</span>\n            <span><i class=\"key swap\"></i> Swap</span>\n            <span><i class=\"key sorted\"></i> Sorted tail</span>\n          </div>\n          <div class=\"small\">Tip: Use Step to walk through the algorithm line by line. Speed adjusts animation pacing.</div>\n        </div>\n      </div>\n\n      <div class=\"panel\">\n        <h2>Algorithm Insight</h2>\n        <div class=\"stats\">\n          <div class=\"stat\">\n            <div class=\"big\" id=\"comparisons\">0</div>\n            <div class=\"label\">Comparisons</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"big\" id=\"swaps\">0</div>\n            <div class=\"label\">Swaps</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"big\" id=\"passNum\">0</div>\n            <div class=\"label\">Current pass</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"big\" id=\"jIndex\">—</div>\n            <div class=\"label\">Inner index j</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"big\" id=\"sortedTail\">0</div>\n            <div class=\"label\">Sorted tail length</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"big\" id=\"elapsed\">0.00s</div>\n            <div class=\"label\">Elapsed</div>\n          </div>\n        </div>\n        <div class=\"explain\" id=\"explain\">Welcome! Generate a dataset and press Play to watch bubble sort in action.</div>\n        <div class=\"divider\"></div>\n        <div class=\"code\" id=\"codePanel\">\n          <pre id=\"codeStandard\"><code>\n<span class=\"line\" data-ln=\"1\">function bubbleSort(A):</span>\n<span class=\"line\" data-ln=\"2\">  n = length(A)</span>\n<span class=\"line\" data-ln=\"3\">  for pass from 0 to n - 1:</span>\n<span class=\"line\" data-ln=\"4\">    for j from 0 to n - 2 - pass:</span>\n<span class=\"line\" data-ln=\"5\">      if A[j] > A[j + 1]:</span>\n<span class=\"line\" data-ln=\"6\">        swap(A, j, j + 1)</span>\n          </code></pre>\n          <pre id=\"codeOptimized\" style=\"display:none;\"><code>\n<span class=\"line\" data-ln=\"1\">function bubbleSortOptimized(A):</span>\n<span class=\"line\" data-ln=\"2\">  n = length(A)</span>\n<span class=\"line\" data-ln=\"3\">  for pass from 0 to n - 1:</span>\n<span class=\"line\" data-ln=\"4\">    swapped = false</span>\n<span class=\"line\" data-ln=\"5\">    for j from 0 to n - 2 - pass:</span>\n<span class=\"line\" data-ln=\"6\">      if A[j] > A[j + 1]:</span>\n<span class=\"line\" data-ln=\"7\">        swap(A, j, j + 1)</span>\n<span class=\"line\" data-ln=\"8\">        swapped = true</span>\n<span class=\"line\" data-ln=\"9\">    if not swapped:</span>\n<span class=\"line\" data-ln=\"10\">      break</span>\n          </code></pre>\n          <div class=\"footnotes\">\n            <div class=\"note\">Invariant: after each pass k, the last k+1 elements are in final sorted position.</div>\n            <div style=\"margin-top:8px;\">\n              • Worst / average time: O(n²) comparisons. Best (optimized on sorted input): O(n) with 0 swaps.<br/>\n              • Stable? Yes. Bubble sort does not reorder equal elements relative to each other.<br/>\n              • Space: O(1) extra space (in-place).\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<script>\n(function(){\n  const barsEl = document.getElementById('bars');\n  const pointerJEl = document.getElementById('pointerJ');\n\n  const sizeRange = document.getElementById('sizeRange');\n  const sizeLabel = document.getElementById('sizeLabel');\n  const distributionSelect = document.getElementById('distribution');\n  const customInput = document.getElementById('customInput');\n  const generateBtn = document.getElementById('generateBtn');\n  const shuffleBtn = document.getElementById('shuffleBtn');\n  const speedRange = document.getElementById('speedRange');\n  const speedLabel = document.getElementById('speedLabel');\n  const algoSelect = document.getElementById('algoSelect');\n  const showValues = document.getElementById('showValues');\n  const showPointers = document.getElementById('showPointers');\n  const autoFocus = document.getElementById('autoFocus');\n\n  const playBtn = document.getElementById('playBtn');\n  const stepBtn = document.getElementById('stepBtn');\n  const resetBtn = document.getElementById('resetBtn');\n\n  const comparisonsEl = document.getElementById('comparisons');\n  const swapsEl = document.getElementById('swaps');\n  const passNumEl = document.getElementById('passNum');\n  const jIndexEl = document.getElementById('jIndex');\n  const sortedTailEl = document.getElementById('sortedTail');\n  const elapsedEl = document.getElementById('elapsed');\n  const explainEl = document.getElementById('explain');\n\n  const codeStandard = document.getElementById('codeStandard');\n  const codeOptimized = document.getElementById('codeOptimized');\n  const codePanel = document.getElementById('codePanel');\n\n  let values = [];\n  let initialValues = [];\n  let steps = [];\n  let isPlaying = false;\n  let currentStep = -1;\n  let comparisons = 0;\n  let swaps = 0;\n  let currentPass = 0;\n  let sortedTail = 0;\n  let t0 = 0;\n  let rafTimer = null;\n\n  // Visualization mappings\n  let posToEl = []; // position index -> bar element\n  let n = 0;\n\n  // Utility\n  function clamp(v, a, b){ return Math.max(a, Math.min(b, v)); }\n  function randInt(a,b){ return Math.floor(Math.random()*(b-a+1))+a; }\n\n  function parseCustom(input) {\n    const arr = input.split(/[,\\s]+/).map(s=>s.trim()).filter(Boolean).map(Number).filter(n=>Number.isFinite(n));\n    return arr.length ? arr : null;\n  }\n\n  function makeArray(size, distribution){\n    const custom = parseCustom(customInput.value);\n    if (custom) {\n      return custom.slice();\n    }\n    let arr = [];\n    switch(distribution){\n      case 'random':\n        for(let i=0;i<size;i++){ arr.push(randInt(5, 100)); }\n        break;\n      case 'reversed':\n        for(let i=1;i<=size;i++){ arr.push(i); }\n        arr.reverse();\n        break;\n      case 'nearly':\n        for(let i=1;i<=size;i++){ arr.push(i); }\n        // small perturbations\n        const swaps = Math.max(1, Math.floor(size*0.15));\n        for(let k=0;k<swaps;k++){\n          const i = randInt(0, size-2);\n          const j = i+1;\n          [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        break;\n      case 'few':\n        const uniq = Math.max(3, Math.floor(size/6));\n        const pool = Array.from({length: uniq}, ()=>randInt(10, 90));\n        for(let i=0;i<size;i++){ arr.push(pool[randInt(0, pool.length-1)]); }\n        break;\n      default:\n        for(let i=0;i<size;i++){ arr.push(randInt(5, 100)); }\n    }\n    return arr;\n  }\n\n  function buildSteps(arr, optimized){\n    const local = arr.slice();\n    const steps = [];\n    let n = local.length;\n    for(let pass=0; pass<n-1; pass++){\n      let swappedThisPass = false;\n      for(let j=0; j<n-1-pass; j++){\n        steps.push({type:'compare', i:j, j:j+1, pass});\n        if(local[j] > local[j+1]){\n          [local[j], local[j+1]] = [local[j+1], local[j]];\n          steps.push({type:'swap', i:j, j:j+1, pass});\n          swappedThisPass = true;\n        }\n      }\n      steps.push({type:'pass_end', sortedStart: n-1-pass, pass, swapped: swappedThisPass});\n      if(optimized && !swappedThisPass){\n        steps.push({type:'early_exit', pass});\n        break;\n      }\n    }\n    return steps;\n  }\n\n  function clearBars(){\n    barsEl.innerHTML = '';\n    posToEl = [];\n  }\n\n  function renderBars(arr){\n    clearBars();\n    n = arr.length;\n    // compute scaling\n    const maxVal = Math.max(...arr);\n    const minVal = Math.min(...arr);\n    const minH = 20;\n    const padH = 6;\n    for(let i=0;i<n;i++){\n      const val = arr[i];\n      const h = minH + Math.round((val - minVal)/(maxVal - minVal || 1) * (barsEl.clientHeight - 80));\n      const bar = document.createElement('div');\n      bar.className = 'bar';\n      bar.style.height = h + 'px';\n      bar.style.order = i;\n      bar.dataset.value = val;\n      bar.dataset.id = i; // identity\n      if(showValues.checked){\n        const label = document.createElement('div');\n        label.className = 'label';\n        label.textContent = val;\n        bar.appendChild(label);\n      }\n      barsEl.appendChild(bar);\n      posToEl[i] = bar;\n    }\n    updatePointerVisibility();\n  }\n\n  function updateBarLabels(){\n    for(const bar of posToEl){\n      const label = bar.querySelector('.label');\n      if(showValues.checked){\n        if(!label){\n          const lbl = document.createElement('div');\n          lbl.className = 'label';\n          lbl.textContent = bar.dataset.value;\n          bar.appendChild(lbl);\n        } else {\n          label.textContent = bar.dataset.value;\n        }\n      } else {\n        if(label) label.remove();\n      }\n    }\n  }\n\n  function resetState(){\n    isPlaying = false;\n    currentStep = -1;\n    comparisons = 0;\n    swaps = 0;\n    currentPass = 0;\n    sortedTail = 0;\n    t0 = performance.now();\n    updateStats();\n    explainEl.textContent = 'Ready. Press Play to animate bubble sort, or Step to advance one operation.';\n    clearHighlights();\n    playBtn.textContent = 'Play';\n  }\n\n  function generate(){\n    const size = Number(sizeRange.value);\n    const dist = distributionSelect.value;\n    const arr = makeArray(size, dist);\n    values = arr.slice();\n    initialValues = arr.slice();\n    const optimized = algoSelect.value === 'optimized';\n    steps = buildSteps(arr, optimized);\n    renderBars(arr);\n    markSortedTail(0);\n    resetState();\n    highlightCodeLine(optimized ? 1 : 1, true); // line 1 header\n  }\n\n  function shuffle(){\n    if(!initialValues.length) return;\n    const arr = initialValues.slice();\n    // Fisher-Yates\n    for(let i=arr.length-1; i>0; i--){\n      const j = Math.floor(Math.random()*(i+1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    values = arr.slice();\n    initialValues = arr.slice();\n    const optimized = algoSelect.value === 'optimized';\n    steps = buildSteps(arr, optimized);\n    renderBars(arr);\n    markSortedTail(0);\n    resetState();\n  }\n\n  function flipSwap(i, j, durationMs){\n    const allBars = posToEl.slice();\n    const before = new Map();\n    allBars.forEach(el => {\n      const rect = el.getBoundingClientRect();\n      before.set(el, rect.left);\n    });\n\n    // swap orders\n    const elI = posToEl[i];\n    const elJ = posToEl[j];\n    elI.style.order = j;\n    elJ.style.order = i;\n    // update mapping\n    [posToEl[i], posToEl[j]] = [posToEl[j], posToEl[i]];\n\n    const after = new Map();\n    allBars.forEach(el=>{\n      const rect = el.getBoundingClientRect();\n      after.set(el, rect.left);\n    });\n\n    // animate via FLIP\n    const d = durationMs || stepDuration();\n    allBars.forEach(el=>{\n      const dx = before.get(el) - after.get(el);\n      if(Math.abs(dx) > 0.5){\n        el.style.transition = 'transform '+ (d/1000)+'s ease';\n        el.style.transform = 'translateX('+dx+'px)';\n        void el.offsetWidth; // reflow\n        el.style.transform = 'translateX(0)';\n      } else {\n        el.style.transition = '';\n        el.style.transform = '';\n      }\n    });\n  }\n\n  function stepDuration(){\n    // speedRange 0..100 => 0.3x..2.0x\n    const s = Number(speedRange.value);\n    const factor = 0.3 + (s/100)*(2.0-0.3);\n    // base unit durations in ms\n    const base = 550;\n    return Math.round(base / factor);\n  }\n\n  function setPlayState(play){\n    isPlaying = play;\n    playBtn.textContent = play ? 'Pause' : 'Play';\n    if(play){\n      t0 = performance.now() - timeMs;\n      runLoop();\n    } else {\n      if(rafTimer){ clearTimeout(rafTimer); rafTimer = null; }\n    }\n  }\n\n  let timeMs = 0;\n  function updateElapsed(){\n    timeMs = performance.now() - t0;\n    elapsedEl.textContent = (timeMs/1000).toFixed(2)+'s';\n  }\n\n  function runLoop(){\n    if(rafTimer){ clearTimeout(rafTimer); rafTimer = null; }\n    if(currentStep >= steps.length-1){\n      setPlayState(false);\n      explainEl.textContent = 'Finished! Array is sorted. You can Reset, Shuffle, or Generate a new dataset.';\n      return;\n    }\n    const d = stepDuration();\n    processNextStep();\n    updateElapsed();\n    rafTimer = setTimeout(()=>runLoop(), d);\n  }\n\n  function clearHighlights(){\n    posToEl.forEach(el=>{\n      el.classList.remove('compare','swap');\n    });\n    updatePointerVisibility();\n    highlightCodeLine(null, false);\n  }\n\n  function markSortedTail(len){\n    // len is number of elements at end sorted\n    const total = posToEl.length;\n    for(let idx=0; idx<total; idx++){\n      const el = posToEl[idx];\n      const isSortedTail = idx >= total - len;\n      el.classList.toggle('sorted', isSortedTail);\n    }\n    sortedTailEl.textContent = len;\n  }\n\n  function focusBars(i, j){\n    posToEl.forEach(el=>{\n      if(autoFocus.checked){\n        el.style.opacity = 0.5;\n      } else {\n        el.style.opacity = 1.0;\n      }\n    });\n    if(i!=null) posToEl[i].style.opacity = 1.0;\n    if(j!=null) posToEl[j].style.opacity = 1.0;\n  }\n\n  function updatePointer(j){\n    if(!showPointers.checked){\n      pointerJEl.style.display = 'none';\n      return;\n    }\n    if(j == null){ pointerJEl.style.display = 'none'; return; }\n    const bar = posToEl[j];\n    if(!bar){ pointerJEl.style.display = 'none'; return; }\n    const rect = bar.getBoundingClientRect();\n    const containerRect = barsEl.getBoundingClientRect();\n    const x = rect.left - containerRect.left + rect.width/2;\n    pointerJEl.style.display = 'block';\n    pointerJEl.style.left = x+'px';\n  }\n  function updatePointerVisibility(){\n    if(!showPointers.checked){ pointerJEl.style.display = 'none'; }\n  }\n\n  function explainStep(step){\n    if(!step){\n      explainEl.textContent = 'Ready. Generate data and start the animation.';\n      return;\n    }\n    switch(step.type){\n      case 'compare':\n        explainEl.textContent = `Compare A[${step.i}] and A[${step.j}]. If left > right, swap to push the larger value rightward.`;\n        break;\n      case 'swap':\n        explainEl.textContent = `Swap A[${step.i}] and A[${step.j}] to move the larger element toward the end. Bubble sort repeatedly bubbles the largest of the unsorted region.`;\n        break;\n      case 'pass_end':\n        explainEl.textContent = `Pass ${step.pass} completed. Now the last ${stepsSortedTailFromPass(step.pass)} element(s) are in final position. Next pass focuses on the remaining unsorted prefix.`;\n        break;\n      case 'early_exit':\n        explainEl.textContent = `No swaps in the last pass: array is already sorted. Optimized bubble sort exits early.`;\n        break;\n      default:\n        explainEl.textContent = '';\n    }\n  }\n\n  function stepsSortedTailFromPass(pass){\n    // After pass p, tail length = p + 1\n    return Math.min(values.length, pass + 1);\n  }\n\n  function highlightCodeLine(ln, focusHeader){\n    const optimized = algoSelect.value === 'optimized';\n    const pre = optimized ? codeOptimized : codeStandard;\n    const other = optimized ? codeStandard : codeOptimized;\n    pre.style.display = 'block';\n    other.style.display = 'none';\n    const lines = pre.querySelectorAll('.line');\n    lines.forEach(x=> x.classList.remove('hl'));\n    if(ln != null){\n      const el = pre.querySelector('.line[data-ln=\"'+ln+'\"]');\n      if(el) el.classList.add('hl');\n    } else if(focusHeader) {\n      const el = pre.querySelector('.line[data-ln=\"1\"]');\n      if(el) el.classList.add('hl');\n    }\n  }\n\n  function mapStepToCode(step){\n    const optimized = algoSelect.value === 'optimized';\n    if(!step) return null;\n    if(!optimized){\n      switch(step.type){\n        case 'compare': return 5; // if\n        case 'swap': return 6; // swap\n        case 'pass_end': return 3; // outer loop (end)\n        default: return null;\n      }\n    } else {\n      switch(step.type){\n        case 'compare': return 6;\n        case 'swap': return 7; // swap\n        case 'pass_end': return 3;\n        case 'early_exit': return 9;\n        default: return null;\n      }\n    }\n  }\n\n  function processNextStep(){\n    if(currentStep >= steps.length-1) return;\n    currentStep++;\n    const step = steps[currentStep];\n    clearHighlights();\n\n    switch(step.type){\n      case 'compare': {\n        comparisons++;\n        focusBars(step.i, step.j);\n        posToEl[step.i].classList.add('compare');\n        posToEl[step.j].classList.add('compare');\n        updatePointer(step.i);\n        currentPass = step.pass;\n        jIndexEl.textContent = step.i;\n        passNumEl.textContent = step.pass;\n        explainStep(step);\n        break;\n      }\n      case 'swap': {\n        swaps++;\n        focusBars(step.i, step.j);\n        posToEl[step.i].classList.add('swap');\n        posToEl[step.j].classList.add('swap');\n        flipSwap(step.i, step.j, stepDuration());\n        updatePointer(step.i);\n        currentPass = step.pass;\n        jIndexEl.textContent = step.i;\n        passNumEl.textContent = step.pass;\n        explainStep(step);\n        break;\n      }\n      case 'pass_end': {\n        currentPass = step.pass;\n        jIndexEl.textContent = '—';\n        sortedTail = stepsSortedTailFromPass(step.pass);\n        markSortedTail(sortedTail);\n        focusBars(null, null);\n        updatePointer(null);\n        explainStep(step);\n        break;\n      }\n      case 'early_exit': {\n        focusBars(null, null);\n        updatePointer(null);\n        explainStep(step);\n        break;\n      }\n    }\n    updateStats();\n    const ln = mapStepToCode(step);\n    highlightCodeLine(ln, false);\n  }\n\n  function updateStats(){\n    comparisonsEl.textContent = comparisons;\n    swapsEl.textContent = swaps;\n    passNumEl.textContent = currentPass;\n    sortedTailEl.textContent = sortedTail;\n  }\n\n  // Events and UI wiring\n  sizeRange.addEventListener('input', ()=>{\n    sizeLabel.textContent = sizeRange.value;\n  });\n\n  speedRange.addEventListener('input', ()=>{\n    const s = Number(speedRange.value);\n    const factor = 0.3 + (s/100)*(2.0-0.3);\n    speedLabel.textContent = `${factor.toFixed(1)}x`;\n  });\n\n  generateBtn.addEventListener('click', ()=>{\n    generate();\n  });\n  shuffleBtn.addEventListener('click', ()=>{\n    shuffle();\n  });\n\n  showValues.addEventListener('change', updateBarLabels);\n  showPointers.addEventListener('change', updatePointerVisibility);\n  algoSelect.addEventListener('change', ()=>{\n    // rebuild steps but keep current values order\n    const arr = [];\n    // We need current logical array order equal to current visual order:\n    // Build arr from current positions' values.\n    for(let i=0;i<posToEl.length;i++){\n      arr.push(Number(posToEl[i].dataset.value));\n    }\n    steps = buildSteps(arr, algoSelect.value === 'optimized');\n    resetState();\n    highlightCodeLine(1, true);\n    // Update code panel visible section is handled in highlight function.\n  });\n\n  playBtn.addEventListener('click', ()=>{\n    if(!steps.length){ generate(); }\n    setPlayState(!isPlaying);\n  });\n\n  stepBtn.addEventListener('click', ()=>{\n    if(!steps.length){ generate(); }\n    if(isPlaying){ setPlayState(false); }\n    processNextStep();\n    updateElapsed();\n  });\n\n  resetBtn.addEventListener('click', ()=>{\n    if(!initialValues.length){\n      generate();\n      return;\n    }\n    // Reset visual order to match initialValues (unsorted)\n    values = initialValues.slice();\n    renderBars(values);\n    markSortedTail(0);\n    const optimized = algoSelect.value === 'optimized';\n    steps = buildSteps(values, optimized);\n    resetState();\n  });\n\n  // Initialize defaults\n  generate();\n\n  // Accessibility: space toggles play\n  window.addEventListener('keydown', (e)=>{\n    if(e.key === ' '){\n      e.preventDefault();\n      playBtn.click();\n    }\n    if(e.key === 'ArrowRight'){\n      e.preventDefault();\n      stepBtn.click();\n    }\n  });\n\n  // Responsiveness: update pointer on resize\n  window.addEventListener('resize', ()=>{\n    const current = steps[currentStep];\n    if(current && current.type === 'compare'){\n      updatePointer(current.i);\n    } else {\n      updatePointer(null);\n    }\n  });\n\n})();\n</script>\n</body>\n</html>"
    },
    "messages": [
      {
        "role": "system",
        "content": "You are an expert in interactive web design and front-end pedagogy. Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "Please design a **high-quality interactive HTML page** that provides an in-depth, hands-on exploration of bubble sort"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]