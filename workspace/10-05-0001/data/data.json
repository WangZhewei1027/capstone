[
  {
    "id": "d9e9c0f0-a2b9-11f0-b292-4ff1ba8c2c70",
    "timestamp": "2025-10-06T13:39:15.711Z",
    "model": "gpt-5",
    "status": "success",
    "question": "核电站工作原理",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n<meta charset=\"utf-8\">\n<title>核电站工作原理交互演示（简化科普）</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n  :root{\n    --bg:#0e1320;\n    --panel:#141a2b;\n    --accent:#3fb4ff;\n    --accent2:#ffb13f;\n    --ok:#3fff9a;\n    --warn:#ffd13f;\n    --alert:#ff5460;\n    --text:#e6eef7;\n    --muted:#a9b6c9;\n  }\n  *{box-sizing:border-box}\n  html,body{height:100%; margin:0; background:var(--bg); color:var(--text); font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif}\n  header{padding:16px 24px; border-bottom:1px solid #223; background:linear-gradient(180deg,#111629,#0e1320)}\n  header h1{margin:0; font-size:20px}\n  header p{margin:6px 0 0; font-size:13px; color:var(--muted)}\n  main{display:flex; gap:16px; padding:16px; height:calc(100% - 86px)}\n  .board{flex:2; background:var(--panel); border:1px solid #223; border-radius:12px; position:relative; overflow:hidden}\n  .side{flex:1; display:flex; flex-direction:column; gap:12px}\n  .card{background:var(--panel); border:1px solid #223; border-radius:12px; padding:14px}\n  .card h3{margin:0 0 8px; font-size:16px}\n  .controls .row{margin:10px 0}\n  .controls label{display:flex; justify-content:space-between; align-items:center; font-size:13px; color:var(--muted); margin-bottom:6px}\n  input[type=range]{width:100%}\n  .gauge{display:grid; grid-template-columns: 1fr auto; gap:6px; align-items:center; margin:6px 0}\n  .bar{height:10px; background:#1b2336; border-radius:6px; overflow:hidden}\n  .bar span{display:block; height:100%}\n  .bar .primary{background:linear-gradient(90deg,#ffb13f,#ff543f)}\n  .bar .secondary{background:linear-gradient(90deg,#3fb4ff,#00e0ff)}\n  .bar .green{background:linear-gradient(90deg,#3fff9a,#23d16f)}\n  .bar .purple{background:linear-gradient(90deg,#a685ff,#7a4bff)}\n  .kv{display:flex; justify-content:space-between; font-size:13px; color:var(--muted)}\n  .legend{position:absolute; top:10px; left:10px; display:flex; gap:10px; font-size:12px; align-items:center}\n  .tag{padding:4px 8px; border-radius:999px; border:1px solid #334; background:#11192d}\n  .tag .dot{display:inline-block; width:10px; height:10px; border-radius:50%; margin-right:6px; vertical-align:-1px}\n  .dot-orange{background:var(--accent2)}\n  .dot-blue{background:var(--accent)}\n  .dot-green{background:var(--ok)}\n  .diagram{\n    position:absolute; inset:0; padding:16px;\n  }\n  svg{width:100%; height:100%}\n  .comp-label{font-size:12px; fill:#cfe3ff; pointer-events:none}\n  .hint{position:absolute; bottom:10px; left:10px; right:10px; font-size:12px; color:var(--muted)}\n  .status{display:flex; gap:8px; flex-wrap:wrap}\n  .pill{padding:6px 10px; border-radius:999px; font-size:12px; border:1px solid #334; background:#11192d}\n  .pill.ok{color:#b6ffd6; border-color:#235}\n  .pill.warn{color:#fff1b6; border-color:#554; background:#1d1a0f}\n  .pill.alert{color:#ffd7db; border-color:#633; background:#1d0f11}\n  button{background:#1a2135; color:#e6eef7; border:1px solid #334; border-radius:8px; padding:8px 10px; cursor:pointer}\n  button:hover{border-color:#3fb4ff}\n  .grid{display:grid; grid-template-columns:1fr 1fr; gap:10px}\n  .small{font-size:12px; color:var(--muted)}\n  .foot{font-size:11px; color:#91a3bf}\n  .tooltip{\n    position:absolute; padding:10px; background:#0f1525; border:1px solid #334; color:#e6eef7; border-radius:10px; pointer-events:none; transform:translate(-50%,-120%); white-space:nowrap; font-size:12px; z-index:2\n  }\n</style>\n</head>\n<body>\n<header>\n  <h1>核电站工作原理（交互演示，简化科普模型）</h1>\n  <p>通过调节控制棒、冷却剂泵、蒸汽阀门和冷凝/冷却强度，观察反应堆热功率、蒸汽产生、涡轮发电与冷凝回水的动态关系。此演示为科普用途，非工程指南。</p>\n</header>\n<main>\n  <section class=\"board\">\n    <div class=\"legend\">\n      <span class=\"tag\"><span class=\"dot dot-orange\"></span>一回路（堆芯→蒸汽发生器）</span>\n      <span class=\"tag\"><span class=\"dot dot-blue\"></span>二回路（蒸汽→涡轮→冷凝）</span>\n      <span class=\"tag\"><span class=\"dot dot-green\"></span>电力输出</span>\n    </div>\n    <div class=\"diagram\" id=\"diagram\">\n      <svg viewBox=\"0 0 1200 700\" preserveAspectRatio=\"xMidYMid meet\">\n        <!-- Background grid -->\n        <defs>\n          <linearGradient id=\"hotGrad\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n            <stop offset=\"0%\" stop-color=\"#ffb13f\"/>\n            <stop offset=\"100%\" stop-color=\"#ff543f\"/>\n          </linearGradient>\n          <linearGradient id=\"steamGrad\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n            <stop offset=\"0%\" stop-color=\"#3fb4ff\"/>\n            <stop offset=\"100%\" stop-color=\"#00e0ff\"/>\n          </linearGradient>\n          <linearGradient id=\"powerGrad\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n            <stop offset=\"0%\" stop-color=\"#3fff9a\"/>\n            <stop offset=\"100%\" stop-color=\"#23d16f\"/>\n          </linearGradient>\n          <filter id=\"glow\">\n            <feGaussianBlur stdDeviation=\"2.5\" result=\"b\"/>\n            <feMerge>\n              <feMergeNode in=\"b\"/>\n              <feMergeNode in=\"SourceGraphic\"/>\n            </feMerge>\n          </filter>\n        </defs>\n\n        <!-- Reactor Core -->\n        <rect id=\"core\" x=\"70\" y=\"180\" width=\"200\" height=\"300\" rx=\"24\" fill=\"#1c2438\" stroke=\"#334\" stroke-width=\"2\"/>\n        <text x=\"170\" y=\"160\" text-anchor=\"middle\" class=\"comp-label\">反应堆堆芯</text>\n        <!-- Core heat glow -->\n        <rect id=\"coreHeat\" x=\"85\" y=\"195\" width=\"170\" height=\"270\" rx=\"20\" fill=\"url(#hotGrad)\" opacity=\"0.25\" filter=\"url(#glow)\"/>\n\n        <!-- Primary loop piping to Steam Generator -->\n        <path id=\"primaryPipe\" d=\"M 270 250 C 350 250 420 250 500 250 L 500 220 L 650 220\"\n              stroke=\"url(#hotGrad)\" stroke-width=\"12\" fill=\"none\" stroke-linecap=\"round\" opacity=\"0.9\"/>\n        <path id=\"primaryReturn\" d=\"M 650 440 L 500 440 L 500 470 C 420 470 350 470 270 470\"\n              stroke=\"url(#hotGrad)\" stroke-width=\"12\" fill=\"none\" stroke-linecap=\"round\" opacity=\"0.9\"/>\n\n        <!-- Steam Generator (heat exchanger) -->\n        <rect id=\"steamGen\" x=\"650\" y=\"180\" width=\"170\" height=\"320\" rx=\"20\" fill=\"#1c2438\" stroke=\"#334\" stroke-width=\"2\"/>\n        <text x=\"735\" y=\"160\" text-anchor=\"middle\" class=\"comp-label\">蒸汽发生器 / 换热器</text>\n\n        <!-- Secondary loop: steam to turbine -->\n        <path id=\"steamPipe\" d=\"M 820 240 C 900 240 980 240 1060 240\" stroke=\"url(#steamGrad)\" stroke-width=\"10\" fill=\"none\" stroke-linecap=\"round\"/>\n        <!-- Turbine -->\n        <rect id=\"turbine\" x=\"1060\" y=\"200\" width=\"110\" height=\"90\" rx=\"14\" fill=\"#1c2438\" stroke=\"#334\" stroke-width=\"2\"/>\n        <text x=\"1115\" y=\"190\" text-anchor=\"middle\" class=\"comp-label\">蒸汽涡轮</text>\n        <circle id=\"turbineRotor\" cx=\"1115\" cy=\"245\" r=\"25\" fill=\"#2a3350\" stroke=\"#446\" stroke-width=\"2\"/>\n        <line id=\"blade1\" x1=\"1115\" y1=\"245\" x2=\"1115\" y2=\"215\" stroke=\"#7aa7ff\" stroke-width=\"6\" stroke-linecap=\"round\"/>\n        <line id=\"blade2\" x1=\"1115\" y1=\"245\" x2=\"1140\" y2=\"245\" stroke=\"#7aa7ff\" stroke-width=\"6\" stroke-linecap=\"round\"/>\n        <line id=\"blade3\" x1=\"1115\" y1=\"245\" x2=\"1115\" y2=\"275\" stroke=\"#7aa7ff\" stroke-width=\"6\" stroke-linecap=\"round\"/>\n\n        <!-- Generator -->\n        <rect id=\"generator\" x=\"1020\" y=\"310\" width=\"190\" height=\"90\" rx=\"14\" fill=\"#1c2438\" stroke=\"#334\" stroke-width=\"2\"/>\n        <text x=\"1115\" y=\"300\" text-anchor=\"middle\" class=\"comp-label\">发电机</text>\n        <path id=\"powerFlow\" d=\"M 1020 355 L 980 355 L 940 355\" stroke=\"url(#powerGrad)\" stroke-width=\"8\" fill=\"none\" stroke-linecap=\"round\"/>\n        <text id=\"powerLabel\" x=\"930\" y=\"355\" class=\"comp-label\" text-anchor=\"end\">电力输出</text>\n\n        <!-- Condenser -->\n        <rect id=\"condenser\" x=\"800\" y=\"350\" width=\"200\" height=\"120\" rx=\"16\" fill=\"#1c2438\" stroke=\"#334\" stroke-width=\"2\"/>\n        <text x=\"900\" y=\"340\" text-anchor=\"middle\" class=\"comp-label\">冷凝器</text>\n\n        <!-- Steam return to condenser -->\n        <path id=\"steamToCond\" d=\"M 1060 240 C 990 260 940 280 900 320\" stroke=\"url(#steamGrad)\" stroke-width=\"10\" fill=\"none\" stroke-linecap=\"round\" opacity=\"0.7\"/>\n\n        <!-- Return feedwater to steam generator -->\n        <path id=\"feedwaterPipe\" d=\"M 900 470 C 800 470 720 470 650 470\" stroke=\"#5ac8ff\" stroke-width=\"8\" fill=\"none\" stroke-linecap=\"round\" opacity=\"0.7\"/>\n\n        <!-- Cooling tower -->\n        <path id=\"coolTower\" d=\"M 840 520 C 830 520 820 580 820 620 C 820 670 930 670 930 620 C 930 580 920 520 910 520 Z\"\n              fill=\"#1c2438\" stroke=\"#334\" stroke-width=\"2\"/>\n        <text x=\"875\" y=\"510\" text-anchor=\"middle\" class=\"comp-label\">冷却塔/海水冷却</text>\n        <path id=\"coolWaterPipe\" d=\"M 900 410 C 870 420 860 450 860 500\" stroke=\"#7fffd4\" stroke-width=\"8\" fill=\"none\" stroke-linecap=\"round\" opacity=\"0.8\"/>\n\n        <!-- Labels inside core and steam generator -->\n        <text id=\"coreTempText\" x=\"170\" y=\"340\" text-anchor=\"middle\" class=\"comp-label\">堆芯温度: - °C</text>\n        <text id=\"secTempText\" x=\"735\" y=\"340\" text-anchor=\"middle\" class=\"comp-label\">二回路蒸汽温度: - °C</text>\n      </svg>\n    </div>\n    <div class=\"hint\">提示：拖动右侧滑块，观察流动粗细、颜色与旋转速度的变化；当温度或压力过高时，系统会自动触发停堆（SCRAM）。本模型只展示基本能量流，不代表真实参数。</div>\n  </section>\n\n  <section class=\"side\">\n    <div class=\"card controls\">\n      <h3>可调参数</h3>\n      <div class=\"row\">\n        <label>\n          <span>控制棒插入程度（吸收中子，降低反应性）</span>\n          <span id=\"insertVal\">40%</span>\n        </label>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"40\" id=\"insert\">\n      </div>\n      <div class=\"row\">\n        <label>\n          <span>一回路冷却剂泵速（带走堆芯热量）</span>\n          <span id=\"pumpVal\">70%</span>\n        </label>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"70\" id=\"pump\">\n      </div>\n      <div class=\"row\">\n        <label>\n          <span>蒸汽阀门/涡轮负荷（将蒸汽送入涡轮）</span>\n          <span id=\"valveVal\">60%</span>\n        </label>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"60\" id=\"valve\">\n      </div>\n      <div class=\"row\">\n        <label>\n          <span>冷凝与冷却强度（提高真空并冷却蒸汽）</span>\n          <span id=\"coolVal\">70%</span>\n        </label>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"70\" id=\"cool\">\n      </div>\n      <div style=\"display:flex; gap:8px; margin-top:8px\">\n        <button id=\"scramBtn\">人工停堆（SCRAM）</button>\n        <button id=\"resetBtn\">复位</button>\n        <button id=\"pauseBtn\">暂停</button>\n      </div>\n      <div class=\"small\" style=\"margin-top:8px\">\n        说明：控制棒插入越多，链式裂变越弱；冷却剂泵越强，换热越充分；阀门越开，涡轮做功越多；冷凝越强，蒸汽被更快冷却、维持较低背压。\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <h3>实时状态</h3>\n      <div class=\"status\" id=\"statusRow\">\n        <span class=\"pill ok\" id=\"reactivityPill\">反应性 正常</span>\n        <span class=\"pill ok\" id=\"tempPill\">温度 正常</span>\n        <span class=\"pill ok\" id=\"pressPill\">压力 正常</span>\n        <span class=\"pill ok\" id=\"scramPill\">停堆 未触发</span>\n      </div>\n\n      <div class=\"gauge\">\n        <div>堆芯热功率（MWth）</div>\n        <div id=\"qgenVal\">-</div>\n      </div>\n      <div class=\"bar\"><span class=\"primary\" id=\"qgenBar\" style=\"width:0%\"></span></div>\n\n      <div class=\"gauge\">\n        <div>涡轮机械功（MW）</div>\n        <div id=\"qturbVal\">-</div>\n      </div>\n      <div class=\"bar\"><span class=\"secondary\" id=\"qturbBar\" style=\"width:0%\"></span></div>\n\n      <div class=\"gauge\">\n        <div>电力输出（MWe）</div>\n        <div id=\"pelecVal\">-</div>\n      </div>\n      <div class=\"bar\"><span class=\"green\" id=\"pelecBar\" style=\"width:0%\"></span></div>\n\n      <div class=\"gauge\">\n        <div>热-电效率（%）</div>\n        <div id=\"effVal\">-</div>\n      </div>\n      <div class=\"bar\"><span class=\"purple\" id=\"effBar\" style=\"width:0%\"></span></div>\n\n      <div class=\"grid\" style=\"margin-top:10px\">\n        <div class=\"kv\"><span>堆芯温度（°C）</span><span id=\"tcoreVal\">-</span></div>\n        <div class=\"kv\"><span>蒸汽温度（°C）</span><span id=\"tsecVal\">-</span></div>\n        <div class=\"kv\"><span>蒸汽压力（bar）</span><span id=\"psteamVal\">-</span></div>\n        <div class=\"kv\"><span>换热量（MW）</span><span id=\"qtransVal\">-</span></div>\n        <div class=\"kv\"><span>冷凝量（MW）</span><span id=\"qcondVal\">-</span></div>\n        <div class=\"kv\"><span>反应性（相对值）</span><span id=\"reactVal\">-</span></div>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <h3>原理概要</h3>\n      <ul class=\"small\">\n        <li>堆芯内燃料发生裂变，释放中子与热能。控制棒吸收中子，调节链式反应强度（反应性）。</li>\n        <li>一回路在高压下将热量带至蒸汽发生器，通过换热使二回路水产生蒸汽。</li>\n        <li>蒸汽推动涡轮旋转，带动发电机将机械能转换为电能。</li>\n        <li>蒸汽在冷凝器中被冷却成水，回到蒸汽发生器（闭式循环）。</li>\n        <li>安全特性：温度升高会引入负反馈（反应性降低）；超过阈值自动停堆（SCRAM）。</li>\n      </ul>\n      <div class=\"foot\">免责声明：本演示为简化科普模型，数值与结构均为示意，不用于任何实际工程设计或操作。</div>\n    </div>\n  </section>\n</main>\n\n<!-- Tooltips for components -->\n<div id=\"tt\" class=\"tooltip\" style=\"display:none\"></div>\n\n<script>\n(function(){\n  // State and constants (simplified model, not physically exact)\n  const state = {\n    insert: 0.40,     // 控制棒插入比例 [0..1]\n    pump: 0.70,       // 一回路泵速 [0..1]\n    valve: 0.60,      // 蒸汽阀门/涡轮负荷 [0..1]\n    cooling: 0.70,    // 冷凝/冷却强度 [0..1]\n    T_core: 320,      // 堆芯温度 °C\n    T_sec: 200,       // 二回路蒸汽侧平均温度 °C\n    Q_gen: 0,         // 堆芯热功率 MWth\n    Q_trans: 0,       // 换热至二回路 MW\n    Q_turb: 0,        // 涡轮机械功 MW\n    Q_cond: 0,        // 冷凝器移走热量 MW\n    P_elec: 0,        // 电力输出 MWe\n    P_steam_bar: 1.0, // 蒸汽压力 bar（示意）\n    scram: false,     // 是否停堆\n    paused: false\n  };\n\n  // Constants\n  const P_MAX = 3000;            // 最大堆芯热功率（MWth，示意）\n  const ALPHA_T = 0.001;         // 温度负反馈系数（示意）\n  const K_TRANS = 12;            // 换热系数（MW/°C，示意）\n  const C_CORE = 500;            // 堆芯热容（MW per °C/s，示意）\n  const K_TURBINE = 8;           // 涡轮做功系数（MW/°C，示意）\n  const ETA_ELEC = 0.36;         // 热-电转换效率（典型 ~33-37%）\n  const K_COND = 10;             // 冷凝器换热系数（MW/°C，示意）\n  const C_SEC = 220;             // 二回路热容（MW per °C/s，示意）\n  const DT = 0.2;                // 时间步长（秒）\n  const T_AMB = 30;              // 环境温度（冷源）\n  const T_BOIL = 100;            // 沸点简化阈值\n\n  // DOM references\n  const el = {\n    insert: document.getElementById('insert'),\n    pump: document.getElementById('pump'),\n    valve: document.getElementById('valve'),\n    cool: document.getElementById('cool'),\n    insertVal: document.getElementById('insertVal'),\n    pumpVal: document.getElementById('pumpVal'),\n    valveVal: document.getElementById('valveVal'),\n    coolVal: document.getElementById('coolVal'),\n    qgenVal: document.getElementById('qgenVal'),\n    qturbVal: document.getElementById('qturbVal'),\n    pelecVal: document.getElementById('pelecVal'),\n    effVal: document.getElementById('effVal'),\n    tcoreVal: document.getElementById('tcoreVal'),\n    tsecVal: document.getElementById('tsecVal'),\n    qtransVal: document.getElementById('qtransVal'),\n    qcondVal: document.getElementById('qcondVal'),\n    psteamVal: document.getElementById('psteamVal'),\n    reactVal: document.getElementById('reactVal'),\n    qgenBar: document.getElementById('qgenBar'),\n    qturbBar: document.getElementById('qturbBar'),\n    pelecBar: document.getElementById('pelecBar'),\n    effBar: document.getElementById('effBar'),\n    statusRow: document.getElementById('statusRow'),\n    reactivityPill: document.getElementById('reactivityPill'),\n    tempPill: document.getElementById('tempPill'),\n    pressPill: document.getElementById('pressPill'),\n    scramPill: document.getElementById('scramPill'),\n    scramBtn: document.getElementById('scramBtn'),\n    resetBtn: document.getElementById('resetBtn'),\n    pauseBtn: document.getElementById('pauseBtn'),\n    coreHeat: document.getElementById('coreHeat'),\n    primaryPipe: document.getElementById('primaryPipe'),\n    primaryReturn: document.getElementById('primaryReturn'),\n    steamPipe: document.getElementById('steamPipe'),\n    steamToCond: document.getElementById('steamToCond'),\n    feedwaterPipe: document.getElementById('feedwaterPipe'),\n    coolWaterPipe: document.getElementById('coolWaterPipe'),\n    turbineRotor: document.getElementById('turbineRotor'),\n    blade1: document.getElementById('blade1'),\n    blade2: document.getElementById('blade2'),\n    blade3: document.getElementById('blade3'),\n    coreTempText: document.getElementById('coreTempText'),\n    secTempText: document.getElementById('secTempText'),\n    tt: document.getElementById('tt'),\n    diagram: document.getElementById('diagram'),\n    powerFlow: document.getElementById('powerFlow'),\n    powerLabel: document.getElementById('powerLabel')\n  };\n\n  // Hook sliders\n  function updateSliderLabels(){\n    el.insertVal.textContent = Math.round(state.insert*100) + '%';\n    el.pumpVal.textContent   = Math.round(state.pump*100) + '%';\n    el.valveVal.textContent  = Math.round(state.valve*100) + '%';\n    el.coolVal.textContent   = Math.round(state.cooling*100) + '%';\n  }\n  ['insert','pump','valve','cool'].forEach(id=>{\n    const ref = el[id];\n    ref.addEventListener('input', ()=>{\n      state[id==='cool'?'cooling':id] = Number(ref.value)/100;\n      if(id==='insert') state.scram = false; // manual change clears scram flag unless auto triggers again\n      updateSliderLabels();\n    });\n  });\n  updateSliderLabels();\n\n  // Buttons\n  el.scramBtn.addEventListener('click', ()=>{\n    triggerScram('人工停堆');\n  });\n  el.resetBtn.addEventListener('click', resetAll);\n  el.pauseBtn.addEventListener('click', ()=>{\n    state.paused = !state.paused;\n    el.pauseBtn.textContent = state.paused ? '继续' : '暂停';\n  });\n\n  function triggerScram(reason){\n    state.scram = true;\n    state.insert = 1.0;\n    el.insert.value = 100;\n    updateSliderLabels();\n    note('scram', `SCRAM 已触发：${reason}`);\n  }\n\n  function resetAll(){\n    state.insert = 0.40;\n    state.pump = 0.70;\n    state.valve = 0.60;\n    state.cooling = 0.70;\n    state.T_core = 320;\n    state.T_sec = 200;\n    state.scram = false;\n    el.insert.value = 40;\n    el.pump.value = 70;\n    el.valve.value = 60;\n    el.cool.value = 70;\n    el.pauseBtn.textContent = '暂停';\n    state.paused = false;\n    updateSliderLabels();\n  }\n\n  // Tooltip descriptions\n  const compHints = [\n    {id:'core', text:'堆芯：燃料发生裂变，释放热能；控制棒吸收中子调节反应性。'},\n    {id:'primaryPipe', text:'一回路：高压冷却剂带走堆芯热量至蒸汽发生器。'},\n    {id:'steamGen', text:'蒸汽发生器：一回路与二回路换热，使二回路水变成蒸汽。'},\n    {id:'steamPipe', text:'蒸汽管道：高温蒸汽送往涡轮。阀门开度越大，流量越高。'},\n    {id:'turbine', text:'蒸汽涡轮：蒸汽膨胀做功，带动发电机旋转。'},\n    {id:'generator', text:'发电机：将机械能转化为电能。'},\n    {id:'condenser', text:'冷凝器：将蒸汽冷却成水，维持涡轮背压与循环。'},\n    {id:'coolTower', text:'冷却塔/海水冷却：将多余热量散至环境。'},\n    {id:'feedwaterPipe', text:'回水管道：冷凝后的水回到蒸汽发生器。'}\n  ];\n  compHints.forEach(h=>{\n    const node = document.getElementById(h.id);\n    if(!node) return;\n    node.style.cursor = 'help';\n    node.addEventListener('mousemove',(e)=>showTip(e.clientX, e.clientY, h.text));\n    node.addEventListener('mouseleave', hideTip);\n  });\n  function showTip(x,y,text){\n    el.tt.textContent = text;\n    el.tt.style.display='block';\n    const rect = el.diagram.getBoundingClientRect();\n    el.tt.style.left = (x - rect.left) + 'px';\n    el.tt.style.top  = (y - rect.top) + 'px';\n  }\n  function hideTip(){ el.tt.style.display='none'; }\n\n  // Visual helpers\n  function setStrokeWidth(elm, w){\n    elm.setAttribute('stroke-width', String(w));\n  }\n  function setOpacity(elm, op){\n    elm.setAttribute('opacity', String(op));\n  }\n  function setPowerFlowWidth(val){\n    const w = 4 + 10*Math.min(1, val/1200);\n    setStrokeWidth(el.powerFlow, w);\n    el.powerLabel.textContent = '电力输出';\n  }\n\n  // Note status changes\n  function note(type, msg){\n    // Just update pills for now\n    if(type==='scram'){\n      el.scramPill.textContent = '停堆 已触发';\n      el.scramPill.className = 'pill alert';\n    }\n  }\n\n  // Simulation loop\n  let t = 0, rot = 0;\n  function step(){\n    if(state.paused){ requestAnimationFrame(step); return; }\n\n    // Reactivity with negative temperature feedback\n    const baseR = Math.max(0, 1 - state.insert);\n    const feedback = Math.max(0.05, 1 - ALPHA_T*(state.T_core - 300)); // hotter core => lower reactivity\n    const R = baseR * feedback;\n    // Auto SCRAM if too hot or pressure too high\n    if(state.T_core > 800 || state.T_sec > 360 || state.P_steam_bar > 90){\n      if(!state.scram) triggerScram('温度/压力异常');\n    }\n    const R_eff = state.scram ? R * 0.05 : R;\n\n    // Core heat generation\n    state.Q_gen = P_MAX * R_eff;\n\n    // Heat transfer to secondary\n    const deltaTS = Math.max(0, state.T_core - state.T_sec);\n    const Q_trans_cap = K_TRANS * state.pump * deltaTS;\n    state.Q_trans = Math.min(Q_trans_cap, state.Q_gen + 200); // cannot exceed generation too much\n\n    // Core temperature dynamics\n    const dT_core = (state.Q_gen - state.Q_trans) / C_CORE * DT;\n    state.T_core = clamp(state.T_core + dT_core, T_AMB, 1200);\n\n    // Secondary side: turbine and condenser\n    state.Q_turb = K_TURBINE * state.valve * Math.max(0, state.T_sec - T_BOIL);\n    state.Q_cond = K_COND * state.cooling * Math.max(0, state.T_sec - T_AMB);\n\n    // Secondary temperature dynamics\n    const dT_sec = (state.Q_trans - state.Q_turb - state.Q_cond) / C_SEC * DT;\n    state.T_sec = clamp(state.T_sec + dT_sec, T_AMB, 450);\n\n    // Steam pressure (illustrative relation to temperature and valve)\n    const pressBase = 1 + 0.25*Math.max(0, state.T_sec - T_BOIL); // rough relation °C => bar\n    const valveRelief = 0.6*state.valve;                           // opening reduces pressure\n    state.P_steam_bar = clamp(pressBase * (1 - valveRelief), 1, 120);\n\n    // Electrical power\n    state.P_elec = ETA_ELEC * state.Q_turb;\n\n    // Efficiency\n    const eff = state.Q_gen>1 ? (state.P_elec/state.Q_gen) : 0;\n\n    // Update visuals\n    updateUI(R_eff, eff);\n\n    t += DT;\n    requestAnimationFrame(step);\n  }\n\n  function clamp(v, lo, hi){ return Math.max(lo, Math.min(hi, v)); }\n\n  function updateUI(R_eff, eff){\n    // Numbers\n    el.qgenVal.textContent = fmtMW(state.Q_gen);\n    el.qturbVal.textContent = fmtMW(state.Q_turb);\n    el.pelecVal.textContent = fmtMW(state.P_elec);\n    el.qtransVal.textContent = fmtMW(state.Q_trans);\n    el.qcondVal.textContent = fmtMW(state.Q_cond);\n    el.tcoreVal.textContent = Math.round(state.T_core) + ' °C';\n    el.tsecVal.textContent = Math.round(state.T_sec) + ' °C';\n    el.psteamVal.textContent = state.P_steam_bar.toFixed(1) + ' bar';\n    el.reactVal.textContent = R_eff.toFixed(2);\n\n    // Bars\n    el.qgenBar.style.width = (100 * state.Q_gen / P_MAX) + '%';\n    el.qturbBar.style.width = (100 * state.Q_turb / (P_MAX*0.7)) + '%';\n    el.pelecBar.style.width = (100 * state.P_elec / (P_MAX*0.4)) + '%';\n    el.effBar.style.width = (100 * eff) + '%';\n    el.effVal.textContent = (100*eff).toFixed(1) + ' %';\n\n    // Pipe thicknesses as flows\n    const primaryW = 6 + 10*state.pump * clamp(state.Q_trans/P_MAX, 0, 1);\n    const returnW  = primaryW;\n    setStrokeWidth(el.primaryPipe, primaryW);\n    setStrokeWidth(el.primaryReturn, returnW);\n    setOpacity(el.primaryPipe, 0.8 + 0.2*state.pump);\n    setOpacity(el.primaryReturn, 0.8 + 0.2*state.pump);\n\n    const steamW = 5 + 10*clamp(state.Q_turb/(P_MAX*0.7), 0, 1);\n    setStrokeWidth(el.steamPipe, steamW);\n    setStrokeWidth(el.steamToCond, steamW);\n    setStrokeWidth(el.feedwaterPipe, 5 + 8*clamp(state.Q_cond/(P_MAX*0.7), 0, 1));\n    setStrokeWidth(el.coolWaterPipe, 5 + 8*state.cooling);\n\n    setPowerFlowWidth(state.P_elec);\n\n    // Core heat glow intensity\n    const glowOp = clamp(0.15 + 0.5*(state.Q_gen/P_MAX), 0.15, 0.75);\n    el.coreHeat.setAttribute('opacity', glowOp.toFixed(3));\n\n    // Turbine rotation\n    const rpmFactor = clamp(state.Q_turb/(P_MAX*0.5), 0, 1);\n    rot += 0.12 + 0.6*rpmFactor;\n    const cx = 1115, cy = 245, r = 25;\n    const angle = rot;\n    const s = Math.sin(angle), c = Math.cos(angle);\n    // Rotate blades around rotor center\n    setLineAngle(el.blade1, cx, cy, r, angle);\n    setLineAngle(el.blade2, cx, cy, r, angle + Math.PI*2/3);\n    setLineAngle(el.blade3, cx, cy, r, angle + Math.PI*4/3);\n\n    // Text overlays in diagram\n    el.coreTempText.textContent = `堆芯温度: ${Math.round(state.T_core)} °C`;\n    el.secTempText.textContent = `二回路蒸汽温度: ${Math.round(state.T_sec)} °C`;\n\n    // Pills / status\n    const rpill = el.reactivityPill, tpill = el.tempPill, ppill = el.pressPill, sp = el.scramPill;\n    rpill.textContent = R_eff>0.02 ? '反应性 正常' : '反应性 很低';\n    rpill.className = 'pill ' + (R_eff>0.02 ? 'ok' : 'warn');\n\n    const tempState = state.T_core>800 ? 'alert' : state.T_core>600 ? 'warn' : 'ok';\n    tpill.textContent = '温度 ' + (tempState==='ok' ? '正常' : tempState==='warn' ? '偏高' : '过高');\n    tpill.className = 'pill ' + tempState;\n\n    const pressState = state.P_steam_bar>60 ? 'alert' : state.P_steam_bar>40 ? 'warn' : 'ok';\n    ppill.textContent = '压力 ' + (pressState==='ok' ? '正常' : pressState==='warn' ? '偏高' : '过高');\n    ppill.className = 'pill ' + pressState;\n\n    if(state.scram){\n      sp.textContent = '停堆 已触发';\n      sp.className = 'pill alert';\n    }else{\n      sp.textContent = '停堆 未触发';\n      sp.className = 'pill ok';\n    }\n  }\n\n  function setLineAngle(line, cx, cy, r, angle){\n    const x2 = cx + r*Math.cos(angle);\n    const y2 = cy + r*Math.sin(angle);\n    line.setAttribute('x1', String(cx));\n    line.setAttribute('y1', String(cy));\n    line.setAttribute('x2', String(x2));\n    line.setAttribute('y2', String(y2));\n  }\n\n  function fmtMW(v){\n    if(!isFinite(v)) return '-';\n    return Math.max(0, v).toFixed(0) + ' MW';\n  }\n\n  // Start loop\n  requestAnimationFrame(step);\n\n})();\n</script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "核电站工作原理"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "446ce790-a2ba-11f0-aa90-297324450cc9",
    "timestamp": "2025-10-06T13:42:14.410Z",
    "model": "gpt-5",
    "status": "success",
    "question": "手枪工作原理",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n<meta charset=\"UTF-8\">\n<title>手枪工作原理（简化动画演示）</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n  :root {\n    --bg: #eef1f5;\n    --metal1: #5e6872;\n    --metal2: #858f99;\n    --frame: #3a4047;\n    --accent: #2aa1ff;\n    --brass: #cfa63a;\n    --bullet: #da7f1e;\n    --spring: #7fb3ff;\n    --text: #1a1e22;\n    --safe: #2ecc71;\n    --danger: #ff6b6b;\n  }\n  html, body {\n    background: var(--bg);\n    color: var(--text);\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"PingFang SC\", \"Microsoft YaHei\", \"Helvetica Neue\", Arial, sans-serif;\n    margin: 0; padding: 0;\n  }\n  .wrap {\n    max-width: 980px;\n    margin: 14px auto;\n    padding: 8px 12px 24px;\n  }\n  h1 {\n    font-size: 20px;\n    margin: 6px 0 8px 0;\n  }\n  .disclaimer {\n    font-size: 13px;\n    line-height: 1.6;\n    color: #333;\n    background: #fff;\n    border: 1px solid #dfe6ee;\n    border-radius: 8px;\n    padding: 10px 12px;\n    margin-bottom: 10px;\n  }\n  .disclaimer b { color: #111; }\n  .panel {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 12px;\n  }\n  .controls, .info {\n    background: #fff;\n    border: 1px solid #dfe6ee;\n    border-radius: 8px;\n    padding: 10px 12px;\n  }\n  .controls h2, .info h2 {\n    font-size: 16px;\n    margin: 0 0 8px 0;\n  }\n  .control-row {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n    align-items: center;\n  }\n  .control-row label {\n    font-size: 13px;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    cursor: pointer;\n  }\n  .btn {\n    border: 1px solid #c7d3df;\n    background: #f8fafc;\n    color: #0f172a;\n    padding: 6px 10px;\n    border-radius: 6px;\n    cursor: pointer;\n    font-size: 13px;\n    transition: transform .05s ease, box-shadow .15s ease;\n  }\n  .btn:hover { box-shadow: 0 2px 6px rgba(0,0,0,.08); }\n  .btn:active { transform: scale(0.98); }\n  .btn.primary { background: #2aa1ff; color: #fff; border-color: #1788da; }\n  .btn.secondary { background: #e8f3ff; color: #0b6dbe; border-color: #a8d5ff; }\n  .badge {\n    display: inline-flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 12px;\n    border-radius: 999px;\n    padding: 3px 8px;\n    background: #f4f8fb;\n    border: 1px solid #dfe6ee;\n    color: #333;\n  }\n  .badge.safe { background: #e9fbef; border-color: #bff0cf; color: #1b7f43; }\n  .badge.warn { background: #fff2f2; border-color: #ffd6d6; color: #a33232; }\n  .slider {\n    -webkit-appearance: none;\n    appearance: none;\n    height: 6px;\n    border-radius: 999px;\n    background: linear-gradient(90deg, #a8d5ff, #2aa1ff);\n    outline: none;\n    width: 160px;\n  }\n  .slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 14px; height: 14px;\n    background: #fff; border: 1px solid #2aa1ff;\n    border-radius: 999px;\n    box-shadow: 0 2px 6px rgba(0,0,0,.15);\n    cursor: pointer;\n  }\n\n  /* Visualization area */\n  .stage {\n    position: relative;\n    background: #fdfdfd;\n    border: 1px solid #dfe6ee;\n    border-radius: 12px;\n    margin: 12px 0;\n    height: 380px;\n    overflow: hidden;\n  }\n  .legend {\n    position: absolute;\n    right: 10px; top: 10px;\n    display: grid; gap: 4px;\n    font-size: 12px;\n    background: rgba(255,255,255,.85);\n    border: 1px solid #e5edf6;\n    border-radius: 8px;\n    padding: 8px;\n  }\n  .legend div {\n    display: inline-flex; align-items: center; gap: 8px;\n  }\n  .swatch { width: 12px; height: 12px; border-radius: 2px; }\n  .swatch.metal1 { background: var(--metal1); }\n  .swatch.metal2 { background: var(--metal2); }\n  .swatch.frame { background: var(--frame); }\n  .swatch.brass { background: var(--brass); }\n  .swatch.bullet { background: var(--bullet); }\n  .swatch.spring { background: var(--spring); }\n\n  /* Gun components (simplified schematic) */\n  #gun {\n    position: absolute;\n    width: 820px; height: 340px;\n    left: 50%; transform: translateX(-50%);\n    top: 18px;\n  }\n  .frame {\n    position: absolute;\n    left: 140px; top: 170px;\n    width: 540px; height: 120px;\n    background: var(--frame);\n    border-radius: 10px;\n    box-shadow: inset 0 -2px 0 rgba(255,255,255,.06);\n  }\n  .grip {\n    position: absolute;\n    left: 140px; top: 190px;\n    width: 110px; height: 150px;\n    background: var(--frame);\n    transform: skewX(-12deg);\n    border-radius: 12px;\n  }\n  .slide {\n    position: absolute;\n    left: 200px; top: 90px;\n    width: 460px; height: 70px;\n    background: var(--metal1);\n    border-radius: 8px;\n    box-shadow: inset 0 -2px 0 rgba(255,255,255,.08);\n    transform: translateX(0px);\n    z-index: 10;\n  }\n  .port {\n    position: absolute;\n    left: 300px; top: 12px;\n    width: 74px; height: 26px;\n    background: var(--metal2);\n    border-radius: 4px;\n    box-shadow: inset 0 2px 0 rgba(255,255,255,.12);\n  }\n  .barrel {\n    position: absolute;\n    left: 220px; top: 112px;\n    width: 420px; height: 12px;\n    background: var(--metal2);\n    border-radius: 8px;\n    transform-origin: left center;\n    z-index: 3;\n  }\n  .muzzle {\n    position: absolute;\n    right: -4px; top: -3px;\n    width: 8px; height: 18px;\n    background: #222; border-radius: 3px;\n  }\n  .chamber {\n    position: absolute;\n    left: 220px; top: 107px;\n    width: 32px; height: 22px;\n    background: #cfd6de;\n    border: 1px solid #a9b3bd;\n    border-radius: 6px;\n    z-index: 4;\n  }\n  .spring {\n    position: absolute;\n    left: 230px; top: 132px;\n    width: 260px; height: 8px;\n    background: repeating-linear-gradient(90deg, var(--spring) 0 10px, transparent 10px 14px);\n    border-radius: 6px;\n    opacity: .9;\n    z-index: 2;\n  }\n  .trigger {\n    position: absolute;\n    left: 200px; top: 220px;\n    width: 30px; height: 34px;\n    background: var(--metal1);\n    border-radius: 10px;\n    transform-origin: 10px 0px;\n    transform: rotate(0deg);\n    z-index: 4;\n  }\n  .striker {\n    position: absolute;\n    left: 248px; top: 104px;\n    width: 18px; height: 18px;\n    background: #222;\n    border-radius: 6px;\n    box-shadow: 0 0 0 2px #444 inset;\n    transform: translateX(0px);\n    z-index: 5;\n  }\n\n  /* Ammo elements */\n  .bulletDot {\n    position: absolute;\n    left: 235px; top: 111px;\n    width: 14px; height: 14px;\n    background: var(--bullet);\n    border: 1px solid #a65f15;\n    border-radius: 999px;\n    box-shadow: 0 1px 0 rgba(255,255,255,.35) inset;\n    transform: translateX(0px);\n    z-index: 6;\n    opacity: 0;\n  }\n  .muzzleFlash {\n    position: absolute;\n    left: 632px; top: 108px;\n    width: 24px; height: 24px;\n    background: radial-gradient(circle, #ffdf8a 0 50%, #ff9f43 60%, transparent 70%);\n    border-radius: 999px;\n    filter: blur(0.6px);\n    opacity: 0;\n    z-index: 7;\n  }\n  .case {\n    position: absolute;\n    left: 233px; top: 110px;\n    width: 20px; height: 16px;\n    background: var(--brass);\n    border: 1px solid #9e7a26;\n    border-radius: 3px;\n    transform: translateX(0px);\n    z-index: 6;\n    opacity: 0;\n  }\n  .ejectedCase {\n    position: absolute;\n    left: 320px; top: 90px;\n    width: 22px; height: 10px;\n    background: var(--brass);\n    border: 1px solid #9e7a26;\n    border-radius: 3px;\n    transform: translate(0px, 0px) rotate(0deg);\n    z-index: 11;\n    opacity: 0;\n  }\n\n  .mag {\n    position: absolute;\n    left: 170px; top: 210px;\n    width: 52px; height: 110px;\n    background: #2c3137;\n    border: 1px solid #22262c;\n    border-radius: 12px;\n    transform: skewX(-12deg);\n    box-shadow: inset 0 3px 0 rgba(255,255,255,.05);\n    z-index: 5;\n  }\n  .magRound {\n    position: absolute;\n    width: 10px; height: 10px;\n    background: var(--bullet);\n    border: 1px solid #a65f15;\n    border-radius: 999px;\n  }\n  .magTop {\n    position: absolute;\n    left: 188px; top: 205px;\n    width: 34px; height: 10px;\n    background: #1a1e22;\n    border-radius: 4px;\n    transform: skewX(-12deg);\n  }\n\n  .label {\n    position: absolute;\n    background: rgba(255,255,255,.9);\n    border: 1px solid #e5edf6;\n    border-radius: 8px;\n    padding: 6px 8px;\n    font-size: 12px;\n    z-index: 20;\n    pointer-events: none;\n  }\n  .label::before {\n    content: \"\";\n    position: absolute;\n    left: -8px; top: 50%;\n    transform: translateY(-50%);\n    width: 0; height: 0;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-right: 8px solid rgba(255,255,255,.9);\n  }\n\n  .status {\n    margin-top: 6px;\n    font-size: 13px;\n    background: #fff;\n    border: 1px solid #dfe6ee;\n    border-radius: 8px;\n    padding: 10px 12px;\n    line-height: 1.6;\n  }\n  .status .stageName {\n    font-weight: 600;\n    color: #0b6dbe;\n  }\n</style>\n</head>\n<body>\n<div class=\"wrap\">\n  <h1>手枪工作原理（简化动画演示）</h1>\n  <div class=\"disclaimer\">\n    本页面展示的是枪械循环动作的简化、概念性动画，用于科普理解原理，例如“击发—后座—抽壳—抛壳—复进—供弹—锁闭”的顺序。\n    这不是制造、改装或实际使用的指南，不提供任何实操细节。请遵守当地法律法规，安全第一。\n  </div>\n\n  <div class=\"panel\">\n    <div class=\"controls\">\n      <h2>控制面板</h2>\n      <div class=\"control-row\" style=\"margin-bottom:8px;\">\n        <button id=\"btnRun\" class=\"btn primary\">演示循环</button>\n        <button id=\"btnPause\" class=\"btn\">暂停</button>\n        <button id=\"btnReset\" class=\"btn\">复位</button>\n        <label><input type=\"checkbox\" id=\"safeToggle\"> 安全挡位</label>\n        <span id=\"safeBadge\" class=\"badge safe\">安全：开启</span>\n      </div>\n      <div class=\"control-row\">\n        <label>速度\n          <input id=\"speed\" class=\"slider\" type=\"range\" min=\"0.5\" max=\"2.5\" step=\"0.1\" value=\"1.0\">\n        </label>\n        <span id=\"speedText\" class=\"badge\">1.0x</span>\n        <span class=\"badge warn\">说明：动画为简化模型，忽略不同设计差异。</span>\n      </div>\n    </div>\n    <div class=\"info\">\n      <h2>流程要点（高层概念）</h2>\n      <ul style=\"margin:0 0 8px 18px; padding:0; font-size:13px; line-height:1.6;\">\n        <li>扳机动作释放击针/击锤，击中底火。</li>\n        <li>火药燃烧产生高压气体，弹头沿枪管前进。</li>\n        <li>后座力使滑套后退，枪机解锁，抽壳并通过抛壳口抛出。</li>\n        <li>复进簧推动滑套前进，从弹匣顶端拨入下一发并再次锁闭。</li>\n        <li>安全装置可阻断击针或扳机传动，防止击发。</li>\n      </ul>\n      <div style=\"font-size:12px; color:#555;\">\n        注意：实际枪械设计存在多种机制（击锤式/击针式、闭锁方式等），本演示仅为直观理解的示意图。\n      </div>\n    </div>\n  </div>\n\n  <div class=\"stage\">\n    <div id=\"gun\">\n      <div class=\"frame\"></div>\n      <div class=\"grip\"></div>\n\n      <div id=\"slide\" class=\"slide\">\n        <div class=\"port\"></div>\n      </div>\n\n      <div id=\"barrel\" class=\"barrel\">\n        <div class=\"muzzle\"></div>\n      </div>\n      <div id=\"chamber\" class=\"chamber\"></div>\n      <div id=\"spring\" class=\"spring\"></div>\n\n      <div id=\"trigger\" class=\"trigger\"></div>\n      <div id=\"striker\" class=\"striker\"></div>\n\n      <div id=\"bullet\" class=\"bulletDot\"></div>\n      <div id=\"flash\" class=\"muzzleFlash\"></div>\n      <div id=\"case\" class=\"case\"></div>\n      <div id=\"ejectedCase\" class=\"ejectedCase\"></div>\n\n      <div class=\"mag\"></div>\n      <div class=\"magTop\"></div>\n      <div id=\"magRounds\"></div>\n\n      <div id=\"labelA\" class=\"label\" style=\"left: 96px; top: 210px;\">扳机</div>\n      <div id=\"labelB\" class=\"label\" style=\"left: 450px; top: 72px;\">滑套</div>\n      <div id=\"labelC\" class=\"label\" style=\"left: 186px; top: 100px;\">膛室/枪管</div>\n      <div id=\"labelD\" class=\"label\" style=\"left: 120px; top: 260px;\">弹匣</div>\n\n      <div class=\"legend\">\n        <div><span class=\"swatch metal1\"></span>滑套/扳机（金属）</div>\n        <div><span class=\"swatch metal2\"></span>枪管/膛室（金属）</div>\n        <div><span class=\"swatch frame\"></span>机匣/握把</div>\n        <div><span class=\"swatch brass\"></span>弹壳（示意）</div>\n        <div><span class=\"swatch bullet\"></span>弹头（示意）</div>\n        <div><span class=\"swatch spring\"></span>复进簧（示意）</div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"status\">\n    当前阶段：<span id=\"stageName\" class=\"stageName\">待击（装弹、锁闭）</span>\n    <div id=\"stageDesc\" style=\"margin-top:6px;\">\n      模型处于待击状态：膛室内有一发，滑套在前位置，枪机锁闭。\n    </div>\n  </div>\n</div>\n\n<script>\n(function() {\n  const slide = document.getElementById('slide');\n  const barrel = document.getElementById('barrel');\n  const trigger = document.getElementById('trigger');\n  const striker = document.getElementById('striker');\n  const bullet = document.getElementById('bullet');\n  const flash = document.getElementById('flash');\n  const caseEl = document.getElementById('case');\n  const ejectedCase = document.getElementById('ejectedCase');\n  const spring = document.getElementById('spring');\n\n  const btnRun = document.getElementById('btnRun');\n  const btnPause = document.getElementById('btnPause');\n  const btnReset = document.getElementById('btnReset');\n  const safeToggle = document.getElementById('safeToggle');\n  const safeBadge = document.getElementById('safeBadge');\n  const speedSlider = document.getElementById('speed');\n  const speedText = document.getElementById('speedText');\n  const stageName = document.getElementById('stageName');\n  const stageDesc = document.getElementById('stageDesc');\n  const magRoundsContainer = document.getElementById('magRounds');\n\n  // Positions and constants (pixels)\n  const chamberX = 233; // left of case\n  const barrelBulletStartX = 235;\n  const barrelBulletEndX = 632; // near muzzle flash x\n  const slideBackDistance = 130;\n  const springBaseWidth = 260;\n\n  let running = false;\n  let paused = false;\n  let seqIndex = 0;\n  let speed = 1.0;\n\n  // Magazine model\n  let magCount = 5; // number of rounds available in magazine\n  let chamberLoaded = true; // has round in chamber initially\n  const magRoundElems = [];\n  function drawMagazineRounds() {\n    magRoundsContainer.innerHTML = '';\n    magRoundElems.length = 0;\n    for (let i = 0; i < magCount; i++) {\n      const r = document.createElement('div');\n      r.className = 'magRound';\n      // stack from bottom inside the grip\n      const baseLeft = 188;\n      const baseTop = 290;\n      r.style.left = baseLeft + 'px';\n      r.style.top = (baseTop - i * 16) + 'px';\n      r.style.transform = 'skewX(-12deg)';\n      magRoundsContainer.appendChild(r);\n      magRoundElems.push(r);\n    }\n  }\n\n  drawMagazineRounds();\n\n  function setStage(name, desc) {\n    stageName.textContent = name;\n    stageDesc.textContent = desc;\n  }\n\n  function resetVisual() {\n    // Reset positions\n    slide.style.transform = `translateX(0px)`;\n    barrel.style.transform = `rotate(0deg)`;\n    trigger.style.transform = `rotate(0deg)`;\n    striker.style.transform = `translateX(0px)`;\n    bullet.style.opacity = 0;\n    bullet.style.transform = `translateX(0px)`;\n    flash.style.opacity = 0;\n    caseEl.style.opacity = 0;\n    caseEl.style.transform = `translateX(0px)`;\n    ejectedCase.style.opacity = 0;\n    ejectedCase.style.transform = `translate(0px, 0px) rotate(0deg)`;\n    spring.style.width = `${springBaseWidth}px`;\n    paused = false;\n    btnPause.textContent = '暂停';\n    setStage('待击（装弹、锁闭）', '模型处于待击状态：膛室内有一发，滑套在前位置，枪机锁闭。');\n  }\n\n  function updateSafeBadge() {\n    if (safeToggle.checked) {\n      safeBadge.textContent = '安全：开启';\n      safeBadge.className = 'badge safe';\n    } else {\n      safeBadge.textContent = '安全：关闭';\n      safeBadge.className = 'badge warn';\n    }\n  }\n  updateSafeBadge();\n\n  speedSlider.addEventListener('input', () => {\n    speed = parseFloat(speedSlider.value);\n    speedText.textContent = `${speed.toFixed(1)}x`;\n  });\n\n  safeToggle.addEventListener('change', updateSafeBadge);\n\n  btnReset.addEventListener('click', () => {\n    running = false;\n    seqIndex = 0;\n    resetVisual();\n  });\n\n  btnPause.addEventListener('click', () => {\n    if (!running) return;\n    paused = !paused;\n    btnPause.textContent = paused ? '继续' : '暂停';\n  });\n\n  btnRun.addEventListener('click', () => {\n    if (running) return; // avoid re-entrance\n    // Safety check\n    if (safeToggle.checked) {\n      setStage('安全挡位（阻断击发）', '安全装置已开启：击针/扳机传动被阻断，无法击发。本演示不会继续循环。');\n      // Show small visual hint: trigger moves slightly but striker blocked\n      animateSegment('扳机试压（安全）', 600, (p) => {\n        trigger.style.transform = `rotate(${p * 8}deg)`;\n        striker.style.transform = `translateX(${Math.min(p * 2, 2)}px)`; // barely moves\n      }, () => {\n        trigger.style.transform = `rotate(0deg)`;\n        striker.style.transform = `translateX(0px)`;\n      });\n      return;\n    }\n    running = true;\n    seqIndex = 0;\n    cycleSequence();\n  });\n\n  // Animation helper\n  function animateSegment(name, durationMs, update, onEnd) {\n    setStage(name, segmentDescription(name));\n    let elapsed = 0;\n    let last = performance.now();\n    function frame(now) {\n      const dt = paused ? 0 : (now - last);\n      last = now;\n      elapsed += dt * (1 / speed);\n      const p = Math.max(0, Math.min(1, elapsed / durationMs));\n      update(p);\n      if (p < 1) {\n        requestAnimationFrame(frame);\n      } else {\n        if (onEnd) onEnd();\n      }\n    }\n    requestAnimationFrame(frame);\n  }\n\n  function segmentDescription(name) {\n    switch (name) {\n      case '扳机试压（安全）':\n        return '扳机被压，但安全装置阻断；击针无法前行，枪不会击发。';\n      case '扳机被压':\n        return '扳机带动连杆，释放击针/击锤。此处用点代表击针位置。';\n      case '击发（火药燃烧）':\n        return '击针撞击底火，引燃火药。弹头沿枪管前进，产生后座力。';\n      case '后座与解锁':\n        return '后座力推动滑套后退，枪机解锁（示意为枪管轻微摆动）。';\n      case '抽壳':\n        return '抽壳钩抓住弹壳底缘并随滑套后退，将弹壳带离膛室。';\n      case '抛壳':\n        return '弹壳撞击抛壳挺，从抛壳口抛出。';\n      case '复进与供弹':\n        return '复进簧推动滑套前进，从弹匣顶端拨入下一发进入膛室。';\n      case '锁闭（回到待击）':\n        return '新弹进入膛室并锁闭，循环完成，回到待击状态。';\n      default:\n        return '';\n    }\n  }\n\n  function cycleSequence() {\n    // Stage 1: Trigger press\n    animateSegment('扳机被压', 450, (p) => {\n      trigger.style.transform = `rotate(${p * 18}deg)`;\n      striker.style.transform = `translateX(${p * 8}px)`;\n    }, () => {\n      // Stage 2: Fire\n      animateSegment('击发（火药燃烧）', 650, (p) => {\n        // striker snaps forward quickly then returns slightly\n        striker.style.transform = `translateX(${8 + Math.sin(p * Math.PI) * 5}px)`;\n        // bullet moves along barrel\n        bullet.style.opacity = 1;\n        const bx = (barrelBulletEndX - barrelBulletStartX) * easeOutCubic(p);\n        bullet.style.transform = `translateX(${bx}px)`;\n        // subtle early slide movement hint\n        slide.style.transform = `translateX(${-easeInCubic(p) * 10}px)`;\n        // flash near end\n        flash.style.opacity = p > 0.65 ? (Math.sin((p - 0.65) * Math.PI * 2) * 0.8) : 0;\n      }, () => {\n        // Stage 3: Recoil and unlock\n        bullet.style.opacity = 0;\n        flash.style.opacity = 0;\n        animateSegment('后座与解锁', 700, (p) => {\n          const x = -slideBackDistance * easeOutCubic(p);\n          slide.style.transform = `translateX(${x}px)`;\n          barrel.style.transform = `rotate(${-p * 4}deg)`; // small tilt\n          // spring stretches\n          spring.style.width = `${springBaseWidth + p * 90}px`;\n        }, () => {\n          // Stage 4: Extraction\n          animateSegment('抽壳', 500, (p) => {\n            caseEl.style.opacity = 1;\n            // case moves with slide (rearward)\n            const cx = -(slideBackDistance * 0.78) * easeOutCubic(p);\n            caseEl.style.transform = `translateX(${cx}px)`;\n          }, () => {\n            // Stage 5: Ejection\n            animateSegment('抛壳', 520, (p) => {\n              // case exits upward/right from port\n              caseEl.style.opacity = 0;\n              ejectedCase.style.opacity = 1;\n              const ex = 30 + easeOutCubic(p) * 110;\n              const ey = -10 - easeOutCubic(p) * 70;\n              const rot = easeOutCubic(p) * 180;\n              ejectedCase.style.transform = `translate(${ex}px, ${ey}px) rotate(${rot}deg)`;\n            }, () => {\n              // Stage 6: Return and feed\n              animateSegment('复进与供弹', 720, (p) => {\n                // slide returns forward under spring force\n                const x = -slideBackDistance * (1 - easeOutCubic(p));\n                slide.style.transform = `translateX(${x}px)`;\n                barrel.style.transform = `rotate(${-4 * (1 - p)}deg)`;\n                spring.style.width = `${springBaseWidth + (1 - p) * 90}px`;\n\n                // feed top round from magazine to chamber\n                if (magCount > 0) {\n                  const feedP = Math.min(1, Math.max(0, (p - 0.25) / 0.6)); // starts at ~25%\n                  const pathX = chamberX - 188; // horizontal path from mag to chamber\n                  const pathY = 205 - 111;      // vertical path from mag top to chamber height\n                  // create a temporary feeding dot if not present\n                  if (!document.getElementById('feedingDot')) {\n                    const fd = document.createElement('div');\n                    fd.id = 'feedingDot';\n                    fd.className = 'magRound';\n                    fd.style.left = '188px';\n                    fd.style.top = '205px';\n                    fd.style.transform = 'skewX(-12deg)';\n                    fd.style.zIndex = '7';\n                    magRoundsContainer.appendChild(fd);\n                  }\n                  const fd = document.getElementById('feedingDot');\n                  fd.style.left = (188 + easeOutCubic(feedP) * pathX) + 'px';\n                  fd.style.top  = (205 - easeOutCubic(feedP) * pathY) + 'px';\n                  // once near chamber, hide and show \"case\" as loaded state\n                  if (feedP >= 0.98) {\n                    fd.style.opacity = 0;\n                    caseEl.style.opacity = 1;\n                    caseEl.style.transform = 'translateX(0px)'; // seated in chamber\n                  }\n                }\n              }, () => {\n                // Stage 7: Lock\n                animateSegment('锁闭（回到待击）', 380, (p) => {\n                  barrel.style.transform = `rotate(${0}deg)`;\n                  trigger.style.transform = `rotate(${(1 - p) * 8}deg)`;\n                  striker.style.transform = `translateX(${(1 - p) * 2}px)`;\n                }, () => {\n                  // finalize cycle\n                  // Consume one round from magazine and set chamber loaded\n                  if (magCount > 0) {\n                    magCount -= 1;\n                    drawMagazineRounds();\n                  }\n                  // remove feeding dot if exists\n                  const fd = document.getElementById('feedingDot');\n                  if (fd) fd.remove();\n                  chamberLoaded = true;\n                  ejectedCase.style.opacity = 0;\n                  caseEl.style.opacity = 1; // show a representation of a round in chamber\n                  setStage('待击（装弹、锁闭）', '循环完成：膛室再次装填，滑套前位置并锁闭。可以再次点击“演示循环”。');\n                  running = false;\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n  // Easing functions for smoother animation\n  function easeOutCubic(t) { return 1 - Math.pow(1 - t, 3); }\n  function easeInCubic(t) { return t * t * t; }\n\n  // Initialize chamber state visual\n  function initChamberRound() {\n    caseEl.style.opacity = chamberLoaded ? 1 : 0;\n    caseEl.style.transform = `translateX(0px)`;\n  }\n  initChamberRound();\n})();\n</script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "手枪工作原理"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "aba528f0-a2ba-11f0-8421-0f98296fab4b",
    "timestamp": "2025-10-06T13:45:07.583Z",
    "model": "gpt-5",
    "status": "success",
    "question": "CPU工作原理",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>CPU工作原理互动演示：取指-译码-执行</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    :root {\n      --bg: #101317;\n      --panel: #171b22;\n      --text: #e6e6e6;\n      --muted: #a8b0bf;\n      --accent: #4cc9f0;\n      --accent2: #89ffdd;\n      --warn: #ffad5a;\n      --error: #ff6b6b;\n      --ok: #78e08f;\n      --read: #3ddc97;\n      --write: #ff7b7b;\n      --fetch: #4cc9f0;\n      --decode: #f5cd79;\n      --exec: #78e08f;\n    }\n    * { box-sizing: border-box; }\n    body {\n      margin: 0; padding: 0;\n      background: var(--bg);\n      color: var(--text);\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Helvetica, Arial, \"PingFang SC\", \"Microsoft YaHei\", sans-serif;\n    }\n    h1,h2,h3 { margin: 0 0 8px 0; font-weight: 700; }\n    h1 { font-size: 22px; }\n    h2 { font-size: 18px; color: var(--accent); }\n    p { margin: 6px 0; color: var(--muted); }\n    a { color: var(--accent2); }\n    .container {\n      max-width: 1100px;\n      margin: 0 auto;\n      padding: 16px;\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n    .topbar {\n      display: grid;\n      grid-template-columns: 1fr auto;\n      align-items: start;\n      gap: 12px;\n    }\n    .card {\n      background: var(--panel);\n      border: 1px solid #222836;\n      border-radius: 10px;\n      padding: 12px;\n      box-shadow: 0 6px 20px rgba(0,0,0,0.2);\n    }\n    .controls {\n      display: flex; flex-wrap: wrap; gap: 8px;\n    }\n    .controls > * { margin: 2px 0; }\n    button, select, input[type=\"number\"], input[type=\"text\"] {\n      background: #0f1319;\n      color: var(--text);\n      border: 1px solid #2a3140;\n      border-radius: 8px;\n      padding: 8px 10px;\n      outline: none;\n      font-size: 13px;\n    }\n    button {\n      cursor: pointer;\n      transition: transform .05s ease, background .1s ease;\n    }\n    button:hover { background: #0b0f14; }\n    button:active { transform: scale(0.98); }\n    button.primary { background: #122235; border-color: #214060; }\n    button.warning { background: #2b1f12; border-color: #6e4a1b; color: #ffcc8a; }\n    button.danger { background: #2b1414; border-color: #6b2b2b; color: #ffc6c6; }\n    .pill {\n      border-radius: 30px;\n      padding: 4px 10px;\n      font-size: 12px;\n      color: #fff;\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n    }\n    .stage { background: #122235; border: 1px solid #214060; }\n    .stage.fetch { background: rgba(76,201,240,0.12); border-color: rgba(76,201,240,0.45); color: var(--fetch); }\n    .stage.decode { background: rgba(245,205,121,0.12); border-color: rgba(245,205,121,0.45); color: var(--decode); }\n    .stage.exec { background: rgba(120,224,143,0.12); border-color: rgba(120,224,143,0.45); color: var(--exec); }\n    .grid {\n      display: grid;\n      grid-template-columns: repeat(8, 1fr);\n      gap: 6px;\n    }\n    .cell {\n      position: relative;\n      background: #0f1319;\n      border: 1px solid #2a3140;\n      border-radius: 6px;\n      padding: 8px;\n      font-size: 12px;\n      min-height: 46px;\n    }\n    .cell .addr {\n      position: absolute; top: 4px; left: 6px;\n      font-size: 10px; color: #6e768a;\n    }\n    .cell .val {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", monospace;\n      font-size: 13px; letter-spacing: 0.2px;\n    }\n    .cell.pc { box-shadow: inset 0 0 0 2px var(--accent); }\n    .cell.mar { box-shadow: inset 0 0 0 2px var(--warn); }\n    .cell.read { background: rgba(61,220,151,0.13); border-color: rgba(61,220,151,0.5); }\n    .cell.write { background: rgba(255,123,123,0.13); border-color: rgba(255,123,123,0.5); }\n    .legend {\n      display: flex; flex-wrap: wrap; gap: 8px; font-size: 12px; color: var(--muted);\n    }\n    .legend .box {\n      width: 12px; height: 12px; border-radius: 2px; display: inline-block; margin-right: 6px;\n      vertical-align: -2px;\n    }\n    .box.pc { box-shadow: inset 0 0 0 2px var(--accent); background: transparent; }\n    .box.mar { box-shadow: inset 0 0 0 2px var(--warn); background: transparent; }\n    .box.read { background: rgba(61,220,151,0.4); }\n    .box.write { background: rgba(255,123,123,0.4); }\n    .regs {\n      display: grid;\n      grid-template-columns: repeat(4, 1fr);\n      gap: 8px;\n    }\n    .reg {\n      background: #0f1319;\n      border: 1px solid #2a3140;\n      border-radius: 8px;\n      padding: 10px;\n    }\n    .reg .name { font-size: 12px; color: #a8b0bf; }\n    .reg .value {\n      font-size: 14px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;\n      margin-top: 4px;\n    }\n    .flags { display: flex; gap: 6px; margin-top: 4px; }\n    .flag {\n      font-size: 11px;\n      padding: 2px 6px;\n      border-radius: 6px;\n      border: 1px solid #2a3140;\n      background: #0f1319;\n      color: #8892a0;\n    }\n    .flag.on { border-color: #3ddc97; color: #3ddc97; background: rgba(61,220,151,0.12); }\n    .statusline {\n      display: flex; justify-content: space-between; align-items: center;\n      font-size: 12px; color: var(--muted);\n    }\n    .log {\n      background: #0f1319;\n      border: 1px solid #2a3140;\n      border-radius: 8px;\n      padding: 8px;\n      height: 160px;\n      overflow: auto;\n      font-size: 12px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n    }\n    .log .op { margin: 2px 0; }\n    .log .t { color: #6e768a; margin-right: 6px; }\n    textarea {\n      width: 100%; min-height: 220px;\n      background: #0f1319;\n      color: var(--text);\n      border: 1px solid #2a3140;\n      border-radius: 8px;\n      padding: 10px;\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;\n      font-size: 13px;\n    }\n    .hint { font-size: 12px; color: var(--muted); }\n    .badge {\n      display: inline-block;\n      padding: 2px 6px;\n      border-radius: 6px;\n      font-size: 11px;\n      border: 1px solid #2a3140;\n      color: #9fb4ce;\n      background: #0f1319;\n    }\n    .footer { font-size: 12px; color: var(--muted); text-align: center; padding: 12px; }\n    @media (max-width: 900px) {\n      .grid { grid-template-columns: repeat(6, 1fr); }\n      .regs { grid-template-columns: repeat(2, 1fr); }\n    }\n    @media (max-width: 600px) {\n      .grid { grid-template-columns: repeat(4, 1fr); }\n      .regs { grid-template-columns: 1fr; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"topbar\">\n      <div>\n        <h1>CPU工作原理互动演示：取指、译码、执行与寄存器/总线</h1>\n        <p>本示例模拟一个简单的8位CPU（非流水线）如何通过时钟驱动完成指令的取指、译码、执行。可逐步观察寄存器、内存、ALU运算与控制信号对应的“微操作”。</p>\n      </div>\n      <div class=\"pill stage\" id=\"stagePill\">阶段：等待</div>\n    </div>\n\n    <div class=\"card\">\n      <h2>控制台</h2>\n      <div class=\"controls\">\n        <select id=\"programSelect\" title=\"示例程序\">\n          <option value=\"add\">示例1：加法，将A+B存入R</option>\n          <option value=\"branch\">示例2：条件分支，X为0则OUT=1否则OUT=0</option>\n          <option value=\"loop\">示例3：循环计数，ACC自减到0</option>\n        </select>\n        <button class=\"primary\" id=\"loadExampleBtn\">载入示例</button>\n        <button class=\"primary\" id=\"assembleBtn\">汇编并加载到内存</button>\n        <button id=\"resetBtn\">复位</button>\n        <button id=\"stepBtn\">单步微操作</button>\n        <button id=\"runPauseBtn\">运行</button>\n        <label class=\"badge\">速度\n          <input type=\"range\" id=\"speedRange\" min=\"0\" max=\"1000\" value=\"400\" style=\"vertical-align: middle; width: 160px; margin-left: 6px;\">\n        </label>\n        <label class=\"badge\"><input type=\"checkbox\" id=\"autoScrollLog\" checked> 自动滚动日志</label>\n      </div>\n      <p class=\"hint\">操作提示：点“单步微操作”可以一拍一拍地观察如“MAR←PC”“MDR←MEM[MAR]”“IR←MDR”“ACC←ACC+MDR”等；点“运行”以设定速度连续执行。</p>\n    </div>\n\n    <div class=\"card\">\n      <h2>寄存器与ALU</h2>\n      <div class=\"regs\">\n        <div class=\"reg\"><div class=\"name\">PC（程序计数器）</div><div class=\"value\" id=\"regPC\">0</div></div>\n        <div class=\"reg\"><div class=\"name\">IR（指令寄存器）</div><div class=\"value\" id=\"regIR\">0x00 NOP</div></div>\n        <div class=\"reg\"><div class=\"name\">OPERAND（操作数寄存器）</div><div class=\"value\" id=\"regOP\">—</div></div>\n        <div class=\"reg\"><div class=\"name\">ACC（累加器，ALU输入/输出）</div><div class=\"value\" id=\"regACC\">0</div></div>\n\n        <div class=\"reg\"><div class=\"name\">MAR（存储器地址寄存器）</div><div class=\"value\" id=\"regMAR\">—</div></div>\n        <div class=\"reg\"><div class=\"name\">MDR（存储器数据寄存器）</div><div class=\"value\" id=\"regMDR\">—</div></div>\n        <div class=\"reg\"><div class=\"name\">FLAGS（标志位）</div>\n          <div class=\"flags\">\n            <div class=\"flag\" id=\"flagZ\">Z 零</div>\n            <div class=\"flag\" id=\"flagN\">N 负</div>\n            <div class=\"flag\" id=\"flagC\">C 进位</div>\n          </div>\n        </div>\n        <div class=\"reg\"><div class=\"name\">当前指令（人类可读）</div><div class=\"value\" id=\"humanIR\">—</div></div>\n      </div>\n      <div class=\"statusline\">\n        <div>时钟步（微操作计数）：<span id=\"tickCount\">0</span>；指令计数：<span id=\"instCount\">0</span></div>\n        <div>CPU状态：<span id=\"cpuState\">空闲</span></div>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <h2>内存（64字节）</h2>\n      <div class=\"legend\">\n        <span><span class=\"box pc\"></span>PC位置</span>\n        <span><span class=\"box mar\"></span>MAR位置</span>\n        <span><span class=\"box read\"></span>最近读</span>\n        <span><span class=\"box write\"></span>最近写</span>\n      </div>\n      <div class=\"grid\" id=\"memoryGrid\"></div>\n    </div>\n\n    <div class=\"card\">\n      <h2>微操作日志</h2>\n      <div class=\"log\" id=\"log\"></div>\n      <div class=\"controls\" style=\"margin-top: 6px;\">\n        <button id=\"clearLogBtn\">清空日志</button>\n        <span class=\"badge\" id=\"stageBadge\">阶段：—</span>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <h2>汇编编辑器（简单指令集）</h2>\n      <p class=\"hint\">支持指令：NOP, HLT, LDI #imm, LDA addr/label, STA addr/label, ADD addr/label, SUB addr/label, JMP addr/label, JZ addr/label, INC, DEC；支持标签\"LAB:\"与数据\".BYTE 值\"。每条带操作数的指令编码为2字节（指令+操作数）。</p>\n      <textarea id=\"asmEditor\"></textarea>\n      <div class=\"controls\" style=\"margin-top: 6px;\">\n        <button class=\"primary\" id=\"assembleBtn2\">汇编并加载</button>\n        <button id=\"disasmBtn\">反汇编内存</button>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <h2>原理简述</h2>\n      <ul>\n        <li>时钟驱动：每一次“微操作”代表一个或多个时钟周期完成的基本数据通路动作（例如寄存器间传送、内存读写）。</li>\n        <li>取指（Fetch）：MAR←PC，MDR←MEM[MAR]，IR←MDR，PC←PC+1；若指令需要操作数，再取操作数字节到OPERAND。</li>\n        <li>译码（Decode）：控制单元解析IR，决定是否需要操作数以及随后执行的控制信号序列。</li>\n        <li>执行（Execute）：根据指令类型，驱动ALU与数据通路。例如LDA会从内存把数据送入ACC，ADD会用ALU完成ACC←ACC+MDR并更新标志位。</li>\n        <li>标志位：Z（结果为零）、N（最高位为1，视为负）、C（加法进位/减法借位）。分支指令JZ会依据Z决定是否修改PC。</li>\n      </ul>\n    </div>\n\n    <div class=\"footer\">本演示旨在帮助直观理解CPU的工作流程与微操作，指令集与实现为教学用简化模型。</div>\n  </div>\n\n  <script>\n    // 简易8位CPU演示器\n    const MEM_SIZE = 64;\n    const OPCODES = {\n      NOP: 0x00,\n      LDI: 0x01,   // immediate\n      LDA: 0x02,   // addr\n      STA: 0x03,   // addr\n      ADD: 0x04,   // addr\n      SUB: 0x05,   // addr\n      JMP: 0x06,   // addr\n      JZ:  0x07,   // addr\n      INC: 0x08,   // none\n      DEC: 0x09,   // none\n      HLT: 0xFF\n    };\n    const MNEMONIC = Object.fromEntries(Object.entries(OPCODES).map(([k,v]) => [v,k]));\n    const HAS_OPERAND = new Set([OPCODES.LDI, OPCODES.LDA, OPCODES.STA, OPCODES.ADD, OPCODES.SUB, OPCODES.JMP, OPCODES.JZ]);\n    const NO_OPERAND = new Set([OPCODES.NOP, OPCODES.INC, OPCODES.DEC, OPCODES.HLT]);\n\n    const state = {\n      memory: new Uint8Array(MEM_SIZE),\n      PC: 0, IR: null, OPERAND: null,\n      ACC: 0, MAR: null, MDR: null,\n      Z: false, N: false, C: false,\n      tick: 0, inst: 0, running: false, halted: false,\n      stage: '等待', // Fetch / Decode / Execute\n      microQueue: [],\n      lastRead: null,\n      lastWrite: null,\n      intervalId: null,\n    };\n\n    // UI Elements\n    const grid = document.getElementById('memoryGrid');\n    const regPC = document.getElementById('regPC');\n    const regIR = document.getElementById('regIR');\n    const regOP = document.getElementById('regOP');\n    const regACC = document.getElementById('regACC');\n    const regMAR = document.getElementById('regMAR');\n    const regMDR = document.getElementById('regMDR');\n    const flagZ = document.getElementById('flagZ');\n    const flagN = document.getElementById('flagN');\n    const flagC = document.getElementById('flagC');\n    const humanIR = document.getElementById('humanIR');\n    const tickCount = document.getElementById('tickCount');\n    const instCount = document.getElementById('instCount');\n    const cpuState = document.getElementById('cpuState');\n    const logEl = document.getElementById('log');\n    const stagePill = document.getElementById('stagePill');\n    const stageBadge = document.getElementById('stageBadge');\n\n    const programSelect = document.getElementById('programSelect');\n    const asmEditor = document.getElementById('asmEditor');\n    const speedRange = document.getElementById('speedRange');\n    const autoScrollLog = document.getElementById('autoScrollLog');\n    const loadExampleBtn = document.getElementById('loadExampleBtn');\n    const assembleBtn = document.getElementById('assembleBtn');\n    const assembleBtn2 = document.getElementById('assembleBtn2');\n    const resetBtn = document.getElementById('resetBtn');\n    const stepBtn = document.getElementById('stepBtn');\n    const runPauseBtn = document.getElementById('runPauseBtn');\n    const clearLogBtn = document.getElementById('clearLogBtn');\n    const disasmBtn = document.getElementById('disasmBtn');\n\n    // Build memory grid\n    function buildGrid() {\n      grid.innerHTML = '';\n      for (let i = 0; i < MEM_SIZE; i++) {\n        const cell = document.createElement('div');\n        cell.className = 'cell';\n        cell.dataset.addr = i;\n        const addr = document.createElement('div');\n        addr.className = 'addr';\n        addr.textContent = `@${i}`;\n        const val = document.createElement('div');\n        val.className = 'val';\n        val.textContent = '0';\n        cell.appendChild(addr);\n        cell.appendChild(val);\n        grid.appendChild(cell);\n      }\n    }\n    buildGrid();\n\n    function clamp8(x) {\n      return ((x % 256) + 256) % 256;\n    }\n\n    function updateFlagsFromValue(v, carry=null) {\n      state.Z = (v & 0xFF) === 0;\n      state.N = ((v & 0x80) !== 0);\n      if (carry !== null) state.C = !!carry;\n    }\n\n    function render() {\n      // Registers\n      regPC.textContent = state.PC;\n      const irName = state.IR == null ? '—' : `${toHex(state.IR)} ${MNEMONIC[state.IR] ?? '???'}`;\n      regIR.textContent = irName;\n      regOP.textContent = state.OPERAND == null ? '—' : `${state.OPERAND} (${toHex(state.OPERAND)})`;\n      regACC.textContent = `${state.ACC} (${toHex(state.ACC)})`;\n      regMAR.textContent = state.MAR == null ? '—' : state.MAR;\n      regMDR.textContent = state.MDR == null ? '—' : `${state.MDR} (${toHex(state.MDR)})`;\n\n      flagZ.classList.toggle('on', state.Z);\n      flagN.classList.toggle('on', state.N);\n      flagC.classList.toggle('on', state.C);\n\n      humanIR.textContent = decodeHumanInstruction(state.IR, state.OPERAND);\n\n      tickCount.textContent = state.tick;\n      instCount.textContent = state.inst;\n      cpuState.textContent = state.halted ? '已停止(HLT)' : (state.running ? '运行中' : '就绪');\n      stageBadge.textContent = `阶段：${state.stage}`;\n      stagePill.textContent = `阶段：${state.stage}`;\n      stagePill.className = `pill stage ${stageClass(state.stage)}`;\n\n      // Memory grid\n      for (const cell of grid.children) {\n        const addr = +cell.dataset.addr;\n        const valNode = cell.querySelector('.val');\n        valNode.textContent = `${state.memory[addr]} (${toHex(state.memory[addr])})`;\n        cell.classList.remove('pc','mar','read','write');\n        if (addr === state.PC) cell.classList.add('pc');\n        if (addr === state.MAR) cell.classList.add('mar');\n        if (addr === state.lastRead) cell.classList.add('read');\n        if (addr === state.lastWrite) cell.classList.add('write');\n      }\n    }\n\n    function toHex(n) {\n      if (n == null) return '—';\n      return '0x' + clamp8(n).toString(16).toUpperCase().padStart(2,'0');\n    }\n\n    function stageClass(stage) {\n      if (stage.startsWith('取指')) return 'fetch';\n      if (stage.startsWith('译码')) return 'decode';\n      if (stage.startsWith('执行')) return 'exec';\n      return '';\n    }\n\n    function log(text) {\n      const line = document.createElement('div');\n      line.className = 'op';\n      const tspan = document.createElement('span');\n      tspan.className = 't';\n      tspan.textContent = `[T${String(state.tick).padStart(4,'0')}] `;\n      line.appendChild(tspan);\n      line.appendChild(document.createTextNode(text));\n      logEl.appendChild(line);\n      if (autoScrollLog.checked) {\n        logEl.scrollTop = logEl.scrollHeight;\n      }\n    }\n\n    function resetCPU(keepMemory=false) {\n      if (!keepMemory) state.memory.fill(0);\n      state.PC = 0;\n      state.IR = null;\n      state.OPERAND = null;\n      state.ACC = 0;\n      state.MAR = null;\n      state.MDR = null;\n      state.Z = false; state.N = false; state.C = false;\n      state.tick = 0; state.inst = 0;\n      state.running = false; state.halted = false;\n      state.stage = '等待';\n      state.microQueue = [];\n      state.lastRead = null;\n      state.lastWrite = null;\n      stopRun();\n      render();\n      log('复位完成。');\n    }\n\n    function stopRun() {\n      state.running = false;\n      if (state.intervalId) {\n        clearInterval(state.intervalId);\n        state.intervalId = null;\n      }\n      runPauseBtn.textContent = '运行';\n      render();\n    }\n\n    function startRun() {\n      if (state.halted) return;\n      state.running = true;\n      runPauseBtn.textContent = '暂停';\n      const delay = Math.max(10, +speedRange.value);\n      state.intervalId = setInterval(() => {\n        if (state.halted) {\n          stopRun();\n          return;\n        }\n        stepMicro();\n      }, delay);\n    }\n\n    function stepMicro() {\n      // If no micro-steps queued, schedule next instruction fetch sequence\n      if (state.microQueue.length === 0) {\n        queueFetchSequence();\n      }\n      const step = state.microQueue.shift();\n      if (!step) return; // nothing\n      state.tick++;\n      // Execute micro-op function\n      try {\n        step.fn();\n        state.stage = step.stage;\n        if (step.desc) log(step.desc);\n      } catch (e) {\n        log('错误：' + e.message);\n        state.halted = true;\n        stopRun();\n      }\n      render();\n\n      // If after executing microQueue becomes empty and instruction fully executed, bump inst count\n      if (state.microQueue.length === 0 && step.isLast) {\n        state.inst++;\n      }\n    }\n\n    function queueFetchSequence() {\n      if (state.halted) return;\n      // Fetch opcode\n      const steps = [];\n      steps.push({\n        stage: '取指：读指令',\n        desc: 'MAR ← PC',\n        fn: () => { state.MAR = state.PC; },\n        isLast: false\n      });\n      steps.push({\n        stage: '取指：读指令',\n        desc: 'MDR ← MEM[MAR]',\n        fn: () => {\n          checkAddress(state.MAR);\n          state.MDR = state.memory[state.MAR];\n          state.lastRead = state.MAR;\n        },\n        isLast: false\n      });\n      steps.push({\n        stage: '取指：读指令',\n        desc: 'IR ← MDR；PC ← PC + 1',\n        fn: () => {\n          state.IR = state.MDR;\n          state.PC = incPC(state.PC);\n          state.MDR = null;\n        },\n        isLast: false\n      });\n\n      // Decode and optional operand fetch\n      steps.push({\n        stage: '译码：检查是否需要操作数',\n        desc: `译码 ${MNEMONIC[state.IR] ?? '???'} 指令`,\n        fn: () => {},\n        isLast: false\n      });\n\n      if (HAS_OPERAND.has(state.IR)) {\n        steps.push({\n          stage: '取指：读操作数',\n          desc: 'MAR ← PC',\n          fn: () => { state.MAR = state.PC; },\n          isLast: false\n        });\n        steps.push({\n          stage: '取指：读操作数',\n          desc: 'MDR ← MEM[MAR]',\n          fn: () => {\n            checkAddress(state.MAR);\n            state.MDR = state.memory[state.MAR];\n            state.lastRead = state.MAR;\n          },\n          isLast: false\n        });\n        steps.push({\n          stage: '取指：读操作数',\n          desc: 'OPERAND ← MDR；PC ← PC + 1',\n          fn: () => {\n            state.OPERAND = state.MDR;\n            state.PC = incPC(state.PC);\n            state.MDR = null;\n          },\n          isLast: false\n        });\n      } else {\n        steps.push({\n          stage: '译码：无操作数',\n          desc: '该指令无需操作数',\n          fn: () => {},\n          isLast: false\n        });\n      }\n\n      // Execute sequence based on opcode\n      const execSteps = buildExecSteps(state.IR, state.OPERAND);\n      steps.push(...execSteps);\n      // Mark the last step as isLast to count inst++\n      if (steps.length > 0) {\n        steps[steps.length - 1].isLast = true;\n      }\n      state.microQueue.push(...steps);\n    }\n\n    function buildExecSteps(op, operand) {\n      const s = [];\n      const setStage = (desc, fn) => ({ stage: '执行：执行指令', desc, fn, isLast: false });\n\n      if (op === OPCODES.NOP) {\n        s.push(setStage('NOP（不执行操作）', () => {}));\n      }\n      else if (op === OPCODES.HLT) {\n        s.push(setStage('HLT（停止）', () => { state.halted = true; }));\n      }\n      else if (op === OPCODES.LDI) {\n        s.push(setStage(`ACC ← #${operand}`, () => {\n          state.ACC = clamp8(operand);\n          updateFlagsFromValue(state.ACC);\n        }));\n      }\n      else if (op === OPCODES.LDA) {\n        s.push(setStage('MAR ← OPERAND', () => { state.MAR = operand; }));\n        s.push(setStage('MDR ← MEM[MAR]', () => {\n          checkAddress(state.MAR);\n          state.MDR = state.memory[state.MAR];\n          state.lastRead = state.MAR;\n        }));\n        s.push(setStage('ACC ← MDR', () => {\n          state.ACC = clamp8(state.MDR);\n          state.MDR = null;\n          updateFlagsFromValue(state.ACC);\n        }));\n      }\n      else if (op === OPCODES.STA) {\n        s.push(setStage('MAR ← OPERAND', () => { state.MAR = operand; }));\n        s.push(setStage('MDR ← ACC', () => { state.MDR = state.ACC; }));\n        s.push(setStage('MEM[MAR] ← MDR', () => {\n          checkAddress(state.MAR);\n          state.memory[state.MAR] = clamp8(state.MDR);\n          state.lastWrite = state.MAR;\n          state.MDR = null;\n        }));\n      }\n      else if (op === OPCODES.ADD) {\n        s.push(setStage('MAR ← OPERAND', () => { state.MAR = operand; }));\n        s.push(setStage('MDR ← MEM[MAR]', () => {\n          checkAddress(state.MAR);\n          state.MDR = state.memory[state.MAR];\n          state.lastRead = state.MAR;\n        }));\n        s.push(setStage('ACC ← ACC + MDR（ALU加法）', () => {\n          const sum = state.ACC + state.MDR;\n          state.C = sum > 0xFF;\n          state.ACC = clamp8(sum);\n          state.MDR = null;\n          updateFlagsFromValue(state.ACC, state.C);\n        }));\n      }\n      else if (op === OPCODES.SUB) {\n        s.push(setStage('MAR ← OPERAND', () => { state.MAR = operand; }));\n        s.push(setStage('MDR ← MEM[MAR]', () => {\n          checkAddress(state.MAR);\n          state.MDR = state.memory[state.MAR];\n          state.lastRead = state.MAR;\n        }));\n        s.push(setStage('ACC ← ACC - MDR（ALU减法）', () => {\n          const diff = state.ACC - state.MDR;\n          state.C = diff < 0; // 借位\n          state.ACC = clamp8(diff);\n          state.MDR = null;\n          updateFlagsFromValue(state.ACC, state.C);\n        }));\n      }\n      else if (op === OPCODES.JMP) {\n        s.push(setStage(`PC ← ${operand}`, () => {\n          checkAddress(operand);\n          state.PC = operand;\n        }));\n      }\n      else if (op === OPCODES.JZ) {\n        s.push(setStage(`若Z=1则PC ← ${operand}`, () => {\n          if (state.Z) {\n            checkAddress(operand);\n            state.PC = operand;\n          }\n        }));\n      }\n      else if (op === OPCODES.INC) {\n        s.push(setStage('ACC ← ACC + 1', () => {\n          const sum = state.ACC + 1;\n          state.C = sum > 0xFF;\n          state.ACC = clamp8(sum);\n          updateFlagsFromValue(state.ACC, state.C);\n        }));\n      }\n      else if (op === OPCODES.DEC) {\n        s.push(setStage('ACC ← ACC - 1', () => {\n          const diff = state.ACC - 1;\n          state.C = diff < 0;\n          state.ACC = clamp8(diff);\n          updateFlagsFromValue(state.ACC, state.C);\n        }));\n      }\n      else {\n        s.push(setStage(`未识别指令 ${toHex(op)}，HLT`, () => { state.halted = true; }));\n      }\n      return s;\n    }\n\n    function decodeHumanInstruction(ir, operand) {\n      if (ir == null) return '—';\n      const name = MNEMONIC[ir] ?? '???';\n      if (NO_OPERAND.has(ir)) return name;\n      if (HAS_OPERAND.has(ir)) {\n        if (ir === OPCODES.LDI) return `LDI #${operand}`;\n        return `${name} ${operand}`;\n      }\n      return name;\n    }\n\n    function incPC(pc) {\n      const next = pc + 1;\n      if (next >= MEM_SIZE) return 0; // 环回\n      return next;\n    }\n\n    function checkAddress(addr) {\n      if (addr < 0 || addr >= MEM_SIZE) {\n        throw new Error(`地址越界：${addr}`);\n      }\n    }\n\n    // Assembler\n    function assemble(source) {\n      const lines = source.split('\\n').map(l => l.replace(/\\s*;.*$/, '').trim()).filter(l => l.length > 0);\n      const items = []; // {type:'inst'|'data', addr, op, operandSym}\n      const labels = new Map();\n      let addr = 0;\n\n      function putLabel(name) {\n        if (labels.has(name)) throw new Error(`重复标签：${name}`);\n        labels.set(name, addr);\n      }\n\n      // Pass 1: collect labels and sizes\n      for (let raw of lines) {\n        let line = raw;\n        // label\n        if (/^[A-Za-z_]\\w*:$/.test(line)) {\n          const lab = line.slice(0, -1);\n          putLabel(lab);\n          continue;\n        }\n        // data\n        if (/^\\.(BYTE|byte)\\b/.test(line)) {\n          const m = line.match(/^\\.(BYTE|byte)\\s+(.+)$/);\n          if (!m) throw new Error(`数据格式错误：${line}`);\n          const value = parseValue(m[2]);\n          items.push({ type: 'data', addr, value });\n          addr += 1;\n          continue;\n        }\n        // instruction\n        const tokens = line.split(/\\s+/);\n        const mnemonic = tokens[0].toUpperCase();\n        if (!(mnemonic in OPCODES)) throw new Error(`未知指令：${mnemonic}`);\n        const opcode = OPCODES[mnemonic];\n        let operandSym = null;\n        if (HAS_OPERAND.has(opcode)) {\n          if (tokens.length < 2) throw new Error(`指令缺少操作数：${line}`);\n          operandSym = tokens.slice(1).join(' ').trim();\n        }\n        items.push({ type: 'inst', addr, opcode, operandSym, line });\n        addr += 1;\n        if (HAS_OPERAND.has(opcode)) addr += 1; // operand occupies one extra byte\n      }\n\n      // Pass 2: generate bytes into memory\n      const mem = new Uint8Array(MEM_SIZE);\n      mem.fill(0);\n      for (const it of items) {\n        if (it.type === 'data') {\n          mem[it.addr] = clamp8(it.value);\n        } else if (it.type === 'inst') {\n          mem[it.addr] = it.opcode;\n          if (HAS_OPERAND.has(it.opcode)) {\n            const operandAddr = it.addr + 1;\n            const operandVal = resolveOperand(it.operandSym, labels, it.opcode);\n            mem[operandAddr] = clamp8(operandVal);\n          }\n        }\n      }\n      return mem;\n    }\n\n    function parseValue(text) {\n      const t = text.trim();\n      if (/^#/.test(t)) {\n        return parseValue(t.slice(1));\n      }\n      if (/^0x[0-9a-f]+$/i.test(t)) {\n        return parseInt(t, 16);\n      }\n      if (/^\\d+$/.test(t)) {\n        return parseInt(t, 10);\n      }\n      throw new Error(`无法解析数值：${text}`);\n    }\n\n    function resolveOperand(sym, labels, opcode) {\n      const t = sym.trim();\n      if (opcode === OPCODES.LDI) {\n        // immediate\n        return parseValue(t);\n      } else {\n        if (/^\\d+$/.test(t) || /^0x[0-9a-f]+$/i.test(t)) {\n          return parseValue(t);\n        }\n        if (labels.has(t)) {\n          const addr = labels.get(t);\n          if (addr >= MEM_SIZE) throw new Error(`标签地址超出内存：${t} @${addr}`);\n          return addr;\n        }\n        throw new Error(`未定义标签或地址：${t}`);\n      }\n    }\n\n    function disassemble(memory) {\n      let pc = 0;\n      let out = [];\n      while (pc < MEM_SIZE) {\n        const op = memory[pc];\n        const name = MNEMONIC[op] ?? 'DB';\n        if (op in MNEMONIC) {\n          if (NO_OPERAND.has(op)) {\n            out.push(`${String(pc).padStart(2,'0')}: ${name}`);\n            pc += 1;\n          } else if (HAS_OPERAND.has(op)) {\n            const operand = memory[pc+1];\n            if (op === OPCODES.LDI) {\n              out.push(`${String(pc).padStart(2,'0')}: LDI #${operand}`);\n            } else {\n              out.push(`${String(pc).padStart(2,'0')}: ${name} ${operand}`);\n            }\n            pc += 2;\n          } else {\n            out.push(`${String(pc).padStart(2,'0')}: ${toHex(op)}`);\n            pc += 1;\n          }\n        } else {\n          out.push(`${String(pc).padStart(2,'0')}: .BYTE ${memory[pc]}`);\n          pc += 1;\n        }\n      }\n      return out.join('\\n');\n    }\n\n    // Examples\n    const examples = {\n      add:\n`START:\n  LDA A\n  ADD B\n  STA R\n  HLT\n\nA: .BYTE 5\nB: .BYTE 7\nR: .BYTE 0`,\n      branch:\n`START:\n  LDA X\n  JZ ISZERO\n  LDI #0\n  STA OUT\n  JMP END\n\nISZERO:\n  LDI #1\n  STA OUT\n\nEND:\n  HLT\n\nX: .BYTE 0\nOUT: .BYTE 0`,\n      loop:\n`START:\n  LDI #5\nLOOP:\n  DEC\n  JZ END\n  JMP LOOP\nEND:\n  STA OUT\n  HLT\n\nOUT: .BYTE 0`\n    };\n\n    function loadExample(name) {\n      asmEditor.value = examples[name] || examples.add;\n      log(`已载入示例程序：${name}`);\n    }\n\n    function loadMemory(mem) {\n      state.memory.set(mem.subarray(0, MEM_SIZE));\n      state.PC = 0;\n      state.IR = null;\n      state.OPERAND = null;\n      state.ACC = 0;\n      state.MAR = null;\n      state.MDR = null;\n      state.Z = false; state.N = false; state.C = false;\n      state.tick = 0; state.inst = 0;\n      state.halted = false;\n      state.microQueue = [];\n      state.stage = '等待';\n      state.lastRead = null;\n      state.lastWrite = null;\n      stopRun();\n      render();\n      log('程序已加载到内存。PC=0。');\n    }\n\n    // Events\n    loadExampleBtn.addEventListener('click', () => {\n      loadExample(programSelect.value);\n    });\n\n    assembleBtn.addEventListener('click', () => {\n      try {\n        const mem = assemble(asmEditor.value);\n        loadMemory(mem);\n      } catch (e) {\n        alert('汇编失败：' + e.message);\n        log('汇编失败：' + e.message);\n      }\n    });\n    assembleBtn2.addEventListener('click', () => assembleBtn.click());\n\n    resetBtn.addEventListener('click', () => resetCPU(true));\n    stepBtn.addEventListener('click', () => {\n      if (state.halted) { log('CPU已停止(HLT)。'); return; }\n      stepMicro();\n    });\n    runPauseBtn.addEventListener('click', () => {\n      if (state.running) stopRun(); else startRun();\n    });\n    speedRange.addEventListener('input', () => {\n      if (state.running) {\n        stopRun(); startRun();\n      }\n    });\n    clearLogBtn.addEventListener('click', () => { logEl.innerHTML = ''; });\n    disasmBtn.addEventListener('click', () => {\n      asmEditor.value = disassemble(state.memory);\n      log('已反汇编当前内存到编辑器。');\n    });\n\n    // Initialize\n    (function init() {\n      loadExample('add');\n      try {\n        const mem = assemble(asmEditor.value);\n        loadMemory(mem);\n      } catch (e) {\n        log('初始化汇编失败：' + e.message);\n      }\n      render();\n    })();\n  </script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "CPU工作原理"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  },
  {
    "id": "1a1938d0-a2bb-11f0-8db4-49de49c87f62",
    "timestamp": "2025-10-06T13:48:12.893Z",
    "model": "gpt-5",
    "status": "success",
    "question": "H2O转化为H2的化学教学",
    "answer": {
      "annotations": [],
      "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n<title>化学教学：H2O 转化为 H2（概念与模拟）</title>\n<style>\n  :root {\n    --bg:#0f172a;\n    --panel:#111827;\n    --text:#e5e7eb;\n    --accent:#60a5fa;\n    --ok:#34d399;\n    --warn:#f59e0b;\n    --danger:#ef4444;\n    --muted:#9ca3af;\n  }\n  *{box-sizing:border-box}\n  body{\n    margin:0;\n    font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\";\n    background:linear-gradient(160deg,#0f172a,#0b1020);\n    color:var(--text);\n  }\n  header{\n    padding:28px 20px 8px;\n    text-align:center;\n  }\n  header h1{\n    margin:0 0 8px;\n    font-size:28px;\n    letter-spacing:0.5px;\n  }\n  header p{\n    margin:0 auto;\n    max-width:900px;\n    color:var(--muted);\n    line-height:1.6;\n  }\n  .container{\n    max-width:1100px;\n    margin:16px auto 40px;\n    padding:0 16px;\n  }\n  .grid{\n    display:grid;\n    grid-template-columns:1fr;\n    gap:16px;\n  }\n  @media(min-width:980px){\n    .grid{grid-template-columns:1.1fr 1fr}\n  }\n  .card{\n    background:linear-gradient(180deg,#0f192b,#0c1323);\n    border:1px solid #1f2937;\n    border-radius:14px;\n    box-shadow:0 12px 24px rgba(0,0,0,0.35);\n    overflow:hidden;\n  }\n  .card header{\n    padding:14px 16px;\n    text-align:left;\n    background:rgba(17,24,39,0.6);\n    border-bottom:1px solid #1f2937;\n  }\n  .card header h2{\n    margin:0;\n    font-size:18px;\n  }\n  .section{\n    padding:16px;\n  }\n  .row{\n    display:flex;\n    gap:12px;\n    flex-wrap:wrap;\n    align-items:center;\n    margin:8px 0;\n  }\n  label{\n    font-size:14px;\n    color:#cbd5e1;\n  }\n  input[type=number],select,input[type=range]{\n    appearance:none;\n    background:#0b1220;\n    border:1px solid #1f2937;\n    color:var(--text);\n    border-radius:10px;\n    padding:8px 10px;\n    outline:none;\n  }\n  input[type=number]{width:90px}\n  select{min-width:180px}\n  input[type=range]{\n    width:260px;\n    height:34px;\n    padding:0;\n  }\n  .small{\n    font-size:12px;\n    color:var(--muted);\n  }\n  .button{\n    background:linear-gradient(180deg,#2563eb,#1d4ed8);\n    border:1px solid #1e40af;\n    color:white;\n    padding:10px 14px;\n    border-radius:10px;\n    cursor:pointer;\n    font-weight:600;\n  }\n  .button.secondary{\n    background:#0b1220;\n    border-color:#1f2937;\n    color:#cbd5e1;\n  }\n  .button.danger{\n    background:linear-gradient(180deg,#ef4444,#dc2626);\n    border-color:#b91c1c;\n  }\n  .pill{\n    display:inline-block;\n    padding:4px 10px;\n    border-radius:999px;\n    background:#0b1220;\n    border:1px solid #1f2937;\n    color:#cbd5e1;\n    font-size:12px;\n    margin-left:8px;\n  }\n  .equation{\n    font-family:\"SF Mono\",\"Cascadia Code\",Consolas,Monaco,monospace;\n    background:#0b1220;\n    border:1px solid #1f2937;\n    border-radius:10px;\n    padding:10px;\n    overflow:auto;\n  }\n  .ok{color:var(--ok)}\n  .warn{color:var(--warn)}\n  .danger{color:var(--danger)}\n  .status{\n    margin-top:6px;\n    padding:8px 10px;\n    border-radius:10px;\n    background:rgba(17,24,39,0.5);\n    border:1px solid #1f2937;\n  }\n  .sim{\n    display:grid;\n    grid-template-columns:1fr 1fr;\n    gap:12px;\n    height:280px;\n    margin-top:10px;\n  }\n  .electrode{\n    position:relative;\n    border:1px dashed #334155;\n    border-radius:16px;\n    background:linear-gradient(180deg,#07101e,#091426);\n    overflow:hidden;\n  }\n  .electrode .title{\n    position:absolute;\n    top:8px; left:10px;\n    font-size:13px;\n    color:#93c5fd;\n    background:#0b1220;\n    border:1px solid #1f2937;\n    padding:4px 8px;\n    border-radius:999px;\n  }\n  .electrode .label{\n    position:absolute;\n    bottom:8px; right:10px;\n    font-size:12px;\n    color:#cbd5e1;\n    opacity:0.8;\n  }\n  .bubble{\n    position:absolute;\n    bottom:-16px;\n    width:10px; height:10px;\n    border-radius:50%;\n    opacity:0.85;\n    transform:translateX(0) translateY(0);\n    will-change:transform,opacity;\n  }\n  .bubble.h2{\n    background:radial-gradient(circle at 30% 30%,#93c5fd,#1e3a8a);\n    border:1px solid #3b82f6;\n    box-shadow:0 0 8px rgba(59,130,246,0.6);\n  }\n  .bubble.o2{\n    background:radial-gradient(circle at 30% 30%,#fda4af,#7f1d1d);\n    border:1px solid #ef4444;\n    box-shadow:0 0 8px rgba(239,68,68,0.6);\n  }\n  .metrics{\n    display:grid;\n    grid-template-columns:repeat(3,1fr);\n    gap:10px;\n    margin-top:10px;\n  }\n  .metric{\n    background:#0b1220;\n    border:1px solid #1f2937;\n    border-radius:12px;\n    padding:10px;\n    text-align:center;\n  }\n  .metric .name{\n    font-size:12px;\n    color:#94a3b8;\n  }\n  .metric .val{\n    font-size:18px;\n    margin-top:4px;\n  }\n  .legend{\n    display:flex;\n    gap:8px;\n    align-items:center;\n    flex-wrap:wrap;\n    margin-top:6px;\n  }\n  .legend .key{\n    display:flex; align-items:center; gap:6px;\n    font-size:12px; color:#cbd5e1;\n    padding:6px 8px;\n    border-radius:999px;\n    background:#0b1220; border:1px solid #1f2937;\n  }\n  .dot{\n    width:12px; height:12px; border-radius:50%;\n  }\n  .dot.h2{background:radial-gradient(#93c5fd,#1e3a8a); border:1px solid #3b82f6}\n  .dot.o2{background:radial-gradient(#fda4af,#7f1d1d); border:1px solid #ef4444}\n  .footnote{\n    font-size:12px;\n    color:#94a3b8;\n    margin-top:8px;\n  }\n  .notice{\n    margin-top:10px;\n    padding:10px;\n    border-radius:12px;\n    background:rgba(253,230,138,0.08);\n    border:1px solid rgba(245,158,11,0.4);\n    color:#fbbf24;\n  }\n  .safe{\n    margin:16px 0 0;\n    padding:12px;\n    border-radius:12px;\n    background:rgba(34,197,94,0.08);\n    border:1px solid rgba(34,197,94,0.4);\n    color:#86efac;\n  }\n  .calc{\n    display:grid;\n    grid-template-columns:1fr 1fr;\n    gap:12px;\n  }\n  @media(max-width:720px){\n    .calc{grid-template-columns:1fr}\n    .sim{grid-template-columns:1fr; height:380px}\n  }\n</style>\n</head>\n<body>\n<header>\n  <h1>H2O 转化为 H2 的化学教学（概念与模拟）</h1>\n  <p>本页面用互动方式讲解水分解为氢气（H2）与氧气（O2）的基本化学原理。重点是化学守恒、半反应、热力学电位与催化影响。内容仅用于课堂概念演示，不包含任何实际操作步骤或设备指导。</p>\n</header>\n\n<div class=\"container\">\n  <div class=\"grid\">\n\n    <!-- 左侧：反应与原理 -->\n    <div class=\"card\">\n      <header><h2>总体反应与配平</h2></header>\n      <div class=\"section\">\n        <div class=\"equation\" id=\"overallEq\">待配平： a H₂O → b H₂ + c O₂</div>\n        <div class=\"row\">\n          <label>系数 a (H₂O)</label><input type=\"number\" id=\"coefA\" value=\"2\" min=\"1\" step=\"1\">\n          <label>系数 b (H₂)</label><input type=\"number\" id=\"coefB\" value=\"2\" min=\"1\" step=\"1\">\n          <label>系数 c (O₂)</label><input type=\"number\" id=\"coefC\" value=\"1\" min=\"1\" step=\"1\">\n          <button class=\"button\" id=\"checkBtn\">检验配平</button>\n          <button class=\"button secondary\" id=\"autoBtn\">自动平衡</button>\n        </div>\n        <div class=\"status\" id=\"balanceStatus\">提示：守恒检查将比较左右两侧的 H 与 O 原子数。</div>\n        <div class=\"footnote\">质量守恒：反应前后元素原子总数不变。正确配平为 2 H₂O → 2 H₂ + O₂（H 原子 4→4，O 原子 2→2）。</div>\n      </div>\n\n      <header><h2>半反应与介质（酸/碱）</h2></header>\n      <div class=\"section\">\n        <div class=\"row\">\n          <label>电解介质</label>\n          <select id=\"envSelect\">\n            <option value=\"neutral\">中性/纯水（示意）</option>\n            <option value=\"acidic\">酸性（示意）</option>\n            <option value=\"alkaline\">碱性（示意）</option>\n          </select>\n          <span class=\"pill\">理论平衡电位约 1.23 V（25°C）</span>\n        </div>\n        <div class=\"equation\" id=\"halfReactions\"></div>\n        <div class=\"footnote\">说明：水电解由两个电极上的半反应构成。阴极发生氢析出（HER），阳极发生氧析出（OER）。不同介质下半反应的写法不同，但总体守恒相同。</div>\n      </div>\n\n      <header><h2>能量与电位（概念）</h2></header>\n      <div class=\"section\">\n        <ul class=\"small\">\n          <li>热力学最低电压 ~ 1.23 V（标准状态）。实际需要更高电压来克服“过电位”（动力学阻力）与电解质/电极的电阻。</li>\n          <li>催化剂可降低过电位，使同样电压下反应更容易进行。</li>\n          <li>总体反应（按每 2 H₂O）：2 H₂O(l) → 2 H₂(g) + O₂(g)；电子转移总数 n = 4（对应 4 e⁻）。</li>\n        </ul>\n        <div class=\"safe\">安全提示：氢气高度易燃，氧气助燃。本页仅为概念教学的可视化，不提供任何实验或家庭操作指导，请勿尝试实际制备。</div>\n      </div>\n    </div>\n\n    <!-- 右侧：电解模拟与计算 -->\n    <div class=\"card\">\n      <header><h2>电解模拟（概念动画）</h2></header>\n      <div class=\"section\">\n        <div class=\"row\">\n          <label>施加电压</label>\n          <input type=\"range\" id=\"voltage\" min=\"0\" max=\"3\" step=\"0.01\" value=\"1.2\">\n          <span class=\"pill\">V = <span id=\"vVal\">1.20</span> V</span>\n        </div>\n        <div class=\"row\">\n          <label>催化/电极组合</label>\n          <select id=\"catSelect\">\n            <option value=\"common\">普通金属电极（示意）</option>\n            <option value=\"nife\">镍/铁（碱性更优，示意）</option>\n            <option value=\"pti\">铂/IrO₂（高性能，示意）</option>\n            <option value=\"ideal\">理论理想催化剂（仅理论）</option>\n          </select>\n        </div>\n        <div class=\"status\">\n          门槛电压（热力学 + 过电位）≈ <span id=\"threshold\">-</span> V；\n          当前反应速率（相对）≈ <span id=\"rate\">0.00</span>\n        </div>\n        <div class=\"legend\">\n          <div class=\"key\"><span class=\"dot h2\"></span> 阴极：H₂ 气泡（氢气）</div>\n          <div class=\"key\"><span class=\"dot o2\"></span> 阳极：O₂ 氣泡（氧气）</div>\n          <div class=\"key small\">气泡数量按 2:1 比例（H₂:O₂）示意</div>\n        </div>\n        <div class=\"sim\">\n          <div class=\"electrode\" id=\"cathode\">\n            <div class=\"title\">阴极（还原）：HER</div>\n            <div class=\"label\">H₂ 气泡示意</div>\n          </div>\n          <div class=\"electrode\" id=\"anode\">\n            <div class=\"title\">阳极（氧化）：OER</div>\n            <div class=\"label\">O₂ 氣泡示意</div>\n          </div>\n        </div>\n        <div class=\"metrics\">\n          <div class=\"metric\">\n            <div class=\"name\">H₂ 计数（相对）</div>\n            <div class=\"val\" id=\"h2Count\">0</div>\n          </div>\n          <div class=\"metric\">\n            <div class=\"name\">O₂ 计数（相对）</div>\n            <div class=\"val\" id=\"o2Count\">0</div>\n          </div>\n          <div class=\"metric\">\n            <div class=\"name\">比例 H₂ : O₂</div>\n            <div class=\"val\" id=\"ratio\">—</div>\n          </div>\n        </div>\n        <div class=\"row\" style=\"margin-top:10px\">\n          <button class=\"button\" id=\"startBtn\">开始</button>\n          <button class=\"button secondary\" id=\"pauseBtn\">暂停</button>\n          <button class=\"button danger\" id=\"resetBtn\">重置</button>\n        </div>\n        <div class=\"notice\">此动画仅为概念演示：当施加电压超过门槛时，气泡生成速率增加。并不代表真实装置或数量，请勿据此进行任何实际尝试。</div>\n      </div>\n\n      <header><h2>法拉第定律（概念计算）</h2></header>\n      <div class=\"section\">\n        <div class=\"calc\">\n          <div>\n            <label>通过电荷 Q（库仑，示意）</label>\n            <input type=\"range\" id=\"chargeRange\" min=\"0\" max=\"200000\" step=\"1000\" value=\"50000\">\n            <div class=\"pill\">Q = <span id=\"qVal\">50000</span> C</div>\n            <div class=\"small\" style=\"margin-top:4px\">法拉第常数 F ≈ 96485 C/mol</div>\n          </div>\n          <div>\n            <div class=\"equation\" id=\"faradayOut\">\n              n(H₂) = Q / (2F) = 0 mol<br>\n              n(O₂) = Q / (4F) = 0 mol\n            </div>\n            <div class=\"footnote\">\n              说明：每生成 1 mol H₂ 需要 2 mol 电子（2F 库仑）；每生成 1 mol O₂ 需要 4 mol 电子（4F 库仑）。此为理想计算，忽略损耗与副反应。\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n\n<script>\n(function(){\n  // UI elements\n  const coefA = document.getElementById('coefA');\n  const coefB = document.getElementById('coefB');\n  const coefC = document.getElementById('coefC');\n  const overallEq = document.getElementById('overallEq');\n  const balanceStatus = document.getElementById('balanceStatus');\n  const checkBtn = document.getElementById('checkBtn');\n  const autoBtn = document.getElementById('autoBtn');\n\n  const envSelect = document.getElementById('envSelect');\n  const halfReactions = document.getElementById('halfReactions');\n\n  const voltageInput = document.getElementById('voltage');\n  const vVal = document.getElementById('vVal');\n  const catSelect = document.getElementById('catSelect');\n  const thresholdSpan = document.getElementById('threshold');\n  const rateSpan = document.getElementById('rate');\n\n  const cathode = document.getElementById('cathode');\n  const anode = document.getElementById('anode');\n  const h2CountEl = document.getElementById('h2Count');\n  const o2CountEl = document.getElementById('o2Count');\n  const ratioEl = document.getElementById('ratio');\n\n  const startBtn = document.getElementById('startBtn');\n  const pauseBtn = document.getElementById('pauseBtn');\n  const resetBtn = document.getElementById('resetBtn');\n\n  const chargeRange = document.getElementById('chargeRange');\n  const qVal = document.getElementById('qVal');\n  const faradayOut = document.getElementById('faradayOut');\n\n  // Constants and state\n  const F = 96485;           // Faraday constant C/mol\n  const E_thermo = 1.23;     // Theoretical minimum voltage in V\n  const catalysts = {\n    common: { her: 0.60, oer: 0.80 },\n    nife:   { her: 0.30, oer: 0.30 },\n    pti:    { her: 0.10, oer: 0.20 },\n    ideal:  { her: 0.00, oer: 0.00 }\n  };\n  let simRunning = false;\n  let simTimer = null;\n  let h2Count = 0;\n  let o2Count = 0;\n  let h2Acc = 0;\n  let o2Acc = 0;\n\n  // Helpers\n  function updateOverallEq(){\n    const a = Number(coefA.value||0);\n    const b = Number(coefB.value||0);\n    const c = Number(coefC.value||0);\n    overallEq.textContent = `a H₂O → b H₂ + c O₂    当前： ${a} H₂O → ${b} H₂ + ${c} O₂`;\n  }\n\n  function checkBalance(){\n    const a = Number(coefA.value||0);\n    const b = Number(coefB.value||0);\n    const c = Number(coefC.value||0);\n    const leftH = 2*a, leftO = a;\n    const rightH = 2*b, rightO = 2*c;\n    const ok = (leftH === rightH) && (leftO === rightO);\n    if(ok){\n      balanceStatus.innerHTML = `<span class=\"ok\">配平正确！</span> H 原子：${leftH} = ${rightH}，O 原子：${leftO} = ${rightO}`;\n    }else{\n      balanceStatus.innerHTML = `<span class=\"warn\">未配平。</span> 左侧 H=${leftH}, O=${leftO}；右侧 H=${rightH}, O=${rightO}`;\n    }\n  }\n\n  function autoBalance(){\n    coefA.value = 2; coefB.value = 2; coefC.value = 1;\n    updateOverallEq();\n    checkBalance();\n  }\n\n  function updateHalfReactions(){\n    const env = envSelect.value;\n    let cath = '', an = '';\n    if(env === 'acidic'){\n      cath = '阴极（还原，HER，酸性）： 2 H⁺ + 2 e⁻ → H₂';\n      an   = '阳极（氧化，OER，酸性）： 2 H₂O → O₂ + 4 H⁺ + 4 e⁻';\n    }else if(env === 'alkaline'){\n      cath = '阴极（还原，HER，碱性）： 2 H₂O + 2 e⁻ → H₂ + 2 OH⁻';\n      an   = '阳极（氧化，OER，碱性）： 4 OH⁻ → O₂ + 2 H₂O + 4 e⁻';\n    }else{\n      cath = '阴极（还原，HER，中性示意）： 2 H₂O + 2 e⁻ → H₂ + 2 OH⁻';\n      an   = '阳极（氧化，OER，中性示意）： 2 H₂O → O₂ + 4 H⁺ + 4 e⁻（净效应与酸/碱一致）';\n    }\n    halfReactions.innerHTML = `${cath}<br>${an}`;\n    computeThresholdAndRate(); // recalc with environment (conceptual, threshold stays same thermodynamically)\n  }\n\n  function computeThresholdAndRate(){\n    const cat = catalysts[catSelect.value] || catalysts.common;\n    const applied = Number(voltageInput.value);\n    const threshold = +(E_thermo + cat.her + cat.oer).toFixed(2);\n    const over = applied - threshold;\n    const rate = over > 0 ? over * 8 : 0; // relative bubble rate per second\n    thresholdSpan.textContent = threshold.toFixed(2);\n    rateSpan.textContent = rate.toFixed(2);\n    vVal.textContent = applied.toFixed(2);\n    return { threshold, rate };\n  }\n\n  function spawnBubble(container, type){\n    const b = document.createElement('div');\n    b.className = `bubble ${type}`;\n    // random x position\n    const W = container.clientWidth;\n    const H = container.clientHeight;\n    const x = Math.random()*(W-20)+6;\n    const size = type === 'o2' ? (12 + Math.random()*10) : (8 + Math.random()*8);\n    b.style.left = `${x}px`;\n    b.style.width = `${size}px`;\n    b.style.height = `${size}px`;\n    container.appendChild(b);\n    const duration = 2200 + Math.random()*1600;\n    const drift = (Math.random()-0.5)*20;\n    const start = performance.now();\n    function step(t){\n      const elap = t - start;\n      const y = H + 16 - (elap/duration)*(H+36);\n      const dx = (elap/duration)*drift;\n      const op = 1 - (elap/duration);\n      b.style.transform = `translate(${dx}px, ${y}px)`;\n      b.style.opacity = op.toFixed(2);\n      if(elap < duration){\n        requestAnimationFrame(step);\n      }else{\n        b.remove();\n      }\n    }\n    requestAnimationFrame(step);\n  }\n\n  function updateCountsDisplay(){\n    h2CountEl.textContent = Math.floor(h2Count);\n    o2CountEl.textContent = Math.floor(o2Count);\n    const r = (o2Count > 0) ? (h2Count/o2Count) : 0;\n    ratioEl.textContent = (o2Count>0) ? `${r.toFixed(2)} : 1` : '—';\n  }\n\n  function startSim(){\n    if(simRunning) return;\n    simRunning = true;\n    let last = performance.now();\n    simTimer = requestAnimationFrame(function tick(now){\n      if(!simRunning){ return; }\n      const dt = Math.min((now - last)/1000, 0.1); // seconds\n      last = now;\n      const { rate } = computeThresholdAndRate();\n      // expected bubbles per second for H2 and O2 with 2:1 ratio\n      const h2Rate = rate * 2/3 * 2; // emphasize H2\n      const o2Rate = rate * 1/3;\n      h2Acc += h2Rate * dt;\n      o2Acc += o2Rate * dt;\n      // spawn integer bubbles from accumulator\n      while(h2Acc >= 1){\n        spawnBubble(cathode,'h2');\n        h2Acc -= 1;\n        h2Count += 1;\n      }\n      while(o2Acc >= 1){\n        spawnBubble(anode,'o2');\n        o2Acc -= 1;\n        o2Count += 1;\n      }\n      updateCountsDisplay();\n      simTimer = requestAnimationFrame(tick);\n    });\n  }\n\n  function pauseSim(){\n    simRunning = false;\n  }\n\n  function resetSim(){\n    pauseSim();\n    h2Count = 0; o2Count = 0; h2Acc = 0; o2Acc = 0;\n    updateCountsDisplay();\n    // clear bubbles\n    Array.from(cathode.querySelectorAll('.bubble')).forEach(n=>n.remove());\n    Array.from(anode.querySelectorAll('.bubble')).forEach(n=>n.remove());\n  }\n\n  function updateFaraday(){\n    const Q = Number(chargeRange.value||0);\n    qVal.textContent = Q.toFixed(0);\n    const nH2 = Q/(2*F);\n    const nO2 = Q/(4*F);\n    faradayOut.innerHTML = `n(H₂) = Q / (2F) = ${(nH2).toFixed(4)} mol<br>`+\n                           `n(O₂) = Q / (4F) = ${(nO2).toFixed(4)} mol`;\n  }\n\n  // Event wiring\n  [coefA,coefB,coefC].forEach(i=>{\n    i.addEventListener('input', ()=>{\n      updateOverallEq();\n      checkBalance();\n    });\n  });\n  checkBtn.addEventListener('click', checkBalance);\n  autoBtn.addEventListener('click', autoBalance);\n\n  envSelect.addEventListener('change', updateHalfReactions);\n  voltageInput.addEventListener('input', computeThresholdAndRate);\n  catSelect.addEventListener('change', computeThresholdAndRate);\n\n  startBtn.addEventListener('click', startSim);\n  pauseBtn.addEventListener('click', pauseSim);\n  resetBtn.addEventListener('click', resetSim);\n\n  chargeRange.addEventListener('input', updateFaraday);\n\n  // Init\n  updateOverallEq();\n  checkBalance();\n  updateHalfReactions();\n  computeThresholdAndRate();\n  updateCountsDisplay();\n  updateFaraday();\n})();\n</script>\n</body>\n</html>",
      "refusal": null,
      "role": "assistant"
    },
    "messages": [
      {
        "role": "system",
        "content": "Generate a single HTML file with JavaScript demonstrating the user-given concept. Only respond in a single HTML file."
      },
      {
        "role": "user",
        "content": "H2O转化为H2的化学教学"
      }
    ],
    "evaluation": {
      "score": null,
      "notes": ""
    }
  }
]